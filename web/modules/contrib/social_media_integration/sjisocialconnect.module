<?php

/**
 * @file
 * Sji Social Connectmodule.
 */

use Drupal\sjisocialconnect\SjiSocialConnectException;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Return the available widgets.
 *
 * @return array
 *   An array of widget names, keyed by their machine_name.
 */
function sjisocialconnect_get_widgets() {
  // Use the advanced drupal_static() pattern.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['widgets'] = &drupal_static(__FUNCTION__);
  }
  $widgets = &$drupal_static_fast['widgets'];

  if (!isset($widgets)) {
    // Allow modules to define widgets.
    $widgets = \Drupal::moduleHandler()->invokeAll('sjisocialconnect_widget');

    // Allow modules to alter the defined widgets.
    \Drupal::moduleHandler()->alter('sjisocialconnect_widget', $widgets);
  }

  return $widgets;
}

/**
 * Implements hook_sjisocialconnect_widget().
 *
 * Define default Sji Social Connectwidgets.
 */
function sjisocialconnect_sjisocialconnect_widget() {
  $widgets = array();

  // Twitter.
  $widgets['twitter'] = array(
    'name' => t('Twitter'),
    'js' => 'sjisocialconnect/twitter',
  );

  // Facebook.
  $widgets['facebook'] = array(
    'name' => t('Facebook'),
    'js' => 'sjisocialconnect/facebook',
  );

  // Google+.
  $widgets['googleplus'] = array(
    'name' => t('Google+'),
    'js' => 'sjisocialconnect/googleplus',
  );

  // LinkedIn,
  $widgets['linkedin'] = array(
    'name' => t('LinkedIn'),
    'js' => 'sjisocialconnect/linkedin',
    // This widget has some specific requirements when dealing with multiple
    // languages so we handle the js in it's pre-process callback instead.
  );

  // Pinterest.
  $widgets['pinterest'] = array(
    'name' => t('Pinterest'),
    'js' => 'sjisocialconnect/pinterest',
  );

  return $widgets;
}

/**
 * Implements hook_theme().
 */
function sjisocialconnect_theme($existing, $type, $theme, $path) {

  return array(
    'sjisocialconnect' => array(
      'variables' => array(),
      'file' => 'sjisocialconnect.theme.inc',
    ),
    'sjisocialconnect_twitter' => array(
      'variables' => array(),
      'file' => 'sjisocialconnect.theme.inc',
    ),
    'sjisocialconnect_facebook' => array(
      'variables' => array(),
      'file' => 'sjisocialconnect.theme.inc',
    ),
    'sjisocialconnect_googleplus' => array(
      'variables' => array(),
      'file' => 'sjisocialconnect.theme.inc',
    ),
    'sjisocialconnect_linkedin' => array(
      'variables' => array(),
      'file' => 'sjisocialconnect.theme.inc',
    ),
    'sjisocialconnect_pinterest' => array(
      'variables' => array(),
    ),
    'sjisocialconnect_instagram' => array(
      'variables' => [
        'data' => NULL,
        'height' => NULL,
        'width' => NULL,
        'src' => NULL,
        'href' => NULL,
      ],
      'template' => 'sjisocialconnect-instagram',
    ),
    'fb_likebox_block' => [
      'variables' => [
        'fb_url' => NULL,
        'fb_colorscheme' => NULL,
        'fb_header' => NULL,
        'fb_stream' => NULL,
        'fb_show_faces' => NULL,
        'fb_force_wall' => NULL,
        'fb_width' => NULL,
        'fb_height' => NULL,
        'fb_show_border' => NULL,
      ],
      'template' => 'fb_likebox_block',
    ],
  );
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function sjisocialconnect_preprocess_block(&$variables) {
  // Derive the base plugin ID.
  list($plugin_id) = explode(':', $variables['plugin_id'] . ':');
  switch ($plugin_id) {
    case 'sjisocialconnect_block':
      $variables['attributes']['role'] = 'complementary';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for sjisocialconnect theme.
 *
 * @see sjisocialconnect_theme()
 * @see theme_sjisocialconnect()
 */
function sjisocialconnect_preprocess_sjisocialconnect(&$variables) {
  $config = Drupal::config('sjisocialconnect.settings');
  // Load widget definitions.
  $definitions = sjisocialconnect_get_widgets();

  //Add the CSS
  $variables['#attached']['library'][] = 'sjisocialconnect/sjisocialconnect-css';

  // Filter active widgets.
  $settings_widgets = $config->get('global.widgets');
  $settings_widgets = array_filter($settings_widgets);
  $widgets = array();

  foreach ($settings_widgets as $widget) {
    if (!array_key_exists($widget, $definitions)) {
      throw new SjiSocialConnectException(t('No definition found for the widget: @name', array('@name' => $widget)));
//      watchdog('sjisocialconnect', 'No definition found for widget: @widget', array('@widget' => $widget), WATCHDOG_ERROR);
    }

    // Handle css includes.
    $attached = array();

    if (array_key_exists('css', $definitions[$widget])) {
      $attached['library'][] = $definitions[$widget]['css'];
    }

    // Determine how to handle js.
    if (array_key_exists('js', $definitions[$widget])) {
      $attached['library'][] = $definitions[$widget]['js'];
    }


    $widgets[$widget] = array(
      '#theme' => "sjisocialconnect_{$widget}",
      // @TODO pass in some kind of context?
      // @TODO #weight ?,
      '#attached' => $attached,
    );
  }
  $variables['widgets'] = $widgets;

}


/**
 * Implements hook_preprocess_HOOK() for sjisocialconnect_facebook theme.
 *
 * @see sjisocialconnect_theme()
 * @see theme_sjisocialconnect_facebook()
 */
function sjisocialconnect_preprocess_sjisocialconnect_twitter(&$variables, $hook) {
  // Incidentally, the hook name is almost what we expect the config name to be.
  $hook = str_replace('sjisocialconnect_', 'sjisocialconnect.', $hook);

  $attributes = array(
    'class' => array('twitter-share-button'),
  );

  if ($config = \Drupal::config($hook)) {
    // @TODO load contextual config.
    $widget_params = $config->get();


    if (!empty($widget_params['via'])) {
      $attributes['data-via'] = $widget_params['via'];
    }

    if (!empty($widget_params['related'])) {
      $attributes['data-related'] = $widget_params['related'];
    }

    if (isset($widget_params['size'])) {
      $attributes['data-size'] = ($widget_params['size'] == 1) ? 'large' : 'medium';
    }

    if (!empty($widget_params['count'])) {
      $attributes['data-count'] = $widget_params['count'];
    }

    if (!empty($widget_params['lang'])) {
      $attributes['data-lang'] = $widget_params['lang'];
    }

    if (!empty($widget_params['hashtags'])) {
      $attributes['data-hashtags'] = $widget_params['hashtags'];
    }

    if (isset($widget_params['dnt']) && $widget_params['dnt'] == 1) {
      $attributes['data-dnt'] = 'true';
    }
  }
  $variables['attributes'] = $attributes;
}

/**
 * Implements hook_preprocess_HOOK() for sjisocialconnect_facebook theme.
 *
 * @see sjisocialconnect_theme()
 * @see theme_sjisocialconnect_facebook()
 */
function sjisocialconnect_preprocess_sjisocialconnect_facebook(&$variables, &$hook) {
  // @TODO implement this.
  $lang = 'en_US';
  // Incidentally, the hook name is almost what we expect the config name to be.
  $hook = str_replace('sjisocialconnect_', 'sjisocialconnect.', $hook);

  $attributes = array(
    'class' => array('fb-like'),
  );

  if ($config = \Drupal::config($hook)) {
    // @TODO load contextual config.
    $widget_params = $config->get();


    if (!empty($variables['url'])) {
      $attributes['data-href'] = $variables['url'];
    }

    if (isset($widget_params['send']) && $widget_params['send'] == 1) {
      $attributes['data-send'] = 'true';
    }

    if (isset($widget_params['share']) && $widget_params['share'] == 1) {
      $attributes['data-share'] = 'true';
    }

    if (isset($widget_params['show_faces']) && $widget_params['show_faces'] == 1) {
      $attributes['data-show-faces'] = 'true';
    }

    if (!empty($widget_params['width'])) {
      $attributes['data-width'] = $widget_params['width'];
    }

    if (isset($widget_params['layout']) && $widget_params['layout'] !== 'standard') {
      $attributes['data-layout'] = $widget_params['layout'];
    }

    if (!empty($widget_params['font'])) {
      $attributes['data-font'] = $widget_params['font'];
    }

    if (isset($widget_params['colorscheme']) && $widget_params['colorscheme'] !== 'light') {
      $attributes['data-colorscheme'] = $widget_params['colorscheme'];
    }

    if (isset($widget_params['action']) && $widget_params['action'] !== 'like') {
      $attributes['data-action'] = $widget_params['action'];
    }

  }
  $variables['attributes'] = $attributes;
}

/**
 * Implements hook_preprocess_HOOK() for sjisocialconnect_googleplus theme.
 *
 * @see sjisocialconnect_theme()
 * @see theme_sjisocialconnect_googleplus()
 */
function sjisocialconnect_preprocess_sjisocialconnect_googleplus(&$variables, &$hook) {

//ToDo: Figure out how to pass variables to the JS using DrupalSettings
  if ($variables['lang'] !== 'en') {
    $script = <<<JS
window.___gcfg = {lang: '{$variables['lang']}'};
JS;
  }
  $hook = str_replace('sjisocialconnect_', 'sjisocialconnect.', $hook);

  $attributes = array(
    'class' => array('g-plus'),
    'data-action' => 'share',
  );

  if ($config = \Drupal::config($hook)) {
    // @TODO load contextual config.
    $widget_params = $config->get();

    if (!empty($variables['url'])) {
      $attributes['data-href'] = $variables['url'];
    }

    if (isset($widget_params['annotation']) && $widget_params['annotation'] !== 'inline') {
      $attributes['data-annotation'] = $widget_params['annotation'];
    }

    if (!empty($widget_params['width'])) {
      $attributes['data-width'] = $widget_params['width'];
    }
  }
  $variables['attributes'] = $attributes;

}

/**
 * Implements hook_preprocess_HOOK() for sjisocialconnect_linkedin theme.
 *
 * @see sjisocialconnect_theme()
 * @see theme_sjisocialconnect_linkedin()
 */
function sjisocialconnect_preprocess_sjisocialconnect_linkedin(&$variables, &$hook) {
//ToDo: Figure out how to pass variables to the JS using DrupalSettings
  if ($variables['lang'] !== 'en') {
    $script = <<<JS
window.___gcfg = {lang: '{$variables['lang']}'};
JS;
  }
  $hook = str_replace('sjisocialconnect_', 'sjisocialconnect.', $hook);

  $attributes = array(
    'type' => 'IN/Share',
  );

  if ($config = \Drupal::config($hook)) {
    // @TODO load contextual config.
    $widget_params = $config->get();


    if (!empty($variables['url'])) {
      $attributes['data-url'] = $variables['url'];
    }

    if (isset($widget_params['counter']) && $widget_params['counter'] !== 'none') {
      $attributes['data-counter'] = $widget_params['counter'];
    }
  }
  $variables['attributes'] = $attributes;}

/**
 * Implements hook_theme_registry_alter().
 *
 * Adds our custom preprocess to all widget's theme functions.
 *
 * @see _sjisocialconnect_preprocess_widget()
 */
function sjisocialconnect_theme_registry_alter(&$theme_registry) {
  foreach ($theme_registry as $key => $value) {
    if (strpos($key, 'sjisocialconnect_') === 0) {
      if (strpos($key, '_instagram') === false )
      array_unshift($theme_registry[$key]['preprocess functions'], '_sjisocialconnect_preprocess_widget');
    }
  }
}

/**
 * Custom pre-process function, used to add settings for widgets.
 *
 * @see sjisocialconnect_theme_registry_alter()
 */
function _sjisocialconnect_preprocess_widget(&$variables, $hook) {
  global $base_url;

  $widget = str_replace("sjisocialconnect_", "", $hook);

  $config = Drupal::config('sjisocialconnect.settings');
  $variables['async'] = $config->get('global.async');
  $definitions = sjisocialconnect_get_widgets();


  $variables['url'] = $base_url . Url::fromRoute('<current>')->toString();



  // @TODO get current title.
  //$variables['title'] = 'Test';
  // @TODO get current language from context or fallback to site default.
  if (!isset($variables['lang']) || empty($variables['lang'])) {
    $variables['lang'] = 'en';
  }
}

/**
 * Returns entity types we want to attach an extra Sji Social Connectpseudo-field to.
 *
 * @return array
 *   An array of entity types.
 */
function sjisocialconnect_get_supported_entities() {
  static $supported_entity_types;

  if (!isset($supported_entity_types)) {
    // Support only core by default.
    $supported_entity_types = array(
      'comment',
      'file',
      'node',
      'taxonomy_term',
      'user',
    );

    // Other modules can easily enable support for others.
    // @TODO add API documentation if we end up keeping this.
    \Drupal::moduleHandler()
      ->alter('sjisocialconnect_supported_entity', $supported_entity_types);
  }

  return $supported_entity_types;
}

/**
 * Implements hook_field_extra_fields().
 */
function sjisocialconnect_field_extra_fields() {
  $return = array();

  $supported_entity_types = sjisocialconnect_get_supported_entities();
  $entity_info = Drupal::entityManager()->getDefinitions();

//  foreach ($supported_entity_types as $entity_type) {
//    if (array_key_exists($entity_type, $entity_info)) {
//      foreach ($entity_info[$entity_type]['bundles'] as $bundle) {
//        $return[$entity_type][$bundle]['display']['sjisocialconnect'] = array(
//          'label' => t('Sji Social Connectwidgets'),
//          'weight' => 0,
//        );
//      }
//    }
//  } 
  return $return;
}

/**
 * Implements hook_entity_view().
 */
function sjisocialconnect_entity_view($entity, $type, $view_mode, $langcode) {
  $supported_entity_types = sjisocialconnect_get_supported_entities();

  if (in_array($type, $supported_entity_types)) {
    $entity->content['sjisocialconnect'] = array(
      // @TODO pass in some kind of context?
      '#theme' => 'sjisocialconnect',
      // @TODO enable caching? see Block implementation
    );
  }
}

/**
 * Helper function that adds javscript includes for widgets asynchronously.
 *
 * @param array
 *   The variables passed to the theme function.
 * @param string
 *   Any extra markup to append to the script tag. This is used by some
 *   widgets to pass extra configuration.
 *
 * @see theme_sjisocialconnect()
 *
 * @TODO this assumes script are external and might break if otherwise.
 */
function _sjisocialconnect_add_js($variables, $extra = '') {
  $script = <<<JS
(function() {
  !x
})();
JS;

  $includes = '';

  foreach ($variables as $var) {
    $url = $var['data'];
    $includes .= <<<EOT
var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
po.src = '{$url}'; {$extra}
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
EOT;
  }

  $script = str_replace('!x', $includes, $script);

  // drupal_add_js($script, 'inline');
}

/**
 * Implements hook_help().
 */
function sjisocialconnect_help($route_name, RouteMatchInterface $route_match) {
  $help_text = '';
  switch ($route_name) {
    case 'help.page.sjisocialconnect':
      $help_text = '<p>' . t('Add social sharing widgets to your site. Pull Twitter Feeds to your Site.This module also provides configurable blocks for a Twitter feed.') . '</p>';
      $help_text = '<p>' . t("This module is used to post the Tweet and Facebook status with Image from your content forms.") . '</p>';
      $help_text .= '<h3>' . t("Configuration") . '</h3>';
      $help_text .= '<dl>';
      $help_text .= '<dt>' . t("1. Get your Facebook keys on https://developers.facebook.com/apps") . '</dt>';
      $help_text .= '<dt>' . t("2. Get your Twitter keys on https://apps.twitter.com") . '</dt>';
      $help_text .= '<dt>' . t("3. Get your Bilty API Keys on https://bitly.com/a/your_api_key") . '</dt>';
      $help_text .= '<dt>' . t("4. Visit admin > config > services > publish-away") . '</dt>';
      $help_text .= '</dl>';
      return $help_text;
  }
}

/**
 * Implements hook_sjisocialconnect_info().
 */
function sjisocialconnect_sjisocialconnect_info() {
  $library_classes = array(
    // Facebook.
    0 => 'Facebook\FacebookSession',
    1 => 'Facebook\FacebookRedirectLoginHelper',
    2 => 'Facebook\FacebookRequest',
    3 => 'Facebook\FacebookRequestException',
    4 => 'Facebook\GraphUser',
    5 => 'Facebook\FacebookSDKException',
    // Twitter.
    6 => 'Guzzle\Plugin\Oauth\OauthPlugin',
  );
  $providers = array('facebook' => 'Facebook', 'twitter' => 'Twitter');
  return array(
    'library_classes' => $library_classes,
    'providers' => $providers,
  );
}

/**
 * Fetch all sji social connect field types.
 * @return array of fields types keyed by field system names. 
 */
function _sjisocialconnect_field_type() {
  $sjisocialconnect_field_types = array();
  $field_storages = entity_load_multiple_by_properties('field_storage_config', array('module' => 'sjisocialconnect'));
  if ($field_storages) {
    foreach ($field_storages as $field) {
      $sjisocialconnect_field_types[$field->get('field_name')] = $field->get('type');
    }
  }
  
  return $sjisocialconnect_field_types;
}

/**
 * Fetch all sji social connect fields.
 * @return array of field system names keyed by field's uuid. 
 */
function _sjisocialconnect_fields() {
  $sjisocialconnect_fields = array();
  $field_storages = entity_load_multiple_by_properties('field_storage_config', array('module' => 'sjisocialconnect'));
  if ($field_storages) {
    // Provide an explanation message (only mention pending deletions if there
    // remains no actual, non-deleted fields)
    foreach ($field_storages as $field) {
      if (empty($field->deleted) || (is_string($field->deleted) && trim($field->deleted) === '')) {
        $sjisocialconnect_fields[$field->uuid()] = $field->get('field_name');
      }
    }
  }
  
  return $sjisocialconnect_fields;
}

/**
 * Implements hook_form_alter().
 */
function sjisocialconnect_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $sjisocialconnect_fields = _sjisocialconnect_field_type();
  $intersect = array_intersect(array_keys($sjisocialconnect_fields), array_keys($form));
  if (!empty($intersect)) {
    $form['#validate'][] = '_sjisocialconnect_field_validate';
  }
}

/**
 * Form API validate callback.
 * @param array $form
 * @param array $form_state
 */
function _sjisocialconnect_field_validate($form, &$form_state) {
  $form_state->cleanValues();
  $sjisocialconnect_fields = _sjisocialconnect_field_type();
  $intersect = array_intersect(array_keys($sjisocialconnect_fields), array_keys($form));
  if (!empty($intersect)) {
    $entity = $form_state->getFormObject()->getEntity();
    $entity_type = $entity->getEntityTypeId();
    foreach ($intersect as $field_name) {
      $values = $form_state->getValue($field_name);
      // Default image required check.
      if (empty($values[0]['fids']) && isset($form[$field_name]['widget'][0]['#default_image']['fid'])
        && (int) $form[$field_name]['widget'][0]['#default_image']['fid']) {
        $values[0]['fids'][0] = $form[$field_name]['widget'][0]['#default_image']['fid'];
        $form_state->setValue($field_name, $values);
      }
      // End default image situation.
      if (!empty($values) && !empty($entity)) {
        $token_service = \Drupal::token();
        $language_interface = \Drupal::languageManager()->getCurrentLanguage();
        foreach ($values as $key => $value) {
          if (!empty($value['message'])) {
            $message = $token_service->replace($value['message'], array($entity_type => $entity), array('langcode' => $language_interface->getId()));
            $message = trim(strip_tags($message));
            $maxlength = strlen($message);
            if (trim($value['message']) != $message && $form[$field_name]['widget'][$key]['message']['#maxlength'] < $maxlength) {
              $getLabel = !empty($form[$field_name]['widget'][$key]['message']['#title']) ? $form[$field_name]['widget'][0]['message']['#title'] : t('Message');
              $form_state->setErrorByName($field_name, t('%name cannot be longer than @max characters but is currently @leng characters long.',
                array('%name' => $getLabel, '@max' => $form[$field_name]['widget'][0]['message']['#maxlength'], '@leng' => $maxlength)));
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sjisocialconnect_form_field_ui_field_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide required field on admin/structure/types/manage/article/fields/[sji social connect field].
  $form['field']['required']['#default_value'] = FALSE;
  $form['field']['required']['#disabled'] = TRUE;
  $form['field']['required']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sjisocialconnect_form_field_ui_field_storage_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide cardinality situation on admin/structure/types/manage/article/fields/[sji social connect field]/storage.
  $form['field_storage']['cardinality_container']['cardinality']['#default_value'] = 'number'; // Limited.
  $form['field_storage']['cardinality_container']['cardinality']['#disabled'] = TRUE;
  $form['field_storage']['cardinality_container']['cardinality']['#access'] = FALSE;
  $form['field_storage']['cardinality_container']['cardinality_number']['#default_value'] = 1;
  $form['field_storage']['cardinality_container']['cardinality_number']['#disabled'] = TRUE;
  $form['field_storage']['cardinality_container']['cardinality_number']['#access'] = FALSE;
  $form['field_storage']['cardinality_container']['#suffix'] = t('One value for this field.');
}

/**
 * The URL shortening service.
 * @param string $longUrl
 * @return string
 */
function _sjisocialconnect_generate_short_url($longUrl) {
  $sjisocialconnect_config = \Drupal::config('sjisocialconnect.bitly');
  $bitly_username = $sjisocialconnect_config->get('bitly.username');
  $bitly_apikey = $sjisocialconnect_config->get('bitly.apikey');
  if (trim($bitly_username) != '' && trim($bitly_apikey) != '') {
    $apiUrl = 'http://api.bit.ly';
    $version = 'v3';
    $action = 'shorten';
    $format = 'txt';
    $callback = '';

    $parameters = "login=$bitly_username&apiKey=$bitly_apikey&longUrl=$longUrl&format=$format&callback=$callback";
    // With CURL extension.
    $ch = curl_init("$apiUrl/$version/$action?$parameters");
    curl_setopt($ch, CURLOPT_NOBODY, False);
    curl_setopt($ch, CURLOPT_HEADER, False);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, True);
    $shortUrl = curl_exec($ch);
    return $shortUrl;
  }
  else {
    return '';
  }
}