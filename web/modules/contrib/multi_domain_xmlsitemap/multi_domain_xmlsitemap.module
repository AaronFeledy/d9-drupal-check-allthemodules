<?php

/**
 * Implements hook_xmlsitemap_context_info().
 */
function multi_domain_xmlsitemap_xmlsitemap_context_info() {
  $context['domain'] = array(
    'label' => t('Domain'),
    'summary callback' => 'xmlsitemap_domain_summary',
    'default' => $GLOBALS['base_url'],
  );
  return $context;
}

function xmlsitemap_domain_summary($domain) {
  return $domain;
}

/**
 * Implements hook_xmlsitemap_context().
 */
function multi_domain_xmlsitemap_xmlsitemap_context() {
  $context['domain'] = $GLOBALS['base_url'];
  return $context;
}

/**
 * Implements hook_xmlsitemap_context_url_options().
 */
function multi_domain_xmlsitemap_xmlsitemap_context_url_options(array $context) {
  $options = array();
  if (isset($context['domain'])) {
    $options['base_url'] = $context['domain'];
  }
  return $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function multi_domain_xmlsitemap_form_xmlsitemap_sitemap_edit_form_alter(&$form, $form_state) {
    $form['context']['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#default_value' => isset($form['#entity']->context['domain']) ? $form['#entity']->context['domain'] : $GLOBALS['base_url'],
  );
  
  $domain_list = \Drupal::service('entity_type.manager')->getStorage('domain')->loadByProperties();
  $domain_path_array = [];
  foreach($domain_list as $domain_machine_name){
   //$domain_path_array[] = $domain_machine_name->getPath();
  }
  //print_r($domain_path_array);
}

/**
 * Implements hook_xmlsitemap_link_alter().
 */
function multi_domain_xmlsitemap_xmlsitemap_link_alter(&$link) {
  /*$node_id = $link['loc'];
  // Condition to check for a particular nid.
  if ($node_id == '/node/2') {
    //unset($link);
    // Status is set to zero to exclude the item in the sitemap.
    $link['status'] = 0;
    // Set to zero to make the element non-accessible by the anonymous user.
    $link['access'] = 0;
  }*/
}

/**
 * Implements hook_xmlsitemap_element_alter().
 */
function multi_domain_xmlsitemap_xmlsitemap_element_alter($element, $link, $sitemap){
    //Custom hook
}

/**
 * Implements hook_query_xmlsitemap_generate_alter().
 */
function multi_domain_xmlsitemap_query_xmlsitemap_generate_alter($query) {
    $client = \Drupal::httpClient();
    $statusCodes = [];
    $nodes_check = [];

  try {
    //print_r($statusCode);
    $sitemap = $query->getMetaData('sitemap');
  if (!empty($sitemap->context['domain'])) {
      $result = db_select('xmlsitemap', 'xml')
       ->fields('xml', array('loc')) 
       ->condition('type', 'node')
       ->execute()
       ->fetchAll();
      
      foreach($result as $loc){
    $response = $client->get($sitemap->context['domain'].$loc->loc,array('http_errors' => FALSE));
    $statusCode = $response->getStatusCode();
    if($statusCode != '200'){
    $statusCodes[$sitemap->context['domain'].$loc->loc] = $statusCode;
    $nodes_check[] = $loc->loc;
       }
     }
      $nodes_check[] = 'checknode';
    $node_condition = db_and();
    $node_condition->condition('loc', $nodes_check, 'NOT IN');
    $condition = db_or();
    $condition->condition($node_condition);
    $query->condition($condition);
  }
    
    
  }
  catch (RequestException $e) {
    watchdog_exception('multi_domain_xmlsitemap', $e->getMessage());
  }
}