<?php

/**
 * @file
 * Contains Drupal\worldcore\worldcore.module.
 */

use Drupal\worldcore\Entity\Currency;

/**
 * Worlrcore module main functions.
 *
 * @defgroup worldcore
 */

/**
 * Internal module function.
 */
function _validate_payment_form($args) {
  $error = [];

  if (!is_array($args) && count($args) > 0) {
    $error[] = '';
    $error['msg'] = t('Can not create payment. Please contact site administrator for further assistance.');

    return $error;
  }

  if ($args['amount'] <= 0) {
    $error[] = 'amount';
    $error['msg'] = t('Invalid amount.');

    return $error;
  }

  if (!preg_match("/^[0-9]{1,10}$/", $args['amount']) && !preg_match("/^[0-9]{1,6}\.[0-9]{1,6}$/", $args['amount'])) {
    $error[] = 'amount';
    $error['msg'] = t('Invalid amount.');

    return $error;
  }

  $t = time();

  $query = \Drupal::entityQuery('worldcore_currency');
  $currencies_ar = $query->execute();

  if (!array_key_exists($args['currency'], $currencies_ar)) {

    $error[] = 'currency';
    $error['msg'] = $t('Please select valid currency.');

    return $error;
  }

}

/**
 * Worldcore payment management
 * functions.
 */

/**
 * Internal module function.
 */
function _worldcore_createpayment($args) {
  $args['created'] = time();

  // Parse additional params.
  $required_params = [
    'uid',
    'created',
    'amount',
    'currency',
    'memo',
    'merchant_account',
  ];
  $additional_params = [];
  foreach ($args as $key => $value) {
    if (!in_array($key, $required_params)) {
      $additional_params[$key] = $value;
    }
  }
  $additional_params_ar = $additional_params;
  $additional_params = serialize($additional_params);

  // Fire hook
  /* $args=\Drupal::moduleHandler()->invokeAll('insert', array(
		'uid' => $args['uid'],
		'created' => $args['created'],
		'amount' => $args['amount'],
		'currency' => $args['currency'],
		'memo' => $args['memo'],
		'merchant_account' => $args['merchant_account'],
  )); */

  $args['memo'] = substr($args['memo'], 0, 255);

  /* if(empty($args['merchant_account'])) $args['merchant_account']=$currency_settings["{$args['currency']}"]['account']; */

  // Inserting payment.
  $currency = Currency::load($args['currency']);

  $args['merchant_account'] = $currency->get('account')->value;

  $pid = db_insert('wc_payments')->fields(array_merge($args, ['params' => $additional_params]))->execute();

  if ($pid <= 0) {
    return FALSE;
  }

  $payment = [
    'pid' => $pid,
    'uid' => $args['uid'],
    'created' => $args['created'],
    'amount' => $args['amount'],
    'currency' => $args['currency'],
    'memo' => $args['memo'],
    'merchant_account' => $args['merchant_account'],
  ];

  $payment = array_merge($additional_params_ar, $payment);

  \Drupal::moduleHandler()->invokeAll('inserted', $payment);

  return $payment;
}

/**
 * Internal module function.
 */
function _worldcore_deletepayment($pid) {
  $pid = (int) $pid;

  if ($pid <= 0) {
    return FALSE;
  }

  $r = db_query('DELETE FROM {wc_payments} WHERE pid = %d', $pid);

  if (!$r) {
    return FALSE;
  }

  \Drupal::moduleHandler()->invokeAll('deleted', $pid);

  return TRUE;
}

/**
 * Internal module function.
 */
function _worldcore_enrollpayment($pid, $account = 'via API', $t = "") {
  $pid = (int) $pid;

  if (empty($t)) {
    $t = time();
  }

  if (empty($account)) {
    $account = 'via API';
  }

  if ($pid <= 0) {
    return FALSE;
  }
  $account = substr($account, 0, 15);

  $r = db_query('UPDATE {wc_payments} SET enrolled=%d, account="%s" WHERE pid = %d', $t, $account, $pid);

  if (!$r) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Payment creation
 * functions.
 */

/**
 * Load payment info.
 */
function worldcore_pid_load($pid) {
  $pid = (int) $pid;

  if ($pid <= 0) {
    return FALSE;
  }

  $result = db_query("SELECT * FROM {wc_payments} WHERE pid=$pid");
  if (!$result) {
    return FALSE;
  }
  $payment = db_fetch_array($result);
  if ($payment['pid'] > 0) {
    $payment = array_merge(unserialize($payment['params']), $payment);
    return $payment;
  }

  return FALSE;
}

/**
 * Worldcore template function.
 */
function worldcore_theme() {
  return ['worldcore_success' => ['template' => 'page--success'], 'worldcore_fail' => ['template' => 'page--fail']];
}
