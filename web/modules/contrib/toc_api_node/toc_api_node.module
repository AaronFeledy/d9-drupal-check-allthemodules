<?php

/**
 * @file
 * Contains toc_api_node.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\NodeType;
use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\toc_api\Entity\TocType;
use Drupal\Component\Render\MarkupInterface;

/**
 * Implements hook_help().
 */
function toc_api_node_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the social module.
    case 'help.page.toc_api_node':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide a table of content for a full node') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function toc_api_node_theme_suggestions_toc_tree_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\toc_api\TocInterface $toc */
  $toc = $variables['toc'];
  $options = $toc->getOptions();
  if (isset($options['bundle']) && !empty($options['bundle'])) {
    $suggestions[] = 'toc_tree_' . $options['bundle'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function toc_api_node_theme_suggestions_toc_responsive_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\toc_api\TocInterface $toc */
  $toc = $variables['toc'];
  $options = $toc->getOptions();
  if (isset($options['bundle']) && !empty($options['bundle'])) {
    $suggestions[] = 'toc_tree_' . $options['bundle'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function toc_api_node_theme_suggestions_toc_menu_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\toc_api\TocInterface $toc */
  $toc = $variables['toc'];
  $options = $toc->getOptions();
  if (isset($options['bundle']) && !empty($options['bundle'])) {
    $suggestions[] = 'toc_tree_' . $options['bundle'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function toc_api_node_theme_suggestions_toc_header_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\toc_api\TocInterface $toc */
  $toc = $variables['toc'];
  $options = $toc->getOptions();
  if (isset($options['bundle']) && !empty($options['bundle'])) {
    $suggestions[] = 'toc_tree_' . $options['bundle'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function toc_api_node_theme_suggestions_toc_back_to_top_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\toc_api\TocInterface $toc */
  $toc = $variables['toc'];
  $options = $toc->getOptions();
  if (isset($options['bundle']) && !empty($options['bundle'])) {
    $suggestions[] = 'toc_tree_' . $options['bundle'];
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function toc_api_node_entity_extra_field_info() {
  $extra = [];

  /** @var \Drupal\node\Entity\NodeType $bundle */
  foreach (NodeType::loadMultiple() as $bundle) {
    if ($bundle->getThirdPartySetting('toc_api_node', 'toc_api_node_enabled', 0)) {
      $extra['node'][$bundle->Id()]['display']['toc_api_node'] = [
        'label' => t('Toc node'),
        'description' => t('Table of content of node'),
        'weight' => 100,
        'visible' => FALSE,
      ];
    }
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function toc_api_node_node_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getComponent('toc_api_node')) {
    // Add a #post_render callback to act on the rendered HTML of the entity.
    $build['#post_render'][] = 'toc_api_node_node_post_render';
  }
}

/**
 * Post render function which generate the TOC and replace it into the markup.
 */
function toc_api_node_node_post_render(MarkupInterface $markup, array $build) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $build['#node'];

  $toc_selected = $build['#toc_selected'];
  $headers_unique_ids = $build['#toc_headers_unique_ids'];

  /** @var Drupal\toc_api\TocTypeInterface $toc_type */
  $toc_type = TocType::load($toc_selected);
  $options = ($toc_type) ? $toc_type->getOptions() : [];

  // We add a custom option into the TOC options to be able to add theme
  // suggestions based on the bundle.
  $options['bundle'] = $node->bundle();

  // Create a TOC instance using the TOC manager.
  $toc_id = 'toc_api_node_' . $node->id();
  /** @var \Drupal\toc_api\TocManagerInterface $toc_manager */
  $toc_manager = \Drupal::service('toc_api.manager');
  /** @var \Drupal\toc_api\TocInterface $toc */
  $toc = $toc_manager->create($toc_id, $markup, $options);

  // If the TOC is visible (ie has more than X headers).
  if ($toc->isVisible()) {
    /** @var \Drupal\toc_api\TocBuilderInterface $toc_builder */
    $toc_builder = \Drupal::service('toc_api.builder');
    // Should we assign unique ids to headers?
    if ($headers_unique_ids) {
      $markup = $toc_builder->renderContent($toc);
    }

    $toc_api_node = $toc_builder->renderToc($toc);
    $markup = str_replace('[toc_api_node]', $toc_api_node, $markup);
  }
  else {
    $markup = str_replace('[toc_api_node]', '', $markup);
  }

  return $markup;
}

/**
 * Implements hook_entity_view().
 */
function toc_api_node_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('toc_api_node')) {
    /** @var \Drupal\node\NodeTypeInterface $node_type */
    $node_type = $entity->type->entity;
    $toc_selected = $node_type->getThirdPartySetting('toc_api_node', 'toc_api_node_toc', '');
    $headers_unique_ids = $node_type->getThirdPartySetting('toc_api_node', 'toc_api_node_assign_header_id', 0);

    $build['toc_api_node'] = [
      '#markup' => '[toc_api_node]',
    ];
    $build['#toc_selected'] = $toc_selected;
    $build['#toc_headers_unique_ids'] = $headers_unique_ids;
    $build['#attached']['library'][] = 'toc_api_node/node';
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function toc_api_node_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeTypeInterface $type */
  $type = $form_state->getFormObject()->getEntity();

  $form['toc_api_node'] = [
    '#type' => 'details',
    '#group' => 'additional_settings',
    '#title' => t('TOC node'),
    '#access' => (\Drupal::currentUser()->hasPermission('administer toc api node') || \Drupal::currentUser()->hasPermission('administer nodes')),
  ];

  $form['toc_api_node']['toc_api_node_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Table of content'),
    '#default_value' => $type->getThirdPartySetting('toc_api_node', 'toc_api_node_enabled', 0),
  ];

  $options = [];
  $tocs_type = TocType::loadMultiple();
  /** @var \Drupal\toc_api\TocTypeInterface $toc_type */
  foreach ($tocs_type as $toc_type) {
    $options[$toc_type->id()] = $toc_type->label();
  }

  $form['toc_api_node']['toc_api_node_toc'] = [
    '#type' => 'select',
    '#title' => t('Select the TOC type to use.'),
    '#default_value' => $type->getThirdPartySetting('toc_api_node', 'toc_api_node_toc', ''),
    '#options' => $options,
    '#states' => [
      'visible' => [
        ':input[name="toc_api_node_enabled"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['toc_api_node']['toc_api_node_assign_header_id'] = [
    '#type' => 'checkbox',
    '#title' => t('Assign to content header unique ids.'),
    '#default_value' => $type->getThirdPartySetting('toc_api_node', 'toc_api_node_assign_header_id', ''),
    '#description' => t('Replace original content with the content where headers are assigned unique ids.'),
    '#states' => [
      'visible' => [
        ':input[name="toc_api_node_enabled"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['#entity_builders'][] = 'toc_api_node_form_node_type_form_builder';
}

/**
 * Entity builder for the node type form with TOC node option.
 */
function toc_api_node_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  $type->setThirdPartySetting('toc_api_node', 'toc_api_node_enabled', $form_state->getValue('toc_api_node_enabled'));
  $type->setThirdPartySetting('toc_api_node', 'toc_api_node_toc', $form_state->getValue('toc_api_node_toc'));
  $type->setThirdPartySetting('toc_api_node', 'toc_api_node_assign_header_id', $form_state->getValue('toc_api_node_assign_header_id'));
}
