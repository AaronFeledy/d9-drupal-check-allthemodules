<?php

/**
 * @file
 * Installation file for xapian search library as a drupal module.
 */

/**
 * Implements hook_schema().
 */
function xapian_schema() {
  $schema['xapian_index_queue'] = [
    'fields' => [
      'xid' => ['type' => 'serial', 'not null' => TRUE, 'disp-width' => '11'],
      'added' => ['type' => 'int', 'not null' => TRUE, 'default' => 0],
      'indexed' => ['type' => 'int', 'not null' => TRUE, 'default' => 0],
      'priority' => ['type' => 'int', 'not null' => FALSE, 'default' => 0, 'disp-width' => '11'],
      'status' => ['type' => 'int', 'not null' => FALSE, 'default' => 0, 'disp-width' => '1'],
      'nid' => ['type' => 'int', 'not null' => TRUE, 'default' => 0, 'disp-width' => '11'],
    ],
    'primary key' => ['xid'],
    'indexes' => [
      'nid' => ['nid', 'status', 'indexed'],
    ],
    'unique keys' => [
      'unique_nid' => ['nid'],
    ],
  ];

  return $schema;
}

/**
 * Implementation of hook_uninstall().
 */
function xapian_uninstall() {
  variable_del('xapian_database_hostname');
  variable_del('xapian_database_path');
  variable_del('xapian_database_port');
  variable_del('xapian_database_type');
  variable_del('xapian_excluded_nodes');
  variable_del('xapian_index_immediately');
  variable_del('xapian_indexing_throttle');
  variable_del('xapian_log_queries');
  variable_del('xapian_node_count_type');
  variable_del('xapian_search_results_per_page');
  variable_del('xapian_stem_language');
  variable_del('xapian_write_database_hostname');
  variable_del('xapian_write_database_port');
}

/**
 * Implements hook_requirements().
 *
 * Report Xapian bindings version if available, otherwise display
 * include error.
 */
function xapian_requirements($phase) {
  module_load_include('inc', 'xapian', 'xapian.lib');
  if (xapian_available()) {
    // Get Xapian bindings version, supporting PHP4 and PHP5 methods.
    $version = xapian_get_version();
    if (version_compare($version, XAPIAN_MINIMUM_BINDINGS) < 0) {
      $severity = REQUIREMENT_ERROR;
      $version = t('Your Xapian bindings are too old (%version).  You must install at least version %minimum.', ['%version' => $version, '%minimum' => XAPIAN_MINIMUM_BINDINGS]);
    }
    else {
      $severity = REQUIREMENT_OK;
    }
  }
  else {
    $severity = REQUIREMENT_ERROR;
    $version = t('You need to install Xapian bindings version >= %minimum. <em>%error</em>', ['%minimum' => XAPIAN_MINIMUM_BINDINGS, '%error' => $GLOBALS['xapian_include_error']]);
  }

  return [
    'xapian' => [
      'title' => t('Xapian bindings'),
      'value' => $version,
      'severity' => $severity,
    ],
  ];
}

/**
 * Implements hook_update_last_removed().
 */
function xapian_update_last_removed() {
  return 7001;
}
