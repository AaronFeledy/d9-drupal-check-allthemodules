<?php

/**
 * @file
 * Contains hooks for Anonymous Comment Account Info.
 */

use Drupal\comment\Entity\CommentType;
use Drupal\Core\Form\FormStateInterface;

/**
 * Get view mode for anonymous accounts.
 *
 * @param string $commentTypeId
 *   ID of a comment type.
 *
 * @return null|string
 *   The view mode, or NULL if not defined.
 */
function _comment_anonymous_account_info_anonymous_view_mode(string $commentTypeId): ?string {
  $commentType = CommentType::load($commentTypeId);
  return $commentType->getThirdPartySetting('comment_anonymous_account_info', 'anonymous_account_display_mode');
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Hook: 'comment'
 *
 * @param $variables
 *   The variables array (modify in place).
 *
 * @see \hook_preprocess_HOOK().
 */
function comment_anonymous_account_info_preprocess_comment(array &$variables): void {
  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $variables['elements']['#comment'];

  $viewMode = $variables['elements']['#view_mode'] ?? NULL;
  $anonymousViewMode = _comment_anonymous_account_info_anonymous_view_mode($comment->bundle());

  // Don't change user picture variable of anonymous view mode as it will cause
  // recursion.
  if ($viewMode == $anonymousViewMode) {
    return;
  }

  $account = $comment->getOwner();
  if ($account->isAnonymous()) {
    $render_controller = \Drupal::entityTypeManager()->getViewBuilder('comment');
    $variables['user_picture'] = $render_controller->view($comment, $anonymousViewMode);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Hook: 'comment'

 * @param array $variables
 *   An array of variables passed to the theme hook. Note that this hook is
 *   invoked before any preprocessing.
 *
 * @return array
 *   An array of theme suggestions.
 *
 * @see \hook_theme_suggestions_HOOK().
 */
function comment_anonymous_account_info_theme_suggestions_comment(array $variables): array {
  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $variables['elements']['#comment'];
  $viewMode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions = [];
  // Suggestions as inspired by \node_theme_suggestions_node().
  $suggestions[] = 'comment__' . $viewMode;
  $suggestions[] = 'comment__' . $comment->bundle() . '__' . $viewMode;
  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Form ID: 'comment_type_edit_form'.
 *
 * @see \hook_form_FORM_ID_alter().
 */
function comment_anonymous_account_info_form_comment_type_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id): void{
  /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
  $formObject = $form_state->getFormObject();
  /** @var \Drupal\comment\CommentTypeInterface $commentType */
  $commentType = $formObject->getEntity();
  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepo */
  $entityDisplayRepo = \Drupal::service('entity_display.repository');

  $form['comment_anonymous_account_info'] = [
    '#type' => 'details',
    '#title' => \t('Anonymous comment account info'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['comment_anonymous_account_info']['anonymous_account_display_mode'] = [
    '#type' => 'select',
    '#title' => \t('Display mode'),
    '#description' => \t('Use display mode when rendering anonymous accounts'),
    '#options' => $entityDisplayRepo->getViewModeOptions('comment'),
    '#empty_option' => \t('- None -'),
    '#default_value' => _comment_anonymous_account_info_anonymous_view_mode($commentType->id()),
  ];

  $form['actions']['submit']['#submit'] = array_merge(
    ['comment_anonymous_account_info_form_comment_type_submit'],
    $form['actions']['submit']['#submit'] ?? []
  );
};

/**
 * Submission handler for 'comment_type_edit_form'.
 *
 * @see \comment_anonymous_account_info_form_comment_type_edit_form_alter().
 */
function comment_anonymous_account_info_form_comment_type_submit(array &$form, FormStateInterface $form_state): void {
  /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
  $formObject = $form_state->getFormObject();
  /** @var \Drupal\comment\CommentTypeInterface $commentType */
  $commentType = $formObject->getEntity();
  $displayMode = $form_state->getValue(['comment_anonymous_account_info', 'anonymous_account_display_mode']);
  $commentType->setThirdPartySetting('comment_anonymous_account_info', 'anonymous_account_display_mode', $displayMode);
}
