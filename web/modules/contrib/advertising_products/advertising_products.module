<?php

/**
 * @file
 * Contains advertising_products.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function advertising_products_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the advertising_products module.
    case 'help.page.advertising_products':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function advertising_products_theme() {
  $theme = [];
  $theme['advertising_product'] = [
    'render element' => 'elements',
    'file' => 'advertising_product.page.inc',
    'template' => 'advertising-product',
  ];
  $theme['advertising_product_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'advertising_product.page.inc',
  ];

  // Required to add advertising-product--preview.html.twig in module not theme.
  $theme['advertising_product__preview'] = [
    'base hook' => 'advertising_product',
    'file' => 'advertising_product.page.inc',
  ];

  $theme['advertising_products_image_selection'] = [
    'variables' => ['images' => [], 'primary_image' => null, 'is_new' => false]
  ];

  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function advertising_products_theme_suggestions_advertising_product(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#advertising_product'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'advertising_product__' . $sanitized_view_mode;
  $suggestions[] = 'advertising_product__' . $entity->bundle();
  $suggestions[] = 'advertising_product__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'advertising_product__' . $entity->id();
  $suggestions[] = 'advertising_product__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_cron().
 */
function advertising_products_cron() {
  $run_cron = Drupal::config('advertising_products')->get('run_cron');

  if ($run_cron) {
    advertising_products_run_cron();
  }
}

function advertising_products_run_cron() {
  $providers = \Drupal::service('plugin.manager.advertising_products.provider');

  foreach ($providers->getDefinitions() as $provider) {
    $connection = \Drupal\Core\Database\Database::getConnection('default');
    $queue = new \Drupal\advertising_products\Plugin\Queue\DatabaseQueue($provider['id'], $connection);
    // Only put stuff into queue if the queue is empty.
    // This way we avoid duplicate entries if cron runs again before all API
    // calls have been done.
    if (($count = $queue->numberOfItems()) > 0) {
      continue;
    }
    else {
      $queue->fillQueue();
    }

  }
}

/**
 * Find a term by its original id value.
 */
function advertising_products_find_term($vid, $original_id) {
  $query = \Drupal::entityQuery('taxonomy_term');

  // Add query condition to select by product ID and provider
  $query->condition('vid', $vid);
  $query->condition('field_original_id', $original_id);

  $ids = $query->execute();
  if (count($ids)) {
    $entities = entity_load_multiple('taxonomy_term', $ids);

    return reset($entities);
  }

  return FALSE;
}
