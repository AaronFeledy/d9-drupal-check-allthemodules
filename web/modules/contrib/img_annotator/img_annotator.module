<?php
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implementing hook_entity_view().
 *
 * Altering Node View to add Annotorious Library.
 */
function img_annotator_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode){

  // Only node/* pages: $current_route == 'entity.node.canonical'
  // $current_route = \Drupal::service('current_route_match')->getRouteName();

  if ($entity instanceof \Drupal\node\NodeInterface) {
    $node = $entity;
    $node_type = $node->getType();

    // Node configs.
    $configs = \Drupal::config('img_annotator.node_settings');
    $annoConfigs = $configs->get('node_type_' . $node_type);
    $annoConfigs = $annoConfigs ? $annoConfigs : array('flag' => FALSE);

    // Annotation enabled.
		if ($annoConfigs['flag']) {
		  global $base_url;
		  $account = \Drupal::currentUser();
		  $userId = $account->id();

		  $nodeOwner = ($node->getOwnerId() == $userId) ? TRUE : FALSE;

		  // Other configs.
		  $basicConfigs = \Drupal::config('img_annotator.basic_settings');

		  $promptConfigs = \Drupal::config('img_annotator.prompt_settings');
		  $showAlerts = $promptConfigs->get('prompt');
		  $showAlerts = $showAlerts ? $showAlerts : 0;

		  $promptMsgConfigs = \Drupal::config('img_annotator.prompt_message');
		  $promptMessages = $promptMsgConfigs->get();

		  // Check if required to load annotorious library.
		  $load_annotorious_lib = FALSE;
		  $build['#attached']['drupalSettings']['annoViewOnly'] = FALSE;

      $canCreate = $account->hasPermission('img_annotator create');
      $canCreateOwn = $account->hasPermission('img_annotator own create');
      $canView = $account->hasPermission('img_annotator view');
      $canViewOwn = $account->hasPermission('img_annotator own view');
      $canEdit = $account->hasPermission('img_annotator edit');
      $canEditOwn = $account->hasPermission('img_annotator own edit');

      // Managing flags.
      // User can interact annotorious lib.
      if ($canCreate || $canEdit || $canView || (($canCreateOwn || $canEditOwn || $canViewOwn) && $nodeOwner)) {
        $load_annotorious_lib = TRUE;
      }

		  if ($load_annotorious_lib) {
		    // Adding JS vars.
		    $setting_vars = array(
		        'baseUrl' => $base_url,
		        'nodeId' => $node->id(),
		        'nodeOwner' => $nodeOwner,
		        'showAlerts' => $showAlerts,
		        'promptMsg' => $promptMessages,
		        'canCreate' => $canCreate,
		        'canUpdate' => $canEdit,
		        'canDelete' => $canEdit,
		        'canView' => $canView,
		        'canCreateOwn' => $canCreateOwn,
		        'canUpdateOwn' => $canEditOwn,
		        'canDeleteOwn' => $canEditOwn,
		        'canViewOwn' => $canViewOwn,
		    );

		    $build['#attached']['drupalSettings']['img_annotator'] = $setting_vars;

		    // DO NOT cache the view.
		    $build['#cache']['max-age'] = 0;

		    // Adding Libs with configured theme.
  			$annoTheme = $basicConfigs->get('anno_theme');
  			$annoTheme = $annoTheme ? $annoTheme : 'basic';

  			if ($annoTheme == 'basic') {
  			  $build['#attached']['library'][] = 'img_annotator/annotorious_basic';
  			}
  			else {
  			  $build['#attached']['library'][] = 'img_annotator/annotorious_dark';
  			}

  			// Adding class to image fields.
  			$imgFields = $annoConfigs['img_fields'];
  			$imgFieldsArr = explode(', ', $imgFields);

  			foreach ($imgFieldsArr as $imgField) {
  			  // Multi valued images.
  			  $index = 0;
  			  while (isset($build[$imgField][$index])) {
  			    $build[$imgField][$index]['#item_attributes']['class'][] = 'annotatable';
  			    $build[$imgField][$index]['#item_attributes']['class'][] = 'annoimg_' . $imgField;

  			    $index++;
  			  }
  			}
		  }
		}
	}

}
