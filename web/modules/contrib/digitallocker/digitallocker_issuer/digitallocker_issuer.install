<?php

/**
 * @file
 * Installation instructions.
 */

use Drupal\node\Entity\NodeType;

/**
 * Implements hook_install().
 */
function digitallocker_issuer_install() {
  // Pathauto sets its weight to 1, so set our weight to 2.
  module_set_weight('digitallocker_issuer', 2);
}

/**
 * Implements hook_requirements().
 */
function digitallocker_issuer_requirements($phase) {
   /* @var \Drupal\Core\Config\Config $pathauto_settings */
   /* @var \Drupal\Core\Config\Entity\ThirdPartySettingsInterface $type */
   /* @var \Drupal\node\Entity\Node $node */

  $message = NULL;
  $requirements = [];
  if ($phase <> 'runtime') {
    return $requirements;
  }

  $pathauto_settings = (\Drupal::service('config.factory'))
    ->getEditable('pathauto.settings');

  $lower_case = $pathauto_settings->get('case');
  $replace_period = $pathauto_settings->get('punctuation.period') !== 2;
  $in_ignored = count(array_filter(explode(',', $pathauto_settings->get('ignore_words')), function ($item) {
    return trim($item) == 'in';
  }));

  if ($lower_case or $replace_period or $in_ignored) {
    $message = "Pathauto Settings:<ul><li>Disable 'Character case'</li><li>Remove 'in' from 'Strings to Remove'</li><li>Set Punctuation - 'Period' to 'No action (do not replace)'</li></ul>";
  }

  foreach (NodeType::loadMultiple() as $id => $type) {
    if ($type->getThirdPartySetting('digitallocker_issuer', 'enabled', FALSE)) {
      $piece = NULL;

      if (!$type->getThirdPartySetting('digitallocker_issuer', 'field_aadhaar', FALSE)) {
        $piece .= '<li>Aadhaar field not set.</li>';
      }

      if (!$type->getThirdPartySetting('digitallocker_issuer', 'field_validity', FALSE)) {
        $piece .= '<li>Validity field not set.</li>';
      }

      if (\Drupal::configFactory()
        ->getEditable("pathauto.pattern.$id")
        ->get('pattern') !== '[variables:digitallocker_issuer_issuer_id]-[node:content-type:machine-name]-[random:hash:md5]') {
        $piece .= '<li>URL alias not set.</li>';
      }

      $node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->create(['type' => $id]);
      if (1 != $node->isNewRevision()
        or 0 != $node->status->value
        or 0 != $node->promote->value
        or 0 != $node->sticky->value
      ) {
        $piece .= '<li>Please review the Publishing Options : ✘ Published, ✘ Promoted, ✘ Sticky & ✔ Revision</li>';
      }

      if (!is_null($piece)) {
        $message .= "Content Type $id:<br><ul>$piece</ul>";
      }
    }
  }

  $requirements['digital_locker'] = [
    'title' => t('Digital Locker'),
    'severity' => $message ? REQUIREMENT_ERROR : REQUIREMENT_OK,
    'value' => $message ? t('Configuration issues found.') : t('All configurations OK.'),
    'description' => $message ? t($message) : NULL,
  ];

  return $requirements;
}
