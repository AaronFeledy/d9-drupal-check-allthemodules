<?php

/**
 * @file
 * Code for the Digital Locker Issuer feature.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\digitallocker_issuer\Form\DigitalLockerEntityTypeSettings;
use Drupal\digitallocker_issuer\PushApi;
use Drupal\digitallocker_issuer\Routing\EntityTypeDigitalLockerRouteProvider;

/**
 * Implements hook_entity_type_alter().
 */
function digitallocker_issuer_entity_type_alter(array &$entity_types) {
  $node_type = $entity_types['node_type'];
  $node_type->setLinkTemplate('digitallocker-form', $node_type->getLinkTemplate('edit-form') . '/digitallocker');
  $node_type->setFormClass('digitallocker', DigitalLockerEntityTypeSettings::class);

  $node_type_providers = $node_type->getRouteProviderClasses() ?: [];
  if (empty($node_type_providers['digitallocker'])) {
    $node_type_providers['digitallocker'] = EntityTypeDigitalLockerRouteProvider::class;
    $node_type->setHandlerClass('route_provider', $node_type_providers);
  }
}

/**
 * Implements hook_entity_operation().
 */
function digitallocker_issuer_entity_operation(EntityInterface $entity) {
  $operations = [];
  $type = $entity->getEntityType();
  switch ($type->id()) {
    case 'node_type':
      $operations['digitallocker-issuer'] = [
        'title' => t('Digital Locker Settings'),
        'weight' => 50,
        'url' => Url::fromRoute("entity.{$type->id()}.digitallocker", [$entity->getEntityTypeId() => $entity->id()]),
      ];
      break;

    case 'node':
      $operations['digitallocker-issuer'] = [
        'title' => t('Download Signed PDF'),
        'weight' => 50,
        'url' => Url::fromRoute("digitallocker_issuer.download_pdf", [$entity->getEntityTypeId() => $entity->id()]),
      ];
      break;
  }
  return $operations;
}

/**
 * Implements hook_entity_insert().
 */
function digitallocker_issuer_entity_insert(EntityInterface $entity) {
  PushApi::publishSingleCertificate($entity);
}
