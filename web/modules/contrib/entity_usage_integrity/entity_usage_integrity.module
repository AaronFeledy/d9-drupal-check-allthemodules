<?php

/**
 * @file
 * Protects integrity of references.
 *
 * Protects integrity of references to and from published entities
 * based on entity usage, preventing inaccessible references.
 *
 * The module can work in two modes:
 *  - block mode: Saving entity with broken usage relations is not allowed.
 *    Error messages will be displayed.
 *  - warning mode: Saving entity with broken usage relations is allowed.
 *    Warning messages will be displayed to the user.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\entity_usage_integrity\FormIntegrityValidation\ModerationStateChangeConfirmDialog;
use Drupal\entity_usage_integrity\FormIntegrityValidation\SubmittedEditForm;
use Drupal\entity_usage_integrity\FormIntegrityValidation\SubmittedModerationStateForm;
use Drupal\entity_usage_integrity\FormIntegrityValidation\ViewedDeleteForm;
use Drupal\entity_usage_integrity\FormIntegrityValidation\ViewedEditForm;

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function entity_usage_integrity_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Form alters to check integrity during form display.
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ViewedDeleteForm::class)
    ->formAlter($form, $form_state, $form_id);
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ViewedEditForm::class)
    ->formAlter($form, $form_state, $form_id);

  if (\Drupal::moduleHandler()->moduleExists('content_moderation')) {
    \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(ModerationStateChangeConfirmDialog::class)
      ->formAlter($form, $form_state, $form_id);
  }

  // Form validators to check integrity during form submit.
  $form['#validate'][] = 'entity_usage_integrity_validate';
}

/**
 * Add entity usage integrity validation to the content entity edit forms.
 *
 * @param array &$form
 *   A reference to an associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @internal
 */
function entity_usage_integrity_validate(array &$form, FormStateInterface $form_state) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(SubmittedEditForm::class)
    ->validate($form, $form_state);

  if (\Drupal::moduleHandler()->moduleExists('content_moderation')) {
    \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(SubmittedModerationStateForm::class)
      ->validate($form, $form_state);
  }
}
