{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1134\margr1134\margb1134\margt1134\vieww23980\viewh14880\viewkind0
\deftab709
\pard\pardeftab709\partightenfactor0

\f0\b\fs36 \cf0 Cronpub\

\b0 \
The CronPub module is fundamentally created with one purpose; time-based publication and un-publication of content entities. It also manages the flags \'91sticky\'92 and \'91promote\'92.\
\
The distinctive feature of CronPub, compared to e.g. Scheduler, is that it offers editors a serial date function that makes repeated publishing and unpublishing in any desired time interval a breeze.\
\
This is achieved with relevant PHP iCalendar libraries that manage the full functional range of iCal recurring events (ICAL, RRULE), following the RFC 5545 Internet Calendaring and Scheduling Core Object Specification (http://tools.ietf.org/html/rfc5545#section-3.3.10)\
\
The tool is useful for serial publishing of any sort of recurring events, episodes or content, for example of a series of radio programmes, or a series of news articles or stories or levels of a quiz or a contest, in short anything that should be published in date / time intervals, for example every second Saturday of the month from March 1 to Oktober 1, 2017.\
\

\b Site buildinDocumentation git add
\b0 \
The CronJob module can be used with any fieldable content entity (nodes, terms, custom content entities), as the CronJob functions are added to entities as a field and a widget, in which start and end dates and the recurrence rules (when, for how long and how often) are entered. All operations (e.g. publish/unpublish) are automatically executed on the parent entity (the entity with the CronJob field).\
Because not all custom entities have the same \'91base fields\'92 (status, sticky, promoted to front page), the entity\
type(s) on which the CronJob module is applied should be considered. The functionality described here can only be guaranteed for use with nodes.\
\
A custom content entity may not be published and unpublished automatically, because it may not have a status field and a status value that CronJob can set. The CronJob module provides a submodule, cronpub_published, that adds a \'91status\'92 field type in the field UI, and thus the possibility to make any custom content entity publishable and unpublishable.\
\

\b Development
\b0 \
Providing a serial event function for content entity operations is the core function of the CronJob module. The kind of operation is of secondary importance, as the CronJob module provides a plugin interface, through which any sort of operation may be carried out on content entities (beyond (un)publish, make (not) sticky and (don\'92t) promote to front page). Developing new plugins for the CronJob module is very simple, because the interface only demands two methods, the \'91start-action\'92 and the \'91end-action\'92. These methods define what should happen with an entity at the start and at the end of an event (time range). The file cronpub/src/Plugin/Cronpub/Action/CronpubSticky.php may serve as a template for creating custom plugins. The definition of the plugin in the machine-readable code comment above the PHP class must be adapted. Particularly, a unique ID must be set. Otherwise, it will break. The fields of a custom plugin will be available in the CronJob widget as soon as the plugin is found in a suitable module path (e.g. cool_module\\src\\Plugin\\Cronpub\\Action).}