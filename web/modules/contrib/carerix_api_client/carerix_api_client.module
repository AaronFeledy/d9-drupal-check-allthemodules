<?php

/**
 * @todo Add file documentation.
 */

/**
 * Implements hook_libraries_info().
 */
function carerix_api_client_libraries_info() {
  $libraries = array();

  $libraries['carerix_api_client'] = array(
    'name' => 'Carerix PHP API Client',
    'vendor url' => 'http://development.wiki.carerix.com/cxwiki/doku.php?id=cxrest_api_client#getting_installing',
    'download url' => 'http://pear.carerix.com/',
    'version arguments' => array(
      'file' => 'package.xml',
      'pattern' => '/<api>([0-9a-zA-Z\.-]+)<\/api>/',
      'lines' => 23,
    ),
    'files' => array(
      'php' => array('Carerix_Api_Rest-@version/Carerix/Api/Rest/Loader.php'),
    ),
    'callbacks' => array(
      'post-detect' => array(
        'carerix_api_client_libraries_postdetect_callback',
      ),
    ),
  );

  return $libraries;
}

/**
 * Load the Carerix API Client.
 */
function carerix_api_client_load() {
  // Try to load the library and check if that worked.
  if (($library = libraries_load('carerix_api_client')) && !empty($library['loaded'])) {
    // Get configuration.
    $config = \Drupal::config('carerix_api_client.config');

    // Set include path.
    $path = DRUPAL_ROOT . DIRECTORY_SEPARATOR . $library['library path']
            . DIRECTORY_SEPARATOR . 'Carerix_Api_Rest-' . $library['version'];
    set_include_path(get_include_path() . PATH_SEPARATOR . $path);
    // Autoload classes. This way we don't have to call require_once for each
    // class.
    spl_autoload_register(array('Carerix_Api_Rest_Loader', 'autoload'));

    // Initialize client.
    $client = new Carerix_Api_Rest_Client();
    
    // Initialize client manager.
    $manager = new Carerix_Api_Rest_Manager($client);

    // Auto-discover all built-in entities.
    $manager->autoDiscoverEntities();

    // Set API endpoint.
    $endpoint = $config->get('endpoint');
    $manager->setUrl($endpoint);

    // Set system name.
    $system = $config->get('system');
    $manager->setUsername($system);

    // Set user token.
    $token = $config->get('token');
    $manager->setPassword($token);

    // Set proxy (optional, can be used for HTTP traffic debugging or if your
    // service is behind a firewall)
    // If you don't know what it is just ignore it.
    $proxy = $config->get('proxy');
    if ($proxy) {
      $manager->setProxy($proxy);
    }

    // register entity manager
    Carerix_Api_Rest_Entity::setManager($manager);

    return $client;
  }

  return FALSE;
}

/**
 * Post detect callback for the library.
 */
function carerix_api_client_libraries_postdetect_callback(&$library, $version, $variant) {
  foreach ($library['files'] as &$type) {
    foreach ($type as $file => $properties) {
      $file_replaced = str_replace('@version', $library['version'], $file);
      $type[$file_replaced] = $properties;
      unset($type[$file]);
    }
  }
}
