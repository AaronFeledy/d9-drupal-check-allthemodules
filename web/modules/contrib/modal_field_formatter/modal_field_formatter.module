<?php

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function modal_field_formatter_theme() {
  $theme = [];
  $theme['modal_link'] = [
    'variables' => [
      'url' => NULL,
      'attributes' => [],
      'content' => NULL
    ],
    'file' => 'modal_field_formatter.theme.inc',
  ];
  return $theme;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * @param $summary
 * @param $context
 */
function modal_field_formatter_field_formatter_settings_summary_alter(&$summary, $context) {
  $settings = $context['formatter']->getThirdPartySettings('modal_field_formatter');

  // Bail if no modal field formatter settings found.
  if (!$settings) {
    return;
  }

  if ($settings['use_modal']) {
    $summary[] = [
      '#markup' => t('Opened in modal')
    ];
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * @param \Drupal\Core\Field\FormatterInterface $plugin
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 * @param $view_mode
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function modal_field_formatter_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  // We exclude some types where a modal breaks things thoroughly.
  if (in_array($field_definition->getType(), [])) {
    return;
  }

  if (!$settings = $plugin->getThirdPartySettings('modal_field_formatter')) {
    $settings = [
      'use_modal' => 0,
      'placeholder_type' => 'text',
      'advanced' => [
        'placeholder_text' => '',
        'placeholder_classes' => '',
        'modal_title' => '',
        'modal_width' => '600',
        'modal_class' => '',
      ],
    ];
  }

  $element['use_modal'] = [
    '#type' => 'checkbox',
    '#title' => t('Display this field in a modal'),
    '#default_value' => $settings['use_modal'],
  ];

  $element['placeholder_type'] = [
    '#type' => 'select',
    '#title' => t('Placeholder type'),
    '#options' => [
      'text' => t('Text'),
      'field' => t('Field output')
    ],
    '#default_value' => $settings['placeholder_type'],
    '#states' => [
      'visible' => [
        'input[name$="[third_party_settings][modal_field_formatter][use_modal]"]' => ['checked' => TRUE],
      ],
      'required' => [
        'input[name$="[third_party_settings][modal_field_formatter][use_modal]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $element['placeholder_type_text'] = [
    '#type' => 'details',
    '#title' => t('Text placeholder settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
    '#states' => [
      'visible' => [
        'input[name$="[third_party_settings][modal_field_formatter][use_modal]"]' => ['checked' => TRUE],
        'select[name$="[third_party_settings][modal_field_formatter][placeholder_type]"]' => ['value' => 'text'],
      ],
    ],
  ];

  $element['placeholder_type_text']['placeholder_text'] = [
    '#type' => 'textfield',
    '#title' => t('Text to display instead of the field'),
    '#description' => t('The text will be a link that opens the popup when clicked.'),
    '#default_value' => isset($settings['placeholder_type_text']['placeholder_text']) ? $settings['placeholder_type_text']['placeholder_text'] : NULL,
  ];

  $element['placeholder_type_field'] = [
    '#type' => 'details',
    '#title' => t('Field placeholder settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
    '#states' => [
      'visible' => [
        'select[name$="[third_party_settings][modal_field_formatter][placeholder_type]"]' => ['value' => 'field'],
      ],
    ],
  ];

  $target_bundle = $field_definition->getTargetBundle();
  $bundle = $target_bundle ? $target_bundle : $form['#bundle'];
  $placeholder_field_options = modal_field_formatter_get_placeholder_fields($field_definition->getTargetEntityTypeId(), $bundle, $view_mode, $field_definition->getName());
  $element['placeholder_type_field']['placeholder_field'] = [
    '#type' => 'select',
    '#title' => t('Field'),
    '#default_value' => isset($settings['placeholder_type_field']['placeholder_field']) ? $settings['placeholder_type_field']['placeholder_field'] : NULL,
    '#disabled' => empty($placeholder_field_options),
    '#options' => $placeholder_field_options,
    '#states' => [
      'required' => array(
        'select[name$="[third_party_settings][modal_field_formatter][placeholder_type]"]' => ['value' => 'field'],
      ),
    ],
  ];

  $element['advanced'] = [
    '#type' => 'details',
    '#title' => t('Modal formatter settings'),
    '#open' => FALSE,
    '#tree' => TRUE,
    '#states' => [
      'visible' => [
        'input[name$="[third_party_settings][modal_field_formatter][use_modal]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $element['advanced']['placeholder_classes'] = [
    '#type' => 'textfield',
    '#title' => t('Classes that will be applied to the placeholder.'),
    '#description' => t('Provide class names separated by space and without a dot.'),
    '#default_value' => $settings['advanced']['placeholder_classes'],
  ];

  $element['advanced']['modal_title'] = [
    '#type' => 'textfield',
    '#title' => t('The title of the modal'),
    '#default_value' => $settings['advanced']['modal_title'],
  ];

  $element['advanced']['modal_width'] = [
    '#type' => 'textfield',
    '#title' => t('The width of the modal'),
    '#description' => t('Specify the width using specifications compatible with jquery dialog like "50%" or 500.'),
    '#default_value' => $settings['advanced']['modal_width'],
  ];

  $element['advanced']['modal_class'] = [
    '#type' => 'textfield',
    '#title' => t('A class that gets applied to the modal.'),
    '#default_value' => $settings['advanced']['modal_class'],
  ];

  // We clean up empty field values (courtesy of linked_field module).
  $element['#element_validate'][] = 'modal_field_formatter_form_element_validate';

  return $element;
}

/**
 * @param $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function modal_field_formatter_form_element_validate($element, FormStateInterface $form_state) {
  $parents = $form_state->getTriggeringElement()['#parents'];
  $parents = array_slice($parents, 0, 3);
  $settings = \Drupal\Component\Utility\NestedArray::getValue(
    $form_state->getValues(),
    $parents
  );

  if (!isset($settings['third_party_settings']['modal_field_formatter'])) {
    return;
  }
  // Remove third party settings if not activated.
  if (!isset($settings['third_party_settings']['modal_field_formatter']['use_modal']) || !$settings['third_party_settings']['modal_field_formatter']['use_modal']) {
    unset($settings['third_party_settings']['modal_field_formatter']);
    // Set adjusted settings back into form state.
    $form_state->setValue($parents, $settings);
  }
}

/**
 * Implements hook_entity_display_build_alter().
 *
 * @param $build
 * @param $context
 */
function modal_field_formatter_entity_display_build_alter(&$build, $context) {
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity_display */
  $entity_display = $context['display'];

  foreach (Element::children($build) as $field_name) {
    $component = $entity_display->getComponent($field_name);

    if (isset($component['third_party_settings']['modal_field_formatter'])) {
      $settings = $component['third_party_settings']['modal_field_formatter'];
      if (!$settings['use_modal']) {
        continue;
      }

      /** @var \Drupal\Core\Entity\EntityInterface $entity */
      $entity = $context['entity'];

      // We don't add the link if the field ist empty.
      if ($entity->{$field_name}->isEmpty()) {
        continue;
      }

      // We exchange the field output for an ajax link to
      // this modules field render endpoint.
      $parameters = [
        'entity_type' => $entity->getEntityTypeId(),
        'entity_id' => $entity->id(),
        'field_name' => $field_name,
        'view_mode' => $context['view_mode'],
      ];

      $attributes = new Attribute([
        'class' => explode(' ', $settings['advanced']['placeholder_classes'])
      ]);

      switch($settings['placeholder_type']) {
        case 'text':
          $placeholder = [
            '#markup' => $settings['placeholder_type_text']['placeholder_text']
          ];
          break;

        case 'field':
          $placeholder_field_name = $settings['placeholder_type_field']['placeholder_field'];
          $placeholder = $entity->{$placeholder_field_name}->view($context['view_mode']);
          // We don't want to display the field twice.
          unset($build[$placeholder_field_name]);
          break;

        default:
          $placeholder = [
            '#markup' => t('Open Popup')
          ];
      }

      $build[$field_name][0] = [
        '#theme' => 'modal_link',
        '#url' => Url::fromRoute('modal_field_formatter.field_render', $parameters),
        '#attributes' => $attributes,
        '#content' => $placeholder,
      ];
      $build[$field_name][0]['#attached']['library'][] = 'core/drupal.dialog.ajax';
    }
  }
}

/**
 * @param $entity_type_id
 * @param $bundle_name
 *
 * @return array
 */
function modal_field_formatter_get_placeholder_fields($entity_type_id, $bundle, $view_mode, $component_name = '') {
  $placeholder_field_options = [];

  /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $entity_display */
  if ($entity_display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load($entity_type_id . '.' . $bundle . '.' . $view_mode)) {
    $components = array_filter($entity_display->getComponents(), function($component, $key) use ($component_name) {
      // We filter components without type and components that have modal display enabled.
      if (!isset($component['type']) || $component['type'] == '' || (isset($component['third_party_settings']['modal_field_formatter']['use_modal']) && $component['third_party_settings']['modal_field_formatter']['use_modal'])) {
        return FALSE;
      }
      // We don't want to be able to select the current field.
      if ($key == $component_name) {
        return FALSE;
      }
      return TRUE;
    }, ARRAY_FILTER_USE_BOTH);

    // Collect all field names
    foreach ($components as $component_name => $component) {
      $placeholder_field_options[$component_name] = $component_name;
    }
  }

  return $placeholder_field_options;
}
