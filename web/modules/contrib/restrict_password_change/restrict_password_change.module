<?php

/**
 * @file
 * Contains restrict_password_change.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function restrict_password_change_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the restrict_password_change module.
    case 'help.page.restrict_password_change':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Restrict password change for administer users') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function restrict_password_change_form_user_form_alter(&$form, FormStateInterface $form_state) {
  // Current user.
  $user = \Drupal::currentUser();
  // Account data for edit.
  $account = $form_state->getFormObject()->getEntity();
  // Checking account.
  if ($user->id() != $account->id()) {
    if (!$user->hasPermission('change other users password')) {
      // Password cannot be changed.
      $form['account']['pass']['#access'] = FALSE;
    }
    if (!$user->hasPermission('change other users username')) {
      // Username cannot be changed.
      $form['account']['name']['#access'] = FALSE;
      $form['account']['name_setting'] = $form['account']['name'];
      $form['account']['name_setting']['#access'] = TRUE;
      $form['account']['name_setting']['#disabled'] = TRUE;
    }
    if (!$user->hasPermission('block other users')) {
      // User cannot be blocked.
      $form['account']['status']['#access'] = FALSE;
    }
    if (!$user->hasPermission('change other users email')) {
      // E-mail address cannot be changed.
      $form['account']['mail']['#access'] = FALSE;
      $form['account']['mail_setting'] = $form['account']['mail'];
      $form['account']['mail_setting']['#access'] = TRUE;
      $form['account']['mail_setting']['#disabled'] = TRUE;
    }
    if (!$user->hasPermission('delete other users')) {
      // User cannot be deleted.
      $form['actions']['delete']['#access'] = FALSE;
    }
  }

  // Protect admin user 1.
  if ($user->id() == $account->id()) {
    if (!$user->hasPermission('change own password')) {
      // User can not change own password.
      $form['account']['pass']['#access'] = FALSE;
      $form['account']['current_pass']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_mail_alter().
 */
function restrict_password_change_mail_alter(&$message) {
  // For all reset password emails.
  if ($message['id'] === 'user_password_reset' && $message['key'] === 'password_reset') {
    // Get email and load user by email.
    $user_email = $message['to'];
    $account = user_load_by_mail($user_email);
    // Check if account reset is allowed reset his password.
    if (!$account->hasPermission('reset password by request link')) {
      // If the recipient has not receive reset link password, cancel sending.
      $message['send'] = FALSE;
      $msg = t('This user is not allowed to reset password.');
      drupal_set_message($msg, 'error');
      return;
    }
  }
}
