<?php

use Drupal\commerce_order\Entity\OrderItem;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function commerce_rental_theme() {
  return [
    'commerce_rental_rate' => [
      'variables' => [
        'values' => [],
        'label' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function commerce_rental_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface &$form_state) {
  // make sure we are working with a rental order item type.
  if ($entity_form['#entity'] instanceof OrderItem && $entity_form['#entity']->hasField('rental_quantity')) {
    // add the ajax wrapper to the instance so we can replace its options based on the selected rental variation.
    $entity_form['#prefix'] = '<div id="rental-ajax-wrapper">';
    $entity_form['#suffix'] = '</div>';
    // create ajax event for when the rental variation is selected.
    $entity_form['purchased_entity']['widget'][0]['target_id']['#ajax'] = array(
      'callback' => 'commerce_rental_purchasable_entity_select',
      'event' => 'autocompleteclose',
      'wrapper' => 'rental-ajax-wrapper',
    );
  }
  if ($entity_form['#entity'] instanceof ProductVariation) {
    if (empty($entity_form['price']['widget'][0]['#default_value'])) {
      $entity_form['price']['widget'][0]['#default_value'] = [
        'number' => '0.00',
        'currency_code' => '',
      ];
    }
  }
}

function commerce_rental_purchasable_entity_select(array $entity_form, FormStateInterface &$form_state) {
  return $entity_form['order_items']['widget']['form']['inline_entity_form'];
}
