<?php

/**
 * @file
 * The implemented hooks for the Invoice Agent module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

module_load_include('php', 'invoice_agent', 'invoice_agent.array');
module_load_include('php', 'invoice_agent', 'invoice_agent.data');
module_load_include('php', 'invoice_agent', 'invoice_agent.main');
module_load_include('php', 'invoice_agent', 'invoice_agent.util');

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function invoice_agent_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.invoice_agent':
      $text = file_get_contents(dirname(__FILE__) . "/README.txt");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_cron().
 *
 * Parameters:
 *
 * - boolean $programmatically: If this is true, then called programmatically.
 *   In this case ignores the configuration settings about the cron processing.
 *   When the Drupal calls it at hook_cron() then it will be FALSE.
 *   This switch is required by the maintaner of the module.
 */
function invoice_agent_cron($programmatically = FALSE) {
  try {
    return invoice_agent__cron($programmatically);
  }
  catch (Exception $e) {
    watchdog_exception('invoice_agent', $e);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function invoice_agent_commerce_order_insert(EntityInterface $entity) {
  try {
    invoice_agent__entity_common($entity);
  }
  catch (Exception $e) {
    watchdog_exception('invoice_agent', $e);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function invoice_agent_commerce_order_update(EntityInterface $entity) {
  try {
    invoice_agent__entity_common($entity);
  }
  catch (Exception $e) {
    watchdog_exception('invoice_agent', $e);
  }
}

/**
 * Implements hook_mail().
 */
function invoice_agent_mail($key, &$message, $params) {
  switch ($key) {
    case 'notify_customer':
      $message['body'][] = $params['body'];
      $message['subject'] = $params['subject'];
      $message['from'] = \Drupal::config('system.site')->get('mail');
      if (array_key_exists('attachments', $params)) {
        $message['params']['files'] = $params['attachments'];
      }
      break;
  }
}
