<?php

/**
 * @file
 * Registration Code (Simple) module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function regcode_simple_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.regcode_simple':
      $url = Url::fromRoute('entity.user.admin_form');
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('<em>Registration Code (Simple)</em> -module gives site administrators means to limit registering users to user with a known password ("registration key"). When a registration code ise set, registering users must provide a valid password during the registration along with other normal registration information.') . '</p>';
      $output .= '<h3>' . t('Password types') . '</h3>';
      $output .= '<p>' . t('For the password validation (and complexity) logic these options are available:') . '<p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Plain text') . '</li>';
      $output .= '<li>' . t('Regular expression') . '</li>';
      $output .= '<li>' . t('Salt for username') . '</li>';
      $output .= '<li>' . t('Salt for email') . '</li>';
      $output .= '<li>' . t('Salt for email domain') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('You can configure these options on the <a href=":url">Account settings</a>-page.', [':url' => $url->toString()]) . '</p>';
      $output .= '<h3>' . t('Password behavior') . '</h3>';
      $output .= '<p><strong>' . t('Plain text') . '</strong><br />';
      $output .= t('<em>Administrator</em> may set one or more valid passwords, thus new <em>Registration code</em>s can be added as needed. However, managing huge amount of individual codes may be cumbersome and is also error prone.') . '</p>';
      $output .= '<p><strong>' . t('Regular expression') . '</strong><br />';
      $output .= t('<em>Administrator</em> may set one regular expression and any <em>Registration code</em> matching to this regular expression is valid. This allows more or less infinite amount of passwords to be created, but obviously simple regular expression matches infinite amount of other codes as well. Be careful.') . '</p>';
      $output .= '<p><strong>' . t('Salt for username') . '</strong><br />';
      $output .= t('<em>Administrator</em> may set a salt, that will be used when calculating a hash (see <a href="http://php.net/md5">PHP mkd5() -function</a>) from <em>username</em> + <em>salt</em>. Using this method allows infinite amount of individual registration codes.') . '</p>';
      $output .= '<p><strong>' . t("Salt for user's email") . '</strong><br />';
      $output .= t("<em>Administrator</em> may set a salt, that will be used when calculating a hash (see <a href='http://php.net/md5'>PHP mkd5() -function</a>) from <em>user's email address</em> + <em>salt</em>. Using this method allows infinite amount of individual registration codes.") . '</p>';
      $output .= '<p><strong>' . t("Salt for user's email <em>domain</em>") . '</strong><br />';
      $output .= t('<em>Administrator</em> may set a salt, that will be used when calculating a hash (see <a href="http://php.net/md5">PHP mkd5() -function</a>) from <em>user\'s email address <strong>domain</strong></em> + <em>salt</em>. Using this method allows one password for for example single company email domain - might work as an intranet registration guard without <em>administrators</em> needing to accept all user accounts individually.') . '</p>';
      $output .= '<h3>Warning</h3><p>' . t('Code change has an immediate effect. So if you have provided for example a <em>Salt for user\'s email domain</em>, sent a hash code to users and then change the salt or code type altogether, old codes won\'t work anymore. For individual registration code -tokens <a href="https://www.drupal.org/project/regcode">Registration codes -module</a> may be helpful for example for "personal code" -scenarios.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Edit user account settings form; add Registration code setting field.
 */
function regcode_simple_form_user_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Available options.
  $options = [
    'code_plain_text' => t('Plain text'),
    'code_regex' => t('Regular expression'),
    'code_salt_username' => t('Salt for username'),
    'code_salt_email' => t('Salt for email'),
    'code_salt_email_domain' => t('Salt for email domain'),
  ];

  // Prepare some vars for the form.
  $config = \Drupal::config('regcode_simple.settings');
  $default_type = is_null($config->get('type')) ? 'plain_text' : $config->get('type');
  $default_value = is_null($config->get('code')) ? '' : json_decode($config->get('code'));
  if (is_array($default_value)) {
    $default_value = implode("\n", $default_value);
  }

  // Add 'weight' -property for visible elements if they do not contain it yet.
  $i = 0;
  foreach ($form as $key => $element) {
    if ($key[0] != '#' &&isset($element['#type'])) {
      $matching = ['details', 'container', 'email', 'vertical_tabs'];
      $type = in_array($element['#type'], $matching);
      if ($type && !isset($element['#group']) &&!isset($element['#weight'])) {
        $form[$key]['#weight'] = ++$i;
      }
    }
  }

  $form['regcode_simple'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Registration code'),
    // Put this box right below "Registration and cancellation" -section.
    '#weight' => $form['registration_cancellation']['#weight'] + 0.1,
    '#description' => t('<strong>Registration code</strong> can be set when user\'s can register to the site on their own ("Who can register accounts?" is other than <strong>%key</strong>)', ['%key' => t('Administrators only')]),
  ];
  $form['regcode_simple']['cnf'] = [
    '#type' => 'container',
    // Allow setting this value ONLY if user's can create accounts them selves.
    // Note: This does not hide #prefix, which is the way it should be.
    '#states' => [
      'invisible' => [
        ':input[name="user_register"]' => ['value' => 'admin_only'],
      ],
    ],
  ];
  $form['regcode_simple']['cnf']['regcode_type'] = [
    '#type' => 'radios',
    '#title' => t('Registration code type'),
    '#options' => $options,
    '#default_value' => $default_type,
    '#required' => TRUE,
  ];
  // Fields for the codes.
  $form['regcode_simple']['cnf']['code_plain_text'] = [
    '#type' => 'textarea',
    '#title' => t('Code (%type):', ['%type' => $options['code_plain_text']]),
    '#description' => t('Provide one or more plain text -codes, one per line. Codes may contain any regular characters, including space and special characters like &lt;, &gt;, &amp; etc.<br />NOTE: Empty codes (containing only spaces) are not allowed and spaces in the beginning and in the end of each code are removed.'),
    '#default_value' => $default_type == 'code_plain_text' ? $default_value : '',
    '#states' => [
      'visible' => [
        ':input[name="regcode_type"]' => ['value' => 'code_plain_text'],
      ],
    ],
  ];
  $form['regcode_simple']['cnf']['code_regex'] = [
    '#type' => 'textfield',
    '#title' => t('Code (%type):', ['%type' => $options['code_regex']]),
    '#description' => t('Provide one regular expression, which is used to validate the registration code provided by the user. Do not add ^ or $ (beginnign or end -anchors), these will be added automatically.') .
    '<br />' . t('It is <strong>strongly advised to test your regular expression with sample passwords</strong> before using it. One of several ways to do it is to use <a href="http://regexr.com">RegExr.com</a>.') .
    '<br />' . t('For example: provide regular expression "[a-z]{8,12}". User\'s providing any 8-12 character long password containing only characters <em>a...z</em> passes the validation. Everything with a number, shorter than 8 chars or longer than 12 chars would not be accepted.'),
    '#default_value' => $default_type == 'code_regex' ? $default_value : '',
    '#states' => [
      'visible' => [
        ':input[name="regcode_type"]' => ['value' => 'code_regex'],
      ],
    ],
  ];
  $form['regcode_simple']['cnf']['code_salt_username'] = [
    '#type' => 'textfield',
    '#title' => t('Code (%type):', ['%type' => $options['code_salt_username']]),
    '#description' => t('Provide one string (10 characters or longer) to be used as a <strong>SALT</strong> with registration code.') .
    '<br />' . t('<strong>Registrant</strong> must provide a MD5 hash as registration code.') .
    '<br />' . t('Salt is appended to the <strong>username</strong> and has is calculated from concatenated string.') . ' ' .
    t('Registration code must match the calculated hash.') .
    '<br />' . t('For example: username is "john.doe", SALT is "my-secret-salt", matching registration code is calculated like this:  <br />MD5 ("<em>john.doe</em>my-secret-salt") => <strong>8b1b55e8dd2797ef9f5234d06ad62f75</strong>.') .
    '<br />' . t('Using this method allows infinite amount of individual registration codes.'),
    '#default_value' => $default_type == 'code_salt_username' ? $default_value : '',
    '#states' => [
      'visible' => [
        ':input[name="regcode_type"]' => ['value' => 'code_salt_username'],
      ],
    ],
  ];
  $form['regcode_simple']['cnf']['code_salt_email'] = [
    '#type' => 'textfield',
    '#title' => t('Code (%type):', ['%type' => $options['code_salt_email']]),
    '#description' => t('Provide one string (10 characters or longer) to be used as a <strong>SALT</strong> with registration code.') .
    '<br />' . t('Salt is appended to the <strong>user email</strong> and has is calculated from concatenated string.') . ' ' .
    t('Registration code must match the calculated hash.') .
    '<br />' . t('For example: user\'s email is "john.doe@example.com", SALT is "my-secret-salt", matching registration code is calculated like this: <br />MD5 ("<em>john.doe@example.com</em>my-secret-salt") => <strong>bbc66c37bcb51cc1e71961e823409cdf</strong>.') .
    '<br />' . t('Using this method allows infinite amount of individual registration codes.'),
    '#default_value' => $default_type == 'code_salt_email' ? $default_value : '',
    '#states' => [
      'visible' => [
        ':input[name="regcode_type"]' => ['value' => 'code_salt_email'],
      ],
    ],
  ];
  $form['regcode_simple']['cnf']['code_salt_email_domain'] = [
    '#type' => 'textfield',
    '#title' => t('Code (%type):', ['%type' => $options['code_salt_email_domain']]),
    '#description' => t('Provide one string (10 characters or longer) to be used as a <strong>SALT</strong> with registration code.') .
    '<br />' . t('Salt is appended to the <strong>user email domain</strong> and has is calculated from concatenated string') . ' ' .
    t('Registration code must match the calculated hash.') .
    '<br />' . t('For example: user\'s email is "john.doe@example.com", SALT is "my-secret-salt", matching registration code is calculated like this: <br />MD5 ("<em>example.com</em>my-secret-salt") => <strong>7afbf7dfd2a09169e567c39e7b53fb13</strong>.') .
    '<br />' . t('Using this method allows one password for for example single company email domain.'),
    '#default_value' => $default_type == 'code_salt_email_domain' ? $default_value : '',
    '#states' => [
      'visible' => [
        ':input[name="regcode_type"]' => ['value' => 'code_salt_email_domain'],
      ],
    ],
  ];
  // // Add also validation and submit handlers.
  $form['#validate'][] = 'regcode_simple_form_user_admin_settings_validate';
  $form['#submit'][] = 'regcode_simple_form_user_admin_settings_submit';
}

/**
 * Custom form validator for user_admin_settings -form.
 *
 * @see regcode_simple_form_user_admin_settings_alter()
 */
function regcode_simple_form_user_admin_settings_validate(&$form, FormStateInterface $form_state) {

  // Available options.
  $options = [
    'code_plain_text' => t('Plain text'),
    'code_regex' => t('Regular expression'),
    'code_salt_username' => t('Salt for username'),
    'code_salt_email' => t('Salt for email'),
    'code_salt_email_domain' => t('Salt for email domain'),
  ];

  $regcode_type = $form_state->getValue('regcode_type', NULL);

  if (empty($form_state->getValue($regcode_type, NULL))) {
    $form_state->setErrorByName($regcode_type, t('<em>Code (!name)</em> can not be left empty.', ['!name' => $options[$regcode_type]]));
  }
  else {
    // Check requirements per selected code type.
    switch ($regcode_type) {
      case 'code_plain_text':
        // FormStateInterface::getValue() seems to add one extra space before .
        // newline. trim() value to get rid of newlines in the beginning and
        // end of the textarea value.
        $code_lines = explode("\n", trim($form_state->getValue('code_plain_text', '')));
        foreach ($code_lines as $line) {
          if (empty(trim($line))) {
            $form_state->setErrorByName($regcode_type, t('Error in <em>Code (!name)</em>. Make sure you do not have empty lines.'));
          }
        }
        break;

      case 'code_regex':
        $regex = $form_state->getValue('code_regex', NULL);
        // Suppress errors with '@...' since this is just a validation test.
        if (@preg_match('/^' . $regex . '$/', '') === FALSE) {
          $form_state->setErrorByName($regcode_type, t('Regular expression appears to be invalid, please correct it. One of several ways to do it is to use <a href="http://regexr.com">RegExr.com</a>.'));
        }
        break;

      case 'code_salt_username':
        $salt = $form_state->getValue('code_salt_username', NULL);
        if (strlen(trim($salt)) < 10) {
          $form_state->setErrorByName($regcode_type, t('<em>Code (@type)</em> must be at least 10 characters.', [
            '@type' => $options[$regcode_type],
          ]));
        }
        break;

      case 'code_salt_email':
        $salt = $form_state->getValue('code_salt_email', NULL);
        if (strlen(trim($salt)) < 10) {
          $form_state->setErrorByName($regcode_type, t('<em>Code (@type)</em> must be at least 10 characters.', [
            '@type' => $options[$regcode_type],
          ]));
        }
        break;

      case 'code_salt_email_domain':
        $salt = $form_state->getValue('code_salt_email_domain', NULL);
        if (strlen(trim($salt)) < 10) {
          $form_state->setErrorByName($regcode_type, t('<em>Code (@type)</em> must be at least 10 characters.', [
            '@type' => $options[$regcode_type],
          ]));
        }
        break;

      default:
        $form_state->setErrorByName('regcode_type', t('Invalid <em>Registration code type</em> selected.'));
        break;
    }
  }
}

/**
 * Custom form submit handler for user_admin_settings -form.
 *
 * @see regcode_simple_form_user_admin_settings_alter()
 */
function regcode_simple_form_user_admin_settings_submit(&$form, FormStateInterface $form_state) {

  $regcode_type = $form_state->getValue('regcode_type', NULL);

  // Process code per selected code type.
  switch ($regcode_type) {
    case 'code_plain_text':
      // FormStateInterface::getValue() seems to add one extra space before
      // newline. trim() value to get rid of newlines in the beginning and
      // end of the textarea value.
      $code = explode("\n", trim($form_state->getValue('code_plain_text', '')));
      foreach ($code as $i => $line) {
        $code[$i] = trim($line);
      }
      break;

    // This covers regex and all salt -codes.
    default:
      $code = $form_state->getValue($regcode_type, NULL);
      break;
  }

  // json_encode(), because 'code' is a text, value may be an array.
  \Drupal::configFactory()->getEditable('regcode_simple.settings')
    ->set('type', $regcode_type)
    ->set('code', json_encode($code))
    ->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Edit user registration form; add Registration code -field IF it is set.
 */
function regcode_simple_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $account = \Drupal::currentUser();
  // If registration code is set add field to User registration form.
  if (!$account->hasPermission('administer users') && \Drupal::config('regcode_simple.settings')->get('type')) {
    $form['regcode_simple'] = [
      '#type' => 'textfield',
      '#title' => t('Registration code'),
      '#description' => t('Use the provided code to register to this site.'),
      '#required' => TRUE,
    ];
    // Add also validation handler.
    $form['#validate'][] = 'regcode_simple_form_user_register_form_validate';
  }
}

/**
 * Validation handler for user_register_form.
 *
 * @see regcode_simple_form_user_register_form_alter()
 */
function regcode_simple_form_user_register_form_validate($form, FormStateInterface $form_state) {
  $regcode_code = json_decode(\Drupal::config('regcode_simple.settings')->get('code'));
  $code_provided = $form_state->getValue('regcode_simple');

  switch (\Drupal::config('regcode_simple.settings')->get('type')) {
    case 'code_plain_text':
      if (!in_array($code_provided, $regcode_code)) {
        $form_state->setErrorByName('regcode_simple', t('Registration code is not valid.'));
      }
      break;

    case 'code_regex':
      $regex = '/^' . $regcode_code . '$/';
      if (!preg_match($regex, $code_provided)) {
        $form_state->setErrorByName('regcode_simple', t('Registration code is not valid.'));
      }
      break;

    case 'code_salt_username':
      $user_name = $form_state->getValue('name');
      $hashed = md5($user_name . $regcode_code);
      if ($hashed != $code_provided) {
        $form_state->setErrorByName('regcode_simple', t('Registration code is not valid.'));
      }
      break;

    case 'code_salt_email':
      $user_email = $form_state->getValue('mail');
      $hashed = md5($user_email . $regcode_code);
      if ($hashed != $code_provided) {
        $form_state->setErrorByName('regcode_simple', t('Registration code is not valid.'));
      }
      break;

    case 'code_salt_email_domain':
      $user_email = $form_state->getValue('mail');
      $domain = substr($user_email, strpos($user_email, '@') + 1);
      $hashed = md5($domain . $regcode_code);
      if ($hashed != $code_provided) {
        $form_state->setErrorByName('regcode_simple', t('Registration code is not valid.'));
      }
      break;
  }
}
