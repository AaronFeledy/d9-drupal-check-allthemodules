<?php

/**
 * @file
 * Provide more granular administrative access to views based on tags.
 */

use Drupal\views_tag_access\ViewsTagAccessHelper;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_module_implements_alter().
 */
function views_tag_access_module_implements_alter(&$implementations, $hook) {
  // Pull our implementation of hook_entity_type_build() to the end so it runs
  // after views_ui_entity_type_build().
  if ($hook == 'entity_type_build' && isset($implementations['views_tag_access'])) {
    $group = $implementations['views_tag_access'];
    unset($implementations['views_tag_access']);
    $implementations['views_tag_access'] = $group;
  }
}

/**
 * Implements hook_entity_type_build().
 */
function views_tag_access_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['view']
    ->setListBuilderClass('Drupal\views_tag_access\ViewListBuilder');
  $cache_contexts = $entity_types['view']->getListCacheContexts();
  $cache_contexts[] = 'user.permissions';
  $entity_types['view']->set('list_cache_contexts', $cache_contexts);
}

/**
 * Implements hook_entity_access().
 *
 * We define additional tag based permissions so we grant access based on them.
 */
function views_tag_access_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() == 'view') {
    $tag_helper = ViewsTagAccessHelper::create(\Drupal::getContainer(), $entity);
    return $tag_helper->access($operation, $account);
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_create_access().
 *
 * We define the 'create views' permission so we grant access based on it.
 */
function views_tag_access_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if ($context['entity_type_id'] == 'view') {
    return AccessResult::allowedIf($account->hasPermission('create views'));
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_insert().
 */
function views_tag_access_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'view') {
    // We want to keep track of which views this user has created and preserve
    // access to them for the remainder of their session.
    /* @var \Drupal\user\PrivateTempStore $store */
    $store = Drupal::service('user.private_tempstore')->get('views_tag_access');
    $views = $store->get('created_views');
    $views[] = $entity->id();
    $store->set('created_views', $views);
  }
}
