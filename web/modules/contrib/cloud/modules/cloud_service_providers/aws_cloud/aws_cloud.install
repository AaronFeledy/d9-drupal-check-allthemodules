<?php

/**
 * @file
 * Install and updates for aws_cloud.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Add the termination_timestamp field to aws_cloud_instance.
 *
 * Backup database before running this update.
 * This applies updates to the entity tables.
 */
function aws_cloud_update_8101() {
  aws_cloud_update_entity_definitions();
}

/**
 * Set timestamp values with 0 to NULL.
 *
 * This will make the Timestamp widget display blank instead of
 * the current date.
 */
function aws_cloud_update_8102() {
  \Drupal::database()
    ->query("UPDATE {aws_cloud_instance} set termination_timestamp = NULL where termination_timestamp = 0")
    ->execute();
}

/**
 * Add notification configurations.
 */
function aws_cloud_update_8103() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_notification_frequency', 86400);
  $config->set('aws_cloud_notification', 0);
  $config->set('aws_cloud_notification_criteria', 30);
  $config->set('aws_cloud_notification_subject', '[aws_cloud_instance:name] has been running for since [aws_cloud_instance:launch_time]');
  $config->set('aws_cloud_notification_msg', "Your instance [aws_cloud_instance:name] has been running since [aws_cloud_instance:launch_time].  Please review if the instance still needs to be running.");
  $config->save();
}

/**
 * Add automatically terminating instance configurations.
 */
function aws_cloud_update_8104() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_instance_terminate', FALSE);  $config->save();
}

/**
 * Add field_vpc and field_subnet.
 */
function aws_cloud_update_8105() {
  aws_cloud_add_fields('cloud_server_template', 'aws_cloud', ['field_vpc', 'field_subnet']);
}

/**
 * Add support for AWS Instance Scheduler.
 *
 * This update runs entity db update.
 * Backup database before running this update.
 */
function aws_cloud_update_8106() {
  aws_cloud_update_entity_definitions();

  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_scheduler_tag', 'Schedule');
  $config->save();
}

/**
 * Add schedule field to aws_cloud server template implementation.
 */
function aws_cloud_update_8107() {
  aws_cloud_add_fields('cloud_server_template', 'aws_cloud', 'field_schedule');
}

/**
 * Add snapshot_name to entity volume.
 */
function aws_cloud_update_8108() {
  aws_cloud_update_entity_definitions();
}

/**
 * Add a link to EBS snapshot detail page for field name in snapshot list page.
 */
function aws_cloud_update_8109() {
  $config_factory = \Drupal::configFactory();
  $view = $config_factory->getEditable('views.view.aws_snapshot');
  $view->set('display.default.display_options.fields.name.settings.link_to_entity', TRUE);
  $view->save(TRUE);
}

/**
 * Make following fields required.
 *
 * Field_min_count, field_availability_zone, field_vpc, field_subnet,
 * field_security_group, field_ssh_key.
 *
 * Change label of field_network.
 */
function aws_cloud_update_8110() {
  $field_names = [
    'field_min_count',
    'field_availability_zone',
    'field_vpc',
    'field_subnet',
    'field_security_group',
    'field_ssh_key',
  ];
  $config_factory = \Drupal::configFactory();

  foreach ($field_names as $field_name) {
    $field = $config_factory->getEditable("field.field.cloud_server_template.aws_cloud.$field_name");
    $field->set('required', TRUE);
    $field->save(TRUE);
  }

  $field = $config_factory->getEditable("field.field.cloud_server_template.aws_cloud.field_network");
  $field->set('label', t('Network Interface'));
  $field->save(TRUE);
}

/**
 * Delete owner from entity network interface.
 */
function aws_cloud_update_8111() {
  aws_cloud_update_entity_definitions();
}

/**
 * Add IP Permissions field to aws_cloud_security_group.
 *
 * This update runs entity db update. Backup database before
 * running this update.
 */
function aws_cloud_update_8112() {
  aws_cloud_update_entity_definitions();
}

/**
 * Delete Eucalyptus from field_cloud_type.
 */
function aws_cloud_update_8113() {
  $config_factory = \Drupal::configFactory();
  $field = $config_factory->getEditable("field.storage.cloud_config.field_cloud_type");
  $allowed_values = $field->get('settings.allowed_values');
  $new_allowed_values = [];
  foreach ($allowed_values as $allowed_value) {
    if ($allowed_value['value'] == 'eucalyptus') {
      continue;
    }

    $new_allowed_values[] = $allowed_value;
  }
  $field->set('settings.allowed_values', $new_allowed_values);
  $field->save(TRUE);
}

/**
 * Clean up the aws_cloud_instance_types configuration field.
 *
 * The instance_types are now being pulled from an EC2 pricing endpoint.
 */
function aws_cloud_update_8114() {
  $config = \Drupal::configFactory()->getEditable('aws_cloud.settings');
  $config->clear('aws_cloud_instance_types')->save();
}

/**
 * Add Tags field to aws_cloud_instance and update instances.
 */
function aws_cloud_update_8115() {
  aws_cloud_update_entity_definitions();

  /* @var \Drupal\aws_cloud\Service\AwsEc2ServiceInterface $aws_ec2_service */
  $aws_ec2_service = \Drupal::service('aws_cloud.ec2');
  $entities = \Drupal::service('plugin.manager.cloud_config_plugin')->loadConfigEntities('aws_ec2');

  foreach ($entities as $entity) {
    /* @var \Drupal\cloud\Entity\CloudConfig $entity */
    $aws_ec2_service->setCloudContext($entity->getCloudContext());

    $aws_ec2_service->updateInstances();
  }
}

/**
 * Update allowed values and allowed values function of the following fields.
 *
 * The fields are: field_api_endpoint_uri, field_image_upload_url and
 * field_region.
 */
function aws_cloud_update_8116() {
  $field_config_names = [
    'field.storage.cloud_config.field_api_endpoint_uri',
    'field.storage.cloud_config.field_image_upload_url',
    'field.storage.cloud_config.field_region',
  ];

  $config_path = drupal_get_path('module', 'aws_cloud') . '/config/install';
  $source = new FileStorage($config_path);
  $config_factory = \Drupal::configFactory();
  foreach ($field_config_names as $field_config_name) {

    // Read allowed values from the config file.
    $field_config = $source->read($field_config_name);
    $allowed_values = $field_config['settings']['allowed_values'];
    $allowed_values_function = $field_config['settings']['allowed_values_function'];

    // Update allowed values.
    $field = $config_factory->getEditable($field_config_name);
    $field->set('settings.allowed_values', $allowed_values);
    $field->set('settings.allowed_values_function', $allowed_values_function);
    $field->save(TRUE);
  }
}

/**
 * Add field_termination_protection to aws_cloud server template implementation.
 */
function aws_cloud_update_8117() {
  aws_cloud_add_fields('cloud_server_template', 'aws_cloud', 'field_termination_protection');
}

/**
 * Add field_iam_role to aws_cloud server template implementation.
 */
function aws_cloud_update_8118() {
  aws_cloud_add_fields('cloud_server_template', 'aws_cloud', 'field_iam_role');
}

/**
 * Add Secondary Association ID field to Network Interfaces.
 *
 * Update Elastic IP views title.
 */
function aws_cloud_update_8119() {
  aws_cloud_update_entity_definitions();

  $files = [
    'views.view.aws_elastic_ip.yml',
  ];
  cloud_update_yml_definitions($files, 'aws_cloud');
}

/**
 * Add configuration item aws_cloud_view_refresh_interval.
 */
function aws_cloud_update_8120() {
  aws_cloud_update_entity_definitions();

  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_view_refresh_interval', 10);
  $config->save();
}

/**
 * Update display settings of field_instance_type.
 *
 * Change the label setting from above to inline
 * and change type setting from list_default to list_key.
 */
function aws_cloud_update_8121() {
  $config_factory = \Drupal::configFactory();
  $template = $config_factory->getEditable('core.entity_view_display.cloud_server_template.aws_cloud.default');
  $template->set('content.field_instance_type.label', 'inline');
  $template->set('content.field_instance_type.type', 'list_key');
  $template->save(TRUE);
}

/**
 * Update cloud_config entities and write their credentials to an ini file.
 */
function aws_cloud_update_8122() {
  // Add new fields.
  aws_cloud_add_fields(
    'cloud_config',
    'aws_ec2',
    [
      'field_assume_role',
      'field_iam_role',
      'field_use_instance_credentials',
    ]
  );

  // Update description on access key, secret key and user id.
  $config_factory = \Drupal::configFactory();

  $field = $config_factory->getEditable("field.field.cloud_config.aws_ec2.field_secret_key");
  $field->set('label', 'Secret Access Key');
  $field->set('description', "e.g. 123ABC/defGHIjkl34+LMNopq567RSTuvwxYz89Z 16-32 Characters.  If <em>Assume Role</em> is selected, enter the secret key the child user.");
  $field->set('required', FALSE);
  $field->save(TRUE);

  $field = $config_factory->getEditable("field.field.cloud_config.aws_ec2.field_access_key");
  $field->set('label', 'Access Key Id');
  $field->set('description', "16-32 Characters, e.g. 12ABCDEFGHIJKVWXYZ89.  If <em>Assume Role</em> is selected, enter the access key of the child user.");
  $field->set('required', FALSE);
  $field->save(TRUE);

  // Update any existing entities.
  $entities = \Drupal::service('plugin.manager.cloud_config_plugin')->loadConfigEntities('aws_ec2');
  foreach ($entities as $entity) {
    // The presave hook takes care of writing the credential file.
    $entity->save();
  }
}

/**
 * Update fields due to refactoring.
 *
 * 1. Migrate field_user_id to field_account_id.
 * 2. Migrate field owner of following entity type to account_id,
 *   Instance,
 *   NetworkInterface,
 *   Snapshot,
 *   Image.
 */
function aws_cloud_update_8123() {
  // Add field_account_id.
  aws_cloud_add_fields('cloud_config', 'aws_ec2', 'field_account_id');
  drupal_flush_all_caches();

  // Copy value from field_user_id to field_account_id.
  $config_entities = \Drupal::service('plugin.manager.cloud_config_plugin')->loadConfigEntities('aws_ec2');
  foreach ($config_entities as $config_entity) {
    $config_entity->set('field_account_id', $config_entity->field_user_id->value);
    $config_entity->save();
  }

  // Delete field_user_id.
  aws_cloud_delete_fields('cloud_config', 'aws_ec2', 'field_user_id');

  // Update fields.
  aws_cloud_update_entity_definitions();

  // Update entities of Instance, NetworkInterface, Snapshot, Image.
  $aws_ec2_service = \Drupal::service('aws_cloud.ec2');
  foreach ($config_entities as $config_entity) {
    $aws_ec2_service->setCloudContext($config_entity->getCloudContext());

    $aws_ec2_service->updateInstances();
    $aws_ec2_service->updateNetworkInterfaces();
    $aws_ec2_service->updateSnapshots();

    $account_id = $config_entity->get('field_account_id')->value;
    $aws_ec2_service->updateImages(['Owners' => [$account_id]], TRUE);
  }
}

/**
 * Change label of fields for cloud server template to inline.
 */
function aws_cloud_update_8124() {
  $config_factory = \Drupal::configFactory();
  $template = $config_factory->getEditable(
    'core.entity_view_display.cloud_server_template.aws_cloud.default'
  );

  $field_names = [
    'field_availability_zone',
    'field_image_id',
    'field_network',
    'field_security_group',
    'field_ssh_key',
    'field_subnet',
    'field_vpc',
  ];
  foreach ($field_names as $field_name) {
    $template->set("content.${field_name}.label", 'inline');
  }
  $template->save(TRUE);
}

/**
 * Update EBS snapshot header configuration.
 */
function aws_cloud_update_8125() {
  $files = [
    'views.view.aws_snapshot.yml',
    'views.view.aws_instances.yml',
    'views.view.aws_network_interfaces.yml',
    'views.view.aws_volume.yml',
  ];
  cloud_update_yml_definitions($files, 'aws_cloud');
}

/**
 * Update following views pagination.
 *
 * EC2 Instances, Images, Security Groups, Elastic IPs (EIP), Elastic Network
 * Interfaces (ENI), Key Pairs, EBS Volumes, EBS Snapshots views.
 *
 * Also add table header to Key Pairs view.
 */
function aws_cloud_update_8126() {
  $files = [
    'views.view.aws_cloud_key_pairs.yml',
    'views.view.aws_elastic_ip.yml',
    'views.view.aws_images.yml',
    'views.view.aws_instances.yml',
    'views.view.aws_network_interfaces.yml',
    'views.view.aws_security_group.yml',
    'views.view.aws_snapshot.yml',
    'views.view.aws_volume.yml',
  ];
  cloud_update_yml_definitions($files, 'aws_cloud');
}

/**
 * Add field_tags field to cloud server template of aws_cloud.
 */
function aws_cloud_update_8127() {
  aws_cloud_add_fields('cloud_server_template', 'aws_cloud', 'field_tags');
}

/**
 * Add column volume_id to EBS volumes view.
 */
function aws_cloud_update_8128() {
  $files = ['views.view.aws_volume.yml'];
  cloud_update_yml_definitions($files, 'aws_cloud');
}

/**
 * Update fields.
 *
 * 1. Update elastic network interface field for EC2 instances.
 * 2. Update image entity visibility field to boolean.
 * 3. Add cost to EC2 instance entity and instance list.
 * 4. Add created column to image and EBS snapshot list.
 * 5. Update EC2 instance entity launch_time field to timestamp.
 */
function aws_cloud_update_8129() {
  $db = \Drupal::database();

  // Clean out the network_interfaces column before updating changing the
  // column type.
  if ($db->schema()->fieldExists('aws_cloud_instance', 'network_interfaces')) {
    $db->update('aws_cloud_instance')
      ->fields(['network_interfaces' => NULL])
      ->execute();
  }

  // Clean out the launch_time column before updating changing the
  // column type.
  if ($db->schema()->fieldExists('aws_cloud_instance', 'launch_time')) {
    $db->update('aws_cloud_instance')
      ->fields(['launch_time' => NULL])
      ->execute();
  }

  aws_cloud_update_entity_definitions();

  // Update views.
  $files = [
    'views.view.aws_instances.yml',
    'views.view.aws_images.yml',
    'views.view.aws_snapshot.yml',
  ];
  cloud_update_yml_definitions($files, 'aws_cloud');

  // Update EC2 instances and EBS snapshots.
  $cloud_configs = \Drupal::service('plugin.manager.cloud_config_plugin')->loadConfigEntities('aws_ec2');
  foreach ($cloud_configs as $cloud_config) {
    $aws_ec2_service = \Drupal::service('aws_cloud.ec2');
    $aws_ec2_service->setCloudContext($cloud_config->getCloudContext());
    $aws_ec2_service->updateInstances();
    $aws_ec2_service->updateSnapshots();
  }
}

/**
 * Update setting of attachment_information in aws_volume view.
 */
function aws_cloud_update_8130() {
  $files = ['views.view.aws_volume.yml'];
  cloud_update_yml_definitions($files, 'aws_cloud');
}

/**
 * Change the field name of user_id to uid.
 */
function aws_cloud_update_8131() {
  $db = \Drupal::database();

  $tables = [
    'aws_cloud_elastic_ip',
    'aws_cloud_image',
    'aws_cloud_instance',
    'aws_cloud_key_pair',
    'aws_cloud_network_interface',
    'aws_cloud_security_group',
    'aws_cloud_snapshot',
    'aws_cloud_volume',
  ];
  $old_data = [];
  foreach ($tables as $table) {
    $old_data[$table] = [];
    if ($db->schema()->fieldExists($table, 'user_id')) {
      $result = $db->select($table, 't')
        ->fields('t', ['id', 'user_id'])
        ->execute()
        ->fetchAll();
      foreach ($result as $row) {
        $old_data[$table][] = $row;
      }

      $db->update($table)
        ->fields(['user_id' => NULL])
        ->execute();
    }
  }

  aws_cloud_update_entity_definitions();

  foreach ($tables as $table) {
    foreach ($old_data[$table] as $row) {
      $db->update($table)
        ->fields(['uid' => $row->user_id])
        ->condition('id', $row->id)
        ->execute();
    }
  }
}

/**
 * Add a configuration item and a field.
 *
 * Add configuration item google_credential_file_path to aws_cloud.settings,
 * and Add field field_google_spreadsheet_pricing_url to cloud_config.
 */
function aws_cloud_update_8132() {
  aws_cloud_update_entity_definitions();

  // Update value of google_credential_file_path.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('google_credential_file_path', aws_cloud_google_credential_file_default_path());
  $config->save();

  // Add field_google_spreadsheet_pricing_url.
  aws_cloud_add_fields('cloud_config', 'aws_ec2', 'field_spreadsheet_pricing_url');
}

/**
 * Set default pager options for views.
 */
function aws_cloud_update_8133() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_view_items_per_page', 50);
  $config->set('aws_cloud_view_expose_items_per_page', TRUE);
  $config->save();

  $views = [
    'views.view.aws_cloud_key_pairs',
    'views.view.aws_elastic_ip',
    'views.view.aws_images',
    'views.view.aws_instances',
    'views.view.aws_network_interfaces',
    'views.view.aws_security_group',
    'views.view.aws_snapshot',
    'views.view.aws_volume',
  ];

  $items_per_page = aws_cloud_get_views_items_options();
  $options = [
    'display.default.display_options.pager.options.items_per_page' => 50,
    'display.default.display_options.pager.options.expose.items_per_page' => TRUE,
    'display.default.display_options.pager.options.expose.items_per_page_options' => implode(',', $items_per_page),
    'display.default.display_options.pager.options.expose.items_per_page_options_all' => TRUE,
  ];

  foreach ($views as $view_name) {
    aws_cloud_update_views_configuration($view_name, $options);
  }
}

/**
 * Add unused EBS volume configurations.
 *
 * Update EBS volume views configuration.
 */
function aws_cloud_update_8134() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_unused_volume_criteria', 60);
  $config->set('aws_cloud_volume_notification_subject', 'Unused EBS volumes');
  $config->set('aws_cloud_volume_notification_msg', 'The following EBS volumes are not in use.  Please review them.');
  $config->set('aws_cloud_volume_notification_frequency', 604800);
  $config->set('aws_cloud_volume_notification_time', '09:00:00');
  $config->set('aws_cloud_volume_notification_hour', '09');
  $config->set('aws_cloud_volume_notification_minutes', '00');
  $config->save();

  cloud_update_yml_definitions(['views.view.aws_volume.yml'], 'aws_cloud');
}

/**
 * Update field instance_id in elastic ip views configurations.
 */
function aws_cloud_update_8135() {
  cloud_update_yml_definitions(['views.view.aws_elastic_ip.yml'], 'aws_cloud');
}

/**
 * Update field_account_id and field_access_key definitions.
 */
function aws_cloud_update_8136() {
  cloud_update_yml_definitions(
    [
      'field.field.cloud_config.aws_ec2.field_account_id.yml',
      'field.field.cloud_config.aws_ec2.field_access_key.yml',
    ],
    'aws_cloud'
  );
}

/**
 * Add all_aws_cloud_instances view.
 */
function aws_cloud_update_8137() {
  cloud_update_yml_definitions(['views.view.all_aws_cloud_instances.yml'], 'aws_cloud');
}

/**
 * Add instance notificaiton configurations.
 */
function aws_cloud_update_8138() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_notify_owner', 0);
  $config->set('aws_cloud_instance_notification_time', '09:00:00');
  $config->set('aws_cloud_instance_notification_hour', '09');
  $config->set('aws_cloud_instance_notification_minutes', '00');
  $config->set('aws_cloud_notification_msg', "The following EC2 instance is running for a long time. Please review it.\n\n--------------------------------\nInstance name: [aws_cloud_instance:name]\nInstance url: [aws_cloud_instance:instance_link]\nRunning since: [aws_cloud_instance:launch_time].\n--------------------------------");
  $config->save();
}

/**
 * Make table headers always visible at the top of the page.
 */
function aws_cloud_update_8139() {
  $views = [
    'views.view.aws_cloud_key_pairs',
    'views.view.aws_elastic_ip',
    'views.view.aws_images',
    'views.view.aws_instances',
    'views.view.aws_network_interfaces',
    'views.view.aws_security_group',
    'views.view.aws_snapshot',
    'views.view.aws_volume',
    'views.view.all_aws_cloud_instances',
  ];

  $options = [
    'display.default.display_options.style.options.sticky' => TRUE,
    'display.page_1.display_options.style.options.sticky' => TRUE,
  ];

  foreach ($views as $view_name) {
    aws_cloud_update_views_configuration($view_name, $options);
  }
}

/**
 * Add cost management configurations.
 */
function aws_cloud_update_8140() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_instance_type_prices', TRUE);
  $config->set('aws_cloud_instance_type_prices_spreadsheet', TRUE);
  $config->set('aws_cloud_instance_type_cost', TRUE);
  $config->set('aws_cloud_instance_type_cost_list', TRUE);
  $config->set('aws_cloud_instance_list_cost_column', TRUE);
  $config->save();
}

/**
 * Update field_user_data in cloud_server_template entity view.
 */
function aws_cloud_update_8141() {
  $files = [
    'core.entity_view_display.cloud_server_template.aws_cloud.default.yml',
  ];
  cloud_update_yml_definitions($files, 'aws_cloud');

}

/**
 * Update EC2 instance, EBS volume and snapshot notification configuration.
 */
function aws_cloud_update_8142() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('aws_cloud.settings');
  $config->set('aws_cloud_notification_subject', 'Long running EC2 instances');
  $config->set('aws_cloud_notification_msg', "The following EC2 instances have been running for a long time. Please review them. \n\n[aws_cloud_instance_email:instances] \n\nSent from [site:url]");
  $config->set('aws_cloud_instance_notification_instance_info', "--------------------------------\nInstance name: [aws_cloud_instance:name]\nInstance url: [aws_cloud_instance:instance_link]\nRunning since: [aws_cloud_instance:launch_time].\n--------------------------------");

  $config->set('aws_cloud_volume_notification_subject', 'Unused EBS volumes');
  $config->set('aws_cloud_volume_notification_msg', "The following EBS volumes are not in use. Please review them. \n\n[aws_cloud_volume_email:volumes] \n\nSent from [site:url]");
  $config->set('aws_cloud_volume_notification_volume_info', "--------------------------------\nVolume name: [aws_cloud_volume:name]\nVolume url: [aws_cloud_volume:volume_link]\nUnused since: [aws_cloud_volume:created]\n--------------------------------");

  $config->set('aws_cloud_snapshot_notify_owner', 0);
  $config->set('aws_cloud_snapshot_notification_subject', 'Unused EBS snapshots');
  $config->set('aws_cloud_snapshot_notification_msg', "The following EBS snapshots are unused and not associated with an EBS volume. Please review them. \n\n[aws_cloud_snapshot_email:snapshots] \n\nSent from [site:url]");
  $config->set('aws_cloud_snapshot_notification_snapshot_info', "--------------------------------\nSnapshot name: [aws_cloud_snapshot:name]\nSnapshot url: [aws_cloud_snapshot:snapshot_link]\nSnapshot created: [aws_cloud_snapshot:created]\n--------------------------------");
  $config->set('aws_cloud_snapshot_notification_frequency', 604800);
  $config->set('aws_cloud_snapshot_notification_time', '09:00:00');
  $config->set('aws_cloud_snapshot_notification_hour', '09');
  $config->set('aws_cloud_snapshot_notification_minutes', '00');
  $config->save();
}

/**
 * Helper function to add fields to the entity type.
 *
 * @param string $entity_type
 *   The entity type, such as cloud_server_template.
 * @param string $bundle
 *   The bundle the entity type, such as aws_cloud.
 * @param mixed $fields
 *   The fields to be added, such as 'field_a' or ['field_a', 'field_b'].
 */
function aws_cloud_add_fields($entity_type, $bundle, $fields) {
  $config_path = drupal_get_path('module', 'aws_cloud') . '/config/install';
  $source      = new FileStorage($config_path);

  if (!is_array($fields)) {
    $fields = [$fields];
  }

  foreach ($fields as $field) {
    // Obtain the storage manager for field termination protection bases
    // Create a new field from the yaml configuration and save.
    \Drupal::entityManager()->getStorage('field_storage_config')
      ->create($source->read("field.storage.$entity_type.$field"))
      ->save();

    // Obtain the storage manager for field termination protection
    // Create a new field iam role from the yaml configuration and save.
    \Drupal::entityManager()->getStorage('field_config')
      ->create($source->read("field.field.$entity_type.$bundle.$field"))
      ->save();
  }

  // Reload the default field display and form.
  // Reference https://drupal.stackexchange.com/questions/164713/how-do-i-update-the-configuration-of-a-module
  $files = [
    "core.entity_view_display.$entity_type.$bundle.default.yml",
    "core.entity_form_display.$entity_type.$bundle.default.yml",
  ];
  cloud_update_yml_definitions($files, 'aws_cloud');
}

/**
 * Helper function to delete fields from the entity type.
 *
 * @param string $entity_type
 *   The entity type, such as cloud_server_template.
 * @param string $bundle
 *   The bundle the entity type, such as aws_cloud.
 * @param mixed $field_names
 *   The names of fields to be added, such as 'field_a',
 *   or ['field_a', 'field_b'].
 */
function aws_cloud_delete_fields($entity_type, $bundle, $field_names) {
  if (!is_array($field_names)) {
    $field_names = [$field_names];
  }

  // Delete field in bundles.
  foreach ($field_names as $field_name) {
    $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
    if (!is_null($field)) {
      $field->delete();
    }
  }

  // Delete field storage.
  foreach ($field_names as $field_name) {
    $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
    if (!is_null($field_storage)) {
      $field_storage->delete();
    }
  }
}

/**
 * Helper function to update entity definitions.
 */
function aws_cloud_update_entity_definitions() {
  drupal_flush_all_caches();
  \Drupal::entityDefinitionUpdateManager()->applyupdates();
}
