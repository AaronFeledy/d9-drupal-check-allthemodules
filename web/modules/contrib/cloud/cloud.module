<?php

/**
 * @file
 * Enables users to access the Privately managed clouds.
 *
 * Provides common functionality for cloud management.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\Component\Serialization\Yaml;

/**
 * Implements hook_help().
 */
function cloud_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cloud':
      $output = '<p>' . t('The cloud module creates a user interface for users to manage clouds. Users can Create Instances,  Describe Instances etc.') . '</p>';
      return $output;

    case 'help.page.cloud_server_template':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Cloud Server Template') . '</p>';
      $output .= '<p>' . t('The cloud_server_template module creates a user interface for users to manage clouds. Users can create server templates.') . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_theme().
 */
function cloud_theme() {
  $theme = [];
  $theme['cloud_config'] = [
    'render element' => 'elements',
    'file' => 'cloud_config.page.inc',
    'template' => 'cloud_config',
  ];
  $theme['cloud_config_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'cloud_config.page.inc',
  ];
  $theme['cloud_server_template'] = [
    'render element' => 'elements',
    'file' => 'cloud_server_template.page.inc',
    'template' => 'cloud_server_template',
  ];
  $theme['cloud_server_template_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'cloud_server_template.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cloud_theme_suggestions_cloud_config(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#cloud_config'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'cloud_config__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_config__' . $entity->bundle();
  $suggestions[] = 'cloud_config__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_config__' . $entity->id();
  $suggestions[] = 'cloud_config__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cloud_theme_suggestions_cloud_server_template(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#cloud_server_template'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'cloud_server_template__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_server_template__' . $entity->bundle();
  $suggestions[] = 'cloud_server_template__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_server_template__' . $entity->id();
  $suggestions[] = 'cloud_server_template__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_views_pre_render().
 *
 * This is a workaround to implement row level access control,
 * until this issue is resolved:
 * https://www.drupal.org/project/entity/issues/2909970
 * Loop through the results,
 * and call hasPermissions() with the entity's cloud_context.
 * Unset the entity if the user does not have permissions.
 */
function cloud_views_pre_render(ViewExecutable $view) {
  $account = \Drupal::currentUser();
  if ($view->id() == 'cloud_listing' || $view->id() == 'server_template_listing') {
    foreach ($view->result as $key => $result) {
      /* @var \Drupal\cloud\Entity\CloudConfigInterface $cloud */
      $cloud = $result->_entity;
      if (!$account->hasPermission('view ' . $cloud->getCloudContext())) {
        unset($view->result[$key]);
      }
    }
  }
}

/**
 * Helper function to install or update configuration for a set of yml files.
 *
 * @param array $files
 *   An array of yml file names.
 * @param string $module_name
 *   Module where the files are found.
 */
function cloud_update_yml_definitions(array $files, $module_name = 'cloud') {
  $config_manager = \Drupal::service('config.manager');
  $config_path = realpath(drupal_get_path('module', $module_name)) . '/config/install';

  foreach ($files as $file) {
    $filename = $config_path . '/' . $file;
    $file = file_get_contents($filename);
    $value = Yaml::decode($file);
    $type = $config_manager->getEntityTypeIdByName(basename($filename));
    $entity_manager = $config_manager->getEntityManager();
    $definition = $entity_manager->getDefinition($type);
    $id_key = $definition->getKey('id');
    $id = $value[$id_key];
    $entity_storage = $entity_manager->getStorage($type);
    $entity = $entity_storage->load($id);
    if ($entity) {
      $entity = $entity_storage->updateFromStorageRecord($entity, $value);
      $entity->save();
    }
    else {
      $entity = $entity_storage->createFromStorageRecord($value);
      $entity->save();
    }
  }
}
