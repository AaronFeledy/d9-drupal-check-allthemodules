<?php

/**
 * @file
 * Provides Funnelback search integration.
 */

use Drupal\funnelback\Funnelback;
use Drupal\funnelback\FunnelbackQueryString;

/**
 * Implements hook_theme().
 */
function funnelback_theme() {
  return [
    'funnelback_breadcrumb' => [
      'variables' => [
        'facets' => NULL,
        'facet_extras' => NULL,
        'selected' => FALSE,
      ],
      'template' => 'funnelback-breadcrumb',
    ],
    'funnelback_contextual_nav_block' => [
      'variables' => [
        'summary' => NULL,
        'contextual_nav' => NULL,
      ],
      'template' => 'funnelback-contextual-nav-block',
    ],
    'funnelback_curator' => [
      'variables' => [
        'curator' => NULL,
      ],
      'template' => 'funnelback-curator',
    ],
    'funnelback_facets_block' => [
      'variables' => [
        'facets' => NULL,
        'query' => NULL,
      ],
      'template' => 'funnelback-facets-block',
    ],
    'funnelback_pager' => [
      'variables' => [
        'summary' => NULL,
      ],
      'template' => 'funnelback-pager',
    ],
    'funnelback_result' => [
      'variables' => [
        'display_url' => NULL,
        'live_url' => NULL,
        'title' => NULL,
        'date' => NULL,
        'summary' => NULL,
        'metadata' => [],
      ],
      'template' => 'funnelback-result',
    ],
    'funnelback_results' => [
      'variables' => [
        'items' => [],
        'query' => NULL,
        'total' => NULL,
        'pager' => NULL,
        'curator' => NULL,
        'summary' => NULL,
        'breadcrumb' => NULL,
        'spell' => NULL,
        'no_result_text' => NULL,
      ],
      'template' => 'funnelback-results',
    ],
    'funnelback_spell' => [
      'variables' => [
        'spell' => NULL,
      ],
      'template' => 'funnelback-spell',
    ],
    'funnelback_summary' => [
      'variables' => [
        'summary' => NULL,
      ],
      'template' => 'funnelback-summary',
    ],
  ];
}

/**
 * Callback for funnelback object.
 */
function funnelback_get_funnelback() {
  $config = funnelback_get_config();
  $collection = $config->get('general_settings.collection');
  $profile = $config->get('general_settings.profile');
  $num_results = $config->get('general_settings.results');
  $base_url = $config->get('general_settings.base_url');
  return new Funnelback($collection, $profile, $num_results, $base_url);
}

/**
 * Callback for funnelback config.
 */
function funnelback_get_config() {
  return \Drupal::config('funnelback.settings');
}

/**
 * Prepares variables for node templates.
 *
 * @see template_preprocess_node()
 */
function funnelback_preprocess_node(&$vars) {
  if (funnelback_get_config()->get('display_mode.enabled')) {
    // Add node ID and content type to metadata for funnelback to index.
    $nid_element = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'nodeId',
        'content' => $vars['nid'],
      ],
    ];
    drupal_add_html_head($nid_element, 'nodeId');
  }
}

/**
 * Preprocess function for the funnelback_results pager.
 */
function funnelback_preprocess_funnelback_pager(&$vars) {
  $summary = $vars['summary'];
  $page_size = (int) $summary['page_size'];
  $start = (int) $summary['start'];
  $i = 0;
  $num_of_results = funnelback_get_config()->get('general_settings.results');
  $pager_end = $num_of_results;

  // If we get bigger than 10 pages, offset the pager numbers.
  if ($start > $page_size * $num_of_results) {
    // Round to the nearest 10.
    $pager_offset = floor($start / $num_of_results / $num_of_results) * $num_of_results;
    $i = $pager_offset;
    $pager_end = $i + $num_of_results;
  }
  $pager = [];
  $pages = [];

  // Get the current query strings.
  $query_strings = explode('&', $_SERVER['QUERY_STRING']);

  while ($i < $pager_end && $i * $page_size < $summary['total']) {
    // Create the pager title and link.
    $page = [];
    $page['title'] = (string) ($i + 1);
    $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
    $query_strings[] = 'start_rank=' . ($i * $page_size + 1);
    $page['link'] = '?' . implode('&', $query_strings);
    $page['link'] = FunnelbackQueryString::funnelbackQueryNormaliser($page['link']);

    // Flag the current page.
    $current = FALSE;
    if ($start === ($i * $page_size + 1)) {
      $current = TRUE;
    }
    $page['current'] = $current;

    // Create the previous/next links.
    if ($current) {
      $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
      $query_strings[] = 'start_rank=' . (($i - 1) * $page_size + 1);
      $pager['prev_link'] = '?' . implode('&', $query_strings);
      $pager['prev_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['prev_link']);

      $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
      $query_strings[] = 'start_rank=' . (($i + 1) * $page_size + 1);
      $pager['next_link'] = '?' . implode('&', $query_strings);
      $pager['next_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['next_link']);
    }

    $pages[] = $page;

    $i++;
  }

  $pager['pages'] = $pages;

  // Flag if we're on the first page.
  $pager['first'] = (int) (($summary['start']) == 1);

  // Flag if we are not in the first page.
  if (((int) $summary['start']) > $page_size) {
    $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
    $query_strings[] = 'start_rank=1';
    $pager['first_link'] = '?' . implode('&', $query_strings);
    $pager['first_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['first_link']);
  }

  // Flag if we are on the last page.
  $pager['last'] = ((int) ($summary['total']) <= ((int) ($summary['start']) * $page_size));

  // Flag if we are not on the last page.
  if (!$pager['last']) {
    $query_strings = FunnelbackQueryString::funnelbackQueryRemove('start_rank', $query_strings);
    $query_strings[] = 'start_rank=' . (floor($summary['total'] / $page_size) * $page_size + 1);
    $pager['last_link'] = '?' . implode('&', $query_strings);
    $pager['last_link'] = FunnelbackQueryString::funnelbackQueryNormaliser($pager['last_link']);
  }

  $vars['pager'] = $pager;
}
