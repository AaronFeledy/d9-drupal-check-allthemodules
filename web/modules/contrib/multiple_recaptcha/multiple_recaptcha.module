<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

function multiple_recaptcha_theme($existing, $type, $theme, $path) {
  return [
    'multiple_recaptcha_js' => [
      'variables' => ['js' => NULL],
    ],
  ];
}

/**
 * Implements hook_captcha().
 */
function multiple_recaptcha_captcha($op, $captcha_type = '') {

  switch ($op) {
    case 'list':
      return ['Multiple reCAPTCHA'];

    case 'generate':
      $captcha = [];
      if ($captcha_type == 'Multiple reCAPTCHA') {
        $config = \Drupal::config('recaptcha.settings');
        $renderer = \Drupal::service('renderer');
        $recaptcha_site_key = $config->get('site_key');
        $recaptcha_secret_key = $config->get('secret_key');

        if (!empty($recaptcha_site_key) && !empty($recaptcha_secret_key)) {
          // Build the reCAPTCHA captcha form if site_key and secret_key are
          // configured. Captcha requires TRUE to be returned in solution.
          $captcha['solution'] = TRUE;
          $captcha['captcha_validate'] = 'recaptcha_captcha_validation';
          $captcha['form']['captcha_response'] = [
            '#type' => 'hidden',
            '#value' => 'Google no captcha',
          ];

          $noscript = '';
          if ($config->get('widget.noscript')) {
            $recaptcha_widget_noscript = [
              '#theme' => 'recaptcha_widget_noscript',
              '#widget' => [
                'sitekey' => $recaptcha_site_key,
                'language' => \Drupal::service('language_manager')->getCurrentLanguage()->getId(),
              ],
            ];
            $noscript = $renderer->render($recaptcha_widget_noscript);
          }

          $attributes = [
            'class' => 'g-recaptcha',
            'data-sitekey' => $recaptcha_site_key,
            'data-theme' => $config->get('widget.theme'),
            'data-type' => $config->get('widget.type'),
            'data-size' => $config->get('widget.size'),
            'data-tabindex' => $config->get('widget.tabindex'),
          ];
          // Filter out empty tabindex/size.
          $attributes = array_filter($attributes);

          //no time to be fancy
          $js = '
                function getAllElementsWithAttribute(attribute) { var matchingElements = []; var allElements = document.getElementsByTagName(\'div\'); for (var i = 0, n = allElements.length; i < n; i++) { if (allElements[i].getAttribute(attribute) !== null) { matchingElements.push(allElements[i]); } } return matchingElements; } function LoadMultipleCaptchas () { var els = getAllElementsWithAttribute(\'data-sitekey\'); for (i in els) { var el = els[i];  var sk = el.getAttribute(\'data-sitekey\'); var id = \'gcaptcha-\'+i; el.id = id; grecaptcha.render(id, {\'sitekey\' : sk});  } }
          ';

     
          $captcha['form']['recaptcha_widget_inline'] =  [
            '#attached' => [
                'html_head' => [
                  [
                      [
                        '#tag' => 'script',
                        '#theme' => 'multiple_recaptcha_js',
                        '#js' => $js,
                      ],
                      // A key, to make it possible to recognize this HTML  element when altering.
                      'multiple_recaptcha_api_code',

                  ],
                ],
            ]
          ];

          $captcha['form']['recaptcha_widget'] = [
            '#markup' => '<div' . new Attribute($attributes) . '></div>',
            '#suffix' => $noscript,
            '#attached' => [
              'html_head' => [
                [
                  [
                    '#tag' => 'script',
                    '#attributes' => [
                      'src' => Url::fromUri('https://www.google.com/recaptcha/api.js', ['query' => ['onload'=>'LoadMultipleCaptchas', 'render' => 'explicit', 'hl' => \Drupal::service('language_manager')->getCurrentLanguage()->getId()], 'absolute' => TRUE])->toString(),
                      'async' => TRUE,
                      'defer' => TRUE,
                    ],
                  ],
                  'multiple_recaptcha_api'
                ],
              ],
            ],
          ];
        }
        else {
          // Fallback to Math captcha as reCAPTCHA is not configured.
          $captcha = captcha_captcha('generate', 'Math');
        }

        // If module configuration changes the form cache need to be refreshed.
        $renderer->addCacheableDependency($captcha['form'], $config);
      }
      return $captcha;
  }
}
