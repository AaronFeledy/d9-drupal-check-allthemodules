<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\entity_http_exception\Event\EntityHttpExceptionEvent;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Drupal\entity_http_exception\Utils\EntityHttpExceptionUtils as Utils;

/**
 * Implements hook_help().
 */
function entity_http_exception_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // entity_http_exception module.
    case 'help.page.entity_http_exception':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide http exception on entity detail page') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view().
 */
function entity_http_exception_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  if ($view_mode == 'full') {
    $execute_http_exception = TRUE;
    $type = $entity->bundle();
    $entity_type = $entity->getEntityTypeId();
    $is_anonymous = \Drupal::service('current_user')->isAnonymous();

    $config = \Drupal::service('config.factory')
      ->get('entity_http_exception.settings');

    // Make sure it's a node.
    if ($entity_type == 'node') {
      $status = $entity->get('status')->getString();
      $checked_published = $config->get(Utils::getPublishedNodesKey($type));
      if ($is_anonymous && !$checked_published && $status == 1) {
        $execute_http_exception = FALSE;
      }
    }

    $http_exception_code = $config->get(Utils::getHttpExceptionCodeKey($entity_type, $type));
    if ($is_anonymous && $execute_http_exception && $http_exception_code != 0) {
      $e = new EntityHttpExceptionEvent($entity);
      \Drupal::service('event_dispatcher')
        ->dispatch('entity_http_exception.entity.view', $e);
      $response = $e->getResponse();
      if ($response) {
        throw new HttpException($response);
      }
    }
  }
}
