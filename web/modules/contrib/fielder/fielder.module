<?php

/**
 * @file
 * Allows to embed attached fields into the node body.
 */

/**
 * Implements hook_page_build().
 */
function fielder_page_build(&$page) {
  $path = drupal_get_path('module', 'fielder');
  $page['#attached']['css'][$path . '/fielder.css'] = array('every_page' => TRUE);
}

/**
 * Implements hook_entity_view_alter().
 */
function fielder_node_view_alter(&$build, $node, $display) {
  $markup = &$build['body'][0]['#markup'];

  // Embed fields in the node body:
  $pattern = '/\[(\w+)(?::(\d+|\d+-\d+))?(?:\|(\w+))?\]/';
  preg_match_all($pattern, $markup, $matches);

  foreach ($matches[1] as $i => $fieldname) {
    if ($fieldname == 'body') {
      continue;
    }
    $entry = $matches[0][$i];
    $range = _fielder_parse_range($matches[2][$i]);
    $position = $matches[3][$i];

    if (isset($node->$fieldname)) {
      if ($field = field_view_field($node, $fieldname, 'default')) {
        if ($rendered = _fielder_render_field($field, $range, $position)) {
          $markup = str_replace($entry, $rendered, $markup);

          // Remove embedded field from the display:
          if (isset($build[$fieldname])) {
            _fielder_unset_field_items($build[$fieldname], $range);
          }
        }
      }
    }
  }
}

/**
 * Helper function: unsets fields items.
 */
function _fielder_unset_field_items(&$field, $range) {
  if (!is_array($range)) {
    return;
  }
  foreach ($range as $i) {
    if (isset($field[$i])) {
      unset($field[$i]);
    }
  }
}

/**
 * Helper function: renders field.
 */
function _fielder_render_field($field, $range = NULL, $position = 'default') {
  if (is_array($range)) {
    $items = array_keys($field['#items']);
    $exclude = array_diff($items, $range);
    _fielder_unset_field_items($field, $exclude);
  }
  return '<div class="position-'. check_plain($position) .'">' . drupal_render($field) . '</div>';
}

/**
 * Helper function: parses range from its text representation.
 */
function _fielder_parse_range($text) {
  if ($text == '') {
    // Text is empty:
    return NULL;
  }
  if (strpos($text, '-')) {
    // Text is a range:
    $borders = explode('-', $text);
    $from = (int) $borders[0];
    $to = (int) $borders[1];
    return array_keys(array_fill($from, $to - $from + 1, 1));
  }
  // Text is a number:
  return array((int) $text);
}
