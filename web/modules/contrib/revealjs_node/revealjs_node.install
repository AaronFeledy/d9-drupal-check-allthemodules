<?php

/**
 * @file
 * Install, update and uninstall functions for the revealjs-node module.
 */

use Drupal\revealjs_node\Helper;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function revealjs_node_install() {
  \Drupal::service('theme_installer')->install(['revealjs_theme']);
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_uninstall().
 */
function revealjs_node_uninstall() {
  \Drupal::service('theme_installer')->uninstall(['revealjs_theme']);
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_requirements().
 */
function revealjs_node_requirements($phase) {
  $requirements = [];
  $theme = 'revealjs_theme';
  if ($phase == 'runtime') {
    $themes = system_list('theme');
    if (!array_key_exists($theme, $themes)) {
      $requirements['revealjs_node_status'] = [
        'title' => t('Reveal.Js-Node status'),
        'value' => t('Necessary theme "@theme" is not installed.', ['@theme' => $theme]),
        'severity' => REQUIREMENT_WARNING,
      ];
    }
  }

  return $requirements;
}

/**
 * Create the theme field for presentations.
 */
function revealjs_node_update_8501() {

  $fieldName = 'presentation_theme';

  $entityType = Drupal::entityTypeManager()->getDefinition('node');
  $storageConfig = FieldStorageConfig::loadByName($entityType->id(), $fieldName);
  if (!$storageConfig) {
    $values = [];
    foreach ([
      'black',
      'beige',
      'white',
      'blood',
      'league',
      'moon',
      'night',
      'serif',
      'simple',
      'sky',
      'solarized',
    ] as $item) {

      $values[$item] = $item;
    }
    $fieldStorage = FieldStorageConfig::create([
      'field_name' => $fieldName,
      'entity_type' => $entityType->id(),
      'type' => 'list_string',
      'settings' => [
        'allowed_values' => $values,
      ],
      'cardinality' => 1,
    ]);
    $fieldStorage->save();
    $fieldConfig = FieldConfig::create([
      'field_name' => $fieldName,
      'entity_type' => $entityType->id(),
      'bundle' => Helper::BUNDLE,
      'label' => "Theme",
      'cardinality' => 1,
    ]);
    $fieldConfig->save();
  }
}
