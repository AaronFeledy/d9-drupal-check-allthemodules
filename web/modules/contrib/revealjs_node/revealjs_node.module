<?php

/**
 * @file
 * Primary module hooks for revealjs-node module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\revealjs_node\Helper;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\editor\Entity\Editor;

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare presentation configuration for FE.
 */
function revealjs_node_preprocess_node(&$variables) {
  /** @var \Drupal\revealjs_node\Helper $helper */
  $helper = Drupal::service('revealjs_node.helper');
  if ($helper->isPresentation($variables['node'])) {
    $user = Drupal::currentUser();
    $helper->setPresentationTheme($variables['node']);
    $options = Drupal::config('revealjs.settings')->get();
    if ( ! $user->hasPermission('revealjs view notes') ) {
      $options['notes'] = FALSE;
    }
    $variables['#attached']['drupalSettings']['revealConfig'] = revealjs_build_configuration($options);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Prepare presentation configuration for FE.
 */
function revealjs_node_preprocess_media(&$variables) {
  /** @var \Drupal\revealjs_node\Helper $helper */
  $helper = Drupal::service('revealjs_node.helper');
  if ($helper->isPresentation($variables['media'])) {
    $helper->setPresentationTheme($variables['media']);
    $options = $helper->getSettings();
    $variables['#attached']['drupalSettings']['revealConfig'] = revealjs_build_configuration($options);
  }
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function revealjs_node_ckeditor_css_alter(array &$css, Editor $editor) {
  if ($editor->id() == 'reveal_js_presentation') {
    $css[] = drupal_get_path('module', 'revealjs_node') . '/css/ckeditor.css';
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function revealjs_node_editor_js_settings_alter(array &$settings) {
  $routeMatch = Drupal::routeMatch();
  $route = $routeMatch->getRouteName();
  if ($route == 'entity.node.edit_form') {
    $node = $routeMatch->getParameter('node');
    if ($node->bundle() == 'reveal_js_presentation') {
      $settings['editor']['formats'] = ['reveal_js_presentation' => $settings['editor']['formats']['reveal_js_presentation']];
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function revealjs_node_entity_bundle_field_info(EntityTypeInterface $entityType, $bundle, array $base_field_definitions) {
  // Add a property only to nodes of the 'article' bundle.
  if ($entityType->id() == 'node' && $bundle == Helper::BUNDLE) {
    $fieldName = 'presentation_theme';
    try {
      $fields[$fieldName] = FieldConfig::loadByName('node', $bundle, $fieldName);
      return $fields;
    }
    catch (\Exception $ex) {
      return;
    }
  }
}
