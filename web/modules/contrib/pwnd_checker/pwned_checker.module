<?php

/**
 * @file
 * Checks if the current userâ€™s e-mail address has been in a public leak.
 */

use Drupal\Core\Url;
use Drupal\Core\Render\Markup;
use Drupal\pwned_checker\ApiClient;

/**
 * Implements hook_user_login().
 */
function pwned_checker_user_login($account) {
  $config = \Drupal::config('pwnd_checker.settings');
  $apiClient = new ApiClient();
  $email = $account->getEmail();
  $lastLoginDateTime = new DateTime('@' . $account->getLastLoginTime());

  $breaches = $apiClient->checkEmailAddress($email);
  $newBreaches = [];

  foreach ($breaches as $breach) {
    $breachModificationDateTime = new DateTime($breach->ModifiedDate);
    if ($breachModificationDateTime->diff($lastLoginDateTime)->invert === 1) {
      array_push($newBreaches, $breach->Title);
    }
  }

  if (count($newBreaches) > 0) {
    $haveibeenpwnedUrl = $config->get('haveibeenpwned_url');
    $haveibeenpwnedLink = \Drupal::l($haveibeenpwnedUrl, Url::fromUri($haveibeenpwnedUrl));

    $message = Markup::create(
      t('According to @haveibeenpwned_link,', [
        '@haveibeenpwned_link' => $haveibeenpwnedLink,
      ]) . ' '
      . t('your e-mail address has been found in the following @nb_breaches data breaches since you last logged in:', [
        '@nb_breaches' => count($newBreaches),
      ]) . '<br /><ul><li>'
      . implode('</li><li>', $newBreaches) . '</li></ul>'
      . t('You should change the passwords of any account which uses the same e-mail address.') . '<br />'
      . t('Go to @haveibeenpwned_link for more information.', [
        '@haveibeenpwned_link' => $haveibeenpwnedLink,
      ])
    );

    \Drupal::messenger()->addWarning($message);
  }
}
