<?php

/**
 * @file
 * Apply image style to body content images.
 */
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\body_style_image\Form\BodyStyleImageSettingsForm;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\image\Entity\ImageStyle;

/**
 * Altering the node content before rendering.
 */
  
function body_style_image_preprocess_node(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  $body_content = $node->get('body')->getValue();
  $config = \Drupal::config('body_style_image.adminsettings');
  $image_style = $config->get('body_style_image_style_' . $node->getType());
  $selected_content_type = $config->get('body_style_image_content_type_' . $node->getType()); 
  //$body_language = field_language('node', $node, 'body');
  if (empty($body_content[0]['value'])) {
    $body_content = $node->body[$body_language][0]['value'] = '';
    $body_content = $node->body[$body_language][0]['summary'] = '';
    $body_content = $node->body[$body_language][0]['safe_value'] = '';
    $body_content = $node->body[$body_language][0]['safe_summary'] = '';
  }
  else {
    $body_content = $body_content[0]['value'];
  }
  $nid = $node->id();
  $i = 0; $b = 0;
  $bparent_array = array(); 
  if (strlen($body_content) >= 1 && $selected_content_type == 1) {
    $server_name = $_SERVER['SERVER_NAME'];
    $protocol = _body_style_image_get_protocol_types();
    $dom = new DOMDocument();
    libxml_use_internal_errors(TRUE);
    $dom->loadHTML('<?xml encoding="utf-8" ?>' . $body_content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
    $dom->preserveWhiteSpace = FALSE;
    $dom->formatOutput = TRUE;
    $image_tags = $dom->getElementsByTagName('img'); 
    if ($image_tags->length > 1) { 
      $new_div = $dom->createElement('div');
      $new_div->setAttribute('class', 'img-wrapper');
      foreach ($image_tags as $image) {
        $i++;
        $wrapper_key = 'body_image_' . $i . '_' . $nid;
        $new_div->setAttribute('id', $wrapper_key);
        $new_div_clone = $new_div->cloneNode();
        $image->parentNode->replaceChild($new_div_clone, $image);
        $new_div_clone->appendChild($image);
      }
      $j = 0; $b = 0;
      $react_div = $dom->getElementsByTagName('div');
      if ($react_div->length > 0) {
        for ($i = 0; $i < $react_div->length; $i++) {
          $elem = $dom->getElementsByTagName('div')->item($i)->childNodes;
          foreach ($elem as $node) {
            if ($node->tagName == 'img') {
              $bparent_array[$j]['id'] = $node->parentNode->getAttribute('id');
              $check_image_source = urldecode($node->getAttribute('src'));
              if (strpos($check_image_source, $server_name) !== FALSE) {
                $image_source_url = $check_image_source;
              }
              else {
                $image_source_url = $protocol . "://" . $server_name . $check_image_source;
              }
              $bparent_array[$j]['image'] = $image_source_url;
              $bparent_array[$j]['alt'] = $node->getAttribute('alt');
              $bparent_array[$j]['title'] = $node->getAttribute('title');
              $bparent_array[$j]['data-entity-type'] = $node->getAttribute('data-entity-type');
              $bparent_array[$j]['data-entity-uuid'] = $node->getAttribute('data-entity-uuid');
              $bparent_array[$j]['class'] = $node->getAttribute('class');
              $node->parentNode->removeChild($node);
              $j++;
            }
          }
          $wrapper_element = $dom->getElementsByTagName('div')->item($i);
          $wrapper_id = $wrapper_element->getAttribute('id');
          foreach ($bparent_array as $bparent) {
            $gen_key = $bparent['id'];
            $image_src = $bparent['image'];
            $filename = explode('files', $image_src)[1];
            $path_of_image = $filename;
            $image_uri = 'public://' . $path_of_image;
            $image_style_soruce = ImageStyle::load($image_style)->buildUrl($image_uri);;
            $image_elm = $dom->createElement('img');
            $image_elm->setAttribute('src', $image_style_soruce);
            $image_elm->setAttribute('alt', $bparent['alt']);
            $image_elm->setAttribute('data-entity-type', $bparent['data-entity-type']);
            $image_elm->setAttribute('data-entity-uuid', $bparent['data-entity-uuid']);
            $image_elm->setAttribute('class', $bparent['class']);
            if ($wrapper_id == $gen_key) {
              $wrapper_element->appendChild($image_elm);
            }
            $b++;
          }
        }
      }
      $html_body_content = $dom->saveHTML($dom);
      
      $variables['newbody_content'] = str_replace('<?xml encoding="utf-8" ?>', '', $html_body_content);
    } 
  } 
}

/**
 * Get the site protocol type.
 */
function _body_style_image_get_protocol_types() {
  if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == "on") {
    return "https";
  }
  else {
    return "http";
  }
}

/**
 * Implements hook_help().
 */
function body_style_image_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.body_style_image':
      $text = file_get_contents(dirname(__FILE__) . "/README.txt");
      if (! \Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = array('settings' => $settings);
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}