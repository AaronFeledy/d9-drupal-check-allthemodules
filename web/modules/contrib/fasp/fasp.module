<?php

/**
 * @file
 * Main file for custom hooks and functions.
 */

use Drupal\Core\Url;
use Drupal\file\Entity\File;

/**
 * Implements hook_theme().
 */
function fasp_theme($existing, $type, $theme, $path) {
  return [
    'fasp_stylesheets' => [
      'variables' => [
        'selector' => [],
        'style' => NULL,
      ],
      'file' => 'fasp.theme.inc',
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 */
function fasp_library_info_build() {
  $libraries = [];
  if ($style_fid = \Drupal::state()->get('fasp_styles_fid', FALSE)) {
    $libraries['stylesheet'] = [
      'version' => 'VERSION',
    ];
    $file = File::load($style_fid);
    if ($file) {
      $public_scheme_path = \Drupal::service('stream_wrapper_manager')
        ->getViaUri('public://')
        ->getDirectoryPath();
      // Not sure this is correct way, feel free to improve it.
      $style_path = '/' . str_replace('public://', $public_scheme_path . '/', $file->uri->value);
      $libraries['stylesheet']['css']['base'][$style_path] = [];
    }
  }
  return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function fasp_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  $fasp_helper = \Drupal::service('fasp.helper');
  $pattern = $fasp_helper->getFormPattern();
  $match_type = $fasp_helper->getMatchType();
  $matches = $fasp_helper->formIdMatch($form_id, $pattern);
  $is_fasp_active = ($match_type xor $matches);
  if ($is_fasp_active) {
    $input_name = $fasp_helper->getInputName();
    $input_class = $fasp_helper->getInputClassRandom();
    $input_title = $fasp_helper->getInputTitle();
    $weight = rand(0, 50) - 25;
    $form[$input_name] = [
      '#type' => 'textfield',
      '#title' => $input_title,
      '#weight' => $weight,
      '#prefix' => '<div class="' . $input_class . '">',
      '#suffix' => '</div>',
    ];

    $form['#validate'][] = 'fasp_form_validate';
    $form['#attached']['library'][] = 'fasp/stylesheet';
  }
}

/**
 * Validate the form.
 */
function fasp_form_validate(&$form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  $fasp_helper = \Drupal::service('fasp.helper');
  $input_name = $fasp_helper->getInputName();
  if ($form_state->getValue($input_name)) {
    $form['#submit'] = ['fasp_form_submit'];
  }
}

/**
 * This is the only submit handler if hidden input is filled. Emulate successful
 * form submission for bot, so the think they complete their job, but no
 * any logic will be executed, not data stored and so on.
 */
function fasp_form_submit(&$form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_cron().
 */
function fasp_cron() {
  $input_last_check = \Drupal::state()->get('fasp_input_name.last_check', 0);
  // 12 hours.
  $input_life_time = 60 * 60 * 12;
  if ($input_last_check + $input_life_time < time()) {
    \Drupal::state()->set('fasp_input_name.last_check',  time());
    // Will be generate during next call of form.
    \Drupal::state()->delete('fasp_input_name');
  }
}
