<?php

/**
 * @file
 * Install and requirement functions for field_collection_access.
 */

/**
 * Implements hook_requirements().
 */

/**
 * Set requirements for status page.
 */
function field_collection_access_requirements($phase) {
  $requirements = [];
  if ($phase === 'runtime') {
    // Only show rebuild button if there are either 0, or 2 or more, rows
    // in the {node_access} table, or if there are modules that
    // implement hook_node_grants().
    if (count(\Drupal::moduleHandler()->getImplementations('field_collection_item_grants')) > 0) {
      $grant_count = \Drupal::service('field_collection_access.grant_storage')->count();
      $value = \Drupal::translation()->formatPlural($grant_count, 'One permission in use.', '@count permissions in use.', ['@count' => $grant_count]);
    }
    else {
      $value = t('Disabled.');
    }

    if (field_collection_access_needs_rebuild()) {
      $value .= " " . t("Rebuild Required");
    }

    $requirements['field_collection_access'] = [
      'title' => t('Field Collection Access Permissions'),
      'value' => $value,
      'description' => t('If the site is experiencing problems with permissions to field collection items, you may have to rebuild the permissions cache. Rebuilding will remove all privileges to content and replace them with permissions based on the current modules and settings. Rebuilding may take some time if there is a lot of content or complex permission settings. After rebuilding has completed, content will automatically use the new permissions. <a href=":rebuild">Rebuild permissions</a>', [
        ':rebuild' => \Drupal::url('field_collection_access.access_rebuild'),
      ]),
    ];
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function field_collection_access_schema() {
  $schema['field_collection_access'] = [
    'description' => 'Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific nodes.',
    'fields' => [
      'item_id' => [
        'description' => 'The {field_collection_item}.item_id this record affects.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'langcode' => [
        'description' => 'The {language}.langcode of this field_collection_item.',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ],
      'fallback' => [
        'description' => 'Boolean indicating whether this record should be used as a fallback if a language condition is not provided.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ],
      'gid' => [
        'description' => "The grant ID a user must possess in the specified realm to gain this row's privileges on the field_collection_item.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'realm' => [
        'description' => 'The realm in which the user must possess the grant ID. Each field_collection_item access field_collection_item can define one or more realms.',
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'grant_view' => [
        'description' => 'Boolean indicating whether a user with the realm/grant pair can view this field_collection_item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'grant_update' => [
        'description' => 'Boolean indicating whether a user with the realm/grant pair can edit this field_collection_item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'grant_delete' => [
        'description' => 'Boolean indicating whether a user with the realm/grant pair can delete this field_collection_item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
    ],
    'primary key' => ['item_id', 'gid', 'realm', 'langcode'],
    'foreign keys' => [
      'affected_node' => [
        'table' => 'field_collection_item',
        'columns' => ['item_id' => 'item_id'],
      ],
    ],
  ];

  return $schema;
}
