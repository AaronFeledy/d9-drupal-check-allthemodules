<?php

/**
 * @file
 * User: Bruno - Date: 18/01/2018 - Time: 10:17.
 */

use Drupal\Core\Form\FormStateInterface;
use CommerceGuys\Addressing\AddressFormat\AddressField;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use CommerceGuys\Addressing\AddressFormat\FieldOverride;

/**
 * Implements hook_help().
 */
function commerce_pagseguro_transp_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the br_address_field module.
    case 'help.page.commerce_pagseguro_transp':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Brazillian payment provider') . '</p>';
      $output .= '<p>' . t('Developed by 7Links Web Solutions - 7links.com.br') . '</p>';
      return $output;
  }
}

/**
 * Auxiliar function to clean string.
 *
 * @param string $str
 *   String to clean.
 *
 * @return null|string|string[]
 *   A sanitized string
 */
function commerce_pagseguro_transp_sanitize_string($str) {
  $str = preg_replace('/[áàãâä]/ui', 'a', $str);
  $str = preg_replace('/[éèêë]/ui', 'e', $str);
  $str = preg_replace('/[íìîï]/ui', 'i', $str);
  $str = preg_replace('/[óòõôö]/ui', 'o', $str);
  $str = preg_replace('/[úùûü]/ui', 'u', $str);
  $str = preg_replace('/[ç]/ui', 'c', $str);
  // $str = preg_replace('/[,(),;:|!"#$%&/=?~^><ªº-]/', '_', $str); // ?
  $str = preg_replace('/[^a-z0-9]/i', '_', $str);
  $str = preg_replace('/_+/', ' ', $str);
  return $str;
}

/**
 * Auxiliar function to format a phone number.
 *
 * @param string $phone
 *   Phone number to format.
 *
 * @return mixed
 *   A formatted phone number.
 */
function commerce_pagseguro_transp_format_phone(string $phone) {
  $area_code = substr($phone, 1, 2);
  $lenght = strlen($phone);
  $phone = substr($phone, 3, $lenght);
  // Remove os caracteres especiais e letras.
  $phone = preg_replace("/[^0-9\s]/", "", $phone);
  $result['area_code'] = $area_code;
  $result['phone'] = (integer) $phone;

  return $result;
}

/**
 * Verify if client name has at least 2 names.
 *
 * @name User name to verify
 *
 * @return bool
 *   Return TRUE if user has two names or more
 */
function commerce_pagseguro_transp_validation_full_name($name) {
  $qty = count(explode(' ', $name));
  if ($qty > 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *
 * @return mixed
 */
function commerce_pagseguro_transp_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'profile') {

    $fields['field_telephone'] = BaseFieldDefinition::create('telephone')
      ->setLabel(t('Telephone'))
      ->setDescription(t('Only numbers. DDD with 2 numbers only.'))
      ->setRequired(TRUE)
      ->setRevisionable(FALSE)
      ->setSetting('handler', 'default')
      ->setTranslatable(FALSE)
      ->setDisplayOptions('view', [
        'label'  => 'hide',
        'type'   => 'string',
        'weight' => 0,
      ])
      ->setDisplayOptions('form', [
        'type'          => 'telephone_default',
        'weight'        => 30,
        'default_value' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    $fields['field_birthdate'] = BaseFieldDefinition::create('datetime')
      ->setLabel(t('Birthdate'))
      ->setRequired(TRUE)
      ->setRevisionable(FALSE)
      ->setSetting('handler', 'default')
      ->setSetting('datetime_type', 'date')
      ->setTranslatable(FALSE)
      ->setDisplayOptions('view', [
        'label'  => 'hide',
        'type'   => 'datetime_default',
        'weight' => 0,
        'settings' => [
          'format_type' => 'short',
        ],
      ])
      ->setDisplayOptions('form', [
        'type'          => 'datetime_default',
        'weight'        => 30,
        'default_value' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }
  return $fields;
}
