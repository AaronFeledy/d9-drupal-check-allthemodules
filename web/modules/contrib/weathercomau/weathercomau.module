<?php

/**
 * @file
 * The brain of the Weather.com.au module.
 */

/**
 * Implements hook_theme().
 */
function weathercomau_theme($existing, $type, $theme, $path) {
  return array(
    'weathercomau_widget_block' => array(
      'render element' => 'elements',
      'file' => 'weathercomau.theme.inc',
    ),
    'weathercomau_current_conditions' => array(
      'render element' => 'elements',
      'file' => 'weathercomau.theme.inc',
    ),
    'weathercomau_forecast' => array(
      'render element' => 'elements',
      'file' => 'weathercomau.theme.inc',
    ),
    'weathercomau_forecast_day' => array(
      'render element' => 'elements',
      'file' => 'weathercomau.theme.inc',
    ),
  );
}


/**
 * Helper that fetches variables for the Weather.com.au module.
 *
 * @param string $name
 *   The variable name.
 *
 * @return mixed
 *   The value.
 */
function weathercomau_variable_get($name) {
  return \Drupal::config('weathercomau.settings')->get($name);
}


/**
 * Helper that saves variables for the Weather.com.au module.
 *
 * @param string $name
 *   The variable name.
 * @param mixed $value
 *   The variable value.
 */
function weathercomau_variable_set($name, $value) {
  \Drupal::config('weathercomau.settings')->set($name, $value)->save();
}


/**
 * Formats temperatures.
 *
 * @param int $temperature
 *   Temperature in degree celsius.
 * @param string $unit
 *   Unit to be returned.
 *
 * @return string
 *   Formatted representation in the desired unit.
 */
function weathercomau_format_temperature($temperature, $unit = '') {
  // Calculate the temperature in fahrenheit.
  $fahrenheit = (int) ($temperature * 9 / 5) + 32;

  // Format the temperature.
  if ($unit === 'celsius') {
    $result = t('!temperature °C', array('!temperature' => $temperature));
  }
  elseif ($unit === 'fahrenheit') {
    $result = t('!temperature °F', array('!temperature' => $fahrenheit));
  }
  elseif ($unit === 'celsiusfahrenheit') {
    $result = t('!temperature_c °C / !temperature_f °F', array(
      '!temperature_c' => $temperature,
      '!temperature_f' => $fahrenheit,
    ));
  }
  elseif ($unit === 'fahrenheitcelsius') {
    $result = t('!temperature_f °F / !temperature_c °C', array(
      '!temperature_f' => $fahrenheit,
      '!temperature_c' => $temperature,
    ));
  }
  else {
    // Defaults to site's temperature unit.
    $result = weathercomau_format_temperature($temperature, weathercomau_variable_get('temperature_unit'));
  }

  return $result;
}


/**
 * Formats humidity.
 *
 * @param int $humidity
 *   The humidity in percentage.
 *
 * @return string
 *   Formatted representation of the humidity.
 */
function weathercomau_format_humidity($humidity) {
  return $humidity . ' ' . weathercomau_variable_get('humidity_unit');
}


/**
 * Formats wind speed.
 *
 * @param int $wind_speed
 *   Wind speed in km/h.
 * @param string $unit
 *   Unit to be returned.
 *
 * @return string
 *   Formatted representation in the desired unit.
 */
function weathercomau_format_wind_speed($wind_speed, $unit = '') {
  if ($unit === 'kmh') {
    $result = t('!speed km/h', array('!speed' => $wind_speed));
  }
  elseif ($unit === 'mph') {
    // Convert into mph.
    $speed = round($wind_speed * 0.62137, 1);
    $result = t('!speed mph', array('!speed' => $speed));
  }
  elseif ($unit === 'knots') {
    // Convert into knots.
    $speed = round($wind_speed * 0.53996, 1);
    $result = t('!speed knots', array('!speed' => $speed));
  }
  elseif ($unit === 'mps') {
    // Convert into meter per second.
    $speed = round($wind_speed * 0.27778, 1);
    $result = t('!speed meter/s', array('!speed' => $speed));
  }
  elseif ($unit === 'beaufort') {
    // Convert into Beaufort.
    $number = weathercomau_calculate_beaufort($wind_speed);
    $result = t('Beaufort !number', array('!number' => $number));
  }
  else {
    // Default to site's wind speed unit.
    $result = weathercomau_format_wind_speed($wind_speed, weathercomau_variable_get('windspeed_unit'));
  }

  return $result;
}


/**
 * Formats pressure.
 *
 * @param int $pressure
 *   Pressure in hPa.
 * @param string $unit
 *   Unit to be returned.
 *
 * @return string
 *   Formatted representation in the desired unit.
 */
function weathercomau_format_pressure($pressure, $unit = '') {
  if ($unit === 'hpa') {
    $result = t('!pressure hPa', array('!pressure' => $pressure));
  }
  elseif ($unit === 'inhg') {
    $result = t('!pressure inHg', array('!pressure' => round($pressure * 0.02953, 2)));
  }
  elseif ($unit === 'mmhg') {
    $result = t('!pressure mmHg', array('!pressure' => round($pressure * 0.75006, 0)));
  }
  elseif ($unit === 'kpa') {
    $result = t('!pressure kPa', array('!pressure' => round($pressure / 10, 1)));
  }
  else {
    // Default to site's pressure unit.
    $result = weathercomau_format_pressure($pressure, weathercomau_variable_get('pressure_unit'));
  }

  return $result;
}


/**
 * Formats rainfall.
 *
 * @param int $rainfall
 *   The rainfall in millimetres.
 * @param string $unit
 *   Unit to be returned.
 *
 * @return string
 *   Formatted representation in the desired unit.
 */
function weathercomau_format_rainfall($rainfall, $unit = '') {
  if ($unit === 'mm') {
    $result = t('!rainfall mm', array('!rainfall' => $rainfall));
  }
  elseif ($unit === 'inches') {
    $result = t('!rainfall "', array('!rainfall' => round($rainfall / 25.4 * 100) / 100));
  }
  else {
    // Default to site's rainfall unit.
    $result = weathercomau_format_rainfall($rainfall, weathercomau_variable_get('rainfall_unit'));
  }

  return $result;
}


/**
 * Calculate Beaufort wind scale for given wind speed.
 *
 * @link http://en.wikipedia.org/wiki/Beaufort_scale
 *
 * @param int $wind_speed
 *   Wind speed in km/h.
 *
 * @return int
 *   Beaufort number.
 */
function weathercomau_calculate_beaufort($wind_speed) {
  $result = 0;

  if ($wind_speed >= 120) {
    $result = 12;
  }
  if ($wind_speed >= 103) {
    $result = 11;
  }
  if ($wind_speed >= 88) {
    $result = 10;
  }
  if ($wind_speed >= 76) {
    $result = 9;
  }
  if ($wind_speed >= 63) {
    $result = 8;
  }
  if ($wind_speed >= 51) {
    $result = 7;
  }
  if ($wind_speed >= 40) {
    $result = 6;
  }
  if ($wind_speed >= 30) {
    $result = 5;
  }
  if ($wind_speed >= 20) {
    $result = 4;
  }
  if ($wind_speed >= 12) {
    $result = 3;
  }
  if ($wind_speed >= 7) {
    $result = 2;
  }
  if ($wind_speed >= 1) {
    $result = 1;
  }

  return $result;
}
