<?php

use Drupal\node\Entity\NodeType;
use Drupal\Core\Form\FormStateInterface;

/**
* Implements hook_form_FORM_ID_alter() for node_form().
*/
function buffer_schedule_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::config('buffer_scheduler.settings');
  $type = $form_state->getFormObject()->getEntity()->type->entity;

    $form['buffer_schedule_settings'] = [
      '#type' => 'fieldset',
      '#title' => t('Buffer Options'),
      '#option' => FALSE,
      '#weight' => 36,
      '#attributes' => ['class' => ['buffer-scheduler-form']],
      '#optional' => FALSE,
      '#description' => t('Select a buffer to add this content to. It will be published based on that buffer\'s settings.'),
      '#tree' => TRUE
    ];

    $selected_buffer = FALSE;
    if ($entity_id = $form_state->getFormObject()->getEntity()->id()) {
      $ids = \Drupal::entityQuery('schedule')
      ->condition('buffer', $entity_id)
      ->execute();
      $selected_buffer = reset($ids);
    }

    $available_buffers = [-1 => t('Select a Content buffer')];
    foreach (get_schedule_buffers() as $id => $buffer) {
      $available_buffers[$buffer->id()] = $buffer->getName();
    }

    $form['buffer_schedule_settings']['buffer'] = [
      '#type' => 'select',
      '#title' => t('Content Buffer'),
      '#options' => $available_buffers,
      '#default_value' => $selected_buffer
    ];

    $form['actions']['submit']['#submit'][] = 'buffer_schedule_node_submit';
}

/**
* Submit handler for processing nodes.
*/
function buffer_schedule_node_submit($form, FormStateInterface &$form_state) {
  $values = $form_state->getValues();
  if($values['buffer_schedule_settings']['buffer']) {
    $schedule = entity_load('schedule', $values['buffer_schedule_settings']['buffer']);
    $schedule->buffer[] = ['target_id' => $form_state->getFormObject()->getEntity()->id()];
    $schedule->save();
  }
}

/**
* A helper function that returns all published schedule buffers.
*/
function get_schedule_buffers() {
  $ids = \Drupal::entityQuery('schedule')
  ->condition('status', 1)
  ->execute();
  return entity_load_multiple('schedule', $ids);
}

/**
* Implements hook_cron
*/
function buffer_schedule_cron() {

  $entities = get_schedule_buffers();
  foreach($entities as $entity) {
    $entity->publishBuffer();
  }

}
