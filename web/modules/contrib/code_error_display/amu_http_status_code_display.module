<?php
/**
 * @file
 * logic to hook content for 404 or 403 pages.
 */

/**
 * Setting 40x template suggestions.
 *
 * @param array $suggestions  An array of alternate, more specific names for template files or theme functions.
 * @param array $vars An array of variables passed to the theme hook.
 * @param string $hook The base hook name.
 */
function amu_http_status_code_display_theme_suggestions_region_alter(&$suggestions, $vars, $hook) {

  $region = $vars['elements']['#region'];
  // Region template to replace
  $selected_region = [
    'content',
  ];
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Mapping the route with its suggestion hook
  $http_error_suggestions = [
    'system.403' => '403',
    'system.404' => '404',
  ];

  if (in_array($region, $selected_region)) {

    // If http status code error
    if (isset($http_error_suggestions[$route_name])) {
      $suggestions[] = 'region' . '__' . 'content' . '__' . $http_error_suggestions[$route_name];
    }

    /* TODO maintenance and maintenance-offline , remain to activate it only in front and only if no rights
    if( \Drupal::state()->get('system.maintenance_mode')) {
          $suggestions[] = 'region' . '__' . 'content'. '__' . 'maintenance';
     }*/
  }
}

/**
 * Make drupal knows the templates are located in the module.
 *
 * @param array $existing An array of existing implementations that may be used for override purposes. This is primarily useful for themes that may wish to examine existing implementations to extract data (such as arguments) so that it may properly register its own, higher priority implementations.
 * @param string $type Whether a theme, module, etc. is being processed.
 * @param string $theme The actual name of theme, module, etc. that is being being processed.
 * @param string $path The directory path of the theme or module, so that it doesn't need to be looked up.
 *
 * @return array
 */
function amu_http_status_code_display_theme($existing, $type, $theme, $path) {

  $arguments403 = [
    'template' => 'region--content--403',
    'base hook' => 'page',
  ];

  $arguments404 = [
    'template' => 'region--content--404',
    'base hook' => 'page',
  ];

  /* $argumentsMaintenance= [
     'template' => 'region--content--maintenance',
     'base hook' => 'page',
   ];*/


  //mapping the hook with its template
  return [
    'region__content__403' => $arguments403,
    'region__content__404' => $arguments404,
    /* 'region__content__maintenance' =>  $argumentsMaintenance,*/
  ];
}


/**
 *
 * Injecting variable into twig templates & adding libraries.
 *
 * @param array $variables An array of variables passed to the theme hook.
 * @param string $hook The base hook name.
 *
 */
function amu_http_status_code_display_preprocess(&$variables, $hook) {

  $variables['#attached']['library'][] = 'amu_http_status_code_display/amu_http_status_code_display';

  $module_handler = Drupal::service('module_handler');
  $path = $module_handler->getModule('amu_http_status_code_display')->getPath();

  if (isset($variables['region']) && $variables['region'] == 'content') {
    $variables['module_path'] = $path;
    $variables['http_host'] = $_SERVER['HTTP_HOST'];
    $config = \Drupal::config('amustatuscode.settings');
    $variables['msg404'] = $config->get('404_message', '');
    $variables['msg403'] = $config->get('403_message', '');
  }
}
