<?php

/**
 * @file
 * This module validate broken links inserted in body of node.
 *
 */

use Drupal\Core\Entity\ContentEntityForm;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function stop_broken_link_in_body_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Validate content type.
  $config = \Drupal::config('stop_broken_link.settings');
  $node_type = $config->get('stop_broken_link_in_body_node_types');
  $field = $form_state->getFormObject()->getEntity();
  $form_node_type = $field->bundle();
  if (in_array($form_node_type, array_values(array_filter($node_type)))) {
    $form['#validate'][] = 'stop_broken_link_in_body_validate';
  }
}

/**
 * Validation handler for node form.
 */
function stop_broken_link_in_body_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->hasValue('body')) {
    $config = \Drupal::config('stop_broken_link.settings');
    $bodyfield = $form_state->getValues('body')['body'][0]['value'];
    $bodyurls = stop_broken_link_in_body_get_urls($bodyfield);
    $hrefurl = stop_broken_link_in_body_hrefget_urls($bodyfield);
    // Get links from body text.
    $urls = array_unique(array_merge($bodyurls, $hrefurl));
    $restrict_number = $config->get('stop_broken_link_in_body_restrict_the_number');
    if ($restrict_number < count($urls)) {
      $form_state->setErrorByName($restrict_number, t('Max urls allowed is %count', ['%count' => $restrict_number]));
    }
    else {
      foreach ($urls as $url) {
        // Add base_url if not already added.
        $url = stop_broken_link_in_body_add_base_url($url);
        try {
          $handle=curl_init($url);
          curl_setopt($handle, CURLOPT_VERBOSE, true);
          curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($handle, CURLOPT_SSL_VERIFYPEER, false);
          $content = curl_exec($handle);
          $response = curl_getinfo($handle);
          $status = $response['http_code'];
          $correct_response = [200, 301, 302];
          if (!(in_array($status, $correct_response))) {
            $form_state->setErrorByName($status , t('Please check link inserted in body @url status code: @code', ['@url' => $url, '@code' => $status]));
          }
        }
        catch (RequestException $e) {
          return FALSE;
        }
      }          
    }
  }
}

/**
 * Check body field text to find for urls and converts them into absolute urls.
 *
 * @param string $string
 *   Contains body field strings $string.
 *
 * @return string
 *   Absolute url.
 */
function stop_broken_link_in_body_get_urls($string) {
  $regex = '/https?\:\/\/[^\" ]+/i';
  preg_match_all($regex, $string, $matches);
  return ($matches[0]);
}

/**
 * Check body field text to find ahref and then convert them into absolute urls.
 *
 * @param string $string
 *   Contains body field strings $string.
 *
 * @return string
 *   Absolute url string.
 */
function stop_broken_link_in_body_hrefget_urls($string) {
  $regex = '/href=["\']?([^"\'>]+)["\']?/';
  preg_match_all($regex, $string, $matches);
  return ($matches[1]);
}

/**
 * Check absolute urls, if not found then converts them into absolute url.
 *
 * @param string $url
 *   Contains url string $url.
 *
 * @return string
 *   Absolute url.
 */
function stop_broken_link_in_body_add_base_url($url) {
  global $base_url;
  if (!preg_match("~^(?:f|ht)tps?://~i", $url)) {
    $url = $base_url . $url;
  }
  return $url;
}

/**
 * Implements hook_help().
 */
function stop_broken_link_in_body_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'admin/config/system/stop-broken-link-in-body':
      return t('Set the basic Configuration to content type in which you want stop broken link');

    case 'admin/help#stop_broken_link_in_body':
      $output = '';
      $output .= '<p>' . t('The Stop broken link in body module detects defunct links from your content right when the content is being created. While user creates a node, the module detects broken links in the contents body by checking the remote sites and evaluating the HTTP response codes. It shows all broken links in the body section and on the content edit page, if a link check fails. If a broken link is needed, the content cannot be saved.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function stop_broken_link_in_body_permission() {
  return [
    'administer stop broken link in body' => [
      'title' => t('Administer stop broken link in body'),
      'description' => t('allow config to stop broken link in body.'),
    ],
  ];
}
