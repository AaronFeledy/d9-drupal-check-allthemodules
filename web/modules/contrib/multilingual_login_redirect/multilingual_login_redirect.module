<?php

/**
 * @file
 * Altering the login form submission behaviour.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\multilingual_login_redirect\Entity\MultilingualRedirect;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function multilingual_login_redirect_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case 'help.page.multilingual_login_redirect':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>'
        . t('Multilingual Login Redirect module allows you to redirect a user to a specific url or node number when he logs in depending on the actual language of the website and the user role.')
        . '</p>';
      return $output;
  }
  return NULL;
}

/**
 * Implements hook_form_alter().
 *
 * Calling the callback function when submittin the login form.
 */
function multilingual_login_redirect_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      $form['#submit'][] = 'multilingual_login_redirect_user_login_form_submit';
      break;
  }
}

/**
 * Implements hook_form_submit().
 *
 * Custom submit handler for login form.
 */
function multilingual_login_redirect_user_login_form_submit($form, FormStateInterface $form_state) {
  $multilingual_login_redirect = new MultilingualRedirect();
  $current_user_roles = $multilingual_login_redirect::getSortedCurrentUserRolesByWeight();
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $default_lang_redirect = 'mlr_destination__' . $current_language;
  $current_redirect = NULL;

  foreach ($current_user_roles as $role) {
    $exception_redirect = 'mlr_destination__' . $current_language . '__' . $role;
    $this_current_redirect = $multilingual_login_redirect::getRedirect($exception_redirect);
    if ($this_current_redirect != NULL && $this_current_redirect != '') {
      $current_redirect = $this_current_redirect;
    }
  }

  $current_redirect = ($current_redirect === NULL || $current_redirect == '')
    ? $multilingual_login_redirect::getRedirect($default_lang_redirect)
    : $current_redirect;

  if ($current_redirect != NULL && $current_redirect != '') {
    $redirect_type = $multilingual_login_redirect::getRedirectType($current_redirect);
    switch ($redirect_type) {
      case 'url':
        $uri = new TrustedRedirectResponse($current_redirect);
        $form_state->setResponse($uri);
        break;

      case 'node':
        $nid = $multilingual_login_redirect::getNodeIdFromNodeField($current_redirect);
        $form_state->setRedirect('entity.node.canonical', ['node' => $nid]);
        break;
    }
  }
}
