<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * Implements hook for node entities.
 */
function drupal_coverage_core_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full') {
    if ($node->bundle() == 'module') {
      $analyses = \Drupal::entityQuery('node')
        ->condition('type', 'analysis')
        ->condition('field_module', $node->id())
        ->sort('created', 'DESC')
        ->execute();
      $analysis_rendered = [];

      foreach ($analyses as $analysis) {
        $analysis_rendered[] = \Drupal\node\Entity\Node::load($analysis);
      }

      $build['coverage_analyses'] = array(
        '#theme' => 'coverage_analyses',
        '#coverage_analyses' => $analysis_rendered,
      );
    }
  }
}


/**
 * Prepares variables for coverage analysis templates.
 *
 * Default template: coverage-analyses.html.twig.
 *
 * @param array $variables
 *   An associative array containing the following key:
 *   - coverage: An associative array of book link properties.
 *     Properties used: id, branch, build_status, coverage_analysis,
 *     coverage_badge, build_id, created.
 */
function template_preprocess_coverage_analyses(&$variables) {

  $coverage_analyses = $variables['coverage_analyses'];
  $variables['coverage'] = [];

  /* @var $analysis \Drupal\node\Entity\Node */
  foreach ($coverage_analyses as $analysis) {
    /** @var \Drupal\drupal_coverage_core\AnalysisManager $analysis_manager */
    $analysis_manager = \Drupal::service('drupal_coverage_core.analysis_manager');

    $callout_class = \Drupal\drupal_coverage_core\Generator::getCalloutClass(
      $analysis->field_build_status->getString()
    );

    $attributes = array();
    $attributes['id'] = "analysis";
    $attributes['class'] = "row bs-callout $callout_class";
    //dsm($analysis_manager->getBuildStatus($analysis));
    $variables['coverage'][] = [
      'attributes' => new \Drupal\Core\Template\Attribute($attributes),
      'id' => $analysis->id(),
      'branch' => $analysis_manager->getBranch($analysis),
      'build_status' => $analysis->field_build_status->getString(),
      'coverage_analysis' => $analysis_manager->getCoverageAnalysis($analysis),
      'coverage_badge' => $analysis_manager->getCoverageBadge($analysis),
      'build_id' => $analysis->field_build_id->getString(),
      'created' => $analysis->getCreatedTime(),
      'title' => $analysis->getTitle(),
      'commit_message' => $analysis->field_commit_message->getString(),
      'duration' => $analysis_manager->getDuration($analysis),
      'started_at' => $analysis_manager->getStartedAt($analysis),
      'finished_at' => $analysis_manager->getFinishedAt($analysis),
      'number' => $analysis_manager->getNumber($analysis),
      'finished' => $analysis_manager->isFinished($analysis),
    ];
  }

}

/**
 * Implements hook_theme().
 */
function drupal_coverage_core_theme() {
  return array(
    'coverage_analyses' => array(
      'variables' => array('coverage_analyses' => NULL),
    ),
    'dc_modules' => array(
      'variables' => array('modules' => NULL),
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function drupal_coverage_core_menu_local_tasks_alter(&$data, $route_name) {
  // This is run once for each node after clearing the cache.
//   dd('-- drupal_coverage_core_menu_local_tasks_alter --');
//   dd($route_name, '$route_name');
  if ($route_name == 'entity.node.canonical') {
    // If the node being viewed is not a 'module' then remove the analysis tab.
    $node = \Drupal::routeMatch()->getParameter('node');
  //   dd($node, '$node');
    if (is_Integer($node)) {
      $node = node_load($node);
    }
  //   if (is_Object($node)) {
  //    dsm(implode(' ', array($node->id(), $node->getType(), '-', $node->getTitle())));
  //   }
    if (is_Object($node) && $node->getType() != 'module') {
      unset($data['tabs'][0]['drupal_coverage_core.new_analysis']);
  //     dsm('removed the tab');
    }
  }
}
