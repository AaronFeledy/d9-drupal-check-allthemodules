<?php

/**
 * @file
 * Testing and ensure all requirements are available.
 *
 * If QBO SDK is available, OAuth is installed on server
 * and remove any used variables during un-install.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\ji_quickbooks\JIQuickBooksSupport;

/**
 * Implements hook_requirements().
 */
function ji_quickbooks_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {
    // Checks if config.php file exists.
    $ji_quickbooks = JIQuickBooksSupport::getLibraryPath();
    if (empty($ji_quickbooks)) {
      $requirements['ji_quickbooks'] = [
        'severity' => REQUIREMENT_ERROR,
        'title' => t('JI QuickBooks'),
        'value' => t('Download SDK from @link and place in the libraries directory.', [
          '@link' => Link::fromTextAndUrl(t('here'), Url::fromUri(JIQuickBooksSupport::$sdkUrl))
            ->toString(),
        ]),
      ];
    }

    $settings_set = JIQuickBooksSupport::checkIfSettingsApplied();
    if (!$settings_set) {
      $alert_msg = t("The JI QuickBooks module isn't configured, please do so @link.", [
        '@link' => Link::fromTextAndUrl(t('here'), Url::fromRoute('ji_quickbooks.form'))
          ->toString(),
      ]);
      $requirements['ji_quickbooks_settings'] = [
        'severity' => REQUIREMENT_ERROR,
        'title' => t('JI QuickBooks'),
        'value' => $alert_msg,
      ];
    }

    $oauth = JIQuickBooksSupport::checkForOauth();
    if (!$oauth) {
      $requirements['ji_quickbooks_oauth'] = [
        'severity' => REQUIREMENT_ERROR,
        'title' => t('OAuth 1.2.3'),
        'value' => t('Minimum OAuth 1.2.3 needs to be installed on this web server, download @link.', [
          '@link' => Link::fromTextAndUrl(t('here'), Url::fromUri('http://pecl.php.net/package/oauth'))
            ->toString(),
        ]),
      ];
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Checks if OAuth is installed.
 */
function ji_quickbooks_install() {

  $oauth = JIQuickBooksSupport::checkForOauth();
  if (!$oauth) {
    \Drupal::messenger()
      ->addError(t("PHP is telling us that OAuth isn't installed on this web server. @link.", [
        '@link' => Link::fromTextAndUrl(t('See Status Report'), Url::fromRoute('system.status'))
          ->toString(),
      ]), FALSE);
  }
  else {
    \Drupal::messenger()
      ->addMessage(t("QuickBooks settings are available under @link.", [
        '@link' => Link::fromTextAndUrl(t('Configuration > JI QuickBooks Settings'), Url::fromRoute('ji_quickbooks.form'))
          ->toString(),
      ]));
  }
}

/**
 * Implements hook_uninstall().
 */
function ji_quickbooks_uninstall() {
  // Delete JI QuickBooks settings.
  \Drupal::state()->delete('ji_quickbooks_term');
  \Drupal::state()->delete('ji_quickbooks_payment_method');
  \Drupal::state()->delete('ji_quickbooks_payment_account');

  // Clear access tokens.
  \Drupal::state()->delete('ji_quickbooks_settings_access_token');
  \Drupal::state()->delete('ji_quickbooks_settings_refresh_token');
  \Drupal::state()->delete('ji_quickbooks_settings_realm_id');

  // Remove counter since user disconnected QuickBooks.
  // Added again if reconnect occurs.
  \Drupal::state()->delete('ji_quickbooks_cron_started_on');
}

/**
 * Implements hook_schema().
 */
function ji_quickbooks_schema() {
  // A table that indexes what realm a record was
  // active during synchronization.
  $schema['ji_quickbooks_realm_index'] = [
    'description' => "Track where a record was synced by logging the QBO realm id and how it's related to Drupal's customer ID.",
    'fields' => [
      'id' => [
        'description' => 'The primary identifier for a record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'oid' => [
        'description' => 'Drupal order id.',
        'type' => 'int',
        'length' => 11,
        'not null' => FALSE,
      ],
      'realm_id' => [
        'description' => 'QBO realm id where this record was synced.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
      'process' => [
        'description' => 'Customer, invoice, or payment process.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'message' => [
        'description' => 'Message from QBO.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ],
      'is_error' => [
        'description' => 'Is this record an error record?',
        'type' => 'int',
        'length' => 1,
        'not null' => TRUE,
      ],
      'response_id' => [
        'description' => 'Response id from QBO. Is the unique id used to identify a record in QBO.',
        'type' => 'int',
        'length' => 11,
        'not null' => TRUE,
      ],
      'updated' => [
        'type' => 'int',
        'description' => 'Last updated timestamp.',
        'not null' => FALSE,
      ],
      'uid' => [
        'type' => 'int',
        'description' => 'User id that pertains to the order.',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'oid' => ['oid'],
      'realm_id' => ['realm_id'],
      'process' => ['process'],
    ],
  ];

  return $schema;
}
