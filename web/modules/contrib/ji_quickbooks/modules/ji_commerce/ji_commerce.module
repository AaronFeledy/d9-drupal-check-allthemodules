<?php

use Drupal\ji_quickbooks\JIQuickBooksService;

/**
 * Implements hook_form_alter().
 *
 * Disable our QBO product ID field. We don't want a user to change this value
 * since this is necessary to maintain a records between Drupal and QuickBooks.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function ji_commerce_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'commerce_product_variation_default_add_form':
    case 'commerce_product_variation_default_edit_form':
    case 'commerce_product_variation':
      if (isset($form['field_qbo_product_id'])) {
        // By default, turn it off.
        $form['field_qbo_product_id']['#disabled'] = 'disabled';

        $editing = \Drupal::state()
          ->get('ji_quickbooks_allow_editing_of_qbo_product_id', 0);
        // Does the admin UI allow editing?
        if ($editing == 1) {
          unset($form['field_qbo_product_id']['#disabled']);
        }
      }
      break;
  }
}

/**
 * Implements ji_commerce_entity_presave().
 *
 * @param \Drupal\Core\Entity\EntityInterface $_product
 */
function ji_commerce_entity_presave(Drupal\Core\Entity\EntityInterface $_product) {
  $entity_type = $_product->getEntityTypeId();
  switch ($entity_type) {
    case 'commerce_product':
    case 'commerce_product_variation_default_add_form':
    case 'commerce_product_variation':

      global $ji_commerce_prevent_hook_entity_presave;

      // Prevent an infinite loop or multiple saves.
      if (isset($ji_commerce_prevent_hook_entity_presave)) {
        return;
      }

      try {
        // Does our JI QuickBooks Admin screen allow us to sync products?
        $sync_products_when_adding_updating = \Drupal::state()
          ->get('ji_quickbooks_auto_add_products', FALSE);
        $qbo_product_id_pairs = [];
        if ($sync_products_when_adding_updating) {
          $quickbooks_service = new JIQuickBooksService();
          if (!isset($quickbooks_service->dataService)) {
            return;
          }
          // Update all variations found within QuickBooks.
          if ($entity_type === 'commerce_product') {
            $variations = $_product->getVariations();

            // Don't continue since we have no variants to process.
            if (count($variations) == 0) {
              return;
            }
          }
          else {
            $variations[] = $_product;
          }

          // We use the commerce_product title since it might have changed.
          foreach ($variations as $row => $product) {
            $variations[$row]->setTitle($_product->getTitle());
          }

          foreach ($variations as $product) {
            $quickbooks_service->sendCommerceProduct($product);
          }
        }
      } catch (Exception $e) {
        watchdog_exception('ji_commerce_entity_presave', $e);
      }
      break;
  }
}
