<?php

/**
 * @file
 * Module file for social_sharbar.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_page_attachments_alter().
 *
 * @inheritdoc
 */
function social_sharbar_page_attachments_alter(array &$attachments) {

  $node = \Drupal::routeMatch()->getParameter('node');
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = FALSE;
  if (!empty($route)) {
    $is_admin_route = \Drupal::service('router.admin_context')->isAdminRoute($route);
    $has_node_operation_option = $route->getOption('_node_operation_route');
    $is_admin = ($is_admin_route || $has_node_operation_option);
  }
  else {
    $current_path = \Drupal::service('path.current')->getPath();
    if (preg_match('/node\/(\d+)\/edit/', $current_path, $matches)) {
      $is_admin = TRUE;
    }
    elseif (preg_match('/taxonomy\/term\/(\d+)\/edit/', $current_path, $matches)) {
      $is_admin = TRUE;
    }
  }

  if (!$is_admin) {
    if ($node) {
      $config = \Drupal::config('social_sharebar.settings');
      $total_sharebar = $config->get('sharebar_form_fieldset_count');
      $float = $config->get('sharebar_bar_position');
      $width = $config->get('sharebar_bar_width');
      $top_offset = $config->get('top_offset');
      $left_offset = $config->get('left_offset');
      $right_offset = $config->get('right_offset');
      $strh = '<ul class="mobile-social-sharebar">';
      $str = '<ul class="social-sharebar">';
      $html_tags = ['script', 'div', 'a', 'html'];
      for ($i = 0; $i < $total_sharebar; $i++) {
        $j = $i + 1;
        $s_button = $config->get($j . 'sharebar_button_value');
        $s_button_small = $config->get($j . 'sharebar_small_button_value');
        $str .= '<li>' . Xss::filter(social_sharbar_input_filter(trim($s_button)), $html_tags) . '</li>';
        $strh .= '<li>' . Xss::filter(social_sharbar_input_filter(trim($s_button_small)), $html_tags) . '</li>';
      }
      $str .= '</ul>';
      $strh .= '</ul>';
      $attachments['#attached']['library'][] = 'social_sharbar/social-sharbar';
      $attachments['#attached']['drupalSettings']['sharebardata']['buttons'] = $str;
      $attachments['#attached']['drupalSettings']['sharebardata']['buttons_small'] = $strh;
      $attachments['#attached']['drupalSettings']['sharebardata']['width'] = $width;
      $attachments['#attached']['drupalSettings']['sharebardata']['position'] = $float;
      $attachments['#attached']['drupalSettings']['sharebardata']['top_offset'] = $top_offset;
      $attachments['#attached']['drupalSettings']['sharebardata']['left_offset'] = $left_offset;
      $attachments['#attached']['drupalSettings']['sharebardata']['right_offset'] = $right_offset;
    }
  }

}

/**
 * Replaces dynamic data with their values.
 */
function social_sharbar_input_filter($input) {

  $node = \Drupal::routeMatch()->getParameter('node');
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $token_service = \Drupal::token();
  $result = $token_service->replace($input, ['node' => $node], ['language' => $language, 'clear' => TRUE]);
  return $result;
}

/**
 * Implements hook_theme().
 *
 * @inheritdoc
 */
function social_sharbar_theme($existing, $type, $theme, $path) {
  return [
    'social_sharbar' =>
      [
        'variables' =>
          [
            'blockid' => 'shareBarDiv',
            'class' => 'block-social-sharebar',
            'mobileblockid' => 'mobileShareBarDiv',
            'mobileclass' => 'mobile-sharebar-block',
          ],
        'template' => 'block--socialsharbar',
      ],
  ];
}

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function social_sharbar_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.social_sharbar':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {

        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }

  }

  return NULL;
}
