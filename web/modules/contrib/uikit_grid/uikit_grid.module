<?php

use Drupal\Core\Template\Attribute;

/**
 * @file
 * Uikit Grid Views module help and theme functions.
 */

/**
 * Implements hook_theme().
 */
function uikit_grid_theme($existing, $type, $theme, $path) {
  return [
    'uikit_grid' => [
      'variables' => ['view' => NULL, 'rows' => NULL],
      'file' => 'uikit_grid.theme.inc',
      'path' => drupal_get_path('module', 'uikit_grid') . '/templates',
    ],
  ];
}

/**
 * Prepares variables for views grid style templates.
 *
 * Default template: views-view-grid.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The view object.
 *   - rows: An array of row items. Each row is an array of content.
 */
function template_preprocess_views_view_uikit_grid(&$variables) {
  $options = $variables['options'] = $variables['view']->style_plugin->options;

  $col = 0;
  $row = 0;
  $items = [];

  // Iterate over each rendered views result row.
  foreach ($variables['rows'] as $result_index => $item) {

    // Add the item.
    $items[$row]['content'][$col]['content'] = $item;

    // Create attributes for rows.
    if (empty($items[$row]['attributes'])) {
      $row_attributes = ['class' => []];
      // Add custom row classes.
      $row_class = array_filter(explode(' ', $variables['view']->style_plugin->getCustomClass($result_index, 'row')));
      if (!empty($row_class)) {
        $row_attributes['class'] = array_merge($row_attributes['class'], $row_class);
      }
      // Add row attributes to the item.
      $items[$row]['attributes'] = new Attribute($row_attributes);
    }

    // Create attributes for columns.
    $columns = $options['columns'];
    $col_attributes = ['class' => [
      "uk-width-1-$columns@l",
    ]];
    // Add default views column classes.
    // Add custom column classes.
    $col_class = array_filter(explode(' ', $variables['view']->style_plugin->getCustomClass($result_index, 'col')));
    if (!empty($col_class)) {
      $col_attributes['class'] = array_merge($col_attributes['class'], $col_class);
    }
    // Add column attributes to the item.
    $items[$row]['content'][$col]['attributes'] = new Attribute($col_attributes);

    // Increase, decrease or reset appropriate integers.
    if ($col == 0 && $col != ($options['columns'] - 1)) {
      $col++;
    }
    elseif ($col >= ($options['columns'] - 1)) {
      $col = 0;
      $row++;
    }
    else {
      $col++;
    }
  }

  $gap_classes = [
    'small' => 'uk-grid-small',
    'medium' => 'uk-grid-medium',
    'large' => 'uk-grid-large',
    'collapse' => 'uk-grid-collapse',
  ];

  $variables['attributes']['class'][] = $gap_classes[$options['gap_size']];
  $variables['show_divider'] = $options['divider'];
  $variables['match_height'] = $options['match_height'];
  if ($options['parralax']) {
    $speed = $options['parralax_speed'];
    $variables['attributes']['uk-grid-parallax'] = "translate:$speed";
  }
  // Add items to the variables array.
  $variables['items'] = $items;
}
