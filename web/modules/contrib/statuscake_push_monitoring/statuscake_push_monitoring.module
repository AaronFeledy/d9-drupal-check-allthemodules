<?php
/**
 * @file
 * Module file.
 */

use Drupal\Core\Url;
use Drupal\Component\Utility\UrlHelper;

/**
 * Converting time in microtime format.
 *
 * Sometimes cron runs so quickly that milliseconds are not enough.
 */
function statuscake_push_monitoring_microtime_float() {
  list($usec, $sec) = explode(" ", microtime());
  return ((float) $usec + (float) $sec);
}

/**
 * Implements hook_cron().
 */
function statuscake_push_monitoring_cron() {
  drupal_register_shutdown_function(statuscake_push_monitoring_push_url());
}

/**
 * Implements new function: statuscake_push_monitoring_push_url().
 *
 * @see http://kb.statuscake.com/hc/en-us/articles/203808141-Push-Monitoring
 */
function statuscake_push_monitoring_push_url() {
  $time_start = drupal_static('statuscake_push_monitoring_start_time');
  $time_end = statuscake_push_monitoring_microtime_float();
  $time = ($time_end - $time_start) * 1000;
  // Inserting $time variable in URL.
  $statuscakeurl = \Drupal::config('statuscake_push_monitoring.settings')->get('statuscake_push_monitoring_url');
  $url_info = parse_url($statuscakeurl);
  $query_values = array();
  parse_str($url_info['query'], $query_values);
  $query_values['time'] = $time;

  $url_info['query'] = UrlHelper::buildQuery($query_values);
  $statuscakeurl_with_time = ($url_info['scheme'] . '://' . $url_info['host'] . $url_info['path'] . '?' . $url_info['query']);
  $client = \Drupal::httpClient();
  $request = new \GuzzleHttp\Psr7\Request('GET', $statuscakeurl_with_time);
  $promise = $client->sendAsync($request)->then(function ($response) {
  });
  $promise->wait();
  Url::fromUri();
}

/**
 * Implements hook_permission().
 */
function statuscake_push_monitoring_permission() {
  return array(
    'administer statuscake settings' => array(
      'title' => t('Administer StatusCake settings'),
    ),
  );
}
