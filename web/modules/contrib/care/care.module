<?php

/**
 * @file
 * Utility functions to call CARE web services.
 */

/**
 * Function to call CARE SOAP client with method name and array of data.
 *
 * This function handles and logs errors that occur at the SOAP level. It does
 * not handle or log any error conditions that are returned (without error) in
 * the SOAP call's result data.
 *
 * @param string $methodname
 *          The name of the SOAP method to call, e.g. "AddContact".
 * @param array $data
 *          A PHP associative array of parameter data,
 *          e.g. array('Title' => 'Mr', 'Forenames' => 'Fred').
 * @param array $typedata
 *          An optional CARE type and name for the method, if needed,
 *          e.g. array('pSelectDataType' => 'xcdtContactMembershipDetails').
 *
 * @return SimpleXMLElement
 *     Containing the result, or an object with an ErrorMessage in the case
 *     of any failure.
 */
function care_call_method($methodname, $data = array(), $typedata = NULL) {
  // Store client object for later calls.
  static $client = NULL;
  // Don't wait for connection to time out again if it previously failed for
  // this web request.
  static $connection_failed = FALSE;
  $resultxml = new SimpleXMLElement('<xml></xml>');
  if ($connection_failed) {
    Drupal::logger('care')->error('Error: skipped CARE call as a previous call failed to connect');
    $resultxml->ErrorMessage = t('Error: skipped CARE call as a previous call failed to connect');
    return $resultxml;
  }
  // Create a SOAP client object for CARE if not already done.
  if (!$client) {
    $service_address_url = Drupal::config('care.settings')->get('care_wsdl_url');
    $soap_options = array(
      'wsdl_cache' => WSDL_CACHE_BOTH,
    );
    if (Drupal::config('care.settings')->get('care_log_results')) {
      $soap_options += array(
        'trace' => TRUE,
      );
    }
    try {
      $client = new SoapClient($service_address_url, $soap_options);
    }
    catch (Exception $e) {
      Drupal::logger('care')->error('Error: @message', array(
        '@message' => $e->getMessage(),
      ));
      $connection_failed = TRUE;
      $resultxml->ErrorMessage = 'Failed to connect: ' . $e->getMessage();
      return $resultxml;
    }
  }
  // Create new SimpleXML element.
  $xml = new SimpleXMLElement("<Parameters></Parameters>");
  // Add parameters with values as XML child elements.
  foreach ($data as $parameter => $value) {
    if ($parameter) {
      // addChild escapes "<" and ">" but not "&".
      $value = str_replace('&', '&amp;', $value);
      $xml->addChild($parameter, $value);
    }
    else {
      Drupal::logger('care')->error('Missing parameter name (PHP array key) for parameter for !method call. Data array: !data', array(
        '!method' => $methodname,
        '!data' => print_r($data, TRUE),
      ), WATCHDOG_WARNING);
    }
  }

  // Call the SOAP method.
  try {
    if (is_array($typedata)) {
      // Call typed care method, two arguments.
      $typetype = key($typedata);
      $typename = $typedata[$typetype];
      if (Drupal::config('care.settings')->get('care_log_calls')) {
        Drupal::logger('care')->notice('@method call: <pre>@params</pre>', array(
          '@method' => $methodname,
          '@params' => _care_pretty_xml($xml),
        ));
      }
      $result = $client->$methodname(array(
        $typetype => $typename,
        'pXMLParams' => $xml->asXML(),
      ));
      // Return the result as a new SimpleXML element.
      $resultname = $methodname . 'Result';
      $resultxml = new SimpleXMLElement($result->$resultname);
      if (Drupal::config('care.settings')->get('care_log_results')) {
        Drupal::logger('care')->notice('@method result (@size): <pre>@result</pre>', array(
          '@method' => $methodname,
          '@size' => format_size(strlen($client->__getLastResponse())),
          '@result' => _care_pretty_xml($resultxml),
        ));
      }
    }
    else {
      // Call simple care method, one argument.
      if (Drupal::config('care.settings')->get('care_log_calls')) {
        Drupal::logger('care')->notice('@method call: <pre>@params</pre>', array(
          '@method' => $methodname,
          '@params' => _care_pretty_xml($xml),
        ));
      }
      $result = $client->$methodname(array(
        'pXMLParams' => $xml->asXML(),
      ));
      // Return the result as a new SimpleXML element.
      $resultname = $methodname . 'Result';
      $resultxml = new SimpleXMLElement($result->$resultname);
      if (Drupal::config('care.settings')->get('care_log_results')) {
        Drupal::logger('care')->notice('@method result (@size): <pre>@result</pre>', array(
          '@method' => $methodname,
          '@size' => format_size(strlen($client->__getLastResponse())),
          '@result' => _care_pretty_xml($resultxml),
        ));
      }
    }
  }
  catch (Exception $e) {
    Drupal::logger('care')->error('CARE Error: @message', array(
      '@message' => $e->getMessage(),
    ));
    $resultxml->ErrorMessage = $e->getMessage();
    return $resultxml;
  }

  // Log any CARE error results.
  if (isset($resultxml->ErrorMessage)) {
    Drupal::logger('care')->error('@method Error: @message', array(
      '@method' => $methodname,
      '@message' => (string) $resultxml->ErrorMessage,
    ));
  }

  return $resultxml;
}

/**
 * Private function to pretty-print XML from a SimpleXML object.
 */
function _care_pretty_xml($xml) {
  if (extension_loaded('dom')) {
    $doc = new DOMDocument('1.0');
    $doc->formatOutput = TRUE;
    $domnode = dom_import_simplexml($xml);
    $domnode = $doc->importNode($domnode, TRUE);
    $domnode = $doc->appendChild($domnode);
    $xml = $doc->saveXML();
    return $xml;
  }
  else {
    return $xml->asXML();
  }
}

/**
 * Utility function to convert ISO 3166-1 alpha-2 codes to CARE country codes.
 */
function care_iso3166_to_country($iso_code) {
  $iso_code = strtoupper($iso_code);
  module_load_include('inc', 'care', 'iso_country_mapping');
  $country_map = _care_country_map();
  if (array_key_exists($iso_code, $country_map) and $country_map[$iso_code]['care_code'] != '') {
    return $country_map[$iso_code]['care_code'];
  }
  else {
    return $iso_code;
  }
}

/**
 * Utility function to convert CARE country codes to ISO 3166-1 alpha-2 codes.
 */
function care_country_to_iso3166($country_code) {
  $country_code = strtoupper($country_code);
  module_load_include('inc', 'care', 'iso_country_mapping');
  $country_map = _care_country_map();
  foreach ($country_map as $iso_code => $data) {
    if ($data['care_code'] == $country_code) {
      return $iso_code;
    }
  }
  return $country_code;
}
