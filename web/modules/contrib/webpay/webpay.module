<?php

/**
 * @file
 * Webpay primary module file.
 */


/**
 * Implements hook_theme().
 */
function webpay_theme() {
  return [
    'webpay_return' => [
      'variables' => [
        'token' => '',
        'url' => '',
      ],
    ],
    'webpay_failure' => [
      'variables' => [
        'order_id'          => NULL,
        'redirection'       => '<front>',
        'title_redirection' => t('Go to home page'),
      ],
    ],
    'webpay_voucher' => [
      'variables' => [
        'transaction' => NULL,
        'products' => '',
      ],
    ],
  ];
}


/**
 * Given a token, returns the transaction made.
 *
 * @param string $token
 *   The token returned by webpay.
 *
 * @return mixed
 *   If a Transaction exists for the token then returns the WebpayTransaction
 *   with the data. Otherwise it returns boolean false.
 */
function webpay_get_transaction_by_token($token) {
  $entity_manager = \Drupal::service('entity_type.manager');
  $storage = $entity_manager->getStorage('webpay_transaction');
  $transactions = $storage->loadByProperties(['token' => $token]);

  if (!empty($transactions)) {
    return end($transactions);
  }

  return FALSE;
}

/**
 * Prepares variables for Webpay voucher templates.
 *
 * Default template: webpay_voucher.html.twig.
 */
function template_preprocess_webpay_voucher(array &$variables) {
  $transaction = $variables['transaction'];

  $variables += [
    'order_number' => $transaction->get('order_number')->value,
    'amount' => $transaction->get('amount')->value,
    'authorization_code' => $transaction->get('authorization_code')->value,
    'transaction_date' => $transaction->get('transaction_date')->value,
    'payment_type' => $transaction->getPaymentType(),
    'quota_type' => $transaction->getQuotaType(),
    'shares_number' => $transaction->get('shares_number')->value,
    'card_number' => $transaction->get('card_number')->value,
  ];
}
