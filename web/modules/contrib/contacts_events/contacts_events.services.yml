services:
  logger.channel.contacts_events:
    parent: logger.channel_base
    arguments: ['contacts_events']
  contacts_events.ticket.acquire:
    class: Drupal\contacts_events\EventSubscriber\CreateIndividualProfileOnTicketAcquisition
    tags:
    - { name: 'event_subscriber' }
  contacts_events.price_calculator:
    class: Drupal\contacts_events\PriceCalculator
    arguments: ['@entity_type.manager', '@logger.channel.contacts_events']
  contacts_events.cron.recalculate_booking_windows:
    class: Drupal\contacts_events\Cron\RecalculateOnBookingWindow
    arguments: ['@state', '@datetime.time', '@entity_type.manager', '@entity_field.manager', '@contacts_events.price_calculator']

  # State machine
  contacts_events.booking_confirmed:
    class: Drupal\contacts_events\EventSubscriber\BookingConfirmedSubscriber
    arguments: ['@datetime.time', '@event_dispatcher']
    tags:
      - { name: event_subscriber }
  contacts_events.workflow_guard:
    class: Drupal\contacts_events\Guard\WorkflowGuard
    tags:
    - { name: state_machine.guard, group: commerce_order }

  # Payment events.
  contacts_events.subscriber.payment_data:
    class: Drupal\contacts_events\EventSubscriber\PaymentDataSubscriber
    tags:
    - { name: 'event_subscriber' }

  # Entity hooks.
  contacts_events.entity_hooks.commerce_order:
    class: Drupal\contacts_events\Entity\OrderHooks
  contacts_events.entity_hooks.commerce_order_item:
    class: Drupal\contacts_events\Entity\OrderItemHooks
    arguments: ['@current_route_match']
  contacts_events.entity_hooks.commerce_payment:
    class: Drupal\contacts_events\Entity\PaymentHooks
