<?php

/**
 * @file
 * Contains install and update functions for Commerce Worldline.
 */

/**
 * Implements hook_requirements().
 */
function commerce_wordline_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    if (!class_exists('\Sips\Normalizer')) {
      $requirements['commerce_worldline_library'] = [
        'description' => t('Commerce Worldline requires the marlon-be/marlon-sips library.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  return $requirements;
}

/**
 * Remove payment method type fields, install fields on payment entity instead.
 *
 * This will remove the old tables with sips seal + response codes
 */
function commerce_worldline_update_8001() {
  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManager $entity_definition_update_manager */
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_id = 'commerce_payment_method';
  $entity_type = $entity_definition_update_manager->getEntityType($entity_type_id);

  // We've removed the fields from the payment method, so let's actually
  // remove them.
  // We actually empty the fields as well as deleting them, this is a very harsh
  // method of doing this. However, this is not that bad.
  // 1) Seals are temporary and only used for validation of the payment.
  // 2) Response codes are very useful for debugging - as they contain the
  // actual reason why a payment passed/failed. However - this information is
  // usually not relevant for the future. It's also saved, with less detail, in
  // the actual payment status. (00 -> success, 17 -> void, 05 -> failed, ...)
  if ((bool) $entity_type) {
    $storage_definition = $entity_definition_update_manager
      ->getFieldStorageDefinition('sips_seal', $entity_type_id);
    if ($storage_definition) {
      \Drupal::database()
        ->query('DELETE FROM {commerce_payment_method__sips_seal}');
      $entity_definition_update_manager->uninstallFieldStorageDefinition($storage_definition);
    }
    $storage_definition = $entity_definition_update_manager
      ->getFieldStorageDefinition('sips_response_code', $entity_type_id);
    if ($storage_definition) {
      \Drupal::database()
        ->query('DELETE FROM {commerce_payment_method__sips_response_code}');
      $entity_definition_update_manager->uninstallFieldStorageDefinition($storage_definition);
    }
  }

  // Add fields to the commerce payment entity.
  $entity_type_id = 'commerce_payment';
  $entity_type = $entity_definition_update_manager->getEntityType($entity_type_id);
  if ((bool) $entity_type) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
    $fields = commerce_worldline_entity_base_field_info($entity_type);

    foreach ($fields as $key => $field) {
      $entity_definition_update_manager->installFieldStorageDefinition(
        $key,
        'commerce_payment',
        $field->getProvider(),
        $field
      );
    }
  }
}
