<?php
use Drupal\Core\Url;
use Drupal\update\UpdateManagerInterface;

/**
 * @param array $info
 * @param \Drupal\Core\Extension\Extension $file
 * @param $type
 */
function composer_deploy_system_info_alter(array &$info, \Drupal\Core\Extension\Extension $file, $type) {
  $handler = &drupal_static(__FUNCTION__);

  if (!isset($handler)) {
    $handler = \Drupal\composer_deploy\ComposerDeployHandler::fromVendorDir(\Drupal::config('composer_deploy.settings')->get('vendor_dir'));
  }

  if (empty($info['version'])) {
    $project = basename($file->getFilename(), '.info.yml');
    $package = $handler->getPackage($project);
    if ($package) {
      // Skip processing for Drupal submodules. Submodules (e.g. ldap_authentication ldap) are shipped as metapackages.
      if ($package['type'] == 'metapackage') {
        return;
      }

      $info['project'] = $project;
      $info['composer_deploy_git_hash'] = isset($package['source']['reference']) ? $package['source']['reference'] : NULL;

      if (isset($package['extra']['drupal']['version'])) {
        $info['version'] = $package['extra']['drupal']['version'];
      }
      if (isset($package['extra']['drupal']['datestamp'])) {
        $info['datestamp'] = $package['extra']['drupal']['datestamp'];
      }

      // Fallback to other composer metadata
      if (empty($info['datestamp']) && isset($package['time'])) {
        $info['datestamp'] = strtotime($package['time']);
      }
      if (empty($info['version']) && substr($package['version'], 0, 4) == 'dev-') {
        $info['version'] = substr($package['version'], 4) . '-dev';
      }
      elseif (empty($info['version'])) {
        /**
         * @todo: Handle mode version constraints.
         */
        $info['version'] = 'dev';
      }
    }
  }
}

/**
 * Implements template_preprocess_update_project_status().
 */
function composer_deploy_preprocess_update_project_status(&$variables) {
  if (empty($variables['versions']) || $variables['project']['status'] == UpdateManagerInterface::CURRENT) {
    return;
  }
  $project_type = $variables['project']['project_type'];
  if (!in_array($project_type, ['module', 'theme'])) {
    return;
  }
  $projectData = system_get_info($project_type, $variables['project']['name']);

  foreach ($variables['versions'] as &$version) {
    /** @todo: Handle dev releases (compare to branch) */
    $currentVersion = substr($variables['project']['existing_version'], -3) == 'dev' ? $projectData['composer_deploy_git_hash'] : $variables['project']['existing_version'];

    // Add diff link.
    $diff = Url::fromUri('https://git.drupalcode.org/project/' . $variables['project']['name'] . '/compare/' . $currentVersion . '...' . $version['#version']['tag']);
    $version['#version']['diff_link'] = $diff->toString();
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function composer_deploy_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['update_version'])) {
    $theme_registry['update_version']['type'] = 'module';
    $theme_registry['update_version']['path'] = drupal_get_path('module', 'composer_deploy') . '/templates';
    unset($theme_registry['update_version']['theme path']);
  }
}
