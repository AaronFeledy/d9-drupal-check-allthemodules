<?php
/**************************************************************
 * Context Ad-Serving and Analytics
 * @file: casaa.module
 * @author(s): geoff.maxey (cntlscrut) + tobby.hagler (tobby)
 * @version: 7.x-1.x-dev
 *************************************************************/

/**
 * Implementation of hook_permission()
 */ 
function casaa_permission() {
  return array(
    'administer casaa module' => array(
      'title' => t('Administer the CASAA module'), 
      'description' => t('Manage and create mappings for the CASAA framework.'),
    ),
  );
}


/**
 * Implementation of hook_menu()
 * */
function casaa_menu() {
	$items = array();
	
	//Main configuration pages and tabbed items
	$items['admin/structure/casaa'] = array(
		'title' => t('CASAA'),
		'description' => t('Administer the CASAA system... and some other stuff.'),
		'page callback' => 'casaa_main_settings_page',
		'access arguments' => array('administer casaa module'),
	);
	$items['admin/structure/casaa/mappings'] = array(
		'title' => t('Mappings'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
	);
	$items['admin/structure/casaa/globals'] = array(
		'title' => t('Manage Plug-ins'),
		'page callback' => 'casaa_global_settings_page',
		'access arguments' => array('administer casaa module'),
		'type' => MENU_LOCAL_TASK,
		'weight' => -9,
	);
	
	//ctools menu and callbacks
	$items['admin/structure/casaa/mappings/%ctools_js/view'] = array(
		'page callback' => 'casaa_structure_tables_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.table.inc',
		'type' => MENU_CALLBACK,
	);
	$items['admin/structure/casaa/mappings/%ctools_js/add'] = array(
		'page callback' => 'casaa_add_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.add.inc',
		'type' => MENU_CALLBACK,
	);
	$items['admin/structure/casaa/mappings/%ctools_js/edit'] = array(
		'page callback' => 'casaa_edit_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.edit.inc',
		'type' => MENU_CALLBACK,
	);
	$items['admin/structure/casaa/mappings/%ctools_js/delete'] = array(
		'page callback' => 'casaa_delete_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.delete.inc',
	);
	$items['admin/structure/casaa/mappings/%ctools_js/import'] = array(
		'page callback' => 'casaa_import_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.move.inc',
	);
	$items['admin/structure/casaa/mappings/%ctools_js/export'] = array(
		'page callback' => 'casaa_export_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.move.inc',
	);
	$items['admin/structure/casaa/mappings/%ctools_js/clone'] = array(
		'page callback' => 'casaa_clone_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.move.inc',
	);
	$items['admin/structure/casaa/mappings/%ctools_js/search'] = array(
		'page callback' => 'casaa_search_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.search.inc',
	);
	
	
	// AHAH callbacks
	$items['casaa_status/js'] = array(
		'page callback' => 'casaa_set_status_js',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}


#################################################
# Interface theming and preprocessing functions #
#################################################


/**
 * Implementation of hook_theme_registry_alter()
 */ 
function casaa_theme_registry_alter(&$theme_registry) {
	$mod_path = drupal_get_path('module', 'casaa');
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('casaa');
  foreach ($hooks as $h) {
    _casaa_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _casaa_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}


/**
 * Implementation of hook_theme
 * Register themes for the main and global pages
 * */
function casaa_theme($existing, $type, $theme, $path) {
	return array(
		'casaa_main' => array(
			'template' => 'casaa_main',
			'path' => drupal_get_path('module', 'casaa') . '/themes',
			'type' => 'module',
		),
		'casaa_global' => array(
			'template' => 'casaa_global',
			'path' => drupal_get_path('module', 'casaa') . '/themes',
			'type' => 'module',
		),
	);
}


/**
 * Implementation of template_preprocess_HOOK
 * 
 * Initialize and load the global settings form for the selected plug-in.
 * Loaded vars will be passed to the template file.
 * */
function template_preprocess_casaa_global(&$variables, $hook) {
	$variables['plugins'] = _casaa_load_plugins();
	
	if (module_exists('domain') && function_exists('domain_domains')) {
		$variables['domains'] = domain_domains();
		if (!arg(4)) {
			$first_dom = pos($variables['domains']);
			$variables['active_domain'] = $first_dom['domain_id'];
		}
		else {
			$variables['active_domain'] = arg(4);
		}
	}
	else {
		$variables['domains'][] = array(
			'domain_id' => 0,
			'sitename' => variable_get('site_name', ''),
		);
		$variables['active_domain'] = 0;
	}
	
	// @fixme: sanitize the argument from url!!!
	// set the plugin being viewed. if not specified in the url args
	// use the first plugin in the list.
	if (arg(5)) {
		$variables['active_plugin'] = arg(5);
		if (function_exists($variables['active_plugin'] . "_global_settings_form")) {
			$variables['plugin_form'] = drupal_get_form($variables['active_plugin'] . "_global_settings_form");
		}
	}
	else {
		$variables['plugin_form'] = NULL;
	}
}

/**
 * Implementation of template_preprocess_HOOK
 * 
 * Initialize and load the main settings options for the domains
 * and their corresponding mapping values.
 * 
 * @todo: complete the integration of the domain module.
 */
function template_preprocess_casaa_main(&$variables, $hook) {
	if (module_exists('domain') && function_exists('domain_domains')) {
		$variables['domains'] = domain_domains();
		if (!arg(4)) {
			$first_dom = pos($variables['domains']);
			$variables['active_domain'] = $first_dom['domain_id'];
		}
		else {
			$variables['active_domain'] = arg(4);
		}
	}
	else {
		$variables['domains'][] = array(
			'domain_id' => 0,
			'sitename' => variable_get('site_name', ''),
		);
		$variables['active_domain'] = 0;
	}
}

/**
 * 
 */
function casaa_main_settings_page() {
	$output = '';
	$output .= theme('casaa_main');
	return $output;
}


/**
 * 
 */
function casaa_global_settings_page() {
	$output = '';
	$output = theme('casaa_global');
	return $output;
}


##############################
# Plug-in Registry Functions #
##############################

/**
 * Plug-in Registry
 * Insert the plug-in's data into the framework registry
 */
function casaa_register($plugin = array()) {
	if (!empty($plugin)) {
		_casaa_register_plugin($plugin);
	}
}

function _casaa_register_plugin($plugin) {
	
	// avoid attempting to register plugins that are already registered
	if(_casaa_plugin_is_registered($plugin['module'])) {
		drupal_set_message($plugin['name'] . ' already registered.', 'warning');
		return FALSE;
	}
	else {
		$table = 'casaa_plugin_registry';
		$data = array(
			'module_file' => $plugin['module'],
			'module_name' => $plugin['name'],
		);
		if (drupal_write_record($table, $data, array())) {
			drupal_set_message($plugin['name'] . " has been registered");
		}
		else {
			drupal_set_message("Unable to register " . $plugin['name'], 'error');
		}
	}
}



/**
 * Plug-in Un-register
 * Remove the plug-in's data from the framework registry
 */
function casaa_unregister($plugin = '') {
	if (!empty($plugin) && $plugin !== '') {
		_casaa_unregister_plugin($plugin);
	}
}

function _casaa_unregister_plugin($plugin) {
	$table = 'casaa_plugin_registry';
	$del = db_delete($table)
		->condition('module_file', $plugin)
		->execute();
	drupal_set_message("$plugin has been unregistered");
}



######################################
# Utility and Helper Functions       #
######################################

/**
 * load the list of plug-ins and values from the registry
 */
function _casaa_load_plugins() {
	$plugins = array();
	
	$results = db_query("SELECT * FROM {casaa_plugin_registry}");
	if (is_array($results) && !empty($results)) {
		foreach ($results as $plugin) {
			$plugins[$plugin->module_file] = array(
				'name' => $plugin->module_name,
				'status' => $plugin->status,
			);
		}
	}

	return $plugins;
}

/**
 * check to see if a plug-in is registered.
 */
function _casaa_plugin_is_registered($plugin) {
	$is = FALSE;
	$results = db_query("SELECT module_file FROM {casaa_plugin_registry} WHERE module_file=:plugin", array(':plugin' => $plugin), array());
	foreach ($results as $result) {
		if ($result->module_file == $plugin) {
			$is = TRUE;
		}
	}
	return $is;	
} 

/**
 * get the status for the plugin given a domain
 */
function casaa_get_status($plugin, $domain) {
	$status = 0;
	$results = db_query("SELECT status FROM {casaa_plugin_domain} WHERE module_file=:plugin AND domain=:domain", array(':plugin' => $plugin, ':domain' => $domain), array());
	foreach ($results as $result) {
		$status = $result->status;
	}
	return $status;
}

##################################################
# Global and Main Settings Management Functions  #
##################################################

/**
 * Global values save function
 */
function casaa_global_save($vals = array(), $domain = NULL) {
	if (!$domain) {
		$domain = arg(4);
	}
	if (is_array($vals) && !empty($vals) && _casaa_plugin_is_registered($vals['plugin'])) {
		
		//grab the status before we remove any records
		$status = casaa_get_status($vals['plugin'], $domain);
		$table = 'casaa_plugin_domain';
		$data = array(
			'module_file' => $vals['plugin'],
			'domain' => $domain,
			'status' => $status,
			'globals' => serialize($vals),
		);
		
		//remove the row from the db
		$del = db_delete($table)
			->condition('module_file', $vals['plugin'])
			->condition('domain', $domain)
			->execute();
			
		//insert the new row/values back in.
		if (drupal_write_record($table, $data, array())) {
			drupal_set_message("Settings have been saved");
		}
		else {
			drupal_set_message("Unable to save. Contact your adminstrator.", 'error');
		}
	}
}

/**
 * Return the global values for the requesting plug-in.
 * Should only be used for building the global forms.
 */
function casaa_get_global_values($plugin, $domain = NULL) {
	$globals = '';
	
	if (!$domain) {
		$domain = arg(4);
	}
	$results = db_query("SELECT globals FROM {casaa_plugin_domain} WHERE module_file=:plugin AND domain=:domain", array(':plugin' => $plugin, ':domain' => $domain), array());
	foreach ($results as $result) {
		$globals = unserialize($result->globals);
	}
	return $globals;
}


/**
 * Generate a simple checkbox for enabling/disabling.
 */ 
function casaa_status_form() {
	$active = arg(5);
	$domain = arg(4);
	$status = casaa_get_status($active, $domain);

	if ($status == 1) {
		$title = 'Enabled';
	}
	else {
		$title = 'Disabled';
	}
	
	$form['plugin_status_check'] = array(
		'#type' => 'checkbox',
		'#title' => $title,
		'#default_value' => $status,
		'#prefix' => '<div class="clear-block" id="casaa-status-wrapper">',
		'#suffix' => '</div>',
		'#ahah' => array(
			'path' => 'casaa_status/js/' . $domain . '/' . $active,
			'method' => 'replace',
			'wrapper' => 'casaa-status-wrapper',
		),
	);
	return $form;
}


/**
 * AHAH callback for status management.
 * 
 * Grab the status from the form state, update
 * the plugin status in the registry, and 
 * rebuild the form with the new status. 
 */
function casaa_set_status_js() {
	include_once 'modules/node/node.pages.inc';
	
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
	$form_build_id = $_POST['form_build_id'];
	
	$form = form_get_cache($form_build_id, $form_state);
	$args = $form['#parameters'];
	$form_id = array_shift($args);
	$form_state['post'] = $form['#post'] = $_POST;
	$form['#programmed'] = $form['#redirect'] = FALSE;
	drupal_process_form($form_id, $form, $form_state);
	
	$status = $form_state['values']['plugin_status_check'];
	
	$domain = arg(2);
	$active = arg(3);
	
	$plugins = _casaa_load_plugins();
	if (!$active) {
		$active = pos(array_keys($plugins));
	}
	
	if ($status == 1) {
		$title = 'Enabled';
	}
	else {
		$title = 'Disabled';
	}
	
	_casaa_set_status($active, $status, $domain);
	
	$form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
	
	$element['plugin_status_check'] = array(
		'#type' => 'checkbox',
		'#title' => $title,
		'#value' => $status,
		'#prefix' => '<div class="clear-block" id="casaa-status-wrapper">',
		'#suffix' => '</div>',
		'#ahah' => array(
			'path' => 'casaa_status/js/' . $active,
			'method' => 'replace',
			'wrapper' => 'casaa-status-wrapper',
		),
	);

	$output .= theme('status_messages');
	$output .= drupal_render($element);
	drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Update the status in the plugin registry
 */ 
function _casaa_set_status($plugin, $status, $domain) {
	$table = 'casaa_plugin_domain';
	
	$updated = db_update($table)
		->fields(array(
			'status' => $status,
		))
		->condition('module_file', $plugin)
		->condition('domain', $domain)
		->execute();
}