<?php

/**
 * @file
 * Module file for custom translation deployments.
 */

const CUSTOM_TRANSLATION_DEPLOYMENTS_DATA_KEY = 'is_custom_translation_deployment_object';

/**
 * Implements hook_cache_flush().
 */
function custom_translation_deployments_cache_flush() {
  // Gather info about what modules wants to have a say about translation files.
  $info = \Drupal::moduleHandler()
    ->invokeAll('custom_translation_deployments_files');

  /** @var \Drupal\locale\LocaleProjectStorageInterface $storage */
  $storage = \Drupal::service('locale.project');
  foreach ($info as $item) {
    if (!$item || !is_array($item) || empty($item['name'])) {
      continue;
    }
    $item[CUSTOM_TRANSLATION_DEPLOYMENTS_DATA_KEY] = TRUE;
    // See if it already exists.
    if ($project = $storage->get($item['name'])) {
      // See if it is ours.
      if (empty($project[CUSTOM_TRANSLATION_DEPLOYMENTS_DATA_KEY])) {
        continue;
      }
    }
    $storage->set($item['name'], $item);
  }
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function custom_translation_deployments_locale_translation_projects_alter(&$projects) {
  $info = \Drupal::moduleHandler()
    ->invokeAll('custom_translation_deployments_files');
  foreach ($info as $item) {
    if (!$item || !is_array($item) || empty($item['name'])) {
      continue;
    }
    $item['info'] = [
      'name' => $item['name'],
    ];
    $item[CUSTOM_TRANSLATION_DEPLOYMENTS_DATA_KEY] = TRUE;
    $projects[$item['name']] = $item;
  }
}
