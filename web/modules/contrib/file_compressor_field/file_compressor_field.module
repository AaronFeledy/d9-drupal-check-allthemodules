<?php

/**
 * @file
 * Hook implementations and API functions for File Compressor field module.
 */

use \Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function file_compressor_field_help($path, $arg) {
  switch ($path) {
    case 'help.page.file_compressor_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides a "File Compressor" field type that allows to archive and compress attached files to an entity into a single file.') . '</p>';
      $output .= '<p>' . t('Given that this file is inside a new field on the entity, this module provides full integration with the entity system out of the box. Entity revisions and multilingual features work out of the box.') . '</p>';
      $output .= '<p>' . t('This field is totally hidden during the entity creation process, and makes use of default File field formatters to display the compressed file.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<p>' . t('Usage is straightforward. Add a "File Compressor" field to any entity and select the fields you want to include in the automatically generated compressed file from the list.') . '</p>';
      $output .= '<p>' . t('Configure the field visibility in the "Manage Display" tab.') . '</p>';
      $output .= '<p>' . t('If you made visible the File Compressor field, you will be able to download all the attachments to the entity in a single compressed file.') . '</p>';
      $output .= '<p>' . t('<strong>Note:</strong> By default, File Compressor field module only gives support for File and Image fields. Besides of that, provides hooks to extend it to other file based fields.') . '</p>';
      $output .= '<h3>' . t('Requirements') . '</h3>';
      $output .= '<p>' . t('This module provides by default two Compressor plugins, Zip and GZip. This list can be extended using hooks. Each zip provider requires a different PHP library:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Zip:</strong> php_zip extension. <a href="@link">PHP Zip Documentation</a>', array('@link' =>'http://php.net/manual/es/book.zip.php')) . '</li>';
      $output .= '<li>' . t('<strong>GZip:</strong> Archive Tar PEAR package. <a href="@link">Archive Tar Documentation</a>', array('@link' =>'http://pear.php.net/package/Archive_Tar')) . '</li>';
      $output .= '</ul>';
      return $output;
    case 'file_compressor_field.rebuild':
      $output = '<p>' . t('Select Fields you want to rebuild manually using File Compressor field.') . '</p>';
      $output .= '<p>' . t('This only should be necessary after creating compress field on existing entities or when modifying the fields to compress.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function file_compressor_field_field_formatter_info_alter(&$info) {
  $info['file_default']['field_types'][] = 'file_compressor';
  $info['file_table']['field_types'][] = 'file_compressor';
  $info['file_url_plain']['field_types'][] = 'file_compressor';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a button 'Save and manage fields' to the 'Create content type' form.
 *
 * @see node_type_form()
 * @see field_ui_form_node_type_form_submit()
 */
function file_compressor_field_form_field_ui_field_storage_edit_form_alter(&$form, FormStateInterface $form_state) {
  if ($form['#field']->get('type') == 'file_compressor') {
    $form['field_storage']['cardinality_container']['#access'] = FALSE;
  }
}