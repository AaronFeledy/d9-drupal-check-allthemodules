<?php

/**
 * @file
 * Send email or trigger actions when a new role is assigned
 *
 */

define('RCN_SUBJECT_DEFAULT', t('Role [user:role-changed] added for [user:name] at [site:name]'));
define('RCN_BODY_DEFAULT', t("[user:name],\n\nThe role \"[user:role-changed]\" has been added to your account at  [site:name].\n\nYou may now use the associated privileges."));
define('JUNK', 'please dont commit this JUNK');
/**
 * Print module description on module activation page
 */
function junk_test_project_help($path, $arg) {
  $output = '';

  switch ($path) {
    // TODO: path changes
    case 'admin/help#junk_test_project':
      $output = '<p>' . t("Role Change Notify lets you configure email messages when roles are added, and provides a configurable trigger when roles are added or removed. It supports tokens provided by token module, and supports tokens from the user profile if profile module is enabled. Configure role change notifications at <a href='!admin_link'>the administrative configuration page</a> or on the <a href='!trigger_link'>User triggers page</a> (if the Trigger and Token Actions modules are enabled).", array('!admin_link' => url('admin/config/people/junk_test_project'), '!trigger_link' => url('admin/structure/trigger/user'))) . '</p>';
      break;
    case 'admin/config/people/junk_test_project':
      $from = variable_get('site_mail', ini_get('sendmail_from'));

      if (!valid_email_address($from)) {
        drupal_set_message(t('None of these notifications will be sent unless you specify a valid site !email_address on the !site_information settings page.', array('!email_address' => '<strong>' . t('E-mail address') . '</strong>', '!site_information' => l(t('Site information'), 'admin/config/system/site-information'))), 'error');
      }
      $output .= '<p>' . t('This page allows you to configure whether automatic emails should be set to users when a new role is assigned to them. You define if an email should be sent for each role type, and if so, you define what the subject and body of the resulting email will be.') . '</p>'
      . '<p>' . t('For any of the settings below, you can use placeholders which will be substituted with the current values for the user, role, and site.') . ' ';
      $output .= '</p>';
      $output .= "<p>" . t("If the Triggers module is enabled, this module also provides Role Change Notification triggers on the
        <a href='!link'>User Triggers Page</a> that can be fired when a role is added or removed.",
        array('!link' => url('admin/structure/trigger/user'))) . "</p>";
      break;
  }
  return $output;
}

/**
 * @see hook_menu()
 */
function junk_test_project_menu() {
  $items = array();
  global $account;
  $items['admin/config/people/junk_test_project'] = array(
    'title' => 'Role Change Notifications',
    'description' => 'Configure email notifications or other actions when a role is added to or removed from a user account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('junk_test_project_settings_form'),
    'access arguments' => array('administer role change notification'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * implements hook_permission.
 */
function junk_test_project_permission() {
  return array(
    'administer role change notification' =>  array(
      'title' => t('Administer role change notification'),
      'description' => t('Send emails when roles change, or take other actions using triggers.'),
    ),
  );
}

/**
 * implements hook_info to provide 'role_added/removed' op from hook_user.
 */
function junk_test_project_trigger_info() {
  return array(
    'user' => array(
      'role_added' => array('label' => t("When a role is added to a user account")),
      'role_removed' => array('label' => t("When a role is removed from a user account")),
    ),
  );
}


/**
 * Form to modify default values for emails to users during account status modification
 *
 * @return
 *   system_settings_form
 */
function junk_test_project_settings_form() {
  $roles = user_roles(TRUE);

  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  if (sizeof($roles) == 0) {
    $form['noroles'] = array(
      '#markup' => "<p><em>" . t("No roles have been set up except Authenticated User. \nPlease set up additional roles if you want to use role notification.") . "</em></p>",
    );
    return $form;
  }
  $form['instructions'] = array(
      '#markup' => "<b>" . t("Select roles for which notification should be sent:") . "</b>",
  );
  foreach ($roles as $roleid => $rolename) {
    $form["junk_test_project_" . $roleid] = array(
      '#type' => 'checkbox',
      '#title' => $rolename,
      '#default_value' => variable_get('junk_test_project_' . $roleid, FALSE),
    );
  }
  $form['junk_test_project_role_added_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('junk_test_project_role_added_subject', RCN_SUBJECT_DEFAULT),
    '#size' => 72,
    '#maxlength' => 200,
    '#token_types' => array('user'),
  );
  $form['junk_test_project_role_added_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('junk_test_project_role_added_body', RCN_BODY_DEFAULT),
    '#cols' => 72,
    '#rows' => 10,
    '#description' => '',
    '#token_types' => array('user'),
  );

  if (module_exists('token')) {
    $form['view']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['view']['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('user'),
    );
    $form['junk_test_project_role_added_subject']['#element_validate'] = array('token_element_validate');
    $form['junk_test_project_role_added_body']['#element_validate'] = array('token_element_validate');
  }

  return system_settings_form($form);
}

/**
 * Implements hook_user_presave to determine if a user role has changed.
 */
function junk_test_project_user_presave(&$edit, $account, $category) {
  // Only bother if an existing user and roles have changed in the update.
  if ($account->uid > 0 && array_key_exists('roles', $edit)) {
    _junk_test_project_update_user($edit, $account, $category);
  }
  return;
}


/**
 * Trigger actions if a role change has occurred.
 * @param $op
 *   'role_added' or 'role_removed'
 * @param $account
 *   the affected user account.
 */
function junk_test_project_trigger_actions($op, $account) {
  if (!module_exists('trigger')) {
    return;
  }
  // Find any the ids of any actions associated with this hook/operation pair.
  $aids = trigger_get_assigned_actions($op);
  $context = array(
    'hook' => 'user',
    'op' => $op,
    'user' => $account,
  );
  foreach ($aids as $aid => $info) {
    $type = $info['type'];
    actions_do($aid, $account, $context);
  }
}

/**
 * Helper function to handle hook_user_presave work.
 * @param $edit
 *   array of changed pieces of the account.
 * @param $account
 *   user account object.
 */
function _junk_test_project_update_user($edit, $account, $category) {
  $roles = user_roles(TRUE);
  $account = user_load($account->uid);
  $oldroles = array_keys($account->roles);
  $newroles = array_keys($edit['roles']);
  $rolesadded = array_diff($newroles, $oldroles);
  $roles_removed = array_diff($oldroles, $newroles);

  $from = variable_get('site_mail', ini_get('sendmail_from'));
  $headers = array(
    'X-Mailer' => 'Drupal Role Change Notify module - http://drupal.org/project/junk_test_project',
  );

  foreach ($rolesadded as $roleid) {
    $role = $roles[$roleid];
    $account->role_changed = $role;

    // Invoke actions for role addition.
    junk_test_project_trigger_actions('role_added', $account);

    if (variable_get("junk_test_project_$roleid", FALSE)) {
      if (valid_email_address($account->mail) && valid_email_address($from)) {
        if (module_exists('profile')) {
          profile_load_profile($account);
        }
        $subject = token_replace(variable_get('junk_test_project_role_added_subject', RCN_SUBJECT_DEFAULT), array('user' => $account));
        $body = token_replace(variable_get('junk_test_project_role_added_body', RCN_BODY_DEFAULT), array('user' => $account));
        $language = user_preferred_language($account);
        $context['from'] = $from;
        $context['subject'] = $subject;
        $context['body'] = $body;
        $context['headers'] = $headers;
        $params = array('context' => $context);
        drupal_mail('junk_test_project', 'role_added', $account->mail, $language, $params);
        drupal_set_message(t("User %user notified of added role %role", array('%user' => $account->name, '%role' => $role)));
      }
    }
  }

  // Invoke actions on role removal.
  foreach ($roles_removed as $roleid) {
    $role = $roles[$roleid];
    $account->role_changed = $role;
    junk_test_project_trigger_actions('role_removed', $account);
  }
}

/**
 * Implementation of hook_mail().
 *
 * @param $key
 *   Key to the message tex to be used (passed in in this case)
 * @param &$messsage
 *   The message to be altered
 * @param $params
 *   Array of free-form items to be used in creating message
 *
 * @see hook_mail()
 *
 */
function junk_test_project_mail($key, &$message, $params) {
  if ($key == 'role_added') {
    $message['subject'] = check_plain($params['context']['subject']);
    $message['body'][] = check_plain($params['context']['body']);
    $message['from'] = $params['context']['from'];
    $message['headers'] = array_merge($message['headers'], $params['context']['headers']);
  }
}
