<?php

use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use GuzzleHttp\Client;

/**
 * @param string $phase
 * @return array
 */
function drd_remote_requirements($phase) {
  $moduleManager = \Drupal::moduleHandler();
  $configFactory = \Drupal::configFactory();
  $requirements = array();

  if ($phase == 'runtime') {
    $info = \Drupal::database()->getConnectionOptions();
    $info += array(
      'driver' => '',
      'host' => '',
      'port' => '',
      'database' => '',
    );
    $requirements['drd_remote.database'] = array(
      'title' => t('Database setup'),
      'value' => t('<table>' .
        '<tr><td>' . t('Driver') . '</td><td>' . $info['driver'] . '</td></tr>' .
        '<tr><td>' . t('Host') . '</td><td>' . $info['host'] . '</td></tr>' .
        '<tr><td>' . t('Port') . '</td><td>' . $info['port'] . '</td></tr>' .
        '<tr><td>' . t('Database') . '</td><td>' . $info['database'] . '</td></tr>' .
        '<tr><td>' . t('Prefix') . '</td><td>' . $info['prefix']['default'] . '</td></tr>' .
        '</table>'),
      'severity' => REQUIREMENT_INFO,
      'description' => t('These are the database settings that have been configured for this site in settings.php.'),
    );

    $securepages = $moduleManager->moduleExists('securepages');
    $requirements['drd_remote.securepages'] = array(
      'title' => t('Secure pages module installed'),
      'value' => $securepages ? t('Yes') : t('No'),
      'severity' => $securepages ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $securepages ?
        t('This site secures authenticated actions, its "<a href="@url">settings can be managed here</a>".', array('@url' => Url::fromUserInput('/admin/config/system/securepages', array('external' => TRUE,))->toUriString()) ) :
        t('This site does not secure authenticated actions with "<a href="@url">Secure Pages</a>".', array('@url' => Url::fromUri('https://www.drupal.org/project/securepages', array('external' => TRUE,))->toUriString()) ),
    );

    $analytics = ($moduleManager->moduleExists('googleanalytics') || $moduleManager->moduleExists('piwik'));
    $requirements['drd_remote.module.analytics'] = array(
      'title' => t('Analytics module installed'),
      'value' => $analytics ? t('Yes') : t('No'),
      'severity' => $analytics ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $analytics ?
        t('This site uses an analytics tool, go here to configure <a href="@url">Google Analytics</a> or here for <a href="@url2">Piwik</a>.', array('@url' => Url::fromUserInput('/admin/config/system/googleanalytics')->toUriString(), '@url2' => Url::fromUserInput('/admin/config/system/piwik')->toUriString()) ) :
        t('For SEO improvements you should use an analytics tool like <a href="@url">Google Analytics</a> or <a href="@url2">Piwik</a>.', array('@url' => Url::fromUri('https://www.drupal.org/project/google_analytics', array('external' => TRUE,))->toUriString(), '@url2' => Url::fromUri('https://www.drupal.org/project/piwik', array('external' => TRUE,))->toUriString()) ),
    );

    $devel = !$moduleManager->moduleExists('devel');
    $requirements['drd_remote.module.devel'] = array(
      'title' => t('Devel module disabled'),
      'value' => $devel ? t('Yes') : t('No'),
      'severity' => $devel ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => t('On production sites the <a href="@url">Devel module</a> should be disabled for security and performance reasons.', array('@url' => Url::fromUserInput('/admin/modules')->toUriString()) ),
    );

    $redirect = $moduleManager->moduleExists('redirect');
    $requirements['drd_remote.module.redirect'] = array(
      'title' => t('Module Redirect installed'),
      'value' => $redirect ? t('Yes') : t('No'),
      'severity' => $redirect ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $redirect ?
        t('The Redirect module is enabled, its <a href="@url">settings can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/search/redirect/settings')->toUriString()) ) :
        t('For SEO improvements you should use the <a href="@url">Redirect</a> module.', array('@url' => Url::fromUri('https://www.drupal.org/project/redirect', array('external' => TRUE,))->toUriString()) ),
    );

    $metatag = $moduleManager->moduleExists('metatag');
    $requirements['drd_remote.module.metatag'] = array(
      'title' => t('Module MetaTag installed'),
      'value' => $metatag ? t('Yes') : t('No'),
      'severity' => $metatag ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $metatag ?
        t('The MetaTag module is enabled, its <a href="@url">settings can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/search/metatags')->toUriString()) ) :
        t('For SEO improvements you should use the <a href="@url">MetaTag</a> module.', array('@url' => Url::fromUri('https://www.drupal.org/project/metatag')->toUriString()) ),
    );

    $mollom = $moduleManager->moduleExists('mollom');
    $requirements['drd_remote.module.mollom'] = array(
      'title' => t('Module Mollom installed'),
      'value' => $mollom ? t('Yes') : t('No'),
      'severity' => $mollom ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $mollom ?
        t('Mollom is enabled, its <a href="@url">settings can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/content/mollom')->toUriString()) ) :
        t('For SPAM protection you should use the <a href="@url">Mollom</a> module.', array('@url' => Url::fromUri('https://www.drupal.org/project/mollom', array('external' => TRUE,))->toUriString()) ),
    );

    $pathauto = $moduleManager->moduleExists('pathauto');
    $requirements['drd_remote.module.pathauto'] = array(
      'title' => t('Module PathAuto installed'),
      'value' => $pathauto ? t('Yes') : t('No'),
      'severity' => $pathauto ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $pathauto ?
        t('The PathAuto module is enabled, it <a href="@url">can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/search/path/patterns')->toUriString()) ) :
        t('For SEO improvements you should use the <a href="@url">PathAuto</a> module.', array('@url' => Url::fromUri('https://www.drupal.org/project/pathauto', array('external' => TRUE,))->toUriString()) ),
    );

    $php = !$moduleManager->moduleExists('php');
    $requirements['drd_remote.module.php'] = array(
      'title' => t('Module PHP Filter disabled'),
      'value' => $php ? t('Yes') : t('No'),
      'severity' => $php ? REQUIREMENT_OK: REQUIREMENT_ERROR,
      'description' => $php ?
        t('For security reasons you should try to avoid using the <a href="@url">PHP Filter</a> module.', array('@url' => Url::fromUserInput('/admin/modules')->toUriString()) ) :
        t('For security reasons you should keep the <a href="@url">PHP Filter</a> module disabled.', array('@url' => Url::fromUserInput('/admin/modules')->toUriString()) ),
    );

    $xmlsitemap = $moduleManager->moduleExists('xmlsitemap');
    $requirements['drd_remote.module.xmlsitemap'] = array(
      'title' => t('Module XML-Sitemap installed'),
      'value' => $xmlsitemap ? t('Yes') : t('No'),
      'severity' => $xmlsitemap ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $xmlsitemap ?
        t('The XML Sitemap module is enabled, it <a href="@url">can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/search/xmlsitemap')->toUriString()) ) :
        t('For SEO improvements you should use the <a href="@url">XML Sitemap</a> module.', array('@url' => Url::fromUri('https://www.drupal.org/project/xmlsitemap', array('external' => TRUE,))->toUriString()) ),
    );

    $user1 = User::load(1);
    $user1_ok = !in_array(strtolower($user1->getUsername()), array('admin', 'root', 'superadmin', 'manager', 'administrator', 'adm'));
    $requirements['drd_remote.user1'] = array(
      'title' => t('Name of user 1'),
      'value' => $user1_ok ? t('Good') : t('Too obvious'),
      'severity' => $user1_ok ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $user1_ok ?
        t('The name of user 1 is uncommon enough to not be a very obvious security risk') :
        t('For security reasons the name of user 1 should not be so obvious as it is now.'),
    );

    $admin_roles = \Drupal::getContainer()->get('entity.manager')->getStorage('user_role')->getQuery()
      ->condition('is_admin', TRUE)
      ->execute();
    $count_admin = \Drupal::database()->select('user__roles', 'ur')
      ->fields('ur', array('entity_id'))
      ->condition('ur.roles_target_id', $admin_roles, 'IN')
      ->countQuery()
      ->execute()
      ->fetchField();
    $requirements['drd_remote.admincount'] = array(
      'title' => t('Number of admins'),
      'value' => ($count_admin <= 3) ? t('Good (@count)', array('@count' => $count_admin)) : t('Too many (@count)', array('@count' => $count_admin)),
      'severity' => ($count_admin <= 3) ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => t('For security reasons you should only have a small amount of users with an administer role.'),
    );

    $css = $configFactory->get('system.performance')->get('css.preprocess');
    $requirements['drd_remote.compress.css'] = array(
      'title' => t('Aggregate and compress CSS files'),
      'value' => $css ? t('Yes') : t('No'),
      'severity' => $css ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $css ?
        t('The CSS is aggregated on this site. <a href="@url">Performance settings can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ) :
        t('For performance reasons you should allow your <a href="@url">CSS to be aggregated</a> on production sites.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ),
    );

    $js = $configFactory->get('system.performance')->get('js.preprocess');
    $requirements['drd_remote.compress.js'] = array(
      'title' => t('Aggregate JavaScript files'),
      'value' => $js ? t('Yes') : t('No'),
      'severity' => $js ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $js ?
        t('The JS is aggregated on this site. <a href="@url">Performance settings can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ) :
        t('For performance reasons you should allow your <a href="@url">JS to be aggregated</a> on production sites.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ),
    );

    $page = $configFactory->get('system.performance')->get('response.gzip');
    $requirements['drd_remote.compress.page'] = array(
      'title' => t('Compress cached pages'),
      'value' => $page ? t('Yes') : t('No'),
      'severity' => $page ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $page ?
        t('The pages are being compressed on this site. <a href="@url">Performance settings can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ) :
        t('For performance reasons you should allow <a href="@url">cached pages to be compressed</a> on production sites.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ),
    );

    $page403 = $configFactory->get('system.site')->get('page.403');
    $requirements['drd_remote.defined.403'] = array(
      'title' => t('Default 403 (access denied) page'),
      'value' => empty($page403) ? t('Undefined') : $page403,
      'severity' => empty($page403) ? REQUIREMENT_WARNING: REQUIREMENT_OK,
      'description' => $page403 ?
        t('There is a 403 page defined. <a href="@url">The 403 page can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/system/site-information')->toUriString()) ) :
        t('For improved user experience you should define a <a href="@url">default 403 (Access denied)</a> page.', array('@url' => Url::fromUserInput('/admin/config/system/site-information')->toUriString()) ),
    );

    $page404 = $configFactory->get('system.site')->get('page.404');
    $requirements['drd_remote.defined.404'] = array(
      'title' => t('Default 404 (not found) page'),
      'value' => empty($page404) ? t('Undefined') : $page404,
      'severity' => empty($page404) ? REQUIREMENT_WARNING: REQUIREMENT_OK,
      'description' => $page404 ?
        t('There is a 404 page defined. <a href="@url">The 404 page can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/system/site-information')->toUriString()) ) :
        t('For improved user experience you could define a <a href="@url">default 404 (Not found)</a> page.', array('@url' => Url::fromUserInput('/admin/config/system/site-information')->toUriString()) ),
    );

    $cache = $configFactory->get('system.performance')->get('cache.page');
    $requirements['drd_remote.enable.cache'] = array(
      'title' => t('Cache pages for anonymous users'),
      'value' => $cache ? t('Yes') : t('No'),
      'severity' => $cache ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $cache ?
        t('The pages are being cached. <a href="@url">Performance settings can be managed here</a>.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ) :
        t('For performance reasons you should <a href="@url">cache pages for anonymous users</a> on production sites.', array('@url' => Url::fromUserInput('/admin/config/development/performance')->toUriString()) ),
    );

    $warnings = $configFactory->get('system.logging')->get('error_level');
    $requirements['drd_remote.hidden.warnings'] = array(
      'title' => t('Error messages to display'),
      'description' => t('For security reasons you should <a href="@url">write all errors and warnings</a> to the log.', array('@url' => Url::fromUserInput('/admin/config/development/logging')->toUriString()) ),
    );

    switch ($warnings) {
      case ERROR_REPORTING_HIDE:
        $requirements['drd_remote.hidden.warnings']['value'] = t('None');
        $requirements['drd_remote.hidden.warnings']['severity'] = REQUIREMENT_OK;
        break;

      case ERROR_REPORTING_DISPLAY_SOME:
        $requirements['drd_remote.hidden.warnings']['value'] = t('Errors and warnings');
        $requirements['drd_remote.hidden.warnings']['severity'] = REQUIREMENT_WARNING;
        break;

      default:
        $requirements['drd_remote.hidden.warnings']['value'] = t('All messages');
        $requirements['drd_remote.hidden.warnings']['severity'] = REQUIREMENT_ERROR;
    }

    $txtfiles = array();
    $files_to_remove = array(
      'CHANGELOG.txt',
      'COPYRIGHT.txt',
      'INSTALL.mysql.txt',
      'INSTALL.pgsql.txt',
      'INSTALL.txt',
      'LICENSE.txt',
      'MAINTAINERS.txt',
      'README.txt',
      'UPGRADE.txt'
    );
    foreach ($files_to_remove as $file) {
      if (file_exists(DRUPAL_ROOT . '/' . $file))
        $txtfiles[] = $file;
    }
    $requirements['drd_remote.removed.txtfiles'] = array(
      'title' => t('Info files to be removed'),
      'value' => empty($txtfiles) ? t('All info files properly removed') : implode(', ', $txtfiles),
      'severity' => empty($txtfiles) ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $requirements ?
        t('The info files of Drupal Core are removed.') :
        t('The info files in the Drupal Core could be removed to expose less about which version Drupal is running.'),
    );

    $robotsurl = Url::fromUri('base://robots.txt', array('absolute' => TRUE, 'language' => (object) array('language' => LanguageInterface::LANGCODE_NOT_SPECIFIED)))->toString();
    try {
      $client = new Client([
        'base_uri' => $robotsurl,
        'timeout' => 2,
        'allow_redirects' => FALSE,
      ]);
      $response = $client->request('get');
    }
    catch (\Exception $ex) {
      // Ignore
    }
    $robots = (isset($response) && $response->getStatusCode() == 200);
    $requirements['drd_remote.robots.txt'] = array(
      'title' => t('File robots.txt is available'),
      'value' => $robots ? t('Yes') : t('No'),
      'severity' => $robots ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => $robots ?
        t('This site contains a <a href="@url">robots.txt</a> file', array('@url' => Url::fromUserInput('/robots.txt')->toUriString()) ) :
        t('For SEO reasons this site should have a <a href="@url">robots.txt</a> file in the Drupal Core.', array('@url' => Url::fromUri('https://www.drupal.org/project/robotstxt', array('external' => TRUE,))->toUriString()) ),
    );

    $themeregistry = $configFactory->get('devel.settings')->get('rebuild_theme');
    $requirements['drd_remote.theme.registry'] = array(
      'title' => t('Rebuild theme registry on each page load'),
      'value' => $themeregistry ? t('Yes') : t('No'),
      'severity' => $themeregistry ? REQUIREMENT_WARNING: REQUIREMENT_OK,
      'description' => $themeregistry ?
        t('Your site is not rebuilding the them registry on each page load. Thats good.') :
        t('For performance reasons this site should not <a href="@url">rebuild the theme registry</a> on each page load.', array('@url' => Url::fromUserInput('/admin/appearance/settings')->toUriString()) ),
    );

    $watchdog = $configFactory->get('dblog.settings')->get('row_limit');
    $requirements['drd_remote.trim.watchdog'] = array(
      'title' => t('Database log messages to keep'),
      'value' => empty($watchdog) ? t('All') : $watchdog,
      'severity' => ($watchdog <= 1000 && $watchdog > 0) ? REQUIREMENT_OK: REQUIREMENT_WARNING,
      'description' => t('For performance reasons the <a href="@url">database log</a> should not be bigger then 1000 messages.', array('@url' => Url::fromUserInput('/admin/config/development/logging')->toUriString()) ),
    );
  }

  return $requirements;
}
