<?php

/**
 * Implements hook_library_info().
 *
 * @return mixed
 */
function library_pack_libraries_info() {

    $libraries = array();
    if ($cache = \Drupal::cache()->get('library_pack')) {
        $libraries = $cache->data;
    }
    else {
        $files = file_scan_directory(drupal_get_path('module', 'library_pack'). '/libraries', '/.*\.inc/');
        foreach ($files as $file) {
            include DRUPAL_ROOT . '/' . $file->uri;
        }
        \Drupal::cache()->set('library_pack', $libraries);
    }
    return $libraries;
}

/**
 * Add module links to the main menu.
 * @param $links
 */
function library_pack_menu_links_discovered_alter(&$links) {

    // Add the elements testing link to the main menu.
    $links['library_pack.settings'] = array(
        'title' => t('Libraries'),
        'route_name' => 'library_pack.settings',
        'menu_name' => 'admin',
        'parent' => 'system.themes_page',
    );

    // Lists installed themes.
   $installed_themes = installedThemes();
    foreach ($installed_themes as $key_theme => $label_theme) {
        $links['library_pack.theme.' . $key_theme] = array(
            'title' => t($label_theme),
            'route_name' => 'library_pack.theme',
            'menu_name' => 'admin',
            'parent' => 'library_pack.settings',
            'route_parameters' => array(
                'theme' => $key_theme,
            ),
        );
    }
}


/**
 * Implements hook_page_attachments().
 *
 * @param array $attachments
 */
function library_pack_page_attachments(array &$attachments) {

    // We need to know the current theme
    $theme = \Drupal::theme()->getActiveTheme()->getName();

    // Load the settings for this theme.
    $libraries =  \Drupal::config('library_pack.settings')->get($theme);

    // Loop through all the enabled libraries in the settings and attach to the page.
    foreach ((array) $libraries  as $name => $library) {
        if ($library['load']) {
            $attachments['#attached']['libraries_load'][] = $name;
        }
    }
}

/**
 *
 * @param type $library
 * @param type $options
 * @return type
 */
function _library_pack_force_version($library,$options) {
    $file = DRUPAL_ROOT . '/' . $library['library path'] . '/' . $options['file'];
    if (empty($options['file']) || !file_exists($file)) {
        return;
    }
    return $library['version arguments']['force'];
}
