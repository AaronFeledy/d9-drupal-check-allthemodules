<?php

/**
 * @file
 * Drupal Integration with Gmail Contact API.
 */

/**
 * Implements hook_mail().
 */
function gmail_contact_mail($key, &$message, $params) {
  if ($key == 'invite') {
    $site_name = \Drupal::config('system.site')->get('mail');
    $message['subject'] = gmail_contact_get_setting('gmail_contact_email_subject') ?
      gmail_contact_get_setting('gmail_contact_email_subject') : $site_name;
    $body = gmail_contact_get_setting('gmail_contact_email_message');
    $sender_name = gmail_contact_get_setting('gmail_contact_email_sender') ?
      gmail_contact_get_setting('gmail_contact_email_sender') : $site_name;

    // Replace tokens.
    //$sender_name = token_replace($sender_name);
    //$message['subject'] = token_replace($message['subject']);
    //$message['body'][]  = token_replace($body);

    $message['headers']['From'] = $sender_name . '<' . $message['headers']['From'] . '>';
  }
}

/**
 * Get Gmail Contact setting.
 *
 * @param $key
 * @return array|mixed|null
 */
function gmail_contact_get_setting($key) {
  return \Drupal::config('gmail_contact.settings')->get($key);
}

/**
 * Construct the request url sent to Google.
 *
 * @param string $redirect_path
 * The redirected path required by Google.
 *
 * @return string
 * Url string.
 */
function gmail_contact_get_invite_link_url($redirect_path = 'initiate-gmail-invite') {
  global $base_url;
  $gmail_url = 'https://accounts.google.com/o/oauth2/auth?client_id=' . gmail_contact_get_setting('gmail_contact_client_id');
  $gmail_url .= '&redirect_uri=' . $base_url . '/' . $redirect_path . '';
  if ($max = gmail_contact_get_setting('gmail_contact_max_result')) {
    $gmail_url .= '&max-results=' . $max;
  }
  $gmail_url .= '&scope=https://www.google.com/m8/feeds/&response_type=code';

  return $gmail_url;
}

/**
 * Send request to Google api to get response.
 *
 * @param $auth_code
 * @return string
 */
function gmail_contact_get_gmail_contacts($auth_code) {
  global $base_url;
  $client_id = gmail_contact_get_setting('gmail_contact_client_id');
  $client_secret = gmail_contact_get_setting('gmail_contact_client_secret');
  $redirect_uri = $base_url . '/initiate-gmail-invite';

  $fields = array(
    'code'=>  urlencode($auth_code),
    'client_id'=>  urlencode($client_id),
    'client_secret'=>  urlencode($client_secret),
    'redirect_uri'=>  urlencode($redirect_uri),
    'grant_type'=>  urlencode('authorization_code')
  );
  $post = '';
  foreach($fields as $key=>$value) { $post .= $key.'='.$value.'&'; }
  $post = rtrim($post,'&');

  $curl = curl_init();
  curl_setopt($curl,CURLOPT_URL,'https://accounts.google.com/o/oauth2/token');
  curl_setopt($curl,CURLOPT_POST,5);
  curl_setopt($curl,CURLOPT_POSTFIELDS,$post);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER,TRUE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER,0);
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST,0);
  $result = curl_exec($curl);
  curl_close($curl);

  // Remove auth code from session once its been used.
  if (isset($_SESSION['gmail_auth_code'])) {
    unset($_SESSION['gmail_auth_code']);
  }

  $response =  json_decode($result);
  if (!$response) {
    echo t("No response from Google. It may happen if you have loose internet connection with Google Service.
      <br> Please try again later. If problem persists, please report this issue to site administrator.");
    exit();
  }
  elseif (isset($response->error) && $response->error) {
    echo 'Error: ' . $response->error . '<br>' . $response->error_description;
    exit();
  }
  elseif ($response->access_token) {
    $accesstoken = $response->access_token;

    // It's not a good idea to store access token at session, which could be
    // dangerous to expose user data. We can store Google code in session.
    $url = 'https://www.google.com/m8/feeds/contacts/default/full?oauth_token='.$accesstoken;

    // Add max number limit if it exists.
    if ($max_results = gmail_contact_get_setting('gmail_contact_max_result')) {
      $url .= '&max-results=' . $max_results;
    }
    $xmlresponse = file_get_contents($url);
    if (!$xmlresponse){
      echo t("No contact list response from Google. It may happen if you have loose internet connection with Google Service.
      <br> Please try again later. If problem persists, please report this issue to site administrator.");
      exit();
    }

    return $xmlresponse;
  }
  else {
    echo t("Unrecognized response from Google. It may happen if you have loose internet connection with Google Service.
      <br> Please try again later. If problem persists, please report this issue to site administrator.");
    exit();
  }
}

/**
 * @param $xmlresponse
 * @return array
 */
function gmail_contact_parse_gmail_contacts($xmlresponse) {
  // Parse emails.
  $xml =  new SimpleXMLElement($xmlresponse);

  $xml->registerXPathNamespace('gd', 'http://schemas.google.com/g/2005');

  $contacts = array();
  $name_flag = gmail_contact_get_setting('gmail_contact_name_required');

  foreach ($xml->entry as $entry) {
    foreach ($entry->xpath('gd:email') as $email) {
      if (!$name_flag) {
        $name = (string)$entry->title;
        // If no name provided, use email address as name.
        if (!$name) {
          $name = (string)$email->attributes()->address;
        }
        $contacts[] = array('name' => $name, 'email' => (string)$email->attributes()->address);
      }
      else {
        // Only proceed when this contact has name associated.
        if ((string)$entry->title) {
          $contacts[] = array('name' => (string)$entry->title, 'email' => (string)$email->attributes()->address);
        }
      }
    }
  }

  return $contacts;
}

