<?php

/**
 * @file
 * Third-party Services.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\third_party_services\MediatorInterface;
use Drupal\third_party_services\BlockOptionalRenderInterface;
use Drupal\third_party_services\FieldOptionalRenderInterface;

const THIRD_PARTY_SERVICES_CONFIGURATION_FORM_ROUTE = 'entity.user.third_party_services__configuration_form';

/**
 * Returns instance of the "MODULE.mediator" service.
 *
 * @return \Drupal\third_party_services\MediatorInterface
 *   An instance of the service.
 */
function third_party_services_mediator(): MediatorInterface {
  return \Drupal::service('third_party_services.mediator');
}

/**
 * Returns instance of the "MODULE.field_optional_render" service.
 *
 * @return \Drupal\third_party_services\FieldOptionalRenderInterface
 *   An instance of the service.
 */
function third_party_services_field_optional_render(): FieldOptionalRenderInterface {
  return \Drupal::service('third_party_services.field_optional_render');
}

/**
 * Returns instance of the "MODULE.block_optional_render" service.
 *
 * @return \Drupal\third_party_services\BlockOptionalRenderInterface
 *   An instance of the service.
 */
function third_party_services_block_optional_render(): BlockOptionalRenderInterface {
  return \Drupal::service('third_party_services.block_optional_render');
}

/**
 * Implements hook_theme().
 */
function third_party_services_theme(array $existing, string $type, string $theme, string $path): array {
  $info = [];

  $info['third_party_services__placeholder'] = [
    'variables' => [
      // Read variables descriptions in template file.
      'type' => '',
      'delta' => -1,
      'uuid' => '',
      'label' => '',
      'content' => '',
    ],
  ];

  $info['third_party_services__configuration_form'] = [
    'render element' => 'form',
  ];

  return $info;
}

/**
 * Implements hook_page_attachments().
 */
function third_party_services_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'third_party_services/configuration';
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function third_party_services_field_formatter_third_party_settings_form(
  FormatterInterface $plugin,
  FieldDefinitionInterface $field_definition,
  string $view_mode,
  array $form,
  FormStateInterface $form_state
): array {
  $renderer = third_party_services_field_optional_render();
  $renderer->setSettings($plugin->getThirdPartySettings('third_party_services'));

  return $renderer->settingsForm([], $form_state);
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function third_party_services_field_formatter_settings_summary_alter(array &$summary, array $context) {
  /* @var \Drupal\Core\Field\FormatterInterface $formatter */
  $formatter = $context['formatter'];
  $renderer = third_party_services_field_optional_render();
  $renderer->setSettings($formatter->getThirdPartySettings('third_party_services'));

  $summary = array_merge($summary, $renderer->settingsSummary());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function third_party_services_preprocess_field(array &$variables) {
  $element =& $variables['element'];

  $field_display = EntityViewDisplay
    ::collectRenderDisplay($element['#object'], $element['#view_mode'])
      ->getComponent($element['#field_name']);

  if (!empty($field_display['third_party_settings']['third_party_services'])) {
    $mediator = third_party_services_mediator();
    $renderer = third_party_services_field_optional_render();
    $allowed = [];

    $renderer->setSettings($field_display['third_party_settings']['third_party_services']);

    // Method "process" returns placeholders only for elements being restricted.
    foreach ($renderer->process($element, $element['#items']) as $delta => $placeholder) {
      $variables['items'][$delta]['content'] = $placeholder;
    }

    foreach ($mediator->loadTerms() as $term) {
      if ($mediator->isServiceAllowed($term)) {
        $allowed[] = $term->uuid();
      }
    }

    $variables['#cache']['tags'] = $mediator->getCacheTags();
    // The same information puts into "localStorage" after submitting the
    // configuration form. Also, it occurs invalidation of cache tags you
    // may see above, so it's guaranteed that this callback will be executed
    // once configuration have changed. Reasonable question: why it needs to
    // duplicate dumping this configuration here? Imagine the situation when
    // something has happened with data in "localStorage". In this case
    // authenticated users are safe to restore them from backend.
    $variables['#attached']['drupalSettings']['third_party_services_allowed'] = $allowed;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function third_party_services_preprocess_menu(array &$variables) {
  if (!empty($variables['items'][THIRD_PARTY_SERVICES_CONFIGURATION_FORM_ROUTE])) {
    $item = $variables['items'][THIRD_PARTY_SERVICES_CONFIGURATION_FORM_ROUTE];
    /* @var \Drupal\third_party_services\Menu\Link\ConfigurationFormUrlMenuLink $link */
    $link = $item['original_link'];

    // Use AJAX but not on the page with the same form.
    if (!empty($link->getOptions()['use_ajax']) && \Drupal::routeMatch()->getRouteName() !== $link->getRouteName()) {
      // Ensure user is able to use AJAX features.
      $variables['#attached']['library'][] = 'core/drupal.ajax';

      /* @var \Drupal\Core\Url $url */
      $url = $item['url'];
      $url
        ->setOption('attributes', ['class' => 'use-ajax'])
        ->setOption('query', ['dialog_options' => $url->getOption('dialog_options')]);
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function third_party_services_menu_links_discovered_alter(array &$links) {
  // Prevent configuration of custom menu link from being reverted. Discovery
  // of definitions occurs in YAML files where options aren't presented. This
  // trick reads previously saved configuration from active storage and expand
  // basic definition.
  // @see \Drupal\Core\Menu\MenuLinkManager::rebuild()
  try {
    /* @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

    $links[THIRD_PARTY_SERVICES_CONFIGURATION_FORM_ROUTE] = $menu_link_manager
      ->getDefinition(THIRD_PARTY_SERVICES_CONFIGURATION_FORM_ROUTE);
  }
  catch (\Exception $e) {
  }
}
