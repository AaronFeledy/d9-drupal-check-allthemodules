<?php

/**
 * @file
 * Hooks to send emails about activity in the system.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function activity_emails_entity_insert(EntityInterface $entity) {
  // For now, we just need the same things as the update hook does.
  activity_emails_entity_update($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() for nodes.
 */
function activity_emails_entity_update(EntityInterface $entity) {
  $config = Drupal::config('activity_emails.settings');
  $enabled = $config->get('enabled');
  $email = $config->get('email');
  if ($enabled && $email) {
    $template = $config->get('template');
    $user = Drupal::currentUser();

    // Do not notify if we don't know who the user is.
    if ($user->isAnonymous() || empty($user->getAccountName())) {
      return;
    }

    // Limit the number of entities that we notify about.
    if (!in_array($entity->getEntityTypeId(), ['node', 'user'])) {
      return;
    }

    try {
      $url = \Drupal::request()->getSchemeAndHttpHost() . $entity->toUrl()->toString();

      $message[] = $template;
      $message[] = t('Content: @url', ['@url' => $url]);
      $message[] = t('By user: @username / @email', [
        '@username' => $user->getAccountName(),
        '@email' => $user->getEmail(),
      ]);

      _activity_emails_send_email($entity->label(), $message, $email);
    }
    catch (Exception $e) {
      // If the entity does not have an URL it can be a paragraph or something
      // else inside another entity so we don't need to inform.
      return;
    }
  }
}

/**
 * Build the final email parametres and send it.
 *
 * @param string $title
 *   Title of the affected content.
 * @param string $message
 *   Message to send.
 * @param string $email
 *   Address to send the email too.
 *
 * @return bool
 *   Email were sent or not.
 */
function _activity_emails_send_email($title, $message, $email) {
  $mailManager = \Drupal::service('plugin.manager.mail');

  $params = [
    'message' => $message,
    'title' => $title,
  ];

  // Multiple emails?
  $email = str_replace([' ', ',', ';'], ',', $email);
  $emails = array_unique(array_filter(explode(',', $email)));

  $sent = 0;
  foreach ($emails as $mail) {
    if (\Drupal::service('email.validator')->isValid($mail)) {
      $result = $mailManager->mail(
        'activity_emails',
        'upsert_entity',
        $mail,
        \Drupal::languageManager()->getCurrentLanguage()->getId(),
        $params,
        NULL,
        TRUE
      );

      if ($result['result']) {
        $sent++;
      }
    }
  }

  return (bool) $sent;
}

/**
 * Implements hook_mail().
 */
function activity_emails_mail($key, &$message, $params) {
  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'upsert_entity':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Content modified: @title', [
        '@title' => $params['title'],
      ], $options);
      $message['body'] = $params['message'];
      break;
  }
}
