<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to exclude node authors.
 *
 * This is the main module file for Exclude Node Author. 
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node;

/**
 * Implements hook_preprocess_node().
 */
function exclude_node_author_preprocess_node(&$vars) {
  $node = $vars['node'];
  if (_exclude_node_author($node->nid->value)) {
    $vars['display_submitted'] = FALSE;
  }
}

/**
 * @param $nid
 *
 * @return bool
 */
function _exclude_node_author($nid) {
  $nid_exclude_list = _exclude_node_author_var_get('exclude_node_author_nid_list', array());
  if (in_array($nid, $nid_exclude_list)) {
    return TRUE;
  }     
 return FALSE;
}

/**
 * Function getting exclude_node_author variables.
 */
function _exclude_node_author_var_get($variable, $default = NULL) {
  $config = \Drupal::configFactory()->getEditable('exclude_node_author.settings');

  if (!($value = $config->get($variable))) {
    $value = $default;
  }

  return $value;
}

/**
 * Function setting exclude_node_author variables
 */
function _exclude_node_author_var_set($variable, $value) {
  $config = \Drupal::configFactory()->getEditable('exclude_node_author.settings');
  $config->set($variable, $value)->save();

  return;
}

/**
 * Implements hook_form_alter().
 */
function exclude_node_author_form_alter(&$form, &$form_state, $form_id) {
  if (in_array('node-form', $form['#attributes']['class'])) {
    $node = $form_state->getFormObject()->getEntity();
    $form['author']['exclude_node_author'] = array(
      '#type' => 'checkbox',
      '#field_name' => 'exclude_node_author',
      '#title' => t('Exclude author information from display'),
      '#required' => FALSE,
      '#element_validate' => array('exclude_node_author_set_form_value'),
      '#default_value' => _exclude_node_author($node->id()),
      '#weight' => -10,
    );
  }
}

/**
 * Function setting node meta field value to make possible parsing it by hooks.
 */
function exclude_node_author_set_form_value($element, FormStateInterface $form_state, $form) {
  $values = $form_state->getValues();
  $build_info = $form_state->getBuildInfo();
  $node = $build_info['callback_object']->getEntity();
  $node->exclude_node_author = $values['exclude_node_author'];
}
/**
 * Implements hook_node_update().
 */
function exclude_node_author_node_update(node\NodeInterface $node) {
  exclude_node_author_set_flag($node, $node->exclude_node_author);
}

/**
 * Implements hook_node_insert().
 */
function exclude_node_author_node_insert(node\NodeInterface $node) {
  exclude_node_author_set_flag($node, $node->exclude_node_author);
}

/**
 * Implements hook_node_delete().
 */
function exclude_node_author_node_delete(node\NodeInterface $node) {
  if ($node->exclude_node_author == 1) {
    exclude_node_author_set_flag($node, 0);
  }
}

/**
 * Set exclude_node_author flag for the given node.
 */
function exclude_node_author_set_flag($node, $value = 1) {
  $exclude_list = _exclude_node_author_var_get('exclude_node_author_nid_list', array());
  $is_excluded = array_search($node->id(), $exclude_list);
  if ($value == 1 && $is_excluded === FALSE) {
    $exclude_list[] = $node->id();
    _exclude_node_author_var_set('exclude_node_author_nid_list', $exclude_list);
    return;
  }
  if ($value == 0 && $is_excluded !== FALSE) {
    unset($exclude_list[$is_excluded]);
    _exclude_node_author_var_set('exclude_node_author_nid_list', $exclude_list);
    return;
  }
}

