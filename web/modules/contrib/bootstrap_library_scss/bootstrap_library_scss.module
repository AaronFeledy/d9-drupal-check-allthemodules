<?php

/**
 * @file
 * Primarily Drupal hooks.
 */

use \Leafo\ScssPhp\Compiler;

/**
 * Compile SASS files.
 *
 * Use variables stored on bootstrap_library_settings.
 *
 * $files: file names with their route to add to compilation
 */
function _bootstrap_library_scss_compile($files = array("bootstrap.scss"), $importPath = 'libraries/bootstrap/scss/',  $variables = FALSE, $filename = "bootstrap.css") {
  global $base_path;

  if (!$variables) {
    $config = \Drupal::config('bootstrap_library.settings');
    $sass_variables = $config->get('sass.variables');
  }
  else {
    $sass_variables = $variables;
  }
  $scss = \Drupal::service('bootstrap_library_scss.scssphp.compiler');
  $scss->setImportPaths(function($importPath) {
    if (!file_exists($base_path . $importPath)) return null;
    return $base_path . $importPath;
});
  $scss->setVariables($sass_variables);
  $compile_string = '';
  foreach ($files as $file) {
    $compile_string .= sprintf('@import "%s";', $file);
  }
  $data =  $scss->compile($compile_string . '.bg-faded { background-color: "#010101"; }');
  dpm($scss);
  $destination = "public://scss/" . $filename;
  $file = file_save_data($data, $destination, FILE_EXISTS_REPLACE);
  if ($file) {
    $path = drupal_realpath($file->getFileUri());
    drupal_set_message(t("File: @file was succesfully saved.", [@file => $path]));
  }
  else {
    drupal_set_message(t("File: @file was not saved.", [@file => $filename]), "error");
  }
  return $file;
}
