<?php

/**
 * @file
 * Contains templating.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function templating_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the templating module.
    case 'help.page.templating':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Template Manager') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_block().
 */
function templating_preprocess_block(&$variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    $content_block = $variables['elements']['content']['#block_content'];
    $id = $content_block->info->value;
    $template_class = new \Drupal\templating\Templating();
    $template_item = $template_class->getTemplating($content_block);
    if (is_object($template_item)&&$template_item->field_templating_type && $template_item->field_templating_type->value == 'block_content') {
      $module_handler = \Drupal::service('module_handler');
      $module_list = ($module_handler->getModuleList());
      if(!empty($module_list)){
        foreach ($module_list as $key => $mod) {
        $path = ($mod->getPath());
        if (strpos($path, 'modules/contrib') === FALSE
          && strpos($path, 'core/modules') === FALSE
          && strpos($path, 'core/profiles') === FALSE
        ) {
          $is_hook_templating = function_exists($key . '_preprocess_templating');
          if ($is_hook_templating) {
            $varfunc = $key . '_preprocess_templating';
            $variables = call_user_func($varfunc, $variables);
          }
          $is_hook_templating_block = function_exists($key . '_preprocess_templating_block');
          if ($is_hook_templating_block) {
            $varfuncblock = $key . '_preprocess_templating_block';
            $variables = call_user_func($varfuncblock, $variables);
          }
        }
      }
      }
      if ($template_item) {
        $element['#theme'] = $template_item->field_template_name->value;
        $element['#content'] = $variables['elements']['content'];
        $variable_list = $template_item->field_variables;
        if (!empty($variable_list)) {
          foreach ($variable_list as $key => $var) {
            if (isset($variables[$var->value])) {
              $element['#' . $var->value] = $variables[$var->value];
            }
          }
        }
        $variables['content'] = $element;
      }
    }
  }
}


/**
 * Implements hook_preprocess_node().
 */
function templating_preprocess_node(&$variables) {

  if (isset($variables['node']) && isset($variables['view_mode']) && $variables['view_mode']=='full') {
    $template_class = new \Drupal\templating\Templating();
    $template_item = $template_class->getTemplating($variables['node']);

    if (is_object($template_item) && $template_item->field_templating_type && $template_item->field_templating_type->value == 'node') {

      $module_handler = \Drupal::service('module_handler');
      $module_list = ($module_handler->getModuleList());
      if(!empty($module_list)){
      foreach ($module_list as $key => $mod) {
        $path = ($mod->getPath());
        if (strpos($path, 'modules/contrib') === FALSE
          && strpos($path, 'core/modules') === FALSE
          && strpos($path, 'core/profiles') === FALSE
        ) {
          $is_hook_templating = function_exists($key . '_preprocess_templating');
          if ($is_hook_templating) {
            $varfunc = $key . '_preprocess_templating';
            $variables = call_user_func($varfunc, $variables);
          }
          $is_hook_templating_block = function_exists($key . '_preprocess_templating_node');
          if ($is_hook_templating_block) {
            $varfuncblock = $key . '_preprocess_templating_node';
            $variables = call_user_func($varfuncblock, $variables);
          }
        }
      }
      }
        $element['#theme'] = $template_item->field_template_name->value;
        $element['#content'] = $variables['content'];
        $variable_list = $template_item->field_variables;

        if (!empty($variable_list)) {
          foreach ($variable_list as $key => $var) {
            if (isset($variables[$var->value])) {
              $element['#' . $var->value] = $variables[$var->value];
            }
          }
        }
        $variables['content'] = $element;

    }
  }
}

/**
 * Implements hook_theme().
 */
function templating_theme($existing, $type, $theme, $path) {
  $theme_lists = [];
  $template_class = new \Drupal\templating\Templating();
  $template_list = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['type' => 'templating']);
  $module_handler = \Drupal::service('module_handler');
  if(!empty($template_list)){
  foreach ($template_list as $template) {
    $name = $template->field_template_name->value;
    $list = $template_class->get_field($template, 'field_module');
    if (!empty($list)) {
      $path_module = $module_handler->getModule($list[0])->getPath();
      $theme_lists[$name]['theme path'] = $path_module;
      $theme_lists[$name]['path'] = $path_module . "/templates";
      $theme_lists[$name]['variables']['content'] = NULL;
      $variable_list = $template->field_variables;
      if (!empty($variable_list)) {
        foreach ($variable_list as $key => $var) {
          $theme_lists[$name]['variables'][$var->value] = NULL;

        }
      }
    }
  }
  }
  $theme_lists['info_template'] = array(
    'variables' => array(
      'items' => array(),
    )
  );
  return ($theme_lists);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function templating_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // add content
  if ($form_id == 'node_templating_form') {
    $form['field_source']['#attributes']['class'][] = 'hidden';
    $form['#validate'][] = 'templating_custom_add_form_validate';
    $form['field_override']['#attributes']['class'][] = 'hidden';
  }
  if ($form_id == 'node_templating_edit_form' || $form_id == 'node_templating_form') {
    $form['actions']['submit']['#submit'][] = 'templating_custom_form_submit';
  }

  if ($form_id == 'node_templating_edit_form') {
    $config = \Drupal::config('templating.templating');
    $is_ready = $config->get('allowed_to_edit_content_via_admi');
    if(!$is_ready){
     /// $form['field_source']['widget'][0]['#attributes']['readonly'] = 'true';
    }
    if($is_ready && $is_ready == 0 ){
      // $form['field_source']['widget'][0]['#attributes']['readonly'] = 'true';
    }
   // $form['field_source']['#attributes']['class'][] = 'hidden';

    $module_name = ($form['field_module']['widget'][0]['value']['#default_value']);
    $template_name = ($form['field_template_name']['widget'][0]['value']['#default_value']);
    $template_class = new \Drupal\templating\Templating();
    $content = $template_class->loadtemplateContent($module_name, $template_name);
    $form['field_source']['widget'][0]['#default_value'] = $content;
    $form['#validate'][] = 'templating_custom_edit_form_validate';


    $form['info_container'] = [
      '#type' => 'details',
      '#title' => 'Templates Infos',
      '#weight' => 20,
      '#open' => FALSE,
      '#tree' => TRUE,
    ];
    $items =[];
    $form['info_container']['theme_element'] = [
      '#theme' => 'info_template',
      '#title' => t('Template details informations'),
      '#weight' => -50,
      '#items' => $items,
    ];


  }

  //settings
  if($form_id=='templating_form'){
    $form['#validate'][] = 'templating_custom_settings_form_validate';
    $form['actions']['submit']['#value'] = 'Generate Template Config File';
  }
}
function templating_custom_edit_form_validate(&$form, FormStateInterface &$form_state) {
  $is_override = $form_state->getValue('field_override');
  $template_type = $form_state->getValue('field_templating_type');
  $module_list = $form_state->getValue('field_module');
  $template_name = $form_state->getValue('field_template_name');
  $template_content = $form_state->getValue('field_source');

  if(isset($is_override['value']) && $is_override['value']==1){
    $template_class = new \Drupal\templating\Templating();
    $status = $template_class->udpate_file($template_name[0]['value'], $module_list[0]['value'],$template_content[0]['value'],$template_type[0]['value']);
    if(!$status){
      \Drupal::logger('templating')->logger->error('Failed to  update File'. $template_name[0]['value']);
    }
  }

}
function  templating_import_custom_form_submit(&$form, FormStateInterface &$form_state){
  $template_class = new \Drupal\templating\Templating();
  $template_class->importConfigTemplate();
//  $message = '<b>A bold error</b>';
//  $rendered_message = \Drupal\Core\Render\Markup::create($message);
//  $message = new TranslatableMarkup ('@message', array('@message' => $rendered_message));
//  \Drupal::messenger()->addMessage($message, 'status');
}
function templating_custom_settings_form_validate(&$form, FormStateInterface &$form_state){
    $template_module = $form_state->getValue('template_path');
    if (!$template_module) {
      $form_state->setErrorByName('templating', 'Template Path is required ');
    }

}

function templating_custom_add_form_validate(&$form, FormStateInterface &$form_state) {
  $template_name = $form_state->getValue('field_template_name');
  $template_type = $form_state->getValue('field_templating_type');
  $module_list = $form_state->getValue('field_module');
  if (!empty($template_name) && ($module_list)) {
    $is_template_exist = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadByProperties(
        [
          'type' => 'templating',
          'field_template_name' => $template_name[0]['value'],
        ]);


    if (!empty($is_template_exist)) {
      $form_state->setErrorByName('templating', 'Template exist already in template list ID : ' . array_keys($is_template_exist)[0]);
    }
    $status = true ;
    $theregex = '~^[a-z0-9/()_]+$~i';
    if (!preg_match($theregex, $template_name[0]['value'])) {
      $form_state->setErrorByName('templating', 'Template Name is not valid');
      $status = false;
    }
    if($status){
      $template_class = new \Drupal\templating\Templating();
      $status = $template_class->create_file($template_name[0]['value'], $module_list[0]['value'],$template_type[0]['value']);
      if (!$status) {
        $form_state->setErrorByName('templating', 'File exist already or Not allowed to create template in  ' . $module_list[0]['value'] . '  module');
      }
    }
  }
}

function templating_custom_form_submit(&$form, FormStateInterface &$form_state) {
  $node = $form_state->getFormObject()->getEntity();
  global $base_url;
  $path = $base_url . '/node/' . $node->id() . '/edit';
  $response = new RedirectResponse($path, 302);
  $response->send();
}

function templating_node_delete(NodeInterface $node) {
  if ($node->getType() == 'templating') {
    $template_class = new \Drupal\templating\Templating();
    $template_class->delete($node);
  }
}
