<?php

/**
 * @file
 * Contains entity_toolbar.module.
 */

use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\entity_toolbar\Toolbar\EntityToolbarHandler;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function entity_toolbar_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.entity_toolbar':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function entity_toolbar_menu_links_discovered_alter(&$links) {

  $entity_toolbars = \Drupal::entityTypeManager()
    ->getStorage('entity_toolbar')
    ->loadMultiple();

  /** @var \Drupal\entity_toolbar\Entity\EntityToolbarConfig $toolbar */
  foreach ($entity_toolbars as $toolbar) {

    if (!$toolbar->status()) {
      continue;
    }

    $baseRouteName = $toolbar->get('baseRouteName');

    if (empty($baseRouteName)) {
      continue;
    }

    $add_route_name = $toolbar->get('addRouteName');

    // Break paragraphs into groups by starting letter.
    if (empty($toolbar->get('noGroup'))) {
      foreach ($links as $key => $link) {

        if (!empty($link['parent']) && $link['parent'] == $baseRouteName && $link['route_name'] != $add_route_name) {

          if (empty($link['title'])) {
            continue;
          }

          $link_title = $link['title'];

          if ($link['title'] instanceof TranslatableMarkup) {
            $link_title = $link['title']->render();
          }

          // Remove punctuation before alphabetizing.
          $link_title = str_replace(['"', "'"], "", $link_title);

          $group_name = ucwords(substr($link_title, 0, 1));

          // Create group.
          $links[$baseRouteName . '.' . $group_name] = [
            'title' => $group_name,
            'route_name' => $baseRouteName,
            'menu_name' => 'entity-toolbar',
            'parent' => $baseRouteName,
            'provider' => 'entity_toolbar',
            'options' => [
              'attributes' => [
                'class' => [
                  'admin-toolbar-search-ignore',
                ],
              ],
            ],
          ];

          $links[$baseRouteName]['menu_name'] = 'entity-toolbar';
          $links[$baseRouteName]['parent'] = '';

          // Put link into group.
          $links[$key]['parent'] = $baseRouteName . '.' . $group_name;
          // Move to entity_toolbar menu.
          $links[$key]['menu_name'] = 'entity-toolbar';
        }
      }
    }

    if ($add_route_name = $toolbar->get('addRouteName')) {

      $linkText = $toolbar->get('addRouteLinkText');

      if (empty($linkText)) {
        $entity_type = \Drupal::entityTypeManager()->getDefinition($toolbar->id());
        $linkText = new TranslatableMarkup('Add @type type', ['@type' => $entity_type->getLabel()]);
      }

      $links[$add_route_name] = [
        'title' => $linkText,
        'route_name' => $add_route_name,
        'menu_name' => 'entity-toolbar',
        'parent' => $baseRouteName,
        'weight' => 400,
        'provider' => 'entity_toolbar',
      ];
    }
  }
}

/**
 * Implements hook_toolbar().
 */
function entity_toolbar_toolbar() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EntityToolbarHandler::class)
    ->toolbar();
}
