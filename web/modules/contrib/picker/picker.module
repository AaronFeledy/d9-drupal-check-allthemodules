<?php

/**
 * @file
 * Contains picker.module..
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function picker_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the picker module.
    case 'help.page.picker':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Picker module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_element_info_alter().
 */
function picker_element_info_alter(&$info) {
  $info['select']['#pre_render'][] = 'picker_pre_render_select';
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Add entity type  and bundle information to the widget.
 *
 * @see picker_element_info_alter()
 */

/**
 * Implements hook_field_widget_form_alter().
 */
function picker_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $element['#entity_type'] = $field_definition->getTargetEntityTypeId();
  $element['#bundle'] = $field_definition->getTargetBundle();
}

/**
 * Render API callback: Apply Chosen to a select element.
 *
 * @param array $element
 *   The element.
 *
 * @return array
 *   The element.
 */
function picker_pre_render_select($element) {
  // If the #chosen FAPI property is set, then add the appropriate class.
  if (isset($element['#picker'])) {
    if (!empty($element['#picker'])) {
      // Element has opted-in for Chosen, ensure the library gets added.
      $element['#attributes']['class'][] = 'select-picker-enable';
    }
    else {

      $element['#attributes']['class'][] = 'select-picker-disable';
      // Element has opted-out of Chosen. Do not add the library now.
      return $element;
    }
  }
  elseif (isset($element['#attributes']['class']) && is_array($element['#attributes']['class'])) {
    if (array_intersect($element['#attributes']['class'], array('select-picker-disable'))) {
      // Element has opted-out of Chosen. Do not add the library now.
      return $element;
    }
    elseif (array_intersect($element['#attributes']['class'], array('select-picker-enable'))) {
      // Element has opted-in for Chosen, ensure the library gets added.
    }
  }
  else {
    // Neither the #chosen property was set, nor any chosen classes found.
    // This element still might match the site-wide critera, so add the library.
  }
  if (isset($element['#field_name']) && !empty($element['#multiple'])) {
    //  dsm($element);
    // Remove '_none' from multi-select options.
    unset($element['#options']['_none']);

    if (isset($element['#entity_type']) && isset($element['#bundle']) && isset($element['#field_name'])) {
      // Set data-cardinality for fields that aren't unlimited.
      $field = FieldConfig::loadByName($element['#entity_type'], $element['#bundle'], $element['#field_name'])->getFieldStorageDefinition();
      $cardinality = $field->getCardinality();
      if ($cardinality != FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED && $cardinality > 1) {
        $element['#attributes']['data-cardinality'] = $cardinality;
      }
    }
  }
 // Attach the library.
  picker_attach_library($element);
  
  return $element;
} 


/**
 * Helper function to attach the Chosen library and settings to a given element.
 *
 * @param array &$element
 *   An render array element.
 */
function picker_attach_library(array &$element) {
  $element['#attached']['library'][] = 'picker/drupal.picker';
}