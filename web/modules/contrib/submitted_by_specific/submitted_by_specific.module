<?php

/**
 * @file
 * Contains submitted_by_specific.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function submitted_by_specific_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the submitted_by_specific module.
    case 'help.page.submitted_by_specific':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Defines submitted for the specific nodes') . '</p>';
      return $output;

    default:
  }
}

/**
 * Get submitted by specific settings for a node.
 */
function get_submitted_by_specific($nid) {
  return db_select('submitted_by_specific', 'sbs')
    ->fields('sbs', ['nid', 'show_author', 'show_created'])
    ->condition('sbs.nid', $nid)
    ->execute()
    ->fetchObject();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for a node_form.
 */
function submitted_by_specific_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $node_type = $form_state->getFormObject()->getEntity();

  // Get submitted by specific settings for current node.
  $nid = $node_type->id();

  if ($nid) {
    $sbs_settings = get_submitted_by_specific($nid);
  }

  // Is new or when nid not defined.
  // Get default settings for the node type.
  $bundle = $node_type->bundle();
  $bundle = Drupal::entityTypeManager()->getStorage('node_type')->load($bundle);
  $show_author_default = $bundle->getThirdPartySetting('submitted_by_specific', 'show_author');
  $show_created__default = $bundle->getThirdPartySetting('submitted_by_specific', 'show_created');

  $form['author']['show_author'] = [
    '#type' => 'checkbox',
    '#title' => t('Show author'),
    '#default_value' => isset($sbs_settings->show_author) ? $sbs_settings->show_author : $show_author_default,
    '#weight' => 100,
  ];

  $form['author']['show_created'] = [
    '#type' => 'checkbox',
    '#title' => t('Show creation time'),
    '#default_value' => isset($sbs_settings->show_created) ? $sbs_settings->show_created : $show_created__default,
    '#weight' => 101,
  ];

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'submitted_by_specific_form_submit';
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_type_form.
 */
function submitted_by_specific_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node_type = $form_state->getFormObject()->getEntity();

  // Hide core submitted by settings.
  $form['display']['display_submitted']['#type'] = 'hidden';

  // When add new node type or submitted by specific settings not defined.
  $default_sbs = ($node_type->displaySubmitted() === TRUE) ? 1 : 0;

  $form['display']['show_author'] = [
    '#type' => 'checkbox',
    '#title' => t('Show author'),
    '#default_value' => $node_type->getThirdPartySetting('submitted_by_specific', 'show_author', $default_sbs),
    '#weight' => 10,
  ];

  $form['display']['show_created'] = [
    '#type' => 'checkbox',
    '#title' => t('Show creation time'),
    '#default_value' => $node_type->getThirdPartySetting('submitted_by_specific', 'show_created', $default_sbs),
    '#weight' => 11,
  ];

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'submitted_by_specific_default_settings_type_form_submit';
    }
  }
}

/**
 * Implements callback for submitted_by_specific.
 *
 * Add "submitted_by" settings for the node type.
 */
function submitted_by_specific_default_settings_type_form_submit($form, FormStateInterface $form_state) {
  $node_type = $form_state->getFormObject()->getEntity();
  $node_type->setThirdPartySetting('submitted_by_specific', 'show_author', $form_state->getValue('show_author'));
  $node_type->setThirdPartySetting('submitted_by_specific', 'show_created', $form_state->getValue('show_created'));
  $node_type->save();
  $form_state = $node_type;
}

/**
 * Implements callback for submitted_by_specific.
 *
 * Add "submitted_by" settings for the node.
 */
function submitted_by_specific_form_submit($form, FormStateInterface $form_state) {
  // Add or update submitted info for new or changed a node.
  db_merge('submitted_by_specific')
    ->key(['nid' => $form_state->getValue('nid')])
    ->fields([
      'show_author' => $form_state->getValue('show_author'),
      'show_created' => $form_state->getValue('show_created'),
    ])
    ->execute();
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Delete row as node id.
 */
function submitted_by_specific_node_delete(EntityInterface $entity) {
  // Delete row of the removed entity.
  db_delete('submitted_by_specific')
    ->condition('nid', $entity->id())
    ->execute();
}

/**
 * Implements hook_preprocess_node().
 *
 * Change visible "submitted by" on a node.
 */
function submitted_by_specific_preprocess_node(&$variables) {
  // Get submitted by specific settings for current node.
  if ($sbs_settings = get_submitted_by_specific($variables['node']->id())) {
    if ($sbs_settings->show_author == '1' || $sbs_settings->show_created == '1') {
      $variables['display_submitted'] = TRUE;

      // Hide author_name.
      if ($sbs_settings->show_author != '1') {
        unset($variables['author_name']);
      }

      // Hide date.
      if ($sbs_settings->show_created != '1') {
        unset($variables['date']);
      }
    }
    else {
      $variables['display_submitted'] = FALSE;
    }
  }
}
