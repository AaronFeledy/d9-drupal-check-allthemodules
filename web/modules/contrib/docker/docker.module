<?php
/**
 * @file
 * A Docker application manager.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\docker\DockerApi;
use Drupal\entity\Entity\EntityDisplay;
use Drupal\menu_link\Entity\MenuLink;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_help().
 */
function docker_help($path, $arg) {
  switch ($path) {
    case 'admin/help#docker':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Docker module provides a UI to manage Docker instances and group containers into single applications.') . '</p>';
      return $output;
    case 'admin/structure/docker/hosts':
      return '<p>' . t('At least one Docker host is required.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function docker_menu() {
  $items = array();
  $items['docker'] = array(
    'title' => 'Docker',
    'description' => 'Docker dashboard.',
    'route_name' => 'docker_main_page',
  );
  // Builds
  $items['docker/builds'] = array(
    'title' => 'Docker builds',
    'description' => 'Manage Docker builds.',
    'route_name' => 'docker_build_list',
    'type' => MENU_LOCAL_TASK
  );
  $items['docker/builds/list'] = array(
    'title' => 'List',
    'description' => 'List Docker builds.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['docker/builds/add'] = array(
    'route_name' => 'docker_build_add',
    'type' => MENU_SIBLING_LOCAL_TASK,
    'weight' => 1,
  );
  $items['docker/builds/%docker_build'] = array(
    'title' => 'Docker build',
    // TODO: _title_callback: '\Drupal\mymodule\Controller\Test::getTitle'
    //'title callback' => 'docker_build_page_title',
    //'title arguments' => array(2),
    'page callback' => 'docker_build_view_page',
    'page arguments' => array(2),
    'access arguments' => array('administer docker')
  );
  $items['docker/builds/%docker_build/view'] = array(
    'title' => 'Build',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['docker/builds/%docker_build/edit'] = array(
    'title' => 'Edit',
    'route_name' => 'docker_build_edit',
    'type' => MENU_LOCAL_TASK
  );
  // Hosts
  $items['docker/hosts'] = array(
    'title' => 'Docker hosts',
    'description' => 'Configure Docker hosts that can be used for apps.',
    'route_name' => 'docker_host_list',
    'type' => MENU_LOCAL_TASK
  );
  $items['docker/hosts/list'] = array(
    'title' => 'List',
    'description' => 'List the existing Docker hosts.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['docker/hosts/add'] = array(
    'route_name' => 'docker_host_add',
    'type' => MENU_SIBLING_LOCAL_TASK,
    'weight' => 1,
  );
  $items['docker/hosts/%docker_host'] = array(
    'title' => 'Docker host',
    //TODO: _title_callback: '\Drupal\mymodule\Controller\Test::getTitle'
    //'title callback' => 'docker_host_page_title',
    //'title arguments' => array(2),
    'page callback' => 'docker_host_view_page',
    'page arguments' => array(2),
    'access arguments' => array('administer docker')
  );
  $items['docker/hosts/%docker_host/view'] = array(
    'title' => 'Host',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['docker/hosts/%docker_host/edit'] = array(
    'title' => 'Edit',
    'route_name' => 'docker_host_edit',
    'type' => MENU_LOCAL_TASK
  );
  // Images
  $items['docker/hosts/%docker_host/images'] = array(
    'title' => 'Images',
    'route_name' => 'docker_host_images',
    'type' => MENU_LOCAL_TASK
  );

  /*
  $items['docker/hosts/%docker_host/images/%image_id'] = array(
    'title' => 'Docker image',
    'title callback' => 'docker_image_page_title',
    'title arguments' => array(4),
    'route_name' => 'docker_host_image_detail',
    'type' => MENU_LOCAL_TASK
  );
  $items['docker/hosts/%docker_host/images/%image_id/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  */

  // Containers
  $items['docker/hosts/%docker_host/containers'] = array(
    'title' => 'Containers',
    'route_name' => 'docker_host_containers',
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}


/**
 * Returns a docker build page title.
 *
 * @see docker_menu()
 *
 * @param $docker_build object docker build entity.
 * @return string page title
 */
function docker_build_page_title($docker_build) {
  return $docker_build->name->value;
}

/**
 * Loads a docker build object.
 */
function docker_build_load($dbid, $reset = FALSE) {
  return entity_load('docker_build', $dbid, $reset);
}

/**
 * Loads multiple docker build objects.
 */
function docker_build_load_multiple(array $dbid = NULL, $reset = FALSE) {
  return entity_load_multiple('docker_build', $dbid, $reset);
}

/**
 * Generate an array for rendering the given docker host.
 */
function docker_build_view($docker_build, $view_mode = 'full') {
  return entity_view($docker_build, $view_mode);
}

/**
 * Constructs a drupal_render() style array from an array of loaded docker hosts.
 */
function docker_build_view_multiple($accounts, $view_mode = 'full', $langcode = NULL) {
  return entity_view($accounts, $view_mode, $langcode);
}

/**
 * Page callback wrapper for docker_host_view().
 */
function docker_build_view_page($docker_build) {
  if (is_object($docker_build)) {
    return docker_build_view($docker_build);
  }
  // An administrator may try to view a non-existent host,
  // so we give them a 404 (versus a 403 for non-admins).
  throw new NotFoundHttpException();
}

/**
 * Implements hook_docker_build_view().
 */
function docker_docker_build_view(EntityInterface $docker_build, EntityDisplay $display) {
  if ($display->getComponent('info')) {
    $docker_build->content['info'] = array(

    );
  }
}

/**
 * Returns a docker host page title.
 *
 * @see docker_menu()
 *
 * @param $docker_host object docker host entity.
 * @return string page title
 */
function docker_host_page_title($docker_host) {
  return $docker_host->host->value . ':' . $docker_host->port->value;
}

/**
 * Returns a docker host image title.
 *
 * @see docker_menu()
 *
 * @param $image image id.
 * @return string page title
 */
function docker_host_image_title($image) {
  return $image;
}

/**
 * Loads a docker host object.
 */
function docker_host_load($dhid, $reset = FALSE) {
  return entity_load('docker_host', $dhid, $reset);
}

/**
 * Loads multiple docker host objects.
 */
function docker_host_load_multiple(array $dhids = NULL, $reset = FALSE) {
  return entity_load_multiple('docker_host', $dhids, $reset);
}

/**
 * Generate an array for rendering the given docker host.
 */
function docker_host_view($docker_host, $view_mode = 'full') {
  return entity_view($docker_host, $view_mode);
}

/**
 * Constructs a drupal_render() style array from an array of loaded docker hosts.
 */
function docker_host_view_multiple($accounts, $view_mode = 'full', $langcode = NULL) {
  return entity_view($accounts, $view_mode, $langcode);
}

/**
 * Page callback wrapper for docker_host_view().
 */
function docker_host_view_page($docker_host) {
  if (is_object($docker_host)) {
    return docker_host_view($docker_host);
  }
  // An administrator may try to view a non-existent host,
  // so we give them a 404 (versus a 403 for non-admins).
  throw new NotFoundHttpException();
}

/**
 * Implements hook_docker_host_view().
 */
function docker_docker_host_view(EntityInterface $docker_host, EntityDisplay $display) {
  if ($display->getComponent('info')) {
    $api = new DockerApi();
    $uri = $docker_host->uri();
    $rows = array();

    // Host info
    $info = $api->info($docker_host);

    $image_count =  $info['Images'] > 0 ? l( $info['Images'], $uri['path'] . '/images') : 0;
    $operations['view'] = array(
      'title' => t('Info'),
      'href' => $uri['path'],
      'options' => $uri['options'],
      'weight' => -10,
    );
    $operations['images'] = array(
      'title' => t('Images'),
      'href' => $uri['path'] . '/images',
      'options' => $uri['options'],
      'weight' => -5,
    );

    $container_count =  $info['Containers'] > 0 ? l( $info['Containers'], $uri['path'] . '/containers') : 0;

    $rows[] = array(t('Images'), $image_count);
    $rows[] = array(t('Containers'), $container_count);
    $rows[] = array(t('NFd'), $info['NFd']);
    $rows[] = array(t('NGoroutines'), $info['NGoroutines']);
    $rows[] = array(t('Memory Limit'), $info['MemoryLimit']);
    $rows[] = array(t('LXC Version'), $info['LXCVersion']);
    $rows[] = array(t('Kernel Version'), $info['KernelVersion']);

    // Docker version info
    $info = $api->version($docker_host);
    $rows[] = array(t('Docker Version'), $info['Version']);
    $rows[] = array(t('Go Version'), $info['GoVersion']);

    $docker_host->content['info'] = array(
      '#theme' => 'table',
      '#header' => array('', ''),
      '#rows' => $rows
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function docker_field_extra_fields() {
  $fields['docker_host']['docker_host']['display']['info'] = array(
    'label' => t('Info'),
    'description' => t('Docker host details.'),
    'weight' => 5,
  );
  $fields['docker_build']['docker_build']['display']['info'] = array(
    'label' => t('Info'),
    'description' => t('Docker build details.'),
    'weight' => 5,
  );
  return $fields;
}