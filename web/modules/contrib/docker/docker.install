<?php

/**
 * @file
 * Install, update and uninstall functions for the user module.
 */

/**
 * Implements hook_install().
 */
function docker_install() {

  // Dockerfile instructions field
  $field = array(
    'name' => 'dockerfile',
    'entity_type' => 'docker_build',
    'module' => 'text',
    'type' => 'text_long',
    'settings' => array(),
    'cardinality' => 1,
    'locked' => TRUE,
    'indexes' => array(),
  );
  entity_create('field_entity', $field)->save();

  $instance = array(
    'field_name' => 'dockerfile',
    'entity_type' => 'docker_build',
    'bundle' => 'docker_build',
    'label' => 'Dockerfile instruction',
    'description' => t('Dockerfile instruction items.'),
    'required' => TRUE,
    'default_value' => array(),
    'settings' => array(
      'text_processing' => '0'
    ),
  );
  entity_create('field_instance', $instance)->save();

  // Assign form display settings for the 'default' view mode.
  entity_get_form_display('docker_build', 'docker_build', 'default')
    ->setComponent('dockerfile', array(
      'type' => 'text_long',
      'settings' => array(
        'text_processing' => '0',
        'rows' => 25,
      ),
      'weight' => 5,
    ))
    ->save();

  // Assign display settings for the 'default' and 'compact' view modes.
  entity_get_display('docker_build', 'docker_build', 'default')
    ->setComponent('dockerfile', array(
      'label' => 'hidden',
      'type' => 'text_long',
      'settings' => array(
      ),
    ))
    ->save();
}

/**
 * Implements hook_schema().
 */
function docker_schema() {
  $schema['docker_host'] = array(
    'description' => 'Stores docker host data.',
    'fields' => array(
      'dhid' => array(
        'description' => 'The primary identifier for a docker host.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this host.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'The name of this docker host, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'host' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Docker hostname or ip.',
      ),
      'port' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Docker host port.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when the docker host was created.',
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the docker host was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the docker host is active.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'host' => array('host'),
      'port' => array('port'),
      'created' => array('created'),
      'changed' => array('changed'),
      'status' => array('status'),
    ),
    'unique keys' => array(
      'uuid' => array('uuid'),
      'name' => array('name'),
    ),
    'primary key' => array('dhid'),
  );

  $schema['docker_build'] = array(
    'description' => 'Stores docker build data.',
    'fields' => array(
      'dbid' => array(
        'description' => 'The primary identifier for a docker build.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'machine_name' => array(
        'description' => 'The name of this docker build, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'The name of this docker build, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'The description of this docker build, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when the docker build was created.',
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the docker build was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'langcode' => array(
        'description' => 'The {language}.langcode of this build.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'created' => array('created'),
      'changed' => array('changed'),
    ),
    'unique keys' => array(
      'uuid' => array('uuid'),
      'machine_name' => array('machine_name'),
      'label' => array('label'),
    ),
    'primary key' => array('dbid'),
  );

  return $schema;
}
