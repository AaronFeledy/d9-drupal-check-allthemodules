<?php

/**
 * @file
 * Contains Drupal\impression\impression.module
 */

/**
 * @defgroup content_entity_example Example: Content Entity
 * @ingroup examples
 * @{
 * Implement a Content entity.
 *
 * This module demonstrates implementing a Content Entity.
 *
 * This is an example of a fieldable content entity used to hold structured
 * information without the overhead of using a content type. It is defined
 * programmatically and we will expose the main techniques to handle and expose
 * the contents.
 *
 * We define a content entity named 'Contact'. With it, we demonstrate the main
 * tasks for an entity:
 * - define
 * - save
 * - load
 * - view
 * - edit
 * - delete
 * - control access
 *
 * Where ever possible, we use the amazing tools built into D8 natively.
 * }
 */

/**
 * Create entity for callback impression.
 */
function impression_create_a_new_entity($key, $action) {
  print 'kjskdfskdjflsf';
  $user = \Drupal::currentUser();
  if (isset($user->uid)) {
    $uid = $user->uid;
  }
  else {
    $uid = 0;
  }
  $impression = entity_create('impression_base');
  $impression->domain = $_SERVER['HTTP_HOST'];
  $impression->uri = $_SERVER['REQUEST_URI'];
  $impression->ip = \Drupal::request()->getClientIp();
  $impression->hi = \Drupal\Component\Utility\Html::escape($key);
  $impression->ref = $_SERVER['HTTP_REFERER'];
  $impression->action = $action;
  $impression->save();
}

/**
 * Implements hook_page_build().
 */
function impression_page_attachments(array &$attachments) {
  // Declaring a proper library including its dependencies, and
  // attaching it is the recommended way:
  $attachments['#attached']['library'][] = 'impression/impression';
}

/**
 * Implements hook_cron().
 *
 * For some house keeping tasks like remove old impression data.
 * Run this cron once a day is recommended.
 */
function impression_cron() {

  $cron_config = \Drupal::configFactory()->getEditable('examples.cron');
  $interval = $cron_config->get('interval');
  $daysdelete = !empty($interval) ? $interval : 0;

  if (intval($daysdelete) > 0) {

    $tippingpoint = REQUEST_TIME - $daysdelete;

    try {
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('cron_house_keeper');

      $results = impression_get_expired($tippingpoint);

      $count = 0;
      $nids = array();
      $nidss = array();
      foreach ($results as $key => $nid) {
        $count++;
        $nids[] = $nid;
        if ($count > 99) {
          $count = 0;
          $nidss[] = $nids;
          $nids = array();
        }
      }

      if (!empty($nids)) {
        $nidss[] = $nids;
      }

      if (!empty($nidss)) {

        foreach ($nidss as $nids) {
          $item = new \stdClass();
          $item->nid = $nids;
          $queue->createItem($item);
        }
      }
    }
    catch (Exception $e) {
      watchdog_exception('impression', $e);
    }
  }
}

function impression_get_expired($tipingtime) {
  $query = \Drupal::entityQuery('impression_base')
    ->condition('created', $tipingtime, '<');
  $eids = $query->execute();
  return $eids;
}

/**
 * Verifies token.
 */
function impression_token_verify($token) {
  if (empty($token)) {
    return FALSE;
  }
  else {
    $result = db_query('SELECT created FROM {impression_base} WHERE hi = :token', array(':token' => $token));
    foreach ($result as $record) {
      if ($record) {
        return $record->created;
      }
      else {
        return FALSE;
      }
    }
  }
}
