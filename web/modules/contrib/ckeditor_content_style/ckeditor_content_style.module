<?php

/**
 * @file
 * Ckeditor_content_style Module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function ckeditor_content_style_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ckeditor_content_style':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {

        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }

  }

  return NULL;
}

/**
 * Get suspected words list.
 *
 * @inheritdoc
 */
function ckeditor_content_style_sw() {
  $rows = [];
  $result = db_select('contentstyle', 'cs')
    ->fields('cs', ['id', 'sugested', 'entity', 'suggestion'])
    ->orderBy('cs.id', 'DESC')
    ->execute();
  $i = 0;
  foreach ($result as $row) {
    $entity = $row->entity;
    $sug = $row->suggestion;
    $rows['suspected'][$i] = [];
    $suspected = unserialize($row->sugested);
    foreach ($suspected as $value) {
      $rows['suspected'][$i]['text'] = $value;
      $rows['suspected'][$i]['entity'] = $entity;
      $rows['suspected'][$i]['sugestion'] = $sug;
      $i++;
    }
  }
  return $rows;
}

/**
 * Implements hook_preprocess_html().
 *
 * @inheritdoc
 */
function ckeditor_content_style_preprocess_html(&$variables) {

  $ckcs_data = ckeditor_content_style_sw();
  $variables['#attached']['drupalSettings']['ckcs'] = $ckcs_data;
}
