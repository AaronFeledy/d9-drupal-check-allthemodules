<?php

/**
 * @file
 * General functions and hook implementations.
 *
 * @see http://harvesthq.github.com/chosen/
 */

use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Define chosen library url.
 */
define('SUPERSELECT_WEBSITE_URL', 'https://zellerda.github.io/Tokenize2');
define('SUPERSELECT_INCLUDE_ADMIN', 0);
define('SUPERSELECT_INCLUDE_NO_ADMIN', 1);
define('SUPERSELECT_INCLUDE_EVERYWHERE', 2);

/**
 * Implements hook_element_info_alter().
 */
function superselect_element_info_alter(&$info) {
  $info['select']['#pre_render'][] = 'superselect_pre_render_select';

  if (\Drupal::moduleHandler()->moduleExists('date')) {
    $info['date_combo']['#pre_render'][] = 'superselect_pre_render_date_combo';
  }

  if (\Drupal::moduleHandler()->moduleExists('select_or_other')) {
    $info['select_or_other']['#pre_render'][] = 'superselect_pre_render_select_or_other';
  }

  if (\Drupal::moduleHandler()->moduleExists('synonyms')) {
    $info['synonyms_entity_select']['#pre_render'][] = 'superselect_pre_render_select';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Add entity type  and bundle information to the widget.
 *
 * @see chosen_pre_render_select()
 */

/**
 * Implements hook_field_widget_form_alter().
 */
function superselect_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $element['#entity_type'] = $field_definition->getTargetEntityTypeId();  
  $element['#bundle'] = $field_definition->getTargetBundle();
  
}

/**
 * Render API callback: Apply Chosen to a select element.
 *
 * @param array $element
 *   The element.
 *
 * @return array
 *   The element.
 */
function superselect_pre_render_select($element) { 
  // Exclude chosen from theme other than admin.
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $admin_theme = \Drupal::config('system.theme')->get('admin');
  $is_admin_path = \Drupal::service('router.admin_context')->isAdminRoute();
  $is_admin = $is_admin_path || $theme == $admin_theme;

  /*$chosen_include = \Drupal::config('superselect.settings')->get('chosen_include');
  if ($chosen_include != CHOSEN_INCLUDE_EVERYWHERE && $is_admin == $chosen_include) {
    return $element;
  }*/
  
  // If the #chosen FAPI property is set, then add the appropriate class.
  if (isset($element['#superselect'])) {
	  
    if (!empty($element['#superselect'])) {
      // Element has opted-in for Chosen, ensure the library gets added.
      $element['#attributes']['class'][] = 'superselect-enable';
    }
    else {
      $element['#attributes']['class'][] = 'superselect-disable';
      // Element has opted-out of Chosen. Do not add the library now.
      return $element;
    }
  }
  elseif (isset($element['#attributes']['class']) && is_array($element['#attributes']['class'])) {
    if (array_intersect($element['#attributes']['class'], ['superselect-disable'])) {
      // Element has opted-out of Chosen. Do not add the library now.
      return $element;
    }
    elseif (array_intersect($element['#attributes']['class'], ['superselect-enable'])) {
      // Element has opted-in for Chosen, ensure the library gets added.
    }
  }
  else {
    // Neither the #chosen property was set, nor any chosen classes found.
    // This element still might match the site-wide critera, so add the library.
  }
  
  if (isset($element['#field_name']) && !empty($element['#multiple'])) {
    // Remove '_none' from multi-select options.
    unset($element['#options']['_none']);
    
    if (isset($element['#entity_type']) && isset($element['#bundle']) && isset($element['#field_name'])) {
      // Set data-cardinality for fields that aren't unlimited.
      $field = FieldConfig::loadByName($element['#entity_type'], $element['#bundle'], $element['#field_name'])->getFieldStorageDefinition();
      $cardinality = $field->getCardinality();
      if ($cardinality != FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED && $cardinality > 1) {
        $element['#attributes']['data-cardinality'] = $cardinality;
      }
    }
  }

  // Attach the library.
  superselect_attach_library($element);

  // Right to Left Support.
  $language_direction = \Drupal::languageManager()->getCurrentLanguage()->getDirection();
  if (LanguageInterface::DIRECTION_RTL == $language_direction) {
    $element['#attributes']['class'][] = 'superselect-rtl';
  }
  //unset($element['#options']['_none']);
  return $element;
}

/**
 * Helper function to attach the Chosen library and settings to a given element.
 *
 * @param array &$element
 *   An render array element.
 */
function superselect_attach_library(array &$element) {
  $element['#attached']['library'][] = 'superselect/superselect.superselect';

  $superselect_conf = \Drupal::config('superselect.settings');

  $css_disabled_themes = $superselect_conf->get('disabled_themes');
  if (empty($css_disabled_themes)) {
    $css_disabled_themes = [];
  }

  // Only add the Chosen CSS if it is not disabled for the active theme.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  if (!in_array($theme_name, $css_disabled_themes, TRUE)) {
    $element['#attached']['library'][] = 'superselect_lib/superselect.css';
  }

  $element['#attached']['drupalSettings']['superselect'] = [
    'selector' => $superselect_conf->get('jquery_selector'),
    'tokensMaxItems' => (int) $superselect_conf->get('tokensMaxItems'),
    'dropdownMaxItems' => (int) $superselect_conf->get('dropdownMaxItems'),
    'searchMinLength' => (int) $superselect_conf->get('searchMinLength'),    
    'searchFromStart' => (int) $superselect_conf->get('searchFromStart'),    
    'searchHighlight' => (int) $superselect_conf->get('searchHighlight'),    
    'disabled_themes' => (int) $superselect_conf->get('disabled_themes'),    
    'superselect_include' => (int) $superselect_conf->get('superselect_include'),    
    'placeholder' =>  $superselect_conf->get('placeholder'),    
    'displayNoResultsMessage' =>  $superselect_conf->get('displayNoResultsMessage'),    
    'noResultsMessageText' =>  $superselect_conf->get('noResultsMessageText'),    
  ];
  
  //print_r($element);die;
}

/**
 * Render API callback: Apply Chosen to a date_combo element.
 *
 * @param array $element
 *   The element.
 *
 * @return array
 *   The element.
 */
function superselect_pre_render_date_combo($element) {
  // Because the date_combo field contains many different select elements, we
  // need to recurse down and apply the FAPI property to each one.
  if (isset($element['#superselect'])) {
    superselect_element_apply_property_recursive($element, $element['#superselect']);
  }
  return $element;
}

/**
 * Render API callback: Apply Chosen to a select_or_other element.
 *
 * @param array $element
 *   The element.
 *
 * @return array
 *   The element.
 */
function superselect_pre_render_select_or_other($element) {
  if ($element['#select_type'] == 'select' && isset($element['#superselect'])) {
    $element['select']['#superselect'] = $element['#superselect'];
  }
  return $element;
}

/**
 * Recurse through an element to apply the chosen property to any select fields.
 *
 * @param array $element
 *   The element.
 * @param int $superselect_value
 *   Chosen setting
 *
 * @return array
 *   The element.
 */
function superselect_element_apply_property_recursive(array &$element, $superselect_value = NULL) {
  if (!isset($superselect_value)) {
    if (isset($element['#superselect'])) {
      $superselect_value = $element['#superselect'];
    }
    else {
      return;
    }
  }
  if (isset($element['#type']) && $element['#type'] == 'select') {
    $element['#superselect'] = $superselect_value;
  }
  foreach (Element::children($element) as $key) {
    superselect_element_apply_property_recursive($element[$key], $superselect_value);
  }
}

/**
 * Implements hook_help().
 */
function superselect_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    case 'help.page.superselect':
      $output = '';
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Superselect uses the Tokenize2 jQuery plugin to make your < select > elements more user-friendly.') . '</p>';
	  $output .= check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<p>' . t('Configure at: <a href=":structure_types">admin/config/user-interface/superselect</a>', [':structure_types' => Url::fromRoute('superselect.admin')->toString()]) . '</p>';
      return $output;
  }

}
