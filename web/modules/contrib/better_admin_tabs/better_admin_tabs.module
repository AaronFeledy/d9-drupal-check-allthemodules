<?php

/**
 * @file
 * Improved styling of the Drupal admin tabs.
 */

use Drupal\Core\Menu\LocalTaskManager;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Menu;

/**
 * Implements hook_page_attachments().
 *
 * Add admin tabs css for logged in users only.
 */
function better_admin_tabs_page_attachments(array &$page) {
  if (\Drupal::currentUser()->isAuthenticated() && !_is_admin_page()) {
    $page['#attached']['library'][] = 'better_admin_tabs/css';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add twig file suggestion for the menu_local_tasks.
 */
function better_admin_tabs_theme_suggestions_menu_local_tasks_alter(array &$suggestions, array $variables) {
  if (!_better_admin_tabs_is_admin_page()) {
    $suggestions[] = 'menu_local_tasks__better';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add twig file suggestion for the menu_local_task.
 */
function better_admin_tabs_theme_suggestions_menu_local_task_alter(array &$suggestions, array $variables) {
  if (!_better_admin_tabs_is_admin_page()) {
    $suggestions[] = 'menu_local_task__better';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add twig file suggestion for the menu_local_action.
 */
function better_admin_tabs_theme_suggestions_menu_local_action_alter(array &$suggestions, array $variables) {
  if (!_better_admin_tabs_is_admin_page()) {
    $suggestions[] = 'menu_local_action__better';
  }
}

/**
 * Implements hook_theme().
 *
 * Use this modules custom twig files for:
 * - menu_local_tasks
 * - menu_local_task
 * - menu_local_action.
 */
function better_admin_tabs_theme() {
  return [
    'menu_local_tasks__better' => [
      'variables' => ['primary' => [], 'secondary' => []],
      'template' => 'menu-local-tasks--better',
    ],
    'menu_local_task__better' => [
      'render element' => 'element',
      'base hook' => 'menu_local_task',
      'template' => 'menu-local-task--better',
    ],
    'menu_local_action__better' => [
      'render element' => 'element',
      'base hook' => 'menu_local_action__better',
      'template' => 'menu-local-action--better',
    ],
  ];
}

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function better_admin_tabs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the better_admin_tabs module.
    case 'help.page.better_admin_tabs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Make the Drupal admin tabs (create, edit,
      translate, ...) look nice') . '</p>';
      return $output;

    default:
  }
}

function _better_admin_tabs_is_admin_page() {
  $route = \Drupal::routeMatch()->getRouteObject();

  $is_admin = FALSE;
  if (!empty($route)) {
    $is_admin_route = \Drupal::service('router.admin_context')
      ->isAdminRoute($route);
    $has_node_operation_option = $route->getOption('_node_operation_route');
    $is_admin = ($is_admin_route || $has_node_operation_option);

    if ($route->getPath() === '/admin/config/better_admin_tabs/config') {
      $is_admin = FALSE;
    }
  }
  else {
    $current_path = \Drupal::service('path.current')->getPath();
    if (preg_match('/node\/(\d+)\/edit/', $current_path, $matches)) {
      $is_admin = TRUE;
    }
    elseif (preg_match('/taxonomy\/term\/(\d+)\/edit/', $current_path, $matches)) {
      $is_admin = TRUE;
    }
  }

  return $is_admin;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add a simple class for easily styling color and icon.
 */
function better_admin_tabs_preprocess_menu_local_task(&$variables) {
  $class = $variables['link']['#url']->getRouteName();
  $variables['color'] = \Drupal::service('better_admin_tabs')->getDefaultColor($class);
  $variables['icon'] = \Drupal::service('better_admin_tabs')->getDefaultIcon($class);

  $variables['iconclass'] = str_replace('entity.node.', '', $class);
  switch ($class) {
    case 'entity.node.canonical':
      $variables['iconclass'] = 'settings';
      break;

    case 'entity.node.edit_form':
      $variables['iconclass'] = 'edit';
      break;

    case 'entity.node.delete_form':
      $variables['iconclass'] = 'delete';
      break;

    case 'entity.node.version_history':
      $variables['iconclass'] = 'revisions';
      break;

    case 'entity.node.devel_load':
      $variables['iconclass'] = 'devel';
      break;

    case 'entity.node.content_translation_overview':
      $variables['iconclass'] = 'translate';
      break;

    case 'entity.node.display':
      $variables['iconclass'] = 'view';
      break;
  }

}
