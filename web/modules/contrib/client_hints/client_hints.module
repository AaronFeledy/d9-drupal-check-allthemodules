<?php

function client_hints_preprocess_image(&$variables) {

  // Set processed url as clientHintsSrc data attribute.
  $variables['attributes']['data-client-hints-src'] = process_image_url($variables['attributes']['src']);
  // Set an appropriately sized transparent svg as placeholder image.
  $variables['attributes']['src'] = _client_hints_placeholder_svg($variables['width'], $variables['height']);

  // Add JS library.
  $variables['#attached']['library'][] =  'client_hints/lazy';

}

/**
 * This is mostly copied from PathProcessorImageStyles::processInbound() and is
 * used to determine the source file path of an image style url (?).
 */
function process_image_url($path) {

  $directory_path = \Drupal::service('stream_wrapper_manager')->getViaScheme('public')->getDirectoryPath();
  if (strpos($path, '/' . $directory_path . '/styles/') === 0) {
    $path_prefix = '/' . $directory_path . '/styles/';
  }
  // Check if the string '/system/files/styles/' exists inside the path,
  // that means we have a case of private file's image style.
  elseif (strpos($path, '/system/files/styles/') !== FALSE) {
    $path_prefix = '/system/files/styles/';
    $path = substr($path, strpos($path, $path_prefix), strlen($path));
  }
  else {
    return $path;
  }

  // Strip out path prefix.
  $rest = preg_replace('|^' . preg_quote($path_prefix, '|') . '|', '', $path);

  // Get the image style, scheme and path.
  if (substr_count($rest, '/') >= 2) {
    list($image_style, $scheme, $file) = explode('/', $rest, 3);

    $original_file_path = '/' . $directory_path . '/' . $file;

    if ($parts = explode('?', $original_file_path)) {
      return $parts[0];
    }

    return $original_file_path;
  }
  else {
    return $path;
  }
}

/**
 * Implements hook_theme_registry_alter
 */
function client_hints_theme_registry_alter(&$theme_registry) {
  $theme_registry['image']['path'] = \Drupal::service('module_handler')->getModule('client_hints')->getPath() . '/templates';
}

/**
 * Build an appropriately sized svg data string.
 */
function _client_hints_placeholder_svg($width, $height) {
  $source = '<svg width="' . $width . '" height="' . $height . '" xmlns="http://www.w3.org/2000/svg">
 <g>
  <rect fill="none" id="canvas_background" height="' . $height . '" width="' . $width . '" y="-1" x="-1"/>
 </g>
</svg>';

  return 'data: image/svg+xml;base64,' . base64_encode($source);
}
