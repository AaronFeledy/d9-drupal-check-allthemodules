<?php

/**
 * @file
 * Contains display_mode_extras.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function display_mode_extras_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the display_mode_extras module.
    case 'help.page.display_mode_extras':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Manage form mode and view mode by user role') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_form_display_alter().
 */
function display_mode_extras_entity_form_display_alter(&$form_display, $context) {

  $entity_type_id = $context['entity_type'];
  $bundle = $context['bundle'];

  $mode = _display_mode_extras_get_form_mode($entity_type_id);

  // If no form mode matched, keep the form_display untouched.
  if ($mode !== NULL) {
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
    $form_display = $storage->load("$entity_type_id.$bundle.$mode");
  }

}

/**
 * Implements hook_entity_view_mode_alter().
 */
function display_mode_extras_entity_view_mode_alter(&$view_mode, $entity, $context) {

  $entity_type_id = $entity->getEntityTypeId();

  if ('token' === $view_mode) {
    return;
  }

  if ('user' === $entity_type_id) {
    if ('compact' === $view_mode || 'private_message_author' === $view_mode) {
      return;
    }
  }

  $mode = _display_mode_extras_get_view_mode($entity_type_id);

  // If no view mode matched, keep the view mode untouched.
  if ($mode !== NULL) {
    $view_mode = $mode;
  }

}

/**
 * Get form mode for the current user.
 *
 * Check enabled form modes first. Further the permissions.
 * And weight to be considered if the user have the right
 * to use more than one form mode.
 *
 * @param string $entity_type_id
 *   The entity type.
 *
 * @return null|string
 *   The form mode or NULL.
 */
function _display_mode_extras_get_form_mode($entity_type_id) {

  $current_user = \Drupal::currentUser();

  $form_modes = \Drupal::configFactory()->get('display_mode_extras.settings')->get("form_modes.$entity_type_id");

  // No form modes in settings.
  if (empty($form_modes)) {
    return NULL;
  }

  $available_form_modes = [];

  foreach ($form_modes as $form_mode_name => $form_mode) {
    if ($form_mode['enabled'] && $current_user->hasPermission("use form mode $entity_type_id $form_mode_name")) {
      $available_form_modes[] = [
        'form_mode' => $form_mode_name,
        'weight' => $form_mode['weight'],
      ];
    }
  }

  if (!empty($available_form_modes)) {

    if (count($available_form_modes) === 1) {
      return $available_form_modes[0]['form_mode'];
    }

    $first_item = array_shift($available_form_modes);

    $mode = $first_item['form_mode'];
    $weight = $first_item['weight'];

    foreach ($available_form_modes as $item) {
      if ($item['weight'] < $weight) {
        $mode = $item['form_mode'];
      }
    }

    return $mode;
  }
  // No permission granted to use any form mode.
  return NULL;

}

/**
 * Get view mode for the current user.
 *
 * Check enabled view modes first. Further the permissions.
 * And weight to be considered if the user have the right
 * to use more than one view mode.
 *
 * @param string $entity_type_id
 *   The entity type.
 *
 * @return null|string
 *   The view mode or NULL.
 */
function _display_mode_extras_get_view_mode($entity_type_id) {

  $current_user = \Drupal::currentUser();

  $view_modes = \Drupal::configFactory()->get('display_mode_extras.settings')->get("view_modes.$entity_type_id");

  // No view modes in settings.
  if (empty($view_modes)) {
    return NULL;
  }

  $available_view_modes = [];

  foreach ($view_modes as $view_mode_name => $view_mode) {
    if ($view_mode['enabled'] && $current_user->hasPermission("use view mode $entity_type_id $view_mode_name")) {
      $available_view_modes[] = [
        "view_mode" => $view_mode_name,
        "weight" => $view_mode['weight'],
      ];
    }
  }
  if (!empty($available_view_modes)) {

    if (count($available_view_modes) === 1) {
      return $available_view_modes[0]['view_mode'];
    }

    $first_item = array_shift($available_view_modes);

    $mode = $first_item['view_mode'];
    $weight = $first_item['weight'];

    foreach ($available_view_modes as $item) {
      if ($item['weight'] < $weight) {
        $mode = $item['view_mode'];
      }
    }

    return $mode;
  }

  // No permission granted to use any view mode.
  return NULL;

}
