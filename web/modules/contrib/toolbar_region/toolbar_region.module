<?php
/**
 * @file
 * Core functionality for Toolbar region module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Utility;

/**
 * Implements hook_system_info_alter().
 *
 * Add Toolbar region to each theme.
 */
function toolbar_region_system_info_alter(&$info, $file, $type) {
  if ($type == 'theme') {
    // Add the Toolbar region.
    $info['regions'] += ['toolbar_region' => 'Toolbar'];
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function toolbar_region_module_implements_alter(&$implementations, $hook) {
  // Ensure that Toolbar region's hook_toolbar_alter() function runs last.
  if ($hook == 'toolbar_alter') {
    unset($implementations['toolbar_region']);
    $implementations['toolbar_region'] = FALSE;
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function toolbar_region_toolbar_alter(&$items) {
  $blocks = entity_load_multiple_by_properties('block', [
    'theme' => \Drupal::theme()->getActiveTheme()->getName(),
    'region' => 'toolbar_region',
  ]);
  uasort($blocks, 'Drupal\block\Entity\Block::sort');
  // If no Toolbar region blocks are defined, don't do anything.
  if (empty($blocks)) {
    return;
  }
  // Build list of all pseudo blocks.
  $pseudo_blocks = [];
  foreach ($blocks as $delta => $block) {
    $plugin = explode(':', $block->get('plugin'));
    list($definition, $id) = !empty($plugin[2]) ? $plugin[2] : NULL;
    if ('toolbar_region_pseudo_block' == $definition) {
      $pseudo_blocks[$id] = $block;
      unset($blocks[$delta]);
    }
  }
  foreach ($items as $delta => &$item) {
    // Remove any hook_toolbar() and hook_toolbar_alter() based items if they
    // are not placed via Toolbar region.
    if (!isset($pseudo_blocks[$delta])) {
      unset($items[$delta]);
    }
    // Make any requested modifications to existing hook_toolbar() and
    // hook_toolbar_alter() based items.
    else {
      $settings = $pseudo_blocks[$delta]->get('settings');
      // Set weight.
      $item['#weight'] = $pseudo_blocks[$delta]->weight;
      // Set tab icon classes.
      if (!empty($settings['toolbar_region']['icon'])) {
        $item['tab']['#options']['attributes']['class'] = [
          'toolbar-icon',
          "toolbar-icon-{$settings['toolbar_region']['icon']}",
          'toolbar-item',
        ];
      }
      //Set tab title .
      if (!empty($settings['toolbar_region']['title'])) {
        $item['tab']['#title'] = Token::replace($settings['toolbar_region']['title']);
      }
    }
  }

  // Add additional Toolbar region blocks.
  foreach ($blocks as $block) {
    if ($block->access('view')) {
      $settings = $block->get('settings');
      // Hide block label.
      $settings['label_display'] = FALSE;
      $block->set('settings', $settings);
      // Set tab icon classes.
      $classes = ['toolbar-icon', 'toolbar-item'];
      if (!empty($settings['toolbar_region']['icon'])) {
        $classes[] = "toolbar-icon-{$settings['toolbar_region']['icon']}";
      }
      // Set tab title.
      if (!empty($settings['toolbar_region']['title'])) {
        $block->title = Token::replace($settings['toolbar_region']['title']);
      }
      $items[$block->uuid()] = [
        '#type' => 'toolbar_item',
        'tab' => [
          '#type' => 'link',
          '#title' => $block->label(),
          '#href' => '',
          '#options' => [
            'attributes' => [
              'title' => $block->label(),
              'class' => $classes,
            ],
          ],
        ],
        'tray' => [
          '#heading' => $block->label(),
          'block' => entity_view($block, 'block'),
        ],
        '#weight' => $block->getWeight(),
      ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function toolbar_region_form_block_form_alter(&$form, FormStateInterface $form_state) {
  $settings = $form_state->getFormObject()->getEntity()->get('settings');
  $form['settings']['toolbar_region'] = [
    '#type' => 'fieldset',
    '#title' => t('Toolbar Region settings'),
    '#tree' => TRUE,
  ];
  $form['settings']['toolbar_region']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => isset($settings['toolbar_region']['title']) ? $settings['toolbar_region']['title'] : '',
  ];
  $form['settings']['toolbar_region']['icon'] = [
    '#type' => 'select',
    '#title' => t('Icon'),
    '#options' => toolbar_region_toolbar_icons(),
    '#empty_value' => '',
    '#default_value' => isset($settings['toolbar_region']['icon']) ? $settings['toolbar_region']['icon'] : '',
  ];
  // @TODO - Newly added blocks don't have object available.
  if (!empty($settings) && $settings['provider'] == 'toolbar_region') {
    $form['settings']['toolbar_region']['icon']['#empty_option'] = t('- Default -');
  }
}

/**
 * Toolbar icons.
 *
 * @TODO - Make this extensible so modules can add additional icons.
 */
function toolbar_region_toolbar_icons() {
  return [
    'system-themes-page' => t('Appearance'),
    'escape-admin' => t('Back'),
    'system-admin-config' => t('Configuration'),
    'system-admin-content' => t('Content'),
    'system-modules-list' => t('Extend'),
    'help' => t('Help'),
    'menu' => t('Menu'),
    'user-admin-account' => t('People'),
    'system-admin-reports' => t('Reports'),
    'shortcut' => t('Shortcut'),
    'system-admin-structure' => t('Structure'),
    // This icon is provided by the User module.
    'user' => t('User'),
  ];
}
