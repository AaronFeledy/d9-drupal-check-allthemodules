<?php

/**
 * @file
 * Module file.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function login_alert_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.login_alert':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("Login Alert module is very useful for track Registered users Login activity.This module allow site's registered user to check their login at their registered email address.") . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('This module will create an admin configuration page: admin/config/people/login-alert.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_user_login().
 */
function login_alert_user_login($account) {
  if ($account->get("login_alert")->getValue()) {
    $fieldValue = $account->get("login_alert")->getValue();
    if ($fieldValue[0]['value'] == 1) {
      $mailManager = \Drupal::service('plugin.manager.mail');
      $config = \Drupal::config('loginalert.settings');
      $module = 'login_alert';
      $key = 'login_alert_email';
      $to = $account->getEmail();
      $url = generate_user_logout_link($account);
      if ($config->get('login_alert_mail_body')) {
        $message = $config->get('login_alert_mail_body');
      }
      else {
        $message = t("Hello

This is the notification that you have just logged in the the site.

Thanks");
      }
      $link = Link::fromTextAndUrl(t("Click here"), $url);
      $params['message'] = $message . " " . $link->toString();
      $langcode = \Drupal::currentUser()->getPreferredLangcode();
      $send = TRUE;
      $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
      if ($result['result'] !== TRUE) {
        \Drupal::logger('type')->error(t("There was a problem sending your message and it was not sent."));
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function login_alert_mail($key, &$message, $params) {
  switch ($key) {
    case 'login_alert_email':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Login alert notification');
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Generate user logout link.
 */
function generate_user_logout_link($account) {
  $timestamp = REQUEST_TIME;
  $langcode = $account->getPreferredLangcode();
  $url_options = ['absolute' => TRUE, 'language' => \Drupal::languageManager()->getLanguage($langcode)];
  $url = Url::fromRoute('login_alert.logout', [
    'uid' => $account->id(),
    'timestamp' => $timestamp,
    'hash' => login_alert_user_hash($account, $timestamp),
  ], $url_options);
  return $url;
};

/**
 * Creates a unique hash value for use in time-dependent per-user URLs.
 *
 * Similar to user_pass_rehash() but uses details from the user account which
 * should not be subject to change e.g. if an account is compromised.
 *
 * @param \Drupal\user\UserInterface $account
 *   An object containing the user account.
 * @param int $timestamp
 *   A UNIX timestamp, typically REQUEST_TIME.
 *
 * @return string
 *   A string that is safe for use in URLs and SQL statements.
 */
function login_alert_user_hash(UserInterface $account, $timestamp) {
  $data = $timestamp;
  $data .= $account->getCreatedTime();
  $data .= $account->id();
  $data .= $account->getInitialEmail();
  return Crypt::hmacBase64($data, Settings::getHashSalt());
}
