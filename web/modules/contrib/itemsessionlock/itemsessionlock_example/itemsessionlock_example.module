<?php

/**
 * @file
 * Example implementation of Item session lock API.
 * Prevent concurrent access to the node and users edit form.
 */

/**
 * Implements hook_form_alter().
 */
function itemsessionlock_example_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_form') {
// User edit form.
// This is enough to ensure a lock, or redirect to
// user view page if the user profile is already being edited.
// Args are : our type (matches the plugin 'id' defined
// in our annotation, and an unique id,
// user uid in this case.
// Last one is an optional redirect path, that you probably
// want to use in case of edit forms.
// This is where the user trying to edit the profile will be
// redirected to if a lock couldn't be acquired, and
// where aÂ message will be presented to warn about the lock.
// If he has sufficient permission, or the locks belongs
// to himself (eg, using 2 browsers or devices) the message
// will also contain a link to 'break' the lock.
    $account = $form_state->getFormObject()->getEntity();
    $redirect = \Drupal\Core\Url::fromRoute('user.page', array('user' => $account->id()))->toString();
    itemsessionlock_item_ensure_lock('itemsessionlock_example_user_edit', $account->id(), $redirect);

    // We'll be releasing the user item when the form is submitted.
    foreach ($form['actions'] as $action => $submit) {
      if (isset($form['actions'][$action]['#submit'])) {
        $form['actions'][$action]['#submit'][] = 'itemsessionlock_example_user_edit_submit';
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function itemsessionlock_example_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Pretty much the same than for user.
  $node = $form_state->getFormObject()->getEntity();
  if (!$node->id()) {
    return;
  }
  // Note: if some redirection is already set in url,
  // it takes precedence over the argument provided here.
  // Eg. If user came from content admin page, with a link
  // to node/28/edit?destination=admin/content, he will still be
  // redirected to admin/content, where the message would be
  // displayed, instead of node/28.
  $redirect = \Drupal\Core\Url::fromRoute('entity.node.canonical', array('node' => $node->id()))->toString();
  itemsessionlock_item_ensure_lock('itemsessionlock_example_node_edit', $node->id(), $redirect);
  foreach ($form['actions'] as $action => $submit) {
    if (isset($form['actions'][$action]['#submit'])) {
      $form['actions'][$action]['#submit'][] = 'itemsessionlock_example_node_edit_submit';
    }
  }
}

/**
 * Submit callback for node edit form.
 */
function itemsessionlock_example_node_edit_submit($form, &$form_state) {
  $node = $form_state->getFormObject()->getEntity();
  Drupal\itemsessionlock\Plugin\ItemSessionLock\ItemSessionLockBase::clear('itemsessionlock_example_node_edit', $node->id());
}

/**
 * Submit callback for user edit form.
 */
function itemsessionlock_example_user_edit_submit($form, &$form_state) {
  $account = $form_state->getFormObject()->getEntity();
  // Instead of calling the clear method statically,
  // you can obviously create a new instance of your plugin.
  $manager = \Drupal::service('plugin.manager.itemsessionlock');
  $plugin = $manager->createInstance('itemsessionlock_example_user_edit', array('iid' => $account->id()));
  $plugin->clear($plugin->getPluginId(), $plugin->getIid());
  $form_state->setRedirect('user.page');
}
