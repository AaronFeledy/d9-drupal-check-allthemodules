<?php

/**
 * @file
 * Install, update and uninstall functions for the CleverReach module.
 */

use Drupal\Core\Database\Database;

const CLEVERREACH_PROCESS_TABLE = 'cleverreach_process';
const CLEVERREACH_QUEUE_TABLE = 'cleverreach_queue';

/**
 * Implements hook_schema().
 *
 * Defines the database tables used by this module.
 *
 * @see hook_schema()
 *
 * @ingroup cleverreach
 */
function cleverreach_schema() {
  $schema = Database::getConnection()->schema();

  if (!$schema->tableExists(CLEVERREACH_PROCESS_TABLE)) {
    $result[CLEVERREACH_PROCESS_TABLE] = [
      'description' => 'Stores runner token used for synchronization.',
      'fields' => [
        'id' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'Primary Key: Unique Process ID.',
        ],
        'runner' => [
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'description' => 'Runner Unique ID',
        ],
      ],
      'primary key' => ['id', 'runner'],
    ];
  }

  if (!$schema->tableExists(CLEVERREACH_QUEUE_TABLE)) {
    $result[CLEVERREACH_QUEUE_TABLE] = [
      'description' => 'Stores synchronization tasks in the queue.',
      'fields' => [
        'id' => [
          'type' => 'serial',
          'size' => 'big',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Primary Key: Unique Queue ID.',
        ],
        'status' => [
          'type' => 'varchar',
          'length' => 30,
          'not null' => TRUE,
          'description' => 'Status',
        ],
        'type' => [
          'type' => 'varchar',
          'length' => 100,
          'not null' => TRUE,
          'description' => 'Queue type',
        ],
        'queue_name' => [
          'type' => 'varchar',
          'length' => 50,
          'not null' => TRUE,
          'description' => 'Queue name',
        ],
        'progress' => [
          'type' => 'int',
          'length' => 11,
          'default' => 0,
          'not null' => TRUE,
          'description' => 'Task execution progress',
        ],
        'last_execution_progress' => [
          'type' => 'int',
          'length' => 11,
          'default' => 0,
          'not null' => TRUE,
          'description' => 'Last task execution progress',
        ],
        'retries' => [
          'type' => 'int',
          'length' => 11,
          'default' => 0,
          'not null' => TRUE,
          'description' => 'Current number of retries',
        ],
        'failure_description' => [
          'type' => 'varchar',
          'length' => 255,
          'description' => 'Failure Description',
        ],
        'serialized_task' => [
          'type' => 'text',
          'size' => 'big',
          'not null' => TRUE,
          'description' => 'Serialized Task Data',
        ],
        'create_timestamp' => [
          'type' => 'int',
          'length' => 11,
          'not null' => FALSE,
          'description' => 'Queue Creation UNIX timestamp',
        ],
        'queue_timestamp' => [
          'type' => 'int',
          'length' => 11,
          'not null' => FALSE,
          'description' => 'Queuing UNIX timestamp',
        ],
        'last_update_timestamp' => [
          'type' => 'int',
          'length' => 11,
          'not null' => FALSE,
          'description' => 'Queue Modification UNIX timestamp',
        ],
        'start_timestamp' => [
          'type' => 'int',
          'length' => 11,
          'not null' => FALSE,
          'description' => 'Task Started UNIX timestamp',
        ],
        'finish_timestamp' => [
          'type' => 'int',
          'length' => 11,
          'not null' => FALSE,
          'description' => 'Task Finished UNIX timestamp',
        ],
        'fail_timestamp' => [
          'type' => 'int',
          'length' => 11,
          'not null' => FALSE,
          'description' => 'Task Failed UNIX timestamp',
        ],
      ],
      'primary key' => ['id'],
    ];
  }

  return $result;
}

/**
 * Implements hook_uninstall().
 *
 * Deletes the database tables used by this module.
 *
 * @see hook_uninstall()
 *
 * @ingroup cleverreach
 */
function cleverreach_uninstall() {
  \Drupal::configFactory()->getEditable('cleverreach.settings')->set('installed', FALSE)->save();

  $schema = Database::getConnection()->schema();
  if ($schema->tableExists(CLEVERREACH_PROCESS_TABLE)) {
    $schema->dropTable(CLEVERREACH_PROCESS_TABLE);
  }

  if ($schema->tableExists(CLEVERREACH_QUEUE_TABLE)) {
    $schema->dropTable(CLEVERREACH_QUEUE_TABLE);
  }

  \Drupal::configFactory()->getEditable('cleverreach.settings')->delete();
}
