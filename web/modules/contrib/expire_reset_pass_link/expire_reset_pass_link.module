<?php

/**
 * @file
 * Customization of form structure.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\expire_reset_pass_link\ResetPasswordHistory;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements form alter to add/edit form content structure.
 *
 * @method hook_form_alter()
 */
function expire_reset_pass_link_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  switch ($form_id) {
    case 'user_pass_reset':
      $user = $form_state->getBuildInfo()['args'][0];
      $timestamp = !is_null($form_state->getBuildInfo()['args'][2]) ? $form_state->getBuildInfo()['args'][2] : 0;
      if (!is_null($user) && is_timestamp($timestamp)) {
        $isLatestResetPassLink = ResetPasswordHistory::isLatestResetPasswordTimeStamp($user->id(), $timestamp);
        if ($user->getLastLoginTime() && !$isLatestResetPassLink) {
          drupal_set_message(t('You have tried to use a old one-time login link that has expired. Please use latest one-time login link or request a new one using the form below.'), 'error');
          $response = new RedirectResponse('/user/password');
          $response->send();
          exit;
        }
      }

      break;

    default;
  }

}

/**
 * Implements mail alter .
 *
 * @method hook_mail_alter
 *
 * @$params
 * @$message all information of mail
 */
function expire_reset_pass_link_mail_alter(&$message) {
  if ($message['id'] == 'user_password_reset') {
    $timestamp = REQUEST_TIME;
    if (!is_null($message['params']['account']->get('uid')->getValue())) {
      $uid = $message['params']['account']->get('uid')->getValue()[0]['value'];
      ResetPasswordHistory::mergeResetPasswordTimeStampHistory($uid, $timestamp);
    }
  }
}

/**
 * Check timestamp is valid or not.
 *
 * @method is_timestamp
 *
 * @$params
 * @$timestamp timestamp
 * return boolean
 */
function is_timestamp($timestamp) {
  return ((string) (int) $timestamp === $timestamp)
    && ($timestamp <= PHP_INT_MAX)
    && ($timestamp >= ~PHP_INT_MAX) && (strlen($timestamp) > 8);
}
