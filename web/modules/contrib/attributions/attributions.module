<?php

/**
 * @file
 * API module to let other projects publish an attribution message.
 */

/**
 * Implements hook_menu().
 */
function attributions_menu() {
  $items['attributions'] = array(
    'title' => 'Attributions',
    'page callback' => 'attributions_renderforpage',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implementation of hook_block_info()
 */
function attributions_block_info() {
  $blocks = array();
  $blocks['attributions'] = array(
   'info' => t('Attributions block'),
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view()
 */
function attributions_block_view($delta = '') {
  if ('attributions' == $delta) {
    $render = array();
    $list = attributions_fetch_from_info();
    foreach ($list as $element) {
      $render[] = array(
        '#type' => 'markup',
        '#markup' => $element[0] . ' ',
        '#weight' => $element[1],
      );
    }
    $blocks['subject'] = t('Attributions');
    $blocks['content'] = $render;
    return $blocks;
  }
}

/* END HOOKS */

/**
 * Callback, render all attributions for page display.
 * @return
 * Render array containing the list of attributions.
 */
function attributions_renderforpage() {
  $list = attributions_fetch_from_info();
  $render = array();
  foreach ($list as $element) {
    $render[] = array(
      '#type' => 'markup',
      '#markup' => $element[0] . ' ',
      '#weight' => $element[1],
    );
  }
  return $render;
}

/**
 * Build list of all attributions (HTML) and weights
 * @param array $all_attributions
 *   Array of all attributons. Two levels, module+resources.
 * @return
 *   Array containing attributions and weights.
 */
function _attributions_build_html($all_attributions = array(), $allp) {
  foreach ($all_attributions as $attribution) {
    foreach ($attribution as $key2 => $element) {
      if (isset($element['hide']) && $element['hide']) {
        continue;
      }
      if (isset($element['type'])) {
        if (($element['type'] != 'code') && ($element['type'] != 'asset') && ($element['type'] != 'comment')) {
          drupal_set_message(t('Element "type" not recognized for @resource.', array('@resource' => $key2)), 'warning', FALSE);
	}
      }
      else {
        drupal_set_message(t('Element "type" not set for @resource.', array('@resource' => $key2)), 'warning', FALSE);
      }
      if (isset($element['template'])) {
        $work_template = filter_xss($element['template']);
      }
      else {
        if (!isset($element['title'])) {
           $element['title'] = t('Without Title');
	}
        $work_template = isset($element['work_url']) ? t('<a href="@work_url" title="Link to work">@title</a>') : '@title';
        if (isset($element['author'])) {
          $work_template .= ' ' . t('by') . ' ';
          $work_template .= isset($element['author_url']) ? t('<a href="@author_url" title="Link to author">@author</a>') : '@author';
        }
        if (isset($element['license'])) {
          $work_template .= ', ';
          if (0 != strcasecmp(t('public domain'), $element['license'])) {
            $work_template .= t('available under') . ' ';
          }
          $work_template .= isset($element['license_url']) ? t('<a href="@license_url" title="Link to license">@license</a>') : '@license';
	}
        if (isset($element['org_title'])) {
          $work_template .= ' (' . t('adapted from') . ' ';
          $work_template .= isset($element['org_work_url']) ? t('<a href="@org_work_url" title="Link to original work">@org_title</a>') : '@org_title';
          if (isset($element['org_author'])) {
            $work_template .= ' ' . t('by') . ' ';
            $work_template .= isset($element['org_author_url']) ? t('<a href="@org_author_url" title="Link to author">@org_author</a>') : '@org_author';
          }
          if (isset($element['org_license'])) {
            $work_template .= ', ' . t('available under') . ' ';
            $work_template .= isset($element['license_url']) ? t('<a href="@org_license_url" title="Link to license original work">@org_license</a>') : '@org_license';
          }
          $work_template .= ')';
	}
        $work_template .= '.';
      }
      $stuff = array();
      if (isset($element['title'])) { 
        $stuff['@title'] = $element['title'];
      }
      if (isset($element['work_url'])) { 
        $stuff['@work_url'] = $element['work_url'];
      }
      if (isset($element['author_url'])) { 
        $stuff['@author_url'] = $element['author_url'];
      }
      if (isset($element['license_url'])) { 
        $stuff['@license_url'] = $element['license_url'];
      }
      if (isset($element['author'])) { 
        $stuff['@author'] = $element['author'];
      }
      if (isset($element['license'])) { 
        $stuff['@license'] = $element['license'];
      }
      if (isset($element['org_title'])) { 
        $stuff['@org_title'] = $element['org_title'];
      }
      if (isset($element['org_work_url'])) { 
        $stuff['@org_work_url'] = $element['org_work_url'];
      }
      if (isset($element['org_author'])) { 
        $stuff['@org_author'] = $element['org_author'];
      }
      if (isset($element['org_author_url'])) { 
        $stuff['@org_author_url'] = $element['org_author_url'];
      }
      if (isset($element['org_license'])) { 
        $stuff['@org_license'] = $element['org_license'];
      }
      if (isset($element['org_license_url'])) { 
        $stuff['@org_license_url'] = $element['org_license_url'];
      }
      // Replace all the placeholders.
      $weight = (isset($element['weight'])) ? $element['weight'] : 0;
      $attribution_list[] = array(t($work_template, $stuff), $weight);
    }
  }
  if (!isset($attribution_list)) {
    $attribution_list[] = array('<p>' . t('No attributions found.  To see attributions, enable at least one module or theme with attributions in the <code>.info</code>-file.') . '</p>', 0);
  }

  // this needs to be cached
  return $attribution_list;
}

/**
 * Callback, get all attributions provided by the .info-files()
 * @return
 *   Array containing the list of attributions.
 */
function attributions_fetch_from_info() {
  variable_set('attributions_all', FALSE);
  $allp = variable_get('attributions_all', FALSE);
  if ($allp) {
    $modules = array();
    $module_cache = system_rebuild_module_data();
    foreach ($module_cache as $item) {
      $modules[$item->name] = $item->name;
    }
  }
  else {
    $modules = module_list();
  }
  $all_attributions = array();
  foreach ($modules as $module) {
    $info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
    if (!empty($info) && !empty($info['attributions']) && $info['attributions']) {
      $all_attributions[$module] = $info['attributions'];
    }
  }

  $themes = list_themes();
  foreach ($themes as $theme) {
    if ($allp || $theme->status) {
      $info = drupal_parse_info_file(drupal_get_path('theme', $theme->name) . '/' . $theme->name . '.info');
      if (!empty($info) && !empty($info['attributions']) && $info['attributions']) {
        $all_attributions[$theme->name] = $info['attributions'];
      }
    }
  }

  $all = _attributions_build_html($all_attributions, $allp);
  return $all;
}
