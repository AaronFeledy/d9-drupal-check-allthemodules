<?php

define('DATE_YMD_DEFAULT_BEGIN_YEAR', 1888);

function date_ymd_field_info() {
  return array(
    'date_ymd' => array(
      'label' => t('Date (YMD)'),
      'description' => t('A date field for storing selections in YMD format.'),
      'default_widget' => 'date_ymd_text',
      'default_formatter' => 'date_ymd_simple_text',
      'settings' => array(
        'begin_year' => DATE_YMD_DEFAULT_BEGIN_YEAR,
      ),
      'instance_settings' => array(),
    ),
  );
}

function date_ymd_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  foreach ($items as $delta => $item) {
    if (!empty($item['ymd'])) {

//error_log(print_r($item['ymd'], TRUE));

/*
      if (!preg_match('@^[0-9]{8}$@', $item['ymd'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'date_ymd_invalid',
          'message' => t('Invalid YMD format.'),
        );
      }
*/
    }
  }


}

function date_ymd_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form['begin_year'] = array(
    '#element_validate' => array('date_ymd_settings_validate'),
    '#type' => 'textfield',
    '#description' => t('The beginning or lowest value for the year selector.'),
    '#title' => t('Beginning Year'),
    '#default_value' => $settings['begin_year'],
    '#required' => TRUE,
    '#size' => 8,
  );
  return $form;
}

function date_ymd_field_is_empty($item, $field) {
  return empty($item['ymd']);
}

function date_ymd_field_formatter_info() {
  return array(
    'date_ymd_simple_text' => array(
      'label' => t('Default'),
      'field types' => array('date_ymd'),
    ),
  );
}

function date_ymd_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    if (isset($item['ymd'])) {

      preg_match('/^(\d{4})(\d{2})(\d{2})$/', $item['ymd'], $matches);
      if ($matches[3] == '00' && $matches[2] == '00') {
        $date = $matches[1] == '0000' ? '' : $matches[1];
      }
      else if ($matches[3] == '00') {
        $date = date('F', mktime(0, 0, 0, $matches[2], 1, 2010)) . ', ' . $matches[1];
      }
      else
      {
        $test = abs($matches[3]) % 10;
        $date = date('F', mktime(0, 0, 0, $matches[2], 1, 2010)) . ' ' . abs($matches[3]) . ((abs($matches[3]) %100 < 21 && abs($matches[3]) %100 > 4) ? 'th' : (($test < 4) ? ($test < 3) ? ($test < 2) ? ($test < 1) ? 'th' : 'st' : 'nd' : 'rd' : 'th')) . ', ' . $matches[1];
      }

      $element[$delta] = array(
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#value' => t('@date', array('@date' => $date)),
      );

    }
  }
  return $element;
}

function date_ymd_field_widget_info() {
  return array(
    'date_ymd_text' => array(
       'label' => t('YMD'),
       'field types' => array('date_ymd'),
    ),
  );
}

function _date_ymd_text_validate($element, &$form_state, $form) {

  $field_name = $element['#field_name'];
  $delta = $element['#delta'];
  
  $form_values = drupal_array_get_nested_value($form_state['values'], $element['#field_parents']);

  if (isset($form_values[$field_name][$element['#language']][$delta]['ymd'])) {

    $values = $form_values[$field_name][$element['#language']][$delta]['ymd'];

    $value = sprintf('%04s%02s%02s', $values['year'], $values['month'], $values['day']);
    if (strlen($value) != 8) {
      form_set_value($element, '', $form_state);
      return;
    }

    if (isset($values['month']) && (!is_numeric($values['month']) || $values['month'] > 12 || $values['month'] < 0)) {
      form_error($element['month'], t('Invalid value for ' . (isset($element['#title']) ? strtolower($element['#title']) . ' ' : '') . 'month. Value should be a number from 1 to 12.'));
    }
    if (isset($values['day']) && (!is_numeric($values['day']) || $values['day'] > 31 || $values['day'] < 0)) {
      form_error($element['day'], t('Invalid value for ' . (isset($element['#title']) ? strtolower($element['#title']) . ' ' : '') . 'day. Value should be a number from 1 to 31.'));
    }
    if (isset($values['year']) && (!is_numeric($values['year']) || !preg_match("#^[0-9]{4}$#", $values['year']))) {
      form_error($element['year'], t('Invalid value for ' . (isset($element['#title']) ? strtolower($element['#title']) . ' ' : '') . 'year. Value should be a 4-digit number.'));
    }
    if (isset($values['month']) && $values['month'] != '00' && (!isset($values['year']) || $values['year'] == '0000')) {
      form_error($element['year'], t('You must select a year when a month is selected' . (isset($element['#title']) ? ' for ' . strtolower($element['#title']) : '') . '.'));
    }
    if (isset($values['day']) && $values['day'] != '00' && (!isset($values['month']) || $values['month'] == '00')) {
      form_error($element['month'], t('You must select a month when a day is selected' . (isset($element['#title']) ? ' for ' . strtolower($element['#title']) : '') . '.'));
    }

    form_set_value($element, $value, $form_state);
  }

}

function date_ymd_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value = isset($items[$delta]['ymd']) ? $items[$delta]['ymd'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;

  if (!empty($value)) {
    preg_match('@(\d{4})(\d{2})(\d{2})@', $value, $match);
  }

  $widget += array(
    //'#type' => 'fieldset',
    '#element_validate' => array('_date_ymd_text_validate'),
    '#delta' => $delta,
    'year' => array(
      '#prefix' => '<label>' . $instance['label'] . '</label>',
      '#type' => 'select',
      '#options' => drupal_map_assoc(range((isset($field['settings']['begin_year']) ? $field['settings']['begin_year'] : DATE_YMD_DEFAULT_BEGIN_YEAR), (date('Y') + 3))),
      '#title' => 'year',
      '#title_display' => 'invisible',
      '#default_value' => (isset($match[1]) ? $match[1] : ''),
      '#attributes' => array('class' => array('ymd-entry'), 'style' => 'float: left; margin-right: 0.5em;'),
      '#empty_option' => array('0000' => '--'),
    ),
    'month' => array(
      '#type' => 'select',
      '#options' => map_assoc(range(1, 12), 'date_ymd_map_month'),
      '#title' => 'month',
      '#title_display' => 'invisible',
      '#default_value' => (isset($match[2]) ? $match[2] : ''),
      '#attributes' => array('class' => array('ymd-entry'), 'style' => 'float: left; margin-right: 0.5em;'),
      '#empty_option' => array('00' => '--'),
    ),
    'day' => array(
      '#type' => 'select',
      '#options' => map_assoc(range(1, 31)),
      '#title' => 'day',
      '#title_display' => 'invisible',
      '#default_value' => (isset($match[3]) ? $match[3] : ''),
      '#attributes' => array('class' => array('ymd-entry'), 'style' => 'float: left; margin-right: 0.5em;'),
      '#empty_option' => array('00' => '--'),
      '#suffix' => '<br style="clear: both;" />',
    ),
  );

  $element['ymd'] = $widget;
  return $element;
}

function map_assoc($array, $function = NULL) {
  if (!isset($function)) {
    $result = array();
    foreach ($array as $value) {
      $result[sprintf('%02s', $value)] = $value;
    }
    return $result;
  }
  elseif (function_exists($function)) {
    $result = array();
    foreach ($array as $value) {
      $result[sprintf('%02s', $value)] = $function($value);
    }
    return $result;
  }
}

function date_ymd_map_month($month) {
  return format_date(gmmktime(0, 0, 0, $month, 2, 1970), 'custom', 'F', NULL);
}

function date_ymd_settings_validate($element, &$form_state) {
  $value = $element['#value'];
  if (strlen($value) != 4 || !is_numeric($value)) {
    form_error($element, t('%name must be set to a 4-digit number.', array('%name' => $element['#title'])));
  }
}

function date_ymd_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'date_ymd_invalid':
      form_error($element, $error['message']);
      break;
  }
}

