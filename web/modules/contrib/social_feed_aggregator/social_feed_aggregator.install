<?php

/**
 * Update from single to multiple accounts.
 */
function social_feed_aggregator_update_8301(&$sandbox) {
  $config = \Drupal::configFactory()->getEditable('social_feed_aggregator.settings');

  /**
   * Facebook.
   */
  if(!is_null($config->get('facebook.enabled'))) {
    $config->set('facebook.0.enabled', $config->get('facebook.enabled'));
  }

  if(!is_null($config->get('facebook.username'))) {
    $config->set('facebook.0.username', $config->get('facebook.username'));
  }

  if(!is_null($config->get('facebook.app_id'))) {
    $config->set('facebook.0.app_id', $config->get('facebook.app_id'));
  }

  if(!is_null($config->get('facebook.app_secret'))) {
    $config->set('facebook.0.app_secret', $config->get('facebook.app_secret'));
  }

  /**
   * Twitter.
   */
  if(!is_null($config->get('twitter.enabled'))) {
    $config->set('twitter.0.enabled', $config->get('twitter.enabled'));
  }

  if(!is_null($config->get('twitter.username'))) {
    $config->set('twitter.0.username', $config->get('twitter.username'));
  }

  if(!is_null($config->get('twitter.consumer_key'))) {
    $config->set('twitter.0.consumer_key', $config->get('twitter.consumer_key'));
  }

  if(!is_null($config->get('twitter.consumer_secret'))) {
    $config->set('twitter.0.consumer_secret', $config->get('twitter.consumer_secret'));
  }

  if(!is_null($config->get('twitter.access_token'))) {
    $config->set('twitter.0.access_token', $config->get('twitter.access_token'));
  }

  if(!is_null($config->get('twitter.access_token_secret'))) {
    $config->set('twitter.0.access_token_secret', $config->get('twitter.access_token_secret'));
  }

  /**
   * Instagram.
   */
  if(!is_null($config->get('instagram.enabled'))) {
    $config->set('instagram.0.enabled', $config->get('instagram.enabled'));
  }

  if(!is_null($config->get('instagram.username'))) {
    $config->set('instagram.0.username', $config->get('instagram.username'));
  }

  if(!is_null($config->get('instagram.client_id'))) {
    $config->set('instagram.0.client_id', $config->get('instagram.client_id'));
  }

  if(!is_null($config->get('instagram.access_token'))) {
    $config->set('instagram.0.access_token', $config->get('instagram.access_token'));
  }

  $config->save();

  return t('Single accounts migrated to multi accounts.');
}

/**
 * Install new 'handle' field configs and re-import view.
 */
function social_feed_aggregator_update_8401(&$sandbox) {
  _update_or_install_config('field.storage.node.field_sfa_handle');
  _update_or_install_config('field.field.node.sfa_social_post.field_sfa_handle');  
  _update_or_install_config('views.view.social_posts');

  return t('Handle field created and view re-imported with handle column.');
}

/**
 * Update or install config entities from config/install files.
 *
 * @see \Drupal\config_update\ConfigReverter::import
 * @see \Drupal\config_update\ConfigReverter::revert
 *
 * @param string $prefix
 *   The prefix for YAML files in find, like 'field.storage.node'
 */
function _update_or_install_config($prefix) {
  $updated = [];
  $created = [];
  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manger */
  $config_manger = \Drupal::service('config.manager');

  $module_handler = \Drupal::service('module_handler');
  $path = $module_handler->getModule('social_feed_aggregator')->getPath();

  $files = glob($path . '/config/install/' . $prefix . '.yml');

  foreach ($files as $file) {
    $raw = file_get_contents($file);
    $value = \Drupal\Component\Serialization\Yaml::decode($raw);
    if (!is_array($value)) {
      throw new \RuntimeException(sprintf('Invalid YAML file %s'), $file);
    }
    // Lazy hack here since that code ignores the file extension.
    $type = $config_manger->getEntityTypeIdByName(basename($file));
    $entity_manager = $config_manger->getEntityManager();
    $definition = $entity_manager->getDefinition($type);
    $id_key = $definition->getKey('id');
    $id = $value[$id_key];
    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
    $entity_storage = $entity_manager->getStorage($type);
    $entity = $entity_storage->load($id);
    if ($entity) {
      $entity = $entity_storage->updateFromStorageRecord($entity, $value);
      $entity->save();
      $updated[] = $id;
    }
    else {
      $entity = $entity_storage->createFromStorageRecord($value);
      $entity->save();
      $created[] = $id;
    }
  }
  return [
    'updated' => $updated,
    'created' => $created,
  ];
}