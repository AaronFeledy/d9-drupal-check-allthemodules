<?php

/**
 * @file
 * The hook implementations for the desk_net module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\desk_net\Collection\NoticesCollection;
use Drupal\desk_net\Controller\ActionController;
use Drupal\desk_net\Controller\ModuleSettings;

// Services.
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_page_attachments().
 */
function desk_net_page_attachments(array &$page) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();

  if ($is_admin) {
    $page['#attached']['library'][] = 'desk_net/desk_net.info_block';
  }
}

/**
 * Implements HOOK_form_BASE_FORM_ID_alter.
 */
function desk_net_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if (strpos(\Drupal::service('path.current')->getPath(), '/node/add/') === FALSE) {
    // For entity builders.
    $form['#entity_builders'][] = 'desk_net_node_builder';
    // For submit callbacks.
    $form['actions']['submit']['#submit'][] = 'desk_net_node_form_submit';
  }
}

/**
 * Implements entity builder.
 */
function desk_net_node_builder($entity_type, NodeInterface $node, &$form, FormStateInterface $form_state) {
  $parent = $form_state->getValue('menu', 'parent');
  if ($parent) {
    list($node->menu['menu_name'], $node->menu['plid']) = explode(':', $parent);
  }
}

/**
 * Implements equivalent HOOK_node_submit from Drupal 7.
 */
function desk_net_node_form_submit($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();

  if (ActionController::validateContentType($entity->bundle())) {
    if (ModuleSettings::checkUserCredentials()) {
      // Getting Desk-Net revision data.
      $desk_net_revision = ModuleSettings::deskNetRevisionGet($entity);

      if ($desk_net_revision !== FALSE && !empty($desk_net_revision['desk_net_story_id'])) {
        ActionController::updateNodeDrupalToDN($entity, $entity->bundle());
      }
      else {
        ActionController::createNodeDrupalToDN($entity);
      }
    } else {
      drupal_set_message(NoticesCollection::getNotice(5), 'error');
    }
  }
}

/**
 * Implements hook_node_type_insert().
 */
function desk_net_node_type_insert(EntityInterface $entity) {
  // Creating custom Desk-Net fields for this content type if they don't exist.
  ModuleSettings::createCustomFields($entity->id());
}

/**
 * Implements hook_node_insert().
 */
function desk_net_node_insert(EntityInterface $entity) {
  if (ActionController::validateContentType($entity->bundle())) {
    // Getting Desk-Net revision data.
    $desk_net_revision = ModuleSettings::deskNetRevisionGet($entity);
    if (ModuleSettings::checkUserCredentials() && empty($desk_net_revision)) {
      ActionController::createNodeDrupalToDN($entity);
    }
    else {
      drupal_set_message(NoticesCollection::getNotice(5), 'error');
    }
  }
}

/**
 * Performance deleting node type article in Drupal.
 *
 * @param EntityInterface $entity
 *   The node that is being deleted.
 */
function desk_net_node_delete(EntityInterface $entity) {
  // Deleting element in Thunder/Drupal 8.
  (new \Drupal\desk_net\DeleteMethods())->deleteElement($entity);
}

/**
 * Implementation insert special fields to Article Template.
 */
function desk_net_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $bundle = FALSE;

  $form_object = $form_state->getFormObject();
  if ($form_object instanceof Drupal\Core\Entity\ContentEntityForm) {
    $bundle = $form_object->getEntity()->bundle();
  }
  elseif ($form_object instanceof Drupal\field_ui\Form\FieldConfigEditForm) {
    $bundle = $form_object->getEntity()->bundle();
  }

  if ($form_id == 'node_' . $bundle . '_edit_form') {
    $node = \Drupal::routeMatch()->getParameter('node');

    // Getting Desk-Net revision data.
    $desk_net_revision = ModuleSettings::deskNetRevisionGet($node);

    if ($node !== NULL && $desk_net_revision !== FALSE && $desk_net_revision !== NULL) {
      // Checking on exist story in Desk-Net.
      if (!empty($desk_net_revision['desk_net_removed_status'])) {
        if ($desk_net_revision['desk_net_removed_status'] !== NULL
            && $desk_net_revision['desk_net_removed_status'] == 'desk_net_removed'
        ) {
          $desk_net_revision['desk_net_description'] = 'Deleted/removed â€“ ' . $desk_net_revision['desk_net_description'];
        }
      }

      // Output additional info block.
      $desk_net_info = '<div class="desk-net-info-block">';
      $desk_net_info .= '<strong class="desk-net-desc">
           <a href="' . ModuleSettings::DN_BASE_URL . '/mySchedulePage.htm?fragment=de' .
                        $desk_net_revision['desk_net_story_id'] . '" target="_blank">
              <img src="/' . drupal_get_path('module', 'desk_net') .
                        '/img/favicon.ico" alt="Desk-Net">
           </a>' . $desk_net_revision['desk_net_description'] . '</strong>';

      $desk_net_info .= '<div class="desk-net-id">';
      $desk_net_info .= 'Status in Desk-Net: <strong>' . $desk_net_revision['desk_net_status_name'] . '</strong>
              <a href="' . ModuleSettings::DN_BASE_URL . '/mySchedulePage.htm?fragment=de' .
                        $desk_net_revision['desk_net_story_id'] . '" target="_blank">'
                        . t('View in Desk-Net') . '</a></div>';
      $desk_net_info .= '</div>';

      $form["desk_net_info"] = array(
        '#markup' => $desk_net_info,
      );
    }
  }
}

