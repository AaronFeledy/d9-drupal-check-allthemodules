<?php

/**
 * Implements hook_requirements().
 */
function healthcheck_requirements($phase) {
  // We only want to check reqs for the status page.
  if ($phase != 'runtime') {
    return [];
  }

  //
  $requirements = [];
  $requirements['healthcheck_last_run']['title'] = t('Healthcheck');

  /** @var \Drupal\healthcheck\HealthcheckServiceInterface $healthcheck_service */
  $healthcheck_service = \Drupal::service('healthcheck');

  // Get the last healthcheck run and the interval.
  $last_run = $healthcheck_service->getLastTimestamp();
  $interval = $healthcheck_service->getInterval();

  /** @var \Drupal\Component\Datetime\TimeInterface $time_service */
  $time_service = \Drupal::service('datetime.time');

  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');

  // Add the last run date to the status page.
  if (empty($last_run)) {
    $requirements['healthcheck_last_run']['value'] = t('Last run: Never');
  }
  else {
    $requirements['healthcheck_last_run']['value'] = t('Last run: :run', [
      ':run' => $date_formatter->format($last_run),
    ]);
  }

  // Get the current time.
  $now = $time_service->getRequestTime();

  // Set the severity if the report is overdue.
  if ($last_run + $interval < $now) {
    $requirements['healthcheck_last_run']['severity'] = REQUIREMENT_WARNING;
    $requirements['healthcheck_last_run']['description'] = t('The last healthcheck is overdue. Please ensure cron is configured correctly.');
  }
  else {
    // @todo We should also check if there are outstanding actionable items.
    $requirements['healthcheck_last_run']['severity'] = REQUIREMENT_OK;
  }

  return $requirements;
}

/**
 * Create check config entities for all healthcheck plugins.
 */
function healthcheck_update_8001() {
  /** @var \Drupal\healthcheck\CheckConfigServiceInterface $checksrv */
  $checksrv = \Drupal::service('healthcheck.checkconfig');

  // Create the default CheckConfig entities.
  $checksrv->createDefaults();
}
