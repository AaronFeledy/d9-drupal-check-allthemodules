<?php

/**
 * @file
 * Some description.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function content_locker_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.content_locker':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Content locking module for Drupal 8 locks your most valuable website content behind a block which could be unlocked by several ways, depending on Content locker block type.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function content_locker_theme() {
  return [
    'content_locker' => [
      'variables' => [
        'children' => NULL,
        'plugin_type' => NULL,
        'entity' => NULL,
        'attributes' => [],
      ],
    ],
  ];
}

/**
 * Implements template_preprocess_theme().
 */
function template_preprocess_content_locker(&$variables) {

  if (!empty($variables['plugin_type'])) {
    $variables['attributes']['data-content-locker-type'] = $variables['plugin_type'];

    if (!empty($variables['entity'])) {
      $variables['attributes']['data-content-locker-entityId'] = $variables['entity']->id();
      $variables['attributes']['data-content-locker-entityType'] = $variables['entity']->getEntityTypeId();
    }

    // Call the pre render function for current plugin type.
    $manager = Drupal::service('plugin.manager.content_locker');
    if ($manager->getDefinition($variables['plugin_type'], FALSE)) {
      $plugin = $manager->createInstance($variables['plugin_type']);
      $plugin->preRender($variables);
    }

  }

}

/**
 * Implements hook_entity_view_alter().
 */
function content_locker_entity_view_alter(array &$build, EntityInterface $entity) {
  $build['#attributes']['data-content-locker-' . $entity->getEntityTypeId() . '-id'] = $entity->id();
}
