<?php

namespace Drupal\docbinder\Form;

use Drupal\Core\Database\Connection;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\file\Entity\File;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;

/**
 * Allows to download the list of generated codes.
 */
class DocBinderDownloadForm extends FormBase {

  /**
   * The tempstore.
   *
   * @var \Drupal\Core\TempStore\SharedTempStore
   */
  protected $tempStore;

  /**
   * The database connection.
   *
   * @var \Drupal\Core\Database\Connection
   */
  protected $database;

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'docbinder_download_form';
  }

  /**
   * Constructs a new WebformInvitationDownloadForm instance.
   *
   * @param \Drupal\Core\Database\Connection $database
   *   The database connection.
   */
  public function __construct(Connection $database) {
    $this->database = $database;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('database')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {

    $this->tempStore = \Drupal::service('tempstore.private')->get('docbinder');
    $html = '<div id="docbinder-page"><h3>'. $this->t('Your collection') . '</h3><table id="docbinder-page-files">';
    $html .= '<thead><tr><th>' . $this->t('File name') . '</th><th>' . $this->t('File size') . '</th><th>' . $this->t('Actions') . '</th></tr></thead><tbody>';
    foreach ($this->tempStore->get('files') as $fid => $file) {
      /** @var File $file **/
      $html .= '<tr id="docbinder-page-file-' . $file->id() . '"><td>' . $file->getFilename() . '</td><td>' . format_size($file->getSize()) . '</td><td><a class="use-ajax" href="/docbinder/remove/' . $fid . '">' . $this->t('Remove') . '</a></td></tr>';
    }
    $html .= '</tbody></table></div>';

    $form['files_list'] = [
      '#type' => 'markup',
      '#markup' => $html,
    ];
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Download'),
      '#button_type' => 'primary',
    ];
    $form['#attached']['library'][] = 'docbinder/docbinder.commands';

    return $form;
  }

  /**
   * Get the files as a zip.
   */
  function submitForm(array &$form, FormStateInterface $form_state) {
    $this->tempStore = \Drupal::service('tempstore.private')->get('docbinder');
    $files = $this->tempStore->get('files');
    if (empty($files)) {
      $this->messenger()->addMessage($this->t('Sorry, there are no files queued for you to download.'));
      // TODO: How to reload current page in D8?
      drupal_goto();
    }
    else {
      $files = $this->filterCollection($files);

      if (!empty($files)) {
        // Create collection hash.
        $fids = array_keys($files);
        sort($fids);
        $fids_hash = md5(implode('.', $fids));

        // Set archive name/path.
        $docbinder_folder = 'public://docbinder/';
        $zip_filename = 'FileCollection_' . substr($fids_hash, 0, 8) . '.zip';
        $zip_filepath = $docbinder_folder . $zip_filename;
        file_prepare_directory($docbinder_folder, FILE_CREATE_DIRECTORY);

        // Create the (empty) archive file.
        /** @var File $file */
        $zip_file = File::create([
          'uid' => \Drupal::currentUser()->id(),
          'filename' => $zip_filename,
          'uri' => $zip_filepath,
          'status' => 1,
        ]);
        $zip_file->save();
        file_put_contents($zip_file->getFileUri(), "");

        // Create archive and add files.
        $filepath = \Drupal::service('file_system')->realpath($zip_filepath);
        if ($filepath) {
          // Get Zip instance.
          /** @var \Drupal\Core\Archiver\Zip $zip */
          $zip = \Drupal::service('plugin.manager.archiver')
            ->getInstance(array('filepath' => $filepath));

          // Get the actual Archive.
          // This is required in order to set local names for included files.
          $archive = $zip->getArchive();

          // Make clear that this archive was created by DocBinder.
          $archive->setArchiveComment('Generated by DocBinder for Drupal.');

          // Add the files.
          /** @var File $file */
          foreach ($files as $file) {
            // This could be done using $zip->add, however that function keeps
            // the complete absolute file path within the archive.
            // $zip->add((\Drupal::service('file_system')->realpath($file->getFileUri()));

            // Thus, we adding directly to the archive and set a local name.
            $archive->addFile(\Drupal::service('file_system')->realpath($file->getFileUri()), 'FileCollection/' . $file->getFilename());
          }

          $archive->close();

          // Empty temporary collection.
          $this->tempStore->set('files', []);

          // Prepare response.
          $headers['Content-Type'] = \Drupal::service('file.mime_type.guesser')
            ->guess($zip_filename);
          $headers['Content-Disposition'] = 'attachment; filename="' . $zip_filename . '"';
          $response = new BinaryFileResponse(\Drupal::service('file_system')
              ->realpath($zip_filepath), 200, $headers);
          $response->setContentDisposition(
            ResponseHeaderBag::DISPOSITION_ATTACHMENT,
            $zip_filename
          );

          // Add message.
          // TODO: Show on form without download.
          $this->messenger()->addMessage($this->t('Your collection should automatically download. If not, please <a href=":link">click here</a>.', [':link' => $zip_filepath]));

          // Set response, causes download.
          $form_state->setResponse($response);
        }
        else {
          // Something went wrong, filepath incorrect.
          $this->messenger()->addMessage($this->t('Invalid archive file path.'));
        }
      }
    }
  }

  /**
   * Preprocess the list of files.
   *
   * Don't ever share these files:
   *   $excluded = array( 'sites/.*settings.*php' );
   *
   * Only ever include these files:
   *   $included = array( 'sites/files/.*' );
   *
   * Always include a certain file:
   *   $add = array( 'sites/default/files/README.txt' );
   */
  public function filterCollection($files) {
    $directory = \Drupal::service('file_system')->realpath(file_default_scheme() . "://");
    /** @var File $file **/
    foreach ($files as $i => &$file) {
      $uri = $file->getFileUri();
      /** @var StreamWrapperInterface $stream_wrapper_manager */
      $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager')->getViaUri($uri);
      $file_path = $stream_wrapper_manager->realpath();

      // Deny file access if file is not in default file system, e.g. public://.
      if ($file_path && strpos($file_path, $directory) !== 0) {
        \Drupal::logger('docbinder')->notice('Forbidding download of !file',
          array('!file' => $file));
        unset($files[$i]);
      }

      // Deny adding external files.
      if (!$file_path) {
        \Drupal::logger('docbinder')->notice('External file cannot be added to archive. !file',
          array('!file' => $file));
        unset($files[$i]);
      }
    }
    return $files;
  }
}
