<?php

use Drupal\file\Entity\File;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * @file
 * Drupal module for downloading groups of files.
 */

/**
 * Overrides file link in node view.
 *
 * @param $variables
 */
function docbinder_preprocess_file_link(&$variables) {
  $rewrite = TRUE;
  $config = \Drupal::config('docbinder.settings');
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    // You can get nid and anything else you need from the node object.
    $type = $node->getType();
    $bundles = $config->get('collection.bundles');
    if (array_key_exists($type, $bundles) && $bundles[$type] !== 0) {
      $rewrite = FALSE;
    }
  }

  if ($rewrite) {
    $file = $variables['file'];
    $options = [];
    $file_entity = $file instanceof File ? $file : File::load($file->fid);
    // @todo Wrap in file_url_transform_relative(). This is currently
    // impossible. As a work-around, we currently add the 'url.site' cache context
    // to ensure different file URLs are generated for different sites in a
    // multisite setup, including HTTP and HTTPS versions of the same site.
    // Fix in https://www.drupal.org/node/2646744.
    $variables['#cache']['contexts'][] = 'url.site';
    $mime_type = $file->getMimeType();

    // Set options as per anchor format described at
    // http://microformats.org/wiki/file-format-examples
    $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

    // Use the description as the link text if available.
    if (empty($variables['description'])) {
      $link_text = $file_entity->getFilename();
    }
    else {
      $link_text = $variables['description'];
      $options['attributes']['title'] = $file_entity->getFilename();
    }

    // Classes to add to the file field for icons.
    $classes = [
      'file',
      // Add a specific class for each and every mime type.
      'file--mime-' . strtr($mime_type, [
        '/' => '-',
        '.' => '-',
      ]),
      // Add a more general class for groups of well known MIME types.
      'file--' . file_icon_class($mime_type),
    ];

    // Enable Ajax on link
    $options['attributes']['class'] = [
      'use-ajax',
    ];

    $url = Url::fromRoute('docbinder.addfile', ['file' => $file->id()], $options);

    // Set file classes to the options array.
    $variables['attributes'] = new Attribute($variables['attributes']);
    $variables['attributes']
      ->addClass($classes);
    $variables['link'] = Link::fromTextAndUrl($link_text, $url)->toString();
    $variables['fid'] = $file->id();
    $variables['mime'] = $mime_type;
    $variables['size'] = format_size($file->getSize());
  }
}

function docbinder_theme($existing, $type, $theme, $path) {
  return [
    'docbinder_page' => [
      'variables' => ['files' => NULL],
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter
 * Change File Formatter Template
 */
function docbinder_theme_registry_alter(&$theme_registry) {
  $theme_registry['file_link']['path'] = drupal_get_path('module', 'docbinder') . '/templates';
}
