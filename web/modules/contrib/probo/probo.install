<?php

use Drupal\Core\Database\Database;

/**
 * Implements hook_install().
 */
function probo_install() {
  // We need to be able to upload insecure files and make this easy. So we just make
  // it so right here.
  $config = \Drupal::service('config.factory')->getEditable('system.file');
  $config->set('allow_insecure_uploads', TRUE)->save();
}

/**
 * Implements hook_uninstall().
 */
function probo_uninstall() {
  // We need to be able to upload insecure files and make this easy. So we just make
  // it so right here.
  $config = \Drupal::service('config.factory')->getEditable('system.file');
  $config->set('allow_insecure_uploads', FALSE)->save();
}

/**
 * Implements hook_schema().
 */
function probo_schema() {
  $schema = [];
  $schema['probo_repositories'] = [
    'description' => 'Configured repositories for the asset manager.',
    'fields' => [
      'rid' => [
        'description' => 'The repository id',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'owner' => [
        'description' => 'The owner of the repository.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'repository' => [
        'description' => 'The name of the repository',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'token' => [
        'description' => 'The token for this bucket.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ],
      'roles' => [
        'description' => 'Roles associated with a repository.',
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'serialize' => TRUE,
        'size' => 'normal',
      ],
      'active' => [
        'description' => 'The flag as to whether or not this bucket is active.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => '1',
      ],
    ],
    'primary key' => ['rid'],
  ];

  $schema['probo_assets'] = [
    'description' => 'The assets uploaded for each repository.',
    'fields' => [
      'aid' => [
        'description' => 'The asset id',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'rid' => [
        'description' => 'The repository id.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'filename' => [
        'description' => 'The filename of the asset.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'fileid' => [
        'description' => 'The asset id returned by the asset manager.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'primary key' => ['aid'],
  ];

  $schema['probo_builds'] = [
    'description' => 'Contains the build id and time the build was created.',
    'fields' => [
      'id' => [
        'description' => 'Serial id for this entry',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'bid' => [
        'description' => 'The uuid of the build assigned by Probo',
        'type' => 'varchar',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
      ],
      'rid' => [
        'description' => 'The id of the repository assigned by the probo module',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'service' => [
        'description' => 'The service for the repository.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ],
      'repository' => [
        'description' => 'The repository name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ],
      'owner' => [
        'description' => 'The owning organization of the repo.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ],
      'pull_request_name' => [
        'description' => 'The name of the pull request.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ],
      'author_name' => [
        'description' => 'The author of the pull request.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ],
      'pull_request_url' => [
        'description' => 'The url of the pull request.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ],
      'build_size' => [
        'description' => 'The size (in bytes) of the build.',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => '0',
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => ['bid' => ['bid']],
  ];

  $schema['probo_jira_comments'] = [
    'description' => 'Our table to track what is posted to JIRA comments.',
    'fields' => [
      'jid' => [
        'description' => 'The serialized ID of the event',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'issue_label' => [
        'description' => 'The human readable issue id.',
        'type' => 'varchar',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
      ],
      'bid' => [
        'description' => 'The build id associated with this post.',
        'type' => 'varchar',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
      ],
      'issue_id' => [
        'description' => 'The issue id provided by the API.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'comment_id' => [
        'description' => 'The comment id provided by the API.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['jid'],
  ];

  $schema['probo_tasks'] = [
    'description' => 'Contains individual task details for each build.',
    'fields' => [
      'bid' => [
        'description' => 'The uuid of the build assigned by Probo',
        'type' => 'varchar',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
      ],
      'rid' => [
        'description' => 'The id of the repository assigned by the probo module',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'tid' => [
        'description' => 'The individual task id for the current build',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ],
      'timestamp' => [
        'description' => 'The microtime this file was created.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ],
      'state' => [
        'description' => 'The state of the current task.',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ],
      'event_name' => [
        'description' => 'The name of the event as specified by Probo.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'event_description' => [
        'description' => 'The description of the event as specified by Probo.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'plugin' => [
        'description' => 'The plugin used for this event.',
        'type' => 'varchar',
        'length' => 96,
        'not null' => TRUE,
        'default' => '',
      ],
      'context' => [
        'description' => 'The context of the task.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'payload' => [
        'description' => 'The output of the event.',
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['bid', 'tid'],
  ];
  return $schema;
}

/**
 * Add our build_size variable to the builds table.
 */
function probo_update_8101() {
  $spec = array(
    'description' => 'The size (in bytes) of the build.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => '0',
  ); 
  $schema = Database::getConnection()->schema();
  $schema->addField('probo_builds', 'build_size', $spec);
}

/**
 * Add the roles field to repositories.
 */
function probo_update_8102() {
  $spec = array(
    'description' => 'Roles associated with a repository.',
    'type' => 'text',
    'not null' => TRUE,
    'default' => '',
    'serialize' => TRUE,
    'size' => 'normal',
  ); 
  $schema = Database::getConnection()->schema();
  $schema->addField('probo_repositories', 'roles', $spec);
}

/**
 * Add the JIRA comment tracking table.
 */
function probo_update_8103() {
  $probo_jira_comments = [
    'description' => 'Our table to track what is posted to JIRA comments.',
    'fields' => [
      'jid' => [
        'description' => 'The serialized ID of the event',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'issue_label' => [
        'description' => 'The human readable issue id.',
        'type' => 'varchar',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
      ],
      'issue_id' => [
        'description' => 'The issue id provided by the API.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'comment_id' => [
        'description' => 'The comment id provided by the API.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['jid'],
  ];
  $schema = Database::getConnection()->schema();
  $schema->createTable('probo_jira_comments', $probo_jira_comments);
}

/**
 * Add the build id to our JIRA tracking.
 */
function probo_update_8104() {
  $spec = array(
    'description' => 'The build id associated with this post.',
    'type' => 'varchar',
    'length' => 36,
    'not null' => TRUE,
    'default' => '',
  ); 
  $schema = Database::getConnection()->schema();
  $schema->addField('probo_jira_comments', 'bid', $spec);
}

/**
 * Remove the active column from probo_builds.
 */
function probo_update_8105() {
  $schema = Database::getConnection()->schema();
  $schema->dropField('probo_builds', 'active');
}

/**
 * Add our build_size variable to the builds table.
 */
function probo_update_8106() {
  $spec = array(
    'description' => 'The size (in bytes) of the build.',
    'type' => 'int',
    'size' => 'big',
    'not null' => TRUE,
    'default' => '0',
  );
  $schema = Database::getConnection()->schema();
  $schema->changeField('probo_builds', 'build_size', 'build_size', $spec);
}
