<?php

/**
 * @file
 * Main file for the Labelauty module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

define('LABELAUTY_LABEL_SEPARATOR', '|');
define('LABELAUTY_FORM_NOTLISTED', 0);
define('LABELAUTY_FORM_LISTED', 1);

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function labelauty_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  if ($plugin->getPluginId() == 'options_buttons') {
    $field_name = $field_definition->getName();

    $element['enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Use Labelauty plugin'),
      '#default_value' => $plugin->getThirdPartySetting('labelauty', 'enabled', FALSE),
    ];

    $element['labelauty'] = [
      '#type' => 'fieldset',
      '#title' => t('Labels'),
      '#parents' => ['fields', $field_name, 'settings_edit_form', 'third_party_settings', 'labelauty'],
    ];

    $element['labelauty']['labels'] = [
      '#type' => 'table',
      '#header' => [
        t('Key'),
        t('Checked'),
        t('Unchecked'),
      ],
      '#states' => [
        'visible' => [
          ':input[name="fields[' . $field_name . '][settings_edit_form][third_party_settings][labelauty][enabled]"]' => [
            'checked' => TRUE,
          ],
        ],
      ],
    ];

    // Get configured labels.
    $labels = $plugin->getThirdPartySetting('labelauty', 'labels', []);

    // Add the empty value if the field isn't required.
    if (!$field_definition->isRequired() && !$field_definition->getFieldStorageDefinition()->isMultiple()) {
      $element['labelauty']['labels']['_none']['key'] = [
        '#type' => 'item',
        '#title' => t('Key'),
        '#markup' => '_none',
        '#title_display' => 'invisible',
      ];

      $element['labelauty']['labels']['_none']['checked'] = [
        '#type' => 'textfield',
        '#title' => t('Checked'),
        '#title_display' => 'invisible',
        '#default_value' => isset($labels['_none']['checked']) ? $labels['_none']['checked'] : t('N/A'),
      ];

      $element['labelauty']['labels']['_none']['unchecked'] = [
        '#type' => 'textfield',
        '#title' => t('Unchecked'),
        '#title_display' => 'invisible',
        '#default_value' => isset($labels['_none']['unchecked']) ? $labels['_none']['unchecked'] : t('N/A'),
      ];
    }

    // Loop through all available options.
    if ($allowed_values = $field_definition->getSetting('allowed_values')) {
      foreach ($allowed_values as $key => $label) {
        $element['labelauty']['labels'][$key]['key'] = [
          '#type' => 'item',
          '#title' => t('Key'),
          '#title_display' => 'invisible',
          '#markup' => Html::escape($key),
        ];

        $element['labelauty']['labels'][$key]['checked'] = [
          '#type' => 'textfield',
          '#title' => t('Checked'),
          '#title_display' => 'invisible',
          '#default_value' => isset($labels[$key]['checked']) ? $labels[$key]['checked'] : $label,
        ];

        $element['labelauty']['labels'][$key]['unchecked'] = [
          '#type' => 'textfield',
          '#title' => t('Unchecked'),
          '#title_display' => 'invisible',
          '#default_value' => isset($labels[$key]['unchecked']) ? $labels[$key]['unchecked'] : $label,
        ];
      }
    }

    return $element;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Add after_build to the enabled Labelauty elements and include the Labelauty
 * plugin library and the Labelauty module js.
 *
 * @see labelauty_field_widget_after_build()
 */
function labelauty_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var  Drupal\Core\Field\Plugin\Field\FieldWidget\OptionsButtonsWidget $widget */
  $widget = $context['widget'];
  if ($widget->getThirdPartySetting('labelauty', 'enabled')) {
    $element['#labelauty'] = $widget->getThirdPartySettings('labelauty');
    $element['#attached']['library'][] = 'labelauty/labelauty';
    $element['#after_build'][] = 'labelauty_field_widget_after_build';
  }
}

/**
 * After_build callback for Labelauty fields.
 *
 * Set the element attributes required by the Labelauty plugin.
 *
 * @see labelauty_field_widget_form_alter()
 */
function labelauty_field_widget_after_build($element, FormStateInterface $form_state) {
  foreach (Element::children($element) as $key) {
    $config = $element['#labelauty']['labels'][$key];
    $title = Html::escape($element[$key]['#title']);

    if (isset($config['checked'])) {
      $checked = Html::escape($config['checked']);
    }

    if (isset($config['unchecked'])) {
      $unchecked = Html::escape($config['unchecked']);
    }

    $element[$key]['#attributes']['class'][] = 'labelauty-widget';
    $element[$key]['#attributes']['data-labelauty'] = implode(LABELAUTY_LABEL_SEPARATOR, [
      isset($checked) ? $checked : $title,
      isset($unchecked) ? $unchecked : $title,
    ]);
  }

  return $element;
}
