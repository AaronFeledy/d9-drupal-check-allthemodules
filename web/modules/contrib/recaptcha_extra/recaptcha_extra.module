<?php

/**
 * @file
 * Verifies if user is a human without necessity to solve a CAPTCHA.
 */

use Drupal\Core\Template\Attribute;

/**
 * Implements hook_captcha().
 */
function recaptcha_extra_captcha($op, $captcha_type = '') {
  switch ($op) {
    case 'list':
      return ['reCAPTCHA(Modal)'];

    case 'generate':
      $captcha = [];
      if ($captcha_type == 'reCAPTCHA(Modal)') {
        $config = \Drupal::config('recaptcha.settings');
        $renderer = \Drupal::service('renderer');
        $recaptcha_site_key = $config->get('site_key');
        $recaptcha_secret_key = $config->get('secret_key');

        if (!empty($recaptcha_site_key) && !empty($recaptcha_secret_key)) {
          // Build the reCAPTCHA captcha form if site_key and secret_key are
          // configured. Captcha requires TRUE to be returned in solution.
          $captcha['solution'] = TRUE;
          $captcha['captcha_validate'] = 'recaptcha_captcha_validation';
          $captcha['form']['captcha_response'] = [
            '#type' => 'hidden',
            '#value' => 'Google no captcha',
          ];

          $noscript = '';
          if ($config->get('widget.noscript')) {
            $recaptcha_widget_noscript = [
              '#theme' => 'recaptcha_widget_noscript',
              '#widget' => [
                'sitekey' => $recaptcha_site_key,
                'language' => \Drupal::service('language_manager')->getCurrentLanguage()->getId(),
              ],
            ];
            $noscript = $renderer->render($recaptcha_widget_noscript);
          }

          $attributes = [
            'class' => 'g-recaptcha',
            'data-sitekey' => $recaptcha_site_key,
            'data-theme' => $config->get('widget.theme'),
            'data-type' => $config->get('widget.type'),
            'data-size' => $config->get('widget.size'),
            'data-tabindex' => $config->get('widget.tabindex'),
          ];
          // Filter out empty tabindex/size.
          $attributes = array_filter($attributes);

          $captcha['form']['recaptcha_widget'] = [
            '#markup' => '<div' . new Attribute($attributes) . '></div>',
            '#suffix' => $noscript,
          ];
          $captcha['form']['#attached']['library'][] = 'recaptcha_extra/recaptcha_api';
          $captcha['form']['#attached']['library'][] = 'recaptcha_extra/recaptcha_extra';
        }
        else {
          // Fallback to Math captcha as reCAPTCHA is not configured.
          $captcha = captcha_captcha('generate', 'Math');
        }

        // If module configuration changes the form cache need to be refreshed.
        $renderer->addCacheableDependency($captcha['form'], $config);
      }
      return $captcha;
  }
}

/**
 * Implements hook_library_info_build().
 */
function recaptcha_extra_library_info_build() {
  $libraries = [];

  $libraries['recaptcha_api'] = [
    'js' => [
      'https://www.google.com/recaptcha/api.js' => [
        'type' => 'external',
        'attributes' => [
          'hl' => \Drupal::service('language_manager')->getCurrentLanguage()->getId(),
          'async' => "async",
        ],
      ],
    ],
  ];

  return $libraries;
}
