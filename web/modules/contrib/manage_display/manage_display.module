<?php
/**
 * @file
 * Make base fields such as 'title' available in "Manage Display".
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_entity_type_build().
 */
function manage_display_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->set('enable_base_field_custom_preprocess_skipping', TRUE);
    $entity_types['node']->set('enable_page_title_template', TRUE);
  }

  if (isset($entity_types['user'])) {
    // Set user name as a label else it gets printed twice on the user page.
    $keys = $entity_types['user']->get('entity_keys');
    $keys['label'] = 'name';
    $keys = $entity_types['user']->set('entity_keys', $keys);
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function manage_display_entity_base_field_info_alter(&$base_field_definitions, EntityTypeInterface $entity_type) {
  $info = manage_display_base_field_info($entity_type->id());
  foreach ($info as $field => $options) {
    $base_field_definitions[$field]
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', $options);
  }
}

/**
 * Return information about the base fields that can be managed.
 *
 * @param string $entity_type_id
 *   Entity type ID to return fields for.
 *
 * @return array
 *   Array keyed by field name with value equal to the default display options.
 */
function manage_display_base_field_info($entity_type_id) {
  $info['node']['title'] = [
    'label' => 'hidden',
    'type' => 'title',
    'weight' => -50,
  ];

  // Default uid to hidden as that's most often the correct default, especially
  // on teaser.
  $info['node']['uid'] = ['region' => 'hidden'];

  // Default user name to hidden to match Drupal default.
  $info['user']['name'] = ['region' => 'hidden'];

  // Don't allow separate manage display of node 'created' because we
  // display it as part of 'uid' using the submitted formatter.

  // @todo Skip other entities for now as the core patch has stalled.
  //$info['taxonomy_term']['name'] = $info['node']['title'];
  //$info['aggregator_feed']['title'] = $info['node']['title'];

  return isset($info[$entity_type_id]) ? $info[$entity_type_id] : [];
}

/**
 * Implements hook_theme_registry_alter().
 */
function manage_display_theme_registry_alter(&$theme_registry) {
  // Disable the 'inline' versions of node base field templates to workaround
  // https://www.drupal.org/node/2993647.
  unset($theme_registry['field__node__title']);
  unset($theme_registry['field__node__uid']);
}

/**
 * Implements hook_theme().
 */
function manage_display_theme() {
  return [
    'submitted' => [
      'base hook' => 'username',
      'variables' => [
        'date' => NULL,
        'metadata' => [],
        'account' => NULL,
        'attributes' => [],
        'link_options' => [],
      ],
    ],
  ];
}

/**
 * Prepares variables for 'submitted' field formatter template.
 */
function template_preprocess_submitted(&$variables) {
  $account = $variables['account'];

  // @todo Don't use the theme setting, instead put a setting in the formatter
  // to choose a display mode (don't hard-code to 'compact).
  // Hence hide the GUI for features.node_user_picture.
  if (theme_get_setting('features.node_user_picture')) {
    // To change user picture settings (e.g. image style), edit the 'compact'
    // view mode on the User entity. Note that the 'compact' view mode might
    // not be configured, so remember to always check the theme setting first.
    $variables['author_picture'] = user_view($account, 'compact');
  }

  if (is_array($variables['date'])) {
    $variables['date'] = \Drupal::service('renderer')->render($variables['date']);
    // @todo This doesn't fully work with quickedit - when the field gets re-rendered after edit, the date is missing.
    // Detect this case with a field preprocess hook and make a call to render the date.
    // Drupal core doesn't fully work either: the user picture doesn't get re-rendered.
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.
 */
function manage_display_preprocess_node(&$variables) {
  // @todo generalise this to any entity type.  Read entity_keys to find the field names.

  if (!$variables['node']->getFieldDefinition('created')->isDisplayConfigurable('view')) {
    if (isset($variables['content']['created'])) {
      // The 'created' field is present, but does not have configurable display.
      // Move it into 'uid' field.
      if (isset($variables['content']['uid']['#formatter']) && ($variables['content']['uid']['#formatter'] == 'submitted')) {
        $variables['content']['uid'][0]['#date'] = $variables['content']['created'];
      }
      // If the 'uid' is hidden or uses a different formatter then hide 'created' too.
      unset($variables['content']['created']);
    }
    else {
      // The 'created' field has been hidden programmatically.  Set an empty array to indicate this.
      $variables['content']['uid'][0]['#date'] = [];
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function manage_display_form_node_type_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide display_submitted in GUI.
  $form['display']['#access'] = FALSE;
}
