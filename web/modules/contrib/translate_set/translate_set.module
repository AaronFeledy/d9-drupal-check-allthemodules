<?php

/**
 * @file
 * Translate set module.
 */

/**
 * Implements hook_permission().
 */
function translate_set_permission() {
  return array(
    'translate set' => array(
      'title' => t('Translate set'),
      'description' => t('Allows access to the translate set screen.'),
    ),
    'manage translate set' => array(
      'title' => t('Manage translate set'),
      'description' => t('Allow users to manage the strings in the translate set on a big overview screen.')
    ),
    'administer translate set settings' => array(
      'title' => t('Administer translate set settings'),
      'description' => t('Configure settings for translate set, like tracking etc.')
    ),
    'administer languages for translate set per user' => array(
      'title' => t('Administer languages for translate set per user'),
      'description' => t('Restrict the languages this user can translate strings to. You can configure this on user/x/translate-set'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function translate_set_menu() {
  $items = array();

  // Add or remove a string from the translate set.
  $items['admin/config/regional/translate/translate-set-action'] = array(
    'title' => 'Translate set action',
    'page callback' => 'translate_set_add_or_remove',
    'access arguments' => array('translate interface'),
    'file' => 'translate_set.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // Translate set overview page.
  $items['admin/config/regional/translate/translate-set'] = array(
    'title' => 'Translate set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translate_set_translate_form'),
    'access arguments' => array('translate set'),
    'file' => 'translate_set.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15
  );

  // Translate set overview default local task.
  $items['admin/config/regional/translate/translate-set/overview'] = array(
    'title' => 'Translate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translate_set_translate_form'),
    'access arguments' => array('translate set'),
    'file' => 'translate_set.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );

  // Translate set management.
  $items['admin/config/regional/translate/translate-set/manage-set'] = array(
    'title' => 'Manage set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translate_set_manage_form'),
    'access arguments' => array('manage translate set'),
    'file' => 'translate_set.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  // Translate set configuration.
  $items['admin/config/regional/translate/translate-set/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translate_set_settings_form'),
    'access arguments' => array('administer translate set settings'),
    'file' => 'translate_set.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );

  // Administer languages for Translate set per user.
  $items['user/%user/translate-set'] = array(
    'title' => 'Translate set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translate_set_configure_languages_per_user', 1),
    'access arguments' => array('administer languages for translate set per user'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'translate_set.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function translate_set_menu_alter(&$items) {
  // Take over the locale seek screen.
  $items['admin/config/regional/translate/translate']['page callback'] = 'translate_set_translate_seek_screen';
  $items['admin/config/regional/translate/translate']['file'] = 'translate_set.admin.inc';
  $items['admin/config/regional/translate/translate']['file path'] = drupal_get_path('module', 'translate_set');
}

/**
 * Implements hook_admin_paths().
 */
function translate_set_admin_paths() {
  $paths = array(
    'user/*/translate-set' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_user_delete().
 */
function translate_set_user_delete($account) {
  db_delete('locales_translate_set_user_languages')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_theme().
 */
function translate_set_theme($existing, $type, $theme, $path) {
  return array(
    'translate_set_table' => array(
      'render element' => 'form',
      'file' => 'translate_set.admin.inc'
    ),
  );
}

/**
 * Implements hook_form_{FORM_ID}_alter().
 */
function translate_set_form_locale_translate_delete_form_alter(&$form, $form_state) {
  $form['#submit'][] = 'translate_set_locale_delete_submit';
}

/**
 * Submit callback: deletes an lid from {locales_translate_set}.
 *
 * @see translate_set_form_locale_translate_delete_form_alter().
 */
function translate_set_locale_delete_submit($form, $form_state) {
  db_delete('locales_translate_set')
    ->condition('lid', $form_state['values']['lid'])
    ->execute();
}

/**
 * Tracks new strings and adds it to the Translate set.
 */
function translate_set_tracking_find_strings() {
  $arguments = array();
  $tracking_contexts = variable_get('translate_set_tracking_contexts');
  if (!empty($tracking_contexts)) {
    $contexts = explode("\n", $tracking_contexts);
    foreach ($contexts as $context) {
      $context = trim($context);
      if (!empty($context)) {
        if (strpos($context,'*') !== FALSE) {
          $arguments[] = array(
            'operator' => 'LIKE',
            'value' => str_replace('*', '%', $context)
          );
        }
        else {
          $arguments[] = array(
            'operator' => '=',
            'value' => $context,
          );
        }
      }
    }

    // Build query.
    $select = db_select('locales_source', 'ls')->fields('ls', array('lid', 'source'));
    $select->leftJoin('locales_translate_set', 'lts', 'lts.lid = ls.lid');
    $select->fields('lts', array('lid'));
    $select->isNull('lts.lid');

    // Or conditions.
    $or = db_or();
    foreach ($arguments as $argument) {
      $or->condition('context', array($argument['value']), $argument['operator']);
    }
    $select->condition($or);
    $records = $select->execute();

    // Collect values.
    $values = array();
    foreach ($records as $record) {
      $values[] = $record->lid;
    }

    // Insert new lid's.
    if (!empty($values)) {
      $insert = db_insert('locales_translate_set')->fields(array('lid'));
      foreach ($values as $value) {
        $insert->values(array($value));
      }
      $insert->execute();
    }
  }
}

/**
 * Themes a translate set table.
 */
function theme_translate_set_table(&$variables) {
  // Get the useful values.
  $form = $variables['form'];
  $rows = $form['strings'];
  $header = $form['#header'];
  $add_big_column_class = $form['#add_big_column_class'];

  // Setup the structure to be rendered and returned.
  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
    '#empty' => t('No strings found'),
  );

  // Traverse each row.
  foreach (element_children($rows) as $row_index) {
    $row = array();
    $i = 0;
    // Traverse each column in the row.  @see element_children().
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element.
      if ($add_big_column_class) {
        $class = 'translate-set-form-column-big';
        $row[] = array('data' => drupal_render($rows[$row_index][$col_index]), 'class' => array($class));
      }
      elseif ($rows[$row_index][$col_index]['#type'] == 'checkbox') {
        $row[] = array('data' => drupal_render($rows[$row_index][$col_index]), 'class' => array('translate-set-form-checkbox'));
      }
      else {
        $row[] = array('data' => drupal_render($rows[$row_index][$col_index]));
      }
      $i++;
    }
    // Add the row to the table.
    $content['#rows'][] = $row;
  }

  // Render the table and return.
  return drupal_render($content);
}
