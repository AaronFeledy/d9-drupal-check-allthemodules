<?php
/**
 * @file
 * This module implements commerce econt shipping
 * functionality
 */

/**
* Connect to econt API and checks if default store data is correct
*/
function commerce_econt_check_store_addrr($username, $password, array $store_data) {
  $doc = new DOMDocument('1.0','UTF-8');
  $doc->formatOutput = true;

  #request
  $request = $doc->createElement('request');
  $request = $doc->appendChild($request);

    #client
    $client = $doc->createElement('client');
    $client = $request->appendChild($client);
     
      $username_node = $doc -> createElement('username');
      $username_node = $client->appendChild($username_node);
      $username_val = $doc->createTextNode($username);
      $username_val = $username_node->appendChild($username_val);
      
      $password_node = $doc -> createElement('password');
      $password_node = $client->appendChild($password_node);
      $password_val = $doc->createTextNode($password);
      $password_val = $password_node->appendChild($password_val);
    #/client

    #request_type
    $request_type = $doc->createElement('request_type');
    $request_type = $request->appendChild($request_type);
    $request_type_val = $doc->createTextNode('check_address');
    $request_type_val = $request_type->appendChild($request_type_val);
    #/request_type

    #address
    $address = $doc->createElement('address');
    $address = $request->appendChild($address);

      $city_node = $doc -> createElement('city');
      $city_node = $address->appendChild($city_node);
      $city_val = $doc->createTextNode($store_data['locality']);
      $city_val = $city_node->appendChild($city_val);

      $post_code_node = $doc -> createElement('post_code');
      $post_code_node = $address->appendChild($post_code_node);
      $post_code_val = $doc->createTextNode($store_data['postal_code']);
      $post_code_val = $post_code_node->appendChild($post_code_val);

      $quarter_node = $doc -> createElement('quarter');
      $quarter_node = $address->appendChild($quarter_node);
      $quarter_val = $doc->createTextNode('');
      $quarter_val = $quarter_node->appendChild($quarter_val);

      $street_node = $doc -> createElement('street');
      $street_node = $address->appendChild($street_node);
      $street_val = $doc->createTextNode($store_data['address_line1']);
      $street_val = $street_node->appendChild($street_val);

      $street_num_node = $doc -> createElement('street_num');
      $street_num_node = $address->appendChild($street_num_node);
      $street_num_val = $doc->createTextNode($store_data['address_line2']);
      $street_num_val = $street_num_node->appendChild($street_num_val);

      $street_bl_node = $doc -> createElement('street_bl');
      $street_bl_node = $address->appendChild($street_bl_node);
      $street_bl_val = $doc->createTextNode('');
      $street_bl_val = $quarter_node->appendChild($street_bl_val);

      $street_vh_node = $doc -> createElement('street_vh');
      $street_vh_node = $address->appendChild($street_vh_node);
      $street_vh_val = $doc->createTextNode('');
      $street_vh_val = $street_bl_node->appendChild($street_vh_val);

      $street_et_node = $doc -> createElement('street_et');
      $street_et_node = $address->appendChild($street_et_node);
      $street_et_val = $doc->createTextNode('');
      $street_et_val = $street_et_node->appendChild($street_et_val);

      $street_ap_node = $doc -> createElement('street_ap');
      $street_ap_node = $address->appendChild($street_ap_node);
      $street_ap_val = $doc->createTextNode('');
      $street_ap_val = $street_ap_node->appendChild($street_ap_val);

      $street_other_node = $doc -> createElement('street_other');
      $street_other_node = $address->appendChild($street_other_node);
      $street_other_val = $doc->createTextNode('');
      $street_other_val = $street_other_node->appendChild($street_other_val);

  return $doc->saveXML();
}

function commerce_econt_post_xml($econt_url, $xml_str) {
  $error = false;
  $message = '';

  $ch = curl_init($econt_url);
  curl_setopt($ch, CURLOPT_POSTFIELDS, array('xml' => $xml_str));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $responseResult = curl_exec($ch);
  $info = curl_getinfo($ch);
  $curl_error = curl_error($ch);
  curl_close($ch);

  try {
    if($curl_error) {
      throw new Exception(t('Could not connect to Econt API'));
    }

    if(!$econt_response_obj = simplexml_load_string($responseResult)) {
      throw new Exception(t('Empty or incorrect XML response'));
    }

    if($econt_response_obj->error->code) {
      throw new Exception($econt_response_obj->error->message);
    }

    if($econt_response_obj->address->validation_status != 'normal') {
      throw new Exception(t('Incorrect Default Store address. Please check it'));
    }

    $message = 'Valid Default store address';
  } catch (Exception $e) {
      $error = true;
      $message = $e->getMessage();
  }

  return ['error' => $error, 'message' => $message];
}


function commerce_econt_calculate_delivery_xml(array $store_data, array $store_config, array $shipmnet_config, $is_cod = false) {
  $doc = new DOMDocument('1.0','UTF-8');
  $doc->formatOutput = true;
  
  #parcels
  $parcel = $doc->createElement('parcels');
  $parcel = $doc->appendChild($parcel);

    #system
    $system = $doc->createElement('system');
    $system = $parcel->appendChild($system);
    #/system
    
      $validate = $doc -> createElement('validate');
      $validate = $system->appendChild($validate);
      $validate_val = $doc->createTextNode('1');//1
      $validate_val = $validate->appendChild($validate_val);
      
      $response_type = $doc -> createElement('response_type');
      $response_type = $system->appendChild($response_type);
      $response_type_val = $doc->createTextNode('XML');
      $response_type_val = $response_type->appendChild($response_type_val);

      $only_calculate = $doc -> createElement('only_calculate');
      $only_calculate = $system->appendChild($only_calculate);
      $only_calculate_val = $doc->createTextNode('1');//1
      $only_calculate_val = $only_calculate->appendChild($only_calculate_val);

    #client
    $client = $doc->createElement('client');
    $client = $parcel->appendChild($client);
    #/client
    
      $username_node = $doc -> createElement('username');
      $username_node = $client->appendChild($username_node);
      $username_val = $doc->createTextNode($store_config['econt_username']);
      $username_val = $username_node->appendChild($username_val);
      
      $password_node = $doc -> createElement('password');
      $password_node = $client->appendChild($password_node);
      $password_val = $doc->createTextNode($store_config['econt_password']);
      $password_val = $password_node->appendChild($password_val);
      
    #loadings
    $loadings = $doc->createElement('loadings');
    $loadings = $parcel->appendChild($loadings);
    #/loadings
      #row
      $row = $doc->createElement('row');
      $row = $loadings->appendChild($row);
      #/row
        #sender
        $sender = $doc->createElement('sender');
        $sender = $row->appendChild($sender);
        #/sender
        
          $city = $doc -> createElement('city');
          $city = $sender->appendChild($city);
          $city_val = $doc->createTextNode($store_data['locality']);//'Варна'
          $city_val = $city->appendChild($city_val);
          
          $post_code = $doc -> createElement('post_code');
          $post_code = $sender->appendChild($post_code);
          $post_code_val = $doc->createTextNode($store_data['postal_code']);
          $post_code_val = $post_code->appendChild($post_code_val);
          
          $name = $doc -> createElement('name'); //company name
          $name = $sender->appendChild($name);
          $name_val = $doc->createTextNode($store_data['store_name']);
          $name_val = $name->appendChild($name_val);
      
      $name_person = $doc -> createElement('name_person'); //name_person
          $name_person = $sender->appendChild($name_person);
          $name_person_val = $doc->createTextNode($store_config['econt_emp_name']);
          $name_person_val = $name_person->appendChild($name_person_val);
          
          $quarter = $doc -> createElement('quarter'); //quarter
          $quarter = $sender->appendChild($quarter);
          $quarter_val = $doc->createTextNode('');
          $quarter_val = $quarter->appendChild($quarter_val);
      
      $street = $doc -> createElement('street'); //street
          $street = $sender->appendChild($street);
          $street_val = $doc->createTextNode($store_data['address_line1']);
          $street_val = $street->appendChild($street_val);
      
      $street_num = $doc -> createElement('street_num'); //street_num
          $street_num = $sender->appendChild($street_num);
          $street_num_val = $doc->createTextNode($store_data['address_line2']);
          $street_num_val = $street_num->appendChild($street_num_val);
      
      $street_bl = $doc -> createElement('street_bl'); //street_bl
          $street_bl = $sender->appendChild($street_bl);
          $street_bl_val = $doc->createTextNode('');
          $street_bl_val = $street_bl->appendChild($street_bl_val);
      
      $street_vh = $doc -> createElement('street_vh'); //street_vh
          $street_vh = $sender->appendChild($street_vh);
          $street_vh_val = $doc->createTextNode('');
          $street_vh_val = $street_vh->appendChild($street_vh_val);
      
      $street_et = $doc -> createElement('street_et'); //street_et
          $street_et = $sender->appendChild($street_et);
          $street_et_val = $doc->createTextNode('');
          $street_et_val = $street_et->appendChild($street_et_val);
      
      $street_ap = $doc -> createElement('street_ap'); //street_ap
          $street_ap = $sender->appendChild($street_ap);
          $street_ap_val = $doc->createTextNode('');
          $street_ap_val = $street_ap->appendChild($street_ap_val);
      
      $street_other = $doc -> createElement('street_other'); //street_other
          $street_other = $sender->appendChild($street_other);
          $street_other_val = $doc->createTextNode('');
          $street_other_val = $street_other->appendChild($street_other_val);
      
      $phone_num = $doc -> createElement('phone_num'); //phone_num
          $phone_num = $sender->appendChild($phone_num);
          $phone_num_val = $doc->createTextNode($store_config['econt_emp_phone']);
          $phone_num_val = $phone_num->appendChild($phone_num_val);
          
        #receiver
        $receiver = $doc->createElement('receiver');
        $receiver = $row->appendChild($receiver);
        #/receiver
        
          $city = $doc -> createElement('city');
          $city = $receiver->appendChild($city);
          $city_val = $doc->createTextNode($shipmnet_config['locality']);
          $city_val = $city->appendChild($city_val);
          
          $post_code_to = $doc -> createElement('post_code');
          $post_code_to = $receiver->appendChild($post_code_to);
          $post_code_to_val = $doc->createTextNode($shipmnet_config['postal_code']);
          $post_code_to_val = $post_code_to->appendChild($post_code_to_val);
          
          
          $name = $doc -> createElement('name'); //company name
          $name = $receiver->appendChild($name);
          $name_val = $doc->createTextNode((!empty($shipmnet_config['organization']) ?
                                                    $shipmnet_config['organization'] :
                                                    'Demo inc.' ));
          $name_val = $name->appendChild($name_val);
      
          $name_person = $doc -> createElement('name_person'); //name_person
          $name_person = $receiver->appendChild($name_person);
          $name_person_val = $doc->createTextNode($shipmnet_config['first_name'] .
                                                  ' ' .
                                                  $shipmnet_config['family_name']
                                                  );
          $name_person_val = $name_person->appendChild($name_person_val);
      
          $receiver_email = $doc -> createElement('receiver_email'); //receiver_email
          $receiver_email = $receiver->appendChild($receiver_email);
          $receiver_email_val = $doc->createTextNode('');
          $receiver_email_val = $receiver_email->appendChild($receiver_email_val);
      
      $quarter = $doc -> createElement('quarter'); //quarter
          $quarter = $receiver->appendChild($quarter);
          $quarter_val = $doc->createTextNode('');
          $quarter_val = $quarter->appendChild($quarter_val);
      
      $street = $doc -> createElement('street'); //street
          $street = $receiver->appendChild($street);
          $street_val = $doc->createTextNode($shipmnet_config['street_name']);
          $street_val = $street->appendChild($street_val);
      
      $street_num = $doc -> createElement('street_num'); //street_num
          $street_num = $receiver->appendChild($street_num);
          $street_num_val = $doc->createTextNode($shipmnet_config['street_num']);
          $street_num_val = $street_num->appendChild($street_num_val);
      
      $street_bl = $doc -> createElement('street_bl'); //street_bl
          $street_bl = $receiver->appendChild($street_bl);
          $street_bl_val = $doc->createTextNode('');
          $street_bl_val = $street_bl->appendChild($street_bl_val);
      
      $street_vh = $doc -> createElement('street_vh'); //street_vh
          $street_vh = $receiver->appendChild($street_vh);
          $street_vh_val = $doc->createTextNode('');
          $street_vh_val = $street_vh->appendChild($street_vh_val);
      
      $street_et = $doc -> createElement('street_et'); //street_et
          $street_et = $receiver->appendChild($street_et);
          $street_et_val = $doc->createTextNode('');
          $street_et_val = $street_et->appendChild($street_et_val);
      
      $street_ap = $doc -> createElement('street_ap'); //street_ap
          $street_ap = $receiver->appendChild($street_ap);
          $street_ap_val = $doc->createTextNode('');
          $street_ap_val = $street_ap->appendChild($street_ap_val);
      
      $street_other = $doc -> createElement('street_other'); //street_other
          $street_other = $receiver->appendChild($street_other);
          $street_other_val = $doc->createTextNode('');
          $street_other_val = $street_other->appendChild($street_other_val);
      
      $phone_num = $doc -> createElement('phone_num'); //phone_num
          $phone_num = $receiver->appendChild($phone_num);
          $phone_num_val = $doc->createTextNode($shipmnet_config['phone']);
          $phone_num_val = $phone_num->appendChild($phone_num_val);
          
        #shipment
        $shipment = $doc->createElement('shipment');
        $shipment = $row->appendChild($shipment);
        
          $shipment_type = $doc -> createElement('shipment_type');
          $shipment_type = $shipment->appendChild($shipment_type);
          $shipment_type_val = $doc->createTextNode('PACK');
          $shipment_type_val = $shipment_type->appendChild($shipment_type_val);
          
          $description = $doc -> createElement('description');
          $description = $shipment->appendChild($description);
          $description_val = $doc->createTextNode('Some description');
          $description_val = $description->appendChild($description_val);
          
          $pack_count = $doc -> createElement('pack_count');
          $pack_count = $shipment->appendChild($pack_count);
          $pack_count_val = $doc->createTextNode('1');
          $pack_count_val = $pack_count->appendChild($pack_count_val);
          
          $weight = $doc -> createElement('weight');
          $weight = $shipment->appendChild($weight);
          $weight_val = $doc->createTextNode($shipmnet_config['weight']);
          $weight_val = $weight->appendChild($weight_val);
          
          $tariff_code = $doc -> createElement('tariff_code');
          $tariff_code = $shipment->appendChild($tariff_code);
          $tariff_code_val = $doc->createTextNode('DOOR_DOOR');
          $tariff_code_val = $tariff_code->appendChild($tariff_code_val);

          $tariff_sub_code = $doc -> createElement('tariff_sub_code');
          $tariff_sub_code = $shipment->appendChild($tariff_sub_code);
          $tariff_sub_code_val = $doc->createTextNode('DOOR_DOOR');
          $tariff_sub_code_val = $tariff_sub_code->appendChild($tariff_sub_code_val);          
          
          //
          $invoice_before_pay_CD = $doc -> createElement('invoice_before_pay_CD');
          $invoice_before_pay_CD = $shipment->appendChild($invoice_before_pay_CD);
          $invoice_before_pay_CD_val = $doc->createTextNode('0');
          $invoice_before_pay_CD_val = $invoice_before_pay_CD->appendChild($invoice_before_pay_CD_val);
          
          $pay_after_accept = $doc -> createElement('pay_after_accept');
          $pay_after_accept = $shipment->appendChild($pay_after_accept);
          $pay_after_accept_val = $doc->createTextNode(0);
          $pay_after_accept_val = $pay_after_accept->appendChild($pay_after_accept_val);
          
          $pay_after_test = $doc -> createElement('pay_after_test');
          $pay_after_test = $shipment->appendChild($pay_after_test);
          $pay_after_test_val = $doc->createTextNode(0);
          $pay_after_test_val = $pay_after_test->appendChild($pay_after_test_val);
          
          $delivery_day = $doc -> createElement('delivery_day');
          $delivery_day = $shipment->appendChild($delivery_day);
          $delivery_day_val = $doc->createTextNode('work_day');
          $delivery_day_val = $delivery_day->appendChild($delivery_day_val);
        #/shipment
        
        #payment
        $payment = $doc->createElement('payment');
        $payment = $row->appendChild($payment);
        #/payments
        
          $side = $doc -> createElement('side');
          $side = $payment->appendChild($side);
          $side_val = $doc->createTextNode('RECEIVER');//'SENDER'
          $side_val = $side->appendChild($side_val);
          
          $method = $doc -> createElement('method');
          $method = $payment->appendChild($method);
          $method_val = $doc->createTextNode('CASH');//CASH, CREDIT
          $method_val = $method->appendChild($method_val);

  /*If payment method is COD(Cash On Delivery) add Econt CD services*/
  if($is_cod) {
        #services
        $services = $doc->createElement('services');
        $services = $row->appendChild($services);

          $cd = $doc->createElement('cd');
          $cd = $services->appendChild($cd);
          $cd_val = $doc->createTextNode($shipmnet_config['total_price']);//наложен платеж стойност
          $cd_val = $cd->appendChild($cd_val);
          //attribute
          $cd_type = $doc->createAttribute('type');
          $cd_type = $cd->appendChild($cd_type);
          $cd_type_val = $doc->createTextNode('GET');
          $cd_type_val = $cd_type->appendChild($cd_type_val);
        #/services
  }
  /*End Econt CD services*/
  #send request
  return $doc->saveXML();
}

function commerce_econt_send_request_xml($econt_url, $xml_str) {

  $error = false;
  $message = '';
  $econt_amount_data = 0.00;

  $ch = curl_init($econt_url);
  curl_setopt($ch, CURLOPT_POSTFIELDS, array('xml' => $xml_str));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $responseResult = curl_exec($ch);
  $info = curl_getinfo($ch);
  $curl_error = curl_error($ch);
  curl_close($ch);

  try {
    if($curl_error) {
      throw new Exception(t('Could not connect to Econt API'));
    }

    if(!$econt_response_obj = simplexml_load_string($responseResult)) {
      throw new Exception(t('Empty or incorrect XML response'));
    }

    if(!empty($econt_response_obj->result->e->error)) {
      throw new Exception($econt_response_obj->result->e->error);
    }

    $econt_amount_data = (string)$econt_response_obj->result->e->loading_price->total;
  } catch (Exception $e) {
      $error = true;
      $message = $e->getMessage();
  }

  return ['error' => $error, 'message' => $message, 'econt_amount_data' => $econt_amount_data];
}

/**
 * Implements hook_clientside_validation_validator_info_alter().
 */
function commerce_econt_clientside_validation_validator_info_alter(&$validators) {

  foreach ($validators as &$validator) {
    $validator['attachments']['library'][] = 'commerce_econt/cv.jquery.cesaddress';
  }
}

/**
 * Connect to econt API and checks if default store data is correct
 */
function commerce_econt_get_offices($username, $password, $econt_url)
{
  $doc = new DOMDocument('1.0', 'UTF-8');
  $doc->formatOutput = true;

  #request
  $request = $doc->createElement('request');
  $request = $doc->appendChild($request);

  #client
  $client = $doc->createElement('client');
  $client = $request->appendChild($client);

  $username_node = $doc->createElement('username');
  $username_node = $client->appendChild($username_node);
  $username_val = $doc->createTextNode($username);
  $username_val = $username_node->appendChild($username_val);

  $password_node = $doc->createElement('password');
  $password_node = $client->appendChild($password_node);
  $password_val = $doc->createTextNode($password);
  $password_val = $password_node->appendChild($password_val);
  #/client

  #request_type
  $request_type = $doc->createElement('request_type');
  $request_type = $request->appendChild($request_type);
  $request_type_val = $doc->createTextNode('offices');
  $request_type_val = $request_type->appendChild($request_type_val);
  #/request_type

  $xmlStr = $doc->SaveXML();

  $error = false;
  $message = '';

  $ch = curl_init($econt_url);
  curl_setopt($ch, CURLOPT_POSTFIELDS, array('xml' => $xmlStr));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $responseResult = curl_exec($ch);
  $info = curl_getinfo($ch);
  $curl_error = curl_error($ch);
  curl_close($ch);

  try {
    if($curl_error) {
      throw new Exception(t('Could not connect to Econt API'));
    }

    if(!$econt_response_obj = simplexml_load_string($responseResult)) {
      throw new Exception(t('Empty or incorrect XML response'));
    }

    if($econt_response_obj->error->code) {
      throw new Exception($econt_response_obj->error->message);
    }

    $message = 'Valid Default store address';
  } catch (Exception $e) {
    $error = true;
    $message = $e->getMessage();
  }

  return ['error' => $error, 'message' => $message, 'xml_result' => $responseResult];
}