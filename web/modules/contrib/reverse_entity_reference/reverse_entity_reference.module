<?php

/**
 * @file
 * Contains reverse_entity_reference.module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function reverse_entity_reference_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    // Simplified version of README.
    case 'help.page.reverse_entity_reference':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Reverse Entity Reference adds a computed reverse reference field to all entities referenced by another entity\'s field. This module is based on Drupal 7\'s <a href==":erbr-module">Entityreference Backreference</a> module. This modules only provides backreferences for Entity Reference fields towards fieldable entity types.', [
        ':erbr-module' => 'https://www.drupal.org/project/entityreference_backreference',
      ]) . '</p>';
      $output .= '<h3>' . t('Usage & Configurations') . '</h3>';
      $output .= '<p>' . t('This module is meant to be used a developer API. Detailed usage information is available in the README.md') . '</p>';
      $output .= '<p>' . t('Configurations are available on the <a href=":settings">module settings</a> page. On this page you can choose which fields and entities allow reverse references.', [
        ':settings' => \Drupal::url('reverse_entity_reference.settings'),
      ]) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Creates reverse_entity_reference field on all fieldable entities. Then when
 * accessed it will compute all the reverse references for the entity as a
 * table looking like | Referencing Entity Type | Referencing Entity ID |
 * Referencing Entity Fieldname | This table could be queried using
 * array_column as per the old method.
 *
 * @code
 *    $result1 = array_column($result, 'ref_entity_type')
 *    $result2 = array_column($result, 'ref_field_name')
 *    and then filter out the original $result based on $result1 and $result2
 */
function reverse_entity_reference_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  $fields['reverse_entity_reference'] = BaseFieldDefinition::create('reverse_entity_reference')
    ->setName('reverse_entity_reference')
    ->setTargetEntityTypeId($entity_type->id())
    ->setLabel(t('All the reverse entity references for this entity'))
    ->setDescription(t('A map of all the entities referencing this entity,'))
    ->setTranslatable(FALSE)
    ->setComputed(TRUE)
    ->setDisplayConfigurable('view', TRUE)
    // Hide reverse references by default.
    ->setDisplayOptions('view', ['type' => 'hidden']);
  return $fields;
}
