
<?php

/**
 * @file
 * Primarily Drupal hooks.
 */

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function block_layout_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $theme = _block_layout_get_theme($variables['elements']['#id']);
  if ( $theme ) {
    $suggestions[] = 'block__' . $theme;
  }
}

/**
 * Implements hook_theme() to declare new templates.
 */
function block_layout_theme() {
  $path = drupal_get_path('module', 'block_layout');
  return array(
    'block__clean' => array(
      'path' => $path . '/templates/clean',
      'render element' => 'elements', 
      'base hook' => 'block',
    ),
    'block__bootstrap__dropdown' => array(
      'path' => $path . '/templates/bootstrap_dropdown',
      'render element' => 'elements', 
      'base hook' => 'block',
    ),
    'block__bootstrap__collapse' => array(
      'path' => $path . '/templates/bootstrap_collapse',
      'render element' => 'elements', 
      'base hook' => 'block',
    ),
    'block__bootstrap__modal' => array(
      'path' => $path . '/templates/bootstrap_modal',
      'render element' => 'elements', 
      'base hook' => 'block',
    ),
    'block__bootstrap__card' => array(
      'path' => $path . '/templates/bootstrap_card',
      'render element' => 'elements', 
      'base hook' => 'block',
    ),
  );
}

/**
 * Implements hook_form_alter() adding administration for block layouts.
 */

function block_layout_form_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  $theme = _block_layout_get_theme($entity->id());
  // Bootstrap Blocks
  $form['block_layout'] = array(
    '#type' => 'fieldset',
    '#title' => t('Block Layout Template'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['block_layout']['theme'] = array(
    '#type' => 'select',
    '#title' => t('Select block layout'),
    '#default_value' => $theme,
    '#empty_option' => t('None'),
    '#options' => array(
      'clean' => 'Clean Frame',
      'bootstrap__dropdown' => 'Bootstrap Dropdown',
      'bootstrap__collapse' => 'Bootstrap Collapse',
      'bootstrap__modal' => 'Bootstrap Modal',
      'bootstrap__card' => 'Bootstrap 4 Card',
	),
    '#description' => t('The selected layout template will be applied to block wrapper, replacing block.html.twig'),
  );
  $form['actions']['submit']['#submit'][] = '_block_layout_form_submit';
}

function _block_layout_form_submit(array &$form, FormStateInterface $form_state) {
  $results = $form_state->getValues();
  $entity = $form_state->getFormObject()->getEntity();
  $block_layout_storage = \Drupal::entityManager()->getStorage('block_layout');
  $block_layout = $block_layout_storage->load($entity->id());
  if(isset($block_layout)) {
    $block_layout->set('theme', $results['block_layout']['theme']);
  }
  else {
    $block_layout = entity_create('block_layout', array(
      'id' => $entity->id(), 
      'theme' => $results['block_layout']['theme'])
    );
  }
  $status = $block_layout->save();
  \Drupal::logger('block_layout')->notice('Block layout template was @type, for block %title to theme %theme',
    array(
      '@type' => $status == 1 ? 'Saved' : 'Updated',
      '%title' => $entity->id(),
      '%theme' => $results['block_layout']['theme'],
    ));
}

function _block_layout_get_theme($block_id) {
  $block_layout_storage = \Drupal::entityManager()->getStorage('block_layout');
  $block = $block_layout_storage->load($block_id);
  return isset($block) ? $block->getTheme() : FALSE;
}
