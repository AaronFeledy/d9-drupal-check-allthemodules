<?php

/**
 * @file
 * Synchronize drupal data to discourse.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function discourse_sync_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.discourse_sync':
      $discourse_settings = Url::fromRoute('discourse_sso.settings.form')->toString();
      $host = \Drupal::request()->getSchemeAndHttpHost();
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Discourse Synchronize module synchronizes Drupal roles to Discourse. Roles are created, updated and deleted in Discourse when the corresponding role in Drupal is edited. There is no synchronization the other way around, i.e from Discourse to Drupal.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('In <a href=":discourse-sso-settings">Discourse SSO settings form</a> set API Key, API Username and Webhook secret from Discourse.', [':discourse-sso-settings' => $discourse_settings]) . '</p>';
      $output .= '<h3>' . t('API Key and Username') . '</h3>';
      $output .= '<p>' . t('Refer to the Discourse documentation for how to create an API key for a user.') . '</p>';
      $output .= '<h3>' . t('Webhook secret') . '</h3>';
      $output .= '<p>' . t('Discourse has to communicate to Drupal when a new user is created in Discourse through single sign on, in order to synchronize Drupal roles for that user. Therefore you have to <a href=":webhook-in-discourse">create a webhook in Discourse</a> and set the payload url to :host/discourse_sync/user/webhook:', [':webhook-in-discourse' => 'https://meta.discourse.org/t/setting-up-webhooks/49045', ':host' => $host]) . '</p>';
      $output .= '<ol>';
      $output .= '<li>' . t('Go to Discourse > Admin > API > webhooks (/admin/api/web_hooks)') . '</li>';
      $output .= '<li>' . t('Klick on "New Webhook"') . '</li>';
      $output .= '<li>' . t('Set payload url to :host/discourse_sync/user/webhook', [':host' => $host]) . '</li>';
      $output .= '<li>' . t('Set the same secret phrase in discourse as in <a href=":discourse-sso-settings">Discourse SSO settings</a> > Webhook secret', [':discourse-sso-settings' => $discourse_settings]) . '</li>';
      $output .= '<li>' . t('Select user event as individual event') . '</li>';
      $output .= '<li>' . t('Set active and save.') . '</li>';
      $output .= '</ol>';
      $output .= '<h3>' . t('TODO') . '</h3>';
      $output .= '<p>' . t('Only thing missing is an action on user delete. Discourse seems to delete users only, if they do not have more than a few posts. Otherwise users are anonymized instead.') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function discourse_sync_user_role_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->isSyncing()) {
    return;
  }
  $service = \Drupal::service('discourse_sync.role');
  $service->createRole($entity->id(), $entity->label());
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function discourse_sync_user_role_update(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->isSyncing()) {
    return;
  }
  $service = \Drupal::service('discourse_sync.role');
  $service->updateRole($entity->id(), $entity->label());
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function discourse_sync_user_role_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->isSyncing()) {
    return;
  }
  $service = \Drupal::service('discourse_sync.role');
  $service->deleteRole($entity->id());
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function discourse_sync_user_update(Drupal\Core\Entity\EntityInterface $entity) {
  $roles = $entity->getRoles(TRUE);
  $username = $entity->getAccountName();

  $service = \Drupal::service('discourse_sync.role');
  $service->syncUserRoles($username, $roles);
}

/**
* Implements hook_form_FORM_ID_alter().
*/
function discourse_sync_form_discourse_sso_settings_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('discourse_sync.settings');
  
  $form['webhook_secret'] = [
    '#type' => 'textfield',
    '#title' => t('Webhook secret'),
    '#description' => t('The secret of the user event webhook.'),
    '#default_value' => $config->get('webhook_secret'),
  ];
  
  $form['submit']['#weight'] = 100;
  $form['#submit'][] = 'discourse_sync_settings_form_submit';
}

/**
 * Submit handler for discourse sync admin form fields.
 * 
 * @see discourse_sync_form_discourse_admin_form_alter
 */
function discourse_sync_settings_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('discourse_sync.settings')
    ->set('webhook_secret', $form_state->getValue('webhook_secret'))
    ->save();
}
