<?php

/**
 * @file
 * Profile module that customizes navbar
 */

/**
 * Implements hook_element_info_alter().
 */
function navbar_awesome_element_info_alter(array &$types) {
  if (isset($types['toolbar'])) {
    $types['toolbar']['#attached']['library'][] = 'navbar_awesome/base';

    $navbar_toolbar_settings = \Drupal::config('navbar_awesome.toolbar');

    // Add FontAwesome CDN library if enabled and module does not exist.
    if (!\Drupal::moduleHandler()->moduleExists('fontawesome') && $navbar_toolbar_settings->get('cdn')) {
      $types['toolbar']['#attached']['library'][] = 'navbar_awesome/fontawesome';
    }

    // Add Roboto via Google Fronts, if enabled.
    if ($navbar_toolbar_settings->get('roboto')) {
      $types['toolbar']['#attached']['library'][] = 'navbar_awesome/roboto';
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function navbar_awesome_library_info_alter(&$libraries, $extension) {
  if ($extension == 'toolbar' && isset($libraries['toolbar'])) {
    unset($libraries['toolbar']['css']['theme']['css/toolbar.icons.theme.css']);
  }
}

/**
 * Implements hook_toolbar().
 */
function navbar_awesome_toolbar() {
  $items = array();
  // Adds Content to top level
  $items['system.admin_content'] = array(
    '#type' => 'toolbar_item',
    'tab' => array(
      '#type' => 'link',
      '#title' => t('Content'),
      '#url' => \Drupal\Core\Url::fromRoute('system.admin_content'),
      '#attributes' => array(
        'title' => t('Content menu'),
        'class' => [
          'toolbar-icon',
          'toolbar-icon-content',
          'fa-pencil-square-o'
        ],
      ),
    ),
    '#weight' => -15,
  );
  // Add an item and tray for Development Menu
//  if (module_exists('devel') && user_access('access devel information') && variable_get('navbar_awesome_devel', TRUE)) {
//
//    $devel_tree = navbar_awesome_devel_menu_tree();
//    // Add attributes to the links before rendering.
//    _navbar_awesome_navigation_links($devel_tree);
//
//    $devel_menu = array(
//      '#heading' => t('Development menu'),
//      'navbar_administration' => array(
//        '#type' => 'container',
//        '#attributes' => array(
//          'class' => array('navbar-menu-development'),
//        ),
//        'adevelopment_menu' => menu_tree_output($devel_tree),
//      ),
//    );
//
//    $items['development'] = array(
//      '#type' => 'navbar_item',
//      'tab' => array(
//        '#type' => 'link',
//        '#title' => t('Development'),
//        '#href' => 'admin/settings',
//        '#options' => array(
//          'attributes' => array(
//            'title' => t('Development menu'),
//            'class' => array('navbar-icon', 'navbar-icon-devel', 'fa-bolt'),
//          ),
//        ),
//      ),
//      'tray' => $devel_menu,
//      '#weight' => 100,
//    );
//  }
  return $items;
}

/**
 * Implements hook_toolbar_alter().
 */
function navbar_awesome_toolbar_alter(&$items) {

  // Move the menu item to far left.
  if (isset($items['administration'])) {
    $items['administration']['#weight'] = -50;
    $items['administration']['tab']['#attributes']['class'][] = 'fa';
    $items['administration']['tab']['#attributes']['class'][] = 'fa-bars';
    $items['administration']['tray']['toolbar_administration']['#pre_render'][] = 'navbar_awesome_prerender_toolbar_administration_tray';
  }

  // Add icon for home.
  if (isset($items['home'])) {
    $items['home']['tab']['#attributes']['class'][] = 'fa';
    $items['home']['tab']['#attributes']['class'][] = 'fa-home';
  }
  // Add icon for user.
  if (isset($items['user'])) {
    $items['user']['tab']['#attributes']['class'][] = 'fa';
    $items['user']['tab']['#attributes']['class'][] = 'fa-user';
  }
  // Add icon for Shortcuts.
  if (isset($items['shortcuts'])) {
    $items['shortcuts']['tab']['#attributes']['class'][] = 'fa';
    $items['shortcuts']['tab']['#attributes']['class'][] = 'fa-star';
  }

  if (isset($items['contextual'])) {
    $items['contextual']['tab']['#attributes']['class'][] = 'fa';
    $items['contextual']['tab']['#attributes']['class'][] = 'fa-pencil';
  }

  $stop = null;
}

/**
 * Alters the render array for the toolbar's administration tray.
 *
 * @param array $element
 *   A renderable array.
 *
 * @return array
 *   The updated renderable array.
 *
 * @see toolbar_prerender_toolbar_administration_tray()
 */
function navbar_awesome_prerender_toolbar_administration_tray(array $element) {
  $items =& $element['administration_menu']['#items'];
  if (isset($items['system.admin_content'])) {
    unset($items['system.admin_content']);
  }

  if (isset($items['commerce.admin_commerce'])) {
    $url_attributes = $items['commerce.admin_commerce']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-shopping-cart';
    $items['commerce.admin_commerce']['url']->setOption('attributes', $url_attributes);
  }

  if (isset($items['system.admin_structure'])) {
    $url_attributes = $items['system.admin_structure']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-sitemap';
    $items['system.admin_structure']['url']->setOption('attributes', $url_attributes);
  }

  if (isset($items['system.themes_page'])) {
    $url_attributes = $items['system.themes_page']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-paint-brush';
    $items['system.themes_page']['url']->setOption('attributes', $url_attributes);
  }

  if (isset($items['entity.user.collection'])) {
    $url_attributes = $items['entity.user.collection']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-users';
    $items['entity.user.collection']['url']->setOption('attributes', $url_attributes);
  }

  if (isset($items['system.modules_list'])) {
    $url_attributes = $items['system.modules_list']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-puzzle-piece';
    $items['system.modules_list']['url']->setOption('attributes', $url_attributes);
  }

  if (isset($items['system.admin_config'])) {
    $url_attributes = $items['system.admin_config']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-wrench';
    $items['system.admin_config']['url']->setOption('attributes', $url_attributes);
  }

  if (isset($items['system.admin_reports'])) {
    $url_attributes = $items['system.admin_reports']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-bar-chart';
    $items['system.admin_reports']['url']->setOption('attributes', $url_attributes);
  }

  if (isset($items['help.main'])) {
    $url_attributes = $items['help.main']['url']->getOption('attributes');
    $url_attributes['class'][] = 'fa';
    $url_attributes['class'][] = 'fa-question';
    $items['help.main']['url']->setOption('attributes', $url_attributes);
  }
  return $element;
}

/**
 * Ensures menu items have proper classes
 *
 * Navbar doesn't always apply 'navbar-menu-item' which screws up theming.
 * This wraps the default tree processor and adds navbar-menu-item.
 *
 * @see navbar_menu_navigation_links()
 */
function _navbar_awesome_navigation_links(&$tree) {
  navbar_menu_navigation_links($tree);

  foreach ($tree as $key => $item) {
    $tree[$key]['link']['localized_options']['attributes']['class'][] = 'navbar-menu-item';
  }
}

/**
 * Returns modified Development menu tree
 *
 * Devel provides a large amount of menu items, here we restrict them to a few
 * of the useful ones.
 *
 * @todo: Allow this to be customized via UI.
 */
function navbar_awesome_devel_menu_tree() {
  $tree = menu_tree_all_data('devel');

  // @todo: Turn this array into config item.
  $display = array(
    'devel/cache/clear',
    'devel/entity/info',
    'devel/php',
    'devel/menu/item',
    'devel/reinstall',
    'devel/theme/registry',
  );

  foreach ($tree as $key => $item) {
    $link_path = $item['link']['link_path'];
    if (!in_array($link_path, $display)) {
      unset($tree[$key]);
    }
  }

  return $tree;
}
