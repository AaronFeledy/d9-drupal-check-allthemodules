<?php

/**
 * @file
 * The realm status API allows developers to retrieve realm status information.
 *
 * This information is limited to whether or not the realm is up, the type and
 * state of the realm and the current population.
 */

/**
 * Implements hook_entity_info().
 */
function wow_realm_entity_info() {
  $entities['wow_realm'] = array(
    'label' => t('Realm'),
    'entity class' => 'WoW\Realm\Entity\Realm',
    'controller class' => 'WoW\Realm\Entity\RealmStorageController',
    'service controller class' => 'WoW\Realm\Entity\RealmServiceController',
    'base table' => 'wow_realms',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'rid',
      'name' => 'name',
    ),
  );

  $entities['wow_battlegroup'] = array(
    'label' => t('Battle Group'),
    'entity class' => 'WoW\Core\Data\BattleGroup',
    'controller class' => 'WoW\Realm\Entity\BattleGroupStorageController',
    'data controller class' => 'WoW\Core\Data\BattleGroupServiceController',
    'base table' => 'wow_battlegroups',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
    )
  );

  return $entities;
}

/**
 * Implements hook_element_info().
 */
function wow_realm_element_info() {
  $types['wow_realm'] = array(
    '#input' => TRUE,
    '#size' => 36,
    '#maxlength' => 40,
    '#required' => TRUE,
    '#autocomplete_path' => 'wow/realm/autocomplete',
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('wow_realm_element_validate'),
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
  );

  return $types;
}

/**
 * Form element validation handler for wow_realm_textfield elements.
 */
function wow_realm_element_validate(&$element, &$form_state) {
  // TODO: use a RegEx.
  if (strpos($element['#value'], ']')) {
    // Explodes 'Archimonde [EU]' string into two separate variables.
    $name = drupal_substr($element['#value'], 0, drupal_strlen($element['#value']) - 5);
    $region = drupal_strtolower(drupal_substr($element['#value'], -3, -1));

    // Check the region is valid.
    if (array_key_exists($region, wow_service_info())) {
      // Check the realm name exists from the database.
      $values = db_select('wow_realms', 'r')
        ->fields('r')
        ->condition('region', $region)
        ->condition('name', $name)
        ->execute()

        // Can't do that in Drupal7, else it throws Cannot create an instance of
        // Entity without a specified entity type exception.
        // TODO: put it back in Drupal8 ;)
        //->fetchObject('WoWRealm');

        ->fetchAssoc();

      if ($values) {
        // Set the variables name and region.
        $form_state['values'][$element['#name']] = entity_create('wow_realm', $values);
      }
      else {
        form_error($element, t('The realm name does not exist.'));
      }
    }
    else {
      form_error($element, t('The realm region does not exist.'));
    }
  }
  else {
    form_error($element, t('The realm name is not valid.'));
  }
}

/**
 * Implements hook_menu().
 */
function wow_realm_menu() {
  $items = array();

  $items['wow/realm/autocomplete'] = array(
    'title' => 'Realm autocomplete',
    'page callback' => 'wow_realm_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'wow_realm.inc',
  );

  // Realm entity configuration.
  $items['admin/config/wow/realm'] = array(
    'title' => 'Realm services',
    'description' => 'Start, Stop and Install realm services.',
    'page callback' => 'wow_realm_admin_settings',
    'access arguments' => array('administer site configuration'),
    'file' => 'wow_realm.admin.inc',
  );

  // Realm entity operations.
  $items['admin/config/wow/realm/%/refresh'] = array(
    'title' => 'Refresh realms',
    'description' => 'Performs a full refresh from battle.net API.',
    'page callback' => 'wow_realm_admin_refresh',
    'page arguments' => array(4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer site configuration'),
    'file' => 'wow_realm.admin.inc',
  );
  $items['admin/config/wow/realm/%/stop'] = array(
    'title' => 'Stops realm service',
    'description' => 'Stops the realm service from fetching information.',
    'page callback' => 'wow_realm_admin_stop',
    'page arguments' => array(4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer wow realm'),
    'file' => 'wow_realm.admin.inc',
  );
  $items['admin/config/wow/realm/%/start'] = array(
    'title' => 'Starts realm service',
    'description' => 'Start fetching information from battle.net API.',
    'page callback' => 'wow_realm_admin_start',
    'page arguments' => array(4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer wow realm'),
    'file' => 'wow_realm.admin.inc',
  );
  $items['admin/config/wow/realm/%/edit'] = array(
    'title' => 'Edit realm service',
    'description' => 'Set configuration such as refresh period.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_realm_admin_edit', 4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer wow realm'),
    'file' => 'wow_realm.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function wow_realm_help($path, $arg) {
  switch ($path) {
    case 'admin/config/wow/realm':
      return '<p>' . t('This page is a dashboard for Realm services. You can Start, Stop or Install a service; Once started, the service will periodically fetch realm data for the specified region and update the local database with fresh information from battle.net API. Each service behaves like an entity type, when you instanciates a realm, it will be bundled with its region and controlled by the service. This allows each region to have its own settings (the refresh rate for instance).') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function wow_realm_permission() {
  return array(
    'administer wow realm' => array(
      'title' => t('Administer realm services'),
      'description' => t('Start, Stop and Install realm services.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_cron().
 */
function wow_realm_cron() {
  // Long-running operation, leveraging a queue:
  // Fetch realms from battle.net API and update them.
  foreach (wow_service_info() as $region => $info) {
    $service = variable_get("wow_realm_service:$region", (object) array('status' => 'stopped', 'queued' => 0));

    // Loop over each running services.
    if ($service->status == 'running' && $service->queued == 0) {
      $result = db_select('wow_realm', 'realm')
        ->fields('realm', array('lastFetched'))
        ->condition('region', $region)
        ->execute()
        ->fetchAll(PDO::FETCH_COLUMN);

      if (REQUEST_TIME > max($result) + $service->threshold) {
        $queue = DrupalQueue::get('wow_realm');
        $queue->createItem($region);
        // Add queued flag to avoid queueing item more than once.
        $service->queued = 1;
        variable_set("wow_realm_service:$region", $service);
      }
    }
  }
}

/**
 * Refreshes a realm service.
 */
function wow_realm_service_refresh($region) {
  foreach (wow_service_controller('wow_realm')->fetchAll($region) as $realm) {
    $realm->save();
  }
  $service = variable_set("wow_realm_service:$region");
  $service->queued = 0;
  variable_set("wow_realm_service:$region", $service);
}

/**
 * Implements hook_cron_queue_info().
 */
function wow_realm_cron_queue_info() {
  $queues['wow_realm'] = array(
    'worker callback' => 'wow_realm_service_refresh',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_hook_info().
 */
function wow_realm_hook_info() {
  $hooks['wow_realm_presave'] = array(
    'group' => 'realm',
  );
  $hooks['wow_realm_insert'] = array(
    'group' => 'realm',
  );
  $hooks['wow_realm_update'] = array(
    'group' => 'realm',
  );
  $hooks['wow_realm_delete'] = array(
    'group' => 'realm',
  );

  return $hooks;
}

/**
 * Returns a formatted realm name: Archimonde [EU] for instance.
 *
 * @param Realm $realm
 *   A realm composed of at least region and name.
 */
function wow_realm_format($realm) {
  return check_plain($realm->name) . ' [' . drupal_strtoupper($realm->region) . ']';
}

/**
 * Entity uri callback.
 */
function wow_realm_uri(WoWRealm $realm) {
  return array('path' => "realm/$realm->region/$realm->slug");
}
