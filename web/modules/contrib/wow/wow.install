<?php

/**
 * @file
 * Install, update and uninstall functions for the wow module.
 */

/**
 * Implements hook_install().
 */
function wow_install() {
  db_insert('wow_services')
    ->fields(array(
      'language' => 'en',
      'name' => 'English',
      'native' => 'English',
      'region' => 'us',
      'locale' => 'en_US',
      'enabled' => 1,
      'weight' => 0,
    ))
    ->execute();
}

/**
 * Implements hook_schema().
 */
function wow_schema() {
  $schema['wow_services'] = array(
    'description' => 'List of all available services in the system.',
    'fields' => array(
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => "The {languages}.language foreign key.",
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => "Service's language name in English.",
      ),
      'native' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => "Service's native language name.",
      ),
      'region' => array(
        'type' => 'char',
        'length' => 2,
        'not null' => TRUE,
        'description' => "Service's region.",
      ),
      'locale' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'description' => "Service's locale.",
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Enabled flag (1 = Enabled, 0 = Disabled).',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Weight, used in lists of services.',
      ),
      'expires' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of name value pairs representing the expires value of data.',
      ),
    ),
    'foreign keys' => array(
      'language' => array(
        'table' => 'languages',
        'columns' => array('language' => 'language'),
      ),
    ),
    'primary key' => array('language'),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function wow_field_schema($field) {
  switch ($field['type']) {
    case 'wow_character_race':
      return array(
        'columns' => array(
          'name' => array(
            'type' => 'varchar',
            'length' => 32,
            'not null' => TRUE,
            'description' => "Character race's name.",
          ),
        ),
      );
    case 'wow_character_class':
      return array(
        'columns' => array(
          'name' => array(
            'type' => 'varchar',
            'length' => 32,
            'not null' => TRUE,
            'description' => "Character class's name.",
          ),
        ),
      );
    case 'wow_item':
      return array(
        'columns' => array(
          'name' => array(
            'description' => 'The name of this item.',
            'type' => 'varchar',
            'length' => 60,
            'not null' => TRUE,
            'default' => '',
          ),
          'description' => array(
            'description' => 'The description of this item.',
            'type' => 'varchar',
            'length' => 255,
            'not null' => TRUE,
            'default' => '',
          ),
        ),
      );
    default:
      return array();

  }
}

/**
 * Implements hook_uninstall().
 */
function wow_uninstall() {
  variable_del('wow_key');
  variable_del('wow_public_key');

  variable_del('wow_service_default');
}

/**
 * Implements hook_requirements.
 */
function wow_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  // Check dependencyinjection module is enabled before updating.
  if ($phase == 'update' && !module_exists('inject')) {
    // Flag the requirements as error to prevent the user updating the module.
    $requirements['wow'] = array(
      'title' => $t('World of Warcraft API'),
      'description' => $t('The !inject module is required.  Install and/or enable it to continue.', array('!inject' => l('Dependency Injection', 'http://drupal.org/project/dependencyinjection'))),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  // Check classloader module is enabled before updating.
  if ($phase == 'update' && !module_exists('classloader')) {
    // Flag the requirements as error to prevent the user updating the module.
    $requirements['wow'] = array(
      'title' => $t('World of Warcraft API'),
      'description' => $t('The !classloader module is required.  Install and/or enable it to continue.', array('!classloader' => l('Class Loader', 'http://drupal.org/project/classloader'))),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

/**
 * Implements hook_update_dependencies().
 */
function wow_update_dependencies() {
  // wow_update_7300() requires the entity module.
  $dependencies['wow'][7300] = array(
    'entity' => 7002,
  );

  return $dependencies;
}

/**
 * Clean-up unused variables.
 */
function wow_update_7300() {
  variable_del('wow_locale_default');
  variable_del('wow_region_default');

  db_change_field('wow_services', 'name', 'name',  array(
    'type' => 'varchar',
    'length' => 64,
    'not null' => TRUE,
    'default' => '',
    'description' => "Service's language name in English.",
  ));

  db_insert('wow_services')
    ->fields(array(
      'language' => 'en',
      'name' => 'English',
      'native' => 'English',
      'region' => 'us',
      'locale' => 'en_US',
      'enabled' => 1,
      'weight' => 0,
    ))
    ->execute();
}
