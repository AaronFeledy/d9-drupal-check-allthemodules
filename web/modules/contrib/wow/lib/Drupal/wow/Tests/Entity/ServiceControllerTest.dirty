<?php

/**
 * @file
 * Definition of Drupal\wow\Tests\Entity\ServiceControllerTest.
 */

namespace Drupal\wow\Tests\Entity;

use Drupal\wow\Entity\Remote;

/**
 * Test Entity service controller methods.
 */
class ServiceControllerTest extends \DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'EntityServiceController',
      'description' => 'Unit Tests for the entity service controller.',
      'group' => 'WoW',
    );
  }

  function setUp() {
    $base = drupal_get_path('module', 'wow');

    require_once $base . '/lib/WoW/Core/Response.php';
    require_once $base . '/lib/WoW/Core/Exception.php';

    require_once $base . '/lib/WoW/Core/Entity/Entity.php';
    require_once $base . '/lib/WoW/Core/Entity/EntityServiceController.php';

    require_once $base . '/lib/WoW/Core/Service/Service.php';
    require_once $base . '/lib/WoW/Core/Service/ServiceInterface.php';
    parent::setUp();

    $info = (object) array('host' => 'dummy', 'locales' => array());
    $services = &drupal_static('wow_service');
    $services['dummy'] = new WoWServiceRequestStub($info);
  }

  protected function tearDown() {
    drupal_static_reset('wow_service');

    parent::tearDown();
  }

  function testFetch() {
    $entity = new WoWEntityDummy();

    $controller = new WoWEntityServiceControllerTest('dummy');
    $response = $controller->fetch($entity);
    $this->assertEqual('Wed, 07 Jan 1970 06:53:30 GMT', $response->getHeader('If-Modified-Since'), 'Found If-Modified-Since header on request.', 'WoW');
    $this->assertEqual('/api/stub/remote/path', $response->getRequest(), 'Found path on request.', 'WoW');
  }

  function testFetchFields() {
    $entity = new EntityStub();
    $entity->lastModified = 543210;
    $entity->field1 = array('dummy');
    $entity->field2 = 'dummy';

    // Assert the If-Modified-Since header is correctly added to the request.
    $controller = new EntityServiceControllerStub('dummy');
    $response = $controller->fetch($entity, array('field1', 'field2'));
    $this->assertEqual('Wed, 07 Jan 1970 06:53:30 GMT', $response->getHeader('If-Modified-Since'), 'Found If-Modified-Since header on request.', 'WoW');
    $this->assertEqual('/api/stub/remote/path?fields=field1%2Cfield2', $response->getRequest(), 'Found fields parameter on request.', 'WoW');

    // Assert the If-Modified-Since header is not added to the request when
    // requiring a field that is not yet known by the storage.
    $controller = new EntityServiceControllerStub('dummy');
    $response = $controller->fetch($entity, array('field1', 'field2', 'field3'));
    $headers = $response->getHeaders();
    $this->assertTrue(empty($headers['If-Modified-Since']), 'If-Modified-Since header not on request.', 'WoW');
    $this->assertEqual('/api/stub/remote/path?fields=field1%2Cfield2%2Cfield3', $response->getRequest(), 'Found fields parameter on request.', 'WoW');
  }
}

class WoWEntityDummy extends Remote {
  public function __construct() {
    $this->region = 'dummy';
  }
}
class WoWEntityServiceControllerTest extends WoWEntityServiceController {}

class WoWServiceRequestStub extends WoWService implements WoWServiceInterface {

  public $code = 200;
  public $headers = array();
  public $data = '{"status":"ok","reason":"This is a Stub."}';

  public function request($path, array $query = array(), array $headers = array()) {
    return new Response((object) array(
      'code' => $this->code,
      'protocol' => 'HTTP/1.1',
      'request' => url("wow/api/$path", array('query' => $query)),
      'headers' => $this->headers,
      'data' => $this->data,
    ));
  }
}
