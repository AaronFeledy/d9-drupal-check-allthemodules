<?php

/**
 * @file
 * Contains section_workflow.module..
 */

use Drupal\section_workflow\SectionsConfig;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\section_workflow;
use Drupal\Core\Url;
use Drupal\Core\Entity;
use Drupal\Core\Render\Element;
use Drupal\menu_link_content;

/**
 * Implements hook_install().
 */
function section_workflow_install() {
  $section_workflow_service = \Drupal::service('section_workflow.sections_config');
  $section_workflow_service->CreateSectionWorkflowField();
}

/**
 * Implements hook_uninstall().
 */
function section_workflow_uninstall() {
}

/**
 * Implements hook_help().
 */
function section_workflow_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the section_workflow module.
    case 'help.page.section_workflow':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Section based, Editor workflow and content management.') . '</p>';
      $output .= '<p>' . t('To make content editing an intuitive experience for editors, while in the back-end auto creating relationship between the content in the back-end that can be re-used for other purposes and modules e.g. Workbench access.') . '</p>';
      $output .= '<h3>' . t('How') . '</h3>';
      $output .= '<dl>';
      $output .= '<dl>' . t('A desired section of content is described via a "section" config file.') . '</dl>';
      $output .= '<dl>' . t('Within a section, contextual links are made available to editors to Add content and Administer.') . '</dl>';
      $output .= '<dl>' . t('Any number of section config files can be created.') . '</dl>';
      $output .= '<dl>' . t('New sections can be initiated from the main content page (admin/content) page via the link "New section".') . '</dl>';
      $output .= '<dl>' . t('Section config files among other config, store a hierarchy of content types and how they structurally belong together.') . '</dl>';
      $output .= '<dl>' . t('Each content type within a config is defined as one the following "section" types: Landing (can be parents of other Landing section types and Page section types), Page section type (Can be parent of other Page section types), Listing (Can be tagged in more than one content types and across other sections too).') . '</dl>';
      $output .= '<dl>' . t('Other settings in the config helps to constrain content for example set a maximum number of content that can be created from a given context.') . '</dl>';
      $output .= '<dl>' . t('The content relationships are created in the back-end automatically using 1. Drupal Menu (Maintaining hierarchical relationship between Landing and Page section types), Section workflow taxonomy (grouping content and for tagging for Listing section types.') . '</dl>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dl>' . t('Plug and play, users can begin adding and editing content from site install.') . '</dl>';
      $output .= '<dl>' . t('Prevent editors from mistaking mistakes by controlling what they can and can not do.') . '</dl>';
      $output .= '<dl>' . t('Intuitive editing process.') . '</dl>';
      $output .= '<dl>' . t('Admin content on a "section by section" basis.') . '</dl>';
      $output .= '<dl>' . t('Utilise the content relationships with other other modules like Workbench access.') . '</dl>';
      $output .= '</dl>';


      return $output;

    default:
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hides the 'section' tabs if we are not in section context.
 */
function section_workflow_menu_local_tasks_alter(&$data, $route_name) {
  $node_id = \Drupal::routeMatch()->getRawParameter('node');
  $node_workflow_service = \Drupal::service('section_workflow.section_node');
  if ($node_workflow_service->getIfNIDInSection($node_id) == FALSE) {
    unset($data['tabs'][0]['section_workflow.addToSection']);
    unset($data['tabs'][0]['section_workflow.admin_section_node']);
  }
}

/**
 * Form submission handler for new section nodes().
 */
function section_workflow_section_insert_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $node_workflow_service = \Drupal::service('section_workflow.section_node');
  $node_workflow_service->formAction($form_state);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Loads section workflow configuration for the node context according to the
 * section config and take the according action.
 *
 */
function section_workflow_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $node_workflow_service = \Drupal::service('section_workflow.section_node');

  // Check if we are in a section and load section workflow configuration.
  $node_workflow_service->formAction($form_state);
  if ($node_workflow_service->inSection == TRUE) {
    // Alters based on Section type.
    switch ($node_workflow_service->contentSection['section_type']) {
      // Ensure that the user can only map one section to a landing or page node.
      case $node_workflow_service::SECTION_TYPE_LANDING:
      case $node_workflow_service::SECTION_TYPE_PAGE:
      case $node_workflow_service::SECTION_TYPE_LANDING:
        if (isset($form[$node_workflow_service::SECTION_FIELD_NAME])) {
          $form[$node_workflow_service::SECTION_FIELD_NAME]['widget']['#multiple'] = FALSE;
        }
        break;
      case $node_workflow_service::SECTION_TYPE_LISTING:
        // At least for the time being only Listing section types can appear more
        // than once, but thing could be different so we are sharing the field
        // but only allowing multiple for Listing types.
        if (isset($form[$node_workflow_service::SECTION_FIELD_NAME])) {
          $form[$node_workflow_service::SECTION_FIELD_NAME]['widget']['#multiple'] = TRUE;
        }
      default:
    }

    // Alters based on Context.
    switch ($node_workflow_service->updateMode) {
      // Main module help for the section_workflow module.
      case $node_workflow_service::CONTEXT_NEW_SECTION:
      case $node_workflow_service::CONTEXT_INSERT:
        // We are going to be overriding the menu so lets disable user access.
        $form['menu']['link'] = array(
          '#type' => 'container',
          '#states' => array(
            'invisible' => array(
              'input[name="menu[enabled]"]' => array('checked' => FALSE),
            ),
          ),
        );

        // We want to take control of the population of this field in the back-
        // end, so let's hide it from the user.
        if (isset($form[$node_workflow_service::SECTION_FIELD_NAME])
          && $node_workflow_service::SECTION_TYPE_LISTING !== $node_workflow_service->contentSection['section_type']) {
          $form[$node_workflow_service::SECTION_FIELD_NAME]['#type'] = 'hidden';
        }

        // Custom submit function.
        _defaultFormSubmitAndValidateSettings($form, 'section_workflow_section_insert_form_submit');
        break;
      default:
    }
  }
}

/**
 * Instantiate custom submit handlers.
 *
 */
function _defaultFormSubmitAndValidateSettings(&$form, $submit_function = '', $validate_function = '') {
  // Set additional validate and submit functions for new section root.
  if ($validate_function !== '') {
    $form['#validate'][] = $validate_function;
  }
  if ($submit_function !== '') {
    $form['actions']['submit']['#submit'][] = $submit_function;
    foreach (array_keys($form['actions']) as $action) {
      if (isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = $submit_function;
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for node entities.
 */
function section_workflow_node_delete($node) {
  $node_workflow_service = \Drupal::service('section_workflow.section_node');
  $node_workflow_service->section_workflow_node_delete($node);
}

/**
 * Implements hook_theme().
 */
function section_workflow_theme() {
  return array(
    'section_add_content' => array(
      'variables' => array(
        'content' => NULL,
        'title' => NULL,
        'parent_nid' => NULL,
      ),
    ),
    'section_add_section' => array(
      'variables' => array(
        'content' => NULL,
        'parent_nid' => NULL,
      ),
    ),
    'section_admin_node' => array(
      'variables' => array(
        'content' => NULL,
        'parent_nid' => NULL,
      ),
    ),
  );
}

/**
 * Prepares variables for list of available node type templates.
 *
 * Default template: node-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 *
 * @see node_add_page()
 */
function template_preprocess_section_add_content(&$variables) {
  $variables['types'] = array();
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $key => $type) {
      $route_options = array(
        'node_type' => $type['content_type'],
        'parent_nid' => $variables['parent_nid'],
        'key' => $type['context_key_name'],
      );

      // If we are adding a node reference then it makes sense to redirect the
      // user back to main page.
      if ($type['section_type'] == SectionsConfig::SECTION_TYPE_LISTING
      || $type['section_type'] == SectionsConfig::SECTION_TYPE_REFERENCE) {
        $route_options['destination'] = '/node/' . $variables['parent_nid'];
      }

      // Set up main vars from config per content the user can add from this level.
      $variables['types'][$key] = array(
        'type' => $type['content_type'],
        'add_link' => \Drupal::l(ucfirst(str_replace('_', ' ', $type['context_key_name'])) . ' [' . $type['content_type'] . ']',
          new Url(
            'node.add', $route_options
          )
        ),
        'description' => array(
          '#markup' => $type['context_key_description'],
        ),
      );
    }
  }


  // Get parent node details, that we can also give the option to add node's from
  // a level above too.
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $menu_link = $menu_link_manager->loadLinksByRoute('entity.node.canonical', array('node' => $variables['parent_nid']));
  // Proceed if this node has a menu item.
  if (is_array($menu_link) && count($menu_link)) {
    $menu_link = reset($menu_link);

    // Load parent using the menu.
    $parent = $menu_link->getParent();
    if (!empty($parent)){
      $menu_link = \Drupal::service('plugin.manager.menu.link')->createInstance($parent);
      $plugin_defs = $menu_link->getPluginDefinition();
      $parent_nid = isset($plugin_defs['route_parameters']['node']) ? $plugin_defs['route_parameters']['node'] : NULL;
    }
    if (!is_null($parent_nid)) {
      // Create a URL parent node.
      $title = $plugin_defs['title'];
      $route_options = array(
        'node' => $parent_nid,
      );

      //$link = $link->getGeneratedLink();
      $variables['parent'] = array(
        'view_link' => \Drupal::l('View: ' . $title,
          new Url(
            'section_workflow.nodeview', $route_options
          )
        ),
        'add_link' => \Drupal::l('Add content to: ' . $title,
          new Url(
            'section_workflow.addToSection', $route_options
          )
        ),
        'admin_link' => \Drupal::l('Administer: ' . $title,
          new Url(
            'section_workflow.section_admin_node', $route_options
          )
        ),
        'title' => $title,
        'nid' => $parent_nid,
      );
    }
  }
}

/**
 * Prepares variables for list of available node type templates.
 *
 * Default template: node-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 *
 * @see node_add_page()
 */
function template_preprocess_section_add_section(&$variables) {
  $variables['types'] = array();
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $landing_key => $type) {
      $variables['types'][$landing_key] = array(
        'type' => $landing_key,
        'add_link' => \Drupal::l($type['config_label'] . ' [' . $type['content_type'] . ']',
          new Url(
            'node.add', array(
              'node_type' => $type['content_type'],
              'config_key' => $type['config_key'],
              'parent_nid' => 'add',
            )
          )
        ),
        'description' => array(
          '#markup' => $type['context_description'],
        ),
      );
    }
  }

  /**
   * Prepares variables for section admin context page.
   *
   * Default template: section-admin-node.html.twig.
   *
   * @param array $variables
   *   An associative array containing:
   *   - content: An array of content types.
   *
   * @see node_add_page()
   */
  function template_preprocess_section_admin_node(&$variables) {
    // @TODO
  }

}