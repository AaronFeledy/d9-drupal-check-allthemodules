<?php

/**
 * @file
 * Contains erf.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function erf_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the entity_registration_form module.
    case 'help.page.erf':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide an interface and service to create registration forms and attach them to entities') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function erf_toolbar_alter(&$items) {
  $items['administration']['#attached']['library'][] = 'erf/toolbar';
}

/**
 * Implements hook_theme().
 */
function erf_theme() {
  $theme = [];
  $theme['registration'] = [
    'render element' => 'elements',
    'file' => 'registration.page.inc',
    'template' => 'registration',
  ];
  $theme['registration_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'registration.page.inc',
  ];
  $theme['participant'] = [
    'render element' => 'elements',
    'file' => 'participant.page.inc',
    'template' => 'participant',
  ];
  $theme['participant_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'participant.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function erf_theme_suggestions_registration(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#registration'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'registration__' . $sanitized_view_mode;
  $suggestions[] = 'registration__' . $entity->bundle();
  $suggestions[] = 'registration__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'registration__' . $entity->id();
  $suggestions[] = 'registration__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function erf_theme_suggestions_participant(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#participant'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'participant__' . $sanitized_view_mode;
  $suggestions[] = 'participant__' . $entity->bundle();
  $suggestions[] = 'participant__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'participant__' . $entity->id();
  $suggestions[] = 'participant__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_bundle_create().
 */
function erf_entity_bundle_create($entity_type_id, $bundle) {
  // Configure an 'embedded' form display for each new registration type.
  if ($entity_type_id == 'registration' && !\Drupal::isConfigSyncing()) {
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
    $form_display = $storage->load('registration.' . $bundle . '.embedded');

    if (!$form_display) {
      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
      $form_display = $storage->create([
        'targetEntityType' => 'registration',
        'bundle' => $bundle,
        'mode' => 'embedded',
        'status' => TRUE,
      ]);

      // Hide the locked and user_id base fields by default.
      $form_display->removeComponent('locked');
      $form_display->removeComponent('user_id');
      $form_display->save();
    }
  }

  // Create an 'inline' form display for each new participant type.
  if ($entity_type_id == 'participant' && !\Drupal::isConfigSyncing()) {
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
    $form_display = $storage->load('participant.' . $bundle . '.inline');

    if (!$form_display) {
      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
      $form_display = $storage->create([
        'targetEntityType' => 'participant',
        'bundle' => $bundle,
        'mode' => 'inline',
        'status' => TRUE,
      ]);
      // Hide the uid by default.
      $form_display->removeComponent('uid');
      $form_display->save();
    }
  }
}

/**
 * Implements hook_user_login().
 *
 * Assign anonymous user registrations to the logged-in account.
 */
function erf_user_login($account) {
  $registration_ids = \Drupal::service('erf.session')->getRegistrationIds();
  $registration_storage = \Drupal::service('entity_type.manager')->getStorage('registration');
  $registrations = $registration_storage->loadMultiple($registration_ids);

  foreach ($registrations as $registration) {
    $registration->setOwnerId($account->id());
    $registration->save();
  }
}
