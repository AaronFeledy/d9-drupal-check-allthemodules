<?php

/**
 * @file
 * Cards.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Apply the attributes to a card.
 *
 * @param object $card
 *   Card.
 * @param string $type
 *   Type.
 *
 * @return array
 *   Attributes array.
 */
function _card_attributes($card, $entity) {

    $attributes = [];

    $attributes['class'][] = 'cards';
    $attributes['class'][] = 'cards--' . $entity->bundle();
    $attributes['class'][] = 'cards--' . str_replace('_', '-', $card->target_type);
    $attributes['class'][] = 'cards--' . str_replace($card->target_type . '.', '', str_replace('_', '-', $card->view_mode));
    $attributes['class'][] = '' . $card->group_1;
    $attributes['class'][] = '' . $card->group_2;
    $attributes['class'][] = '' . $card->group_3;
    $attributes['class'][] = '' . $card->group_4;

    \Drupal::moduleHandler()->alter('card_attributes', $attributes, $card, $entity);

    foreach (array_keys(array_filter($card->adhoc)) as $class) {
        $attributes['class'][] = $class;
    }

    return $attributes;
}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function cards_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
    if (isset($entity->card)) {
        $build['#cache']['contexts'][] = 'cards';
    }
}

/**
 * Implements hook_theme().
 */
function cards_theme($existing, $type, $theme, $path) {
    return [
        'entity_embed_container__card' => [
            'base hook' => 'entity_embed_container',
        ],
        'block_content' => [
            'render element' => 'elements',
        ],
    ];
}

/**
 * Implements hook_TYPE_view_alter().
 */
function cards_media_view_alter(&$build) {

    // Make sure we are deal with media items created via cards.
    if ($card = $build['#media']->card) {

        // Add a theme wrapper to all media produced via cards.
        $build['#theme_wrappers'] = [
            'container' => [
                '#attributes' => _card_attributes($card, $build['#media']),
            ],
        ];

    }

}

/**
 * Implements hook_TYPE_view_alter().
 */
function cards_node_view_alter(&$build) {

    // Make sure we are deal with media items created via cards.
    if ($card = $build['#node']->card) {

        // Add a theme wrapper to all media produced via cards.
        $build['#theme_wrappers'] = [
            'container' => [
                '#attributes' => _card_attributes($card, $build['#node']),
            ],
        ];

    }
}

/**
 * Implements hook_block_content_view_alter().
 */
function cards_block_content_view_alter(&$build, $block_content) {
    if ($card = $build['#block_content']->card) {
        $build['#theme'] = 'block_content';
        $build['#theme_wrappers'] = [
            'container' => [
                '#attributes' => _card_attributes($card, $build['#block_content']),
            ],
        ];
    }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cards_theme_suggestions_block_content(array $variables) {
    $suggestions = [];
    $block_content = $variables['elements']['#block_content'];

    $suggestions[] = 'block_content__' . $block_content->bundle();


    $suggestions[] = 'block_content__' . $block_content->bundle() . '__' .  $variables['elements']['#view_mode'];
    return $suggestions;
}

/**
 * Preprocess function for block content template.
 */
function template_preprocess_block_content(&$variables) {
    $variables['content'] = [];
    if (isset($variables['elements']['_layout_builder'])) {
        $variables['content'][] = $variables['elements']['_layout_builder'];
    }
    else {
        $content = [];
        foreach (Element::children($variables['elements']) as $key) {
            $content[$key] = $variables['elements'][$key];
        }
        $variables['content'] = $content;
    }

}