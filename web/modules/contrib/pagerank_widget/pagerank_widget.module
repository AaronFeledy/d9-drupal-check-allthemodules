<?php

/**
 * @file
 * A configurable module defined block.
 */

use Drupal\Core\Template\Attribute;

/**
 * Implements hook_menu().
 */
function pagerank_widget_menu() {
  $items['admin/config/system/pagerank_widget'] = array(
    'title' => 'PageRank',
    'description' => 'PageRank Widget settings.',
    'route_name' => 'pagerank_widget_settings',
    'access arguments' => array('administer site configuration'),
    'weight' => 100,
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Called every time the Drupal cron runs. Grabs the pagerank ratio from
 * Google to store in the variable 'ratio' till next cron run.
 */
function pagerank_widget_cron() {
  $interval = Drupal::config('pagerank_widget.settings')->get('interval');
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= Drupal::config('pagerank_widget.settings')->get('next_execution')) {
    global $base_url;
    $url = $base_url;
    Drupal::config('pagerank_widget.settings')->set('ratio', pr_widget_pagerank($url));
   // Leave a message in the log.
    $text = 'PageRank ratio updated successfully and reported to be '. Drupal::config('pagerank_widget.settings')->get('ratio');
    watchdog('pagerank_widget', $text);
  }
  // Set the next time this hook_cron should be invoked.
  Drupal::config('pagerank_widget.settings')->set('next_execution', time() + $interval);
}

/**
 * Implements hook_theme().
 */
function pagerank_widget_theme() {
  return array(
    'pagerank_widget_fancy_block' => array(
      'template' => 'pagerank-widget-fancy-block'
    ),
  );
}

/**
 * Prepares variables for test block templates.
 *
 * Default template: pagerank-widget-fancy-block.html.twig.
 *
 * All non-renderable elements are removed so that the template has full access
 * to the structured data but can also simply iterate over all elements and
 * render them (as in the default template).
 *
 * @param array $variables
 *   An associative array containing the following key:
 */
function template_preprocess_pagerank_widget_fancy_block(&$variables) {
  global $base_url;
  drupal_add_css(drupal_get_path('module', 'pagerank_widget') . '/css/pagerank.css', array('group' => CSS_AGGREGATE_DEFAULT, 'every_page' => TRUE));
  $variables['enabled'] = Drupal::config('pagerank_widget.settings')->get('enabled');
  $variables['string'] = Drupal::config('pagerank_widget.settings')->get('string');
  $variables['ratio'] = Drupal::config('pagerank_widget.settings')->get('ratio');
  $variables['suffix'] = Drupal::config('pagerank_widget.settings')->get('suffix');
  $variables['link'] = Drupal::config('pagerank_widget.settings')->get('link');
  $variables['baseurl'] = parse_url($base_url, PHP_URL_HOST);
  $variables['notice_enabled'] = Drupal::config('pagerank_widget.settings')->get('notice_enabled');
  $variables['host'] = Drupal::config('pagerank_widget.settings')->get('url_name');
  $year = Drupal::config('pagerank_widget.settings')->get('year');
  $variables['notice'] = ' ' . Drupal::config('pagerank_widget.settings')->get('prepend') . ' Â© ' . (($year != date('Y') && !empty($year)) ? $year . '-' . date('Y') : date('Y'));
}

/**
 * Generating hash to validate querying Google.
 */
function pr_widget_genhash($url) {
  $hash = "Mining PageRank is AGAINST GOOGLE'S TERMS OF SERVICE. Yes, I'm talking to you, scammer.";
  $c = 16909125;
  $length = drupal_strlen($url);
  $hashpieces = str_split($hash);
  $urlpieces = str_split($url);
  for ($d = 0; $d < $length; $d++) {
    $c = $c ^ (ord($hashpieces[$d]) ^ ord($urlpieces[$d]));
    $c = (($c >> 23) & 0x1ff) | $c << 9;
  }
  $c = -(~($c & 4294967295) + 1);
  return '8' . dechex($c);
}

/**
 * Grab the PageRank querying Google.
 */
function pr_widget_pagerank($url) {
  $googleurl = 'http://toolbarqueries.google.com/tbr?client=navclient-auto&ch=' . pr_widget_genhash($url) . '&features=Rank&q=info:' . urlencode($url);
  if (function_exists('curl_init')) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_URL, $googleurl);
    $out = curl_exec($ch);
    curl_close($ch);
  }
  else {
    $out = check_plain(file_get_contents($googleurl));
  }
  if (drupal_strlen($out) > 0 && drupal_strlen($out) < 12) {
    return trim(drupal_substr(strrchr($out, ':'), 1));
  }
  else {
    if (drupal_strlen($out) > 11) {
      return 'Invalid URL: ' . $url;
    }
    else {
      return 'NA';
    }
  }
}

