<?php

use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\system\Entity\Action;

/**
 * Implements hook_theme().
 */
function entity_base_theme() {
  return array(
    'entity_base' => array(
      'render element' => 'elements',
    ),
    'entity_base_add_list' => array(
      'variables' => array('content' => NULL, 'entity_type_id' => NULL),
    ),
  );
}

/**
 * Implements hook_entity_access().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $op
 * @param $account
 * @return $this|\Drupal\Core\Access\AccessResult
 */
function entity_base_entity_access(EntityInterface $entity, $op, $account) {
  $typeId = $entity->getEntityTypeId();
  $types = entity_base_types();

  if (array_key_exists($typeId, $types)) {
    $bundle = $entity->bundle();

    switch ($op) {
      case 'create':
        if ($bundle) {
          return AccessResult::allowedIfHasPermission($account, 'create ' . $bundle . ' ' . $typeId);
        }
        else {
          return AccessResult::allowedIfHasPermission($account, 'create ' . $typeId);
        }

      case 'update':
        if ($bundle) {
          if ($account->hasPermission('edit any ' . $bundle . ' ' . $typeId, $account)) {
            return AccessResult::allowed()->cachePerPermissions();
          }
          else {
            return AccessResult::allowedIf($account->hasPermission('edit own ' . $bundle . ' ' . $typeId, $account) && ($account->id() == $entity->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
          }
        }
        else {
          if ($account->hasPermission('edit any ' . $typeId, $account)) {
            return AccessResult::allowed()->cachePerPermissions();
          }
          else {
            return AccessResult::allowedIf($account->hasPermission('edit own ' . $typeId, $account) && ($account->id() == $entity->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
          }
        }

      case 'delete':
        if ($bundle) {
          if ($account->hasPermission('delete any ' . $bundle . ' ' . $typeId, $account)) {
            return AccessResult::allowed()->cachePerPermissions();
          }
          else {
            return AccessResult::allowedIf($account->hasPermission('delete own ' . $bundle . ' ' . $typeId, $account) && ($account->id() == $entity->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
          }
        }
        else {
          if ($account->hasPermission('delete any ' . $typeId, $account)) {
            return AccessResult::allowed()->cachePerPermissions();
          }
          else {
            return AccessResult::allowedIf($account->hasPermission('delete own ' . $typeId, $account) && ($account->id() == $entity->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
          }
        }

//      case 'view':
//        if ($bundle) {
//          if ($account->hasPermission('view any ' . $bundle . ' ' . $typeId, $account)) {
//            return AccessResult::allowed()->cachePerPermissions();
//          }
//          else {
//            return AccessResult::allowedIf($account->hasPermission('view own ' . $bundle . ' ' . $typeId, $account) && ($account->id() == $entity->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
//          }
//        }
//        else {
//          if ($account->hasPermission('view any ' . $typeId, $account)) {
//            return AccessResult::allowed()->cachePerPermissions();
//          }
//          else {
//            return AccessResult::allowedIf($account->hasPermission('view own ' . $typeId, $account) && ($account->id() == $entity->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
//          }
//        }

      default:
        // No opinion.
        return AccessResult::neutral();
    }
  }
  else {
    return AccessResult::neutral();
  }

}

/**
 * Implements hook_entity_type_alter().
 *
 * @param array $entity_types
 */
function entity_base_entity_type_alter(&$entity_types) {

//  foreach ($entity_types as $entity_type) {
//    if (isset($entity_type->get('additional')['entity_base'])) {
//      // Add actions.
//      $delete_multiple_id = 'entity_action.' . $entity_type->get('id') . '.multiple_delete_confirm';
//      if (!Action::load($delete_multiple_id)) {
//        $action = Action::create(array(
//          'id' => $delete_multiple_id,
//          'type' => 'user',
//          'label' => t('Delete selected entities'),
//          'configuration' => array(
//            'entity_type' => $entity_type->get('id'),
//          ),
//          'plugin' => 'entity_base_delete_multiple_action',
//        ));
//        $action->trustData()->save();
//      }
//    }
//  }

}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * @param array $links
 */
function entity_base_menu_links_discovered_alter(&$links) {
  $entityBaseTypes = entity_base_types();

  foreach($entityBaseTypes as $entityType => $entityDefinition) {
    $entityDefinitionAdditional = $entityDefinition->get('additional');

    // Add admin link.
    if (isset($entityDefinitionAdditional['entity_base']['menu']['admin']['route'])) {
      $links[$entityDefinitionAdditional['entity_base']['menu']['admin']['route']] = array(
        'id' => $entityDefinitionAdditional['entity_base']['menu']['admin']['route'],
        'title' => $entityDefinitionAdditional['entity_base']['names']['label_plural'],
        'route_name' => $entityDefinitionAdditional['entity_base']['menu']['admin']['route'],
        'description' => new TranslatableMarkup('Manage of ' . $entityDefinitionAdditional['entity_base']['names']['label_plural'] . '.'),
        'parent' => $entityDefinitionAdditional['entity_base']['menu']['admin']['parent'],
        'provider' => 'entity_base',
      );
    }

    // Add link for "Current" workflow.
    if (isset($entityDefinitionAdditional['entity_base']['workflows']['current']) && $entityDefinitionAdditional['entity_base']['workflows']['current']) {
      // Add link.
      $links['entity.' . $entityType . '.current'] = array(
        'id' => 'entity.' . $entityType . '.current',
        'title' => new TranslatableMarkup('Set current'),
        'route_name' => $entityDefinition->get('links')['current'],
        'description' => new TranslatableMarkup('Set as current.'),
        'parent' => $entityDefinition->get('links')['canonical'],
        'provider' => 'entity_base',
      );
    }

    // Add actions.
    if ($entityDefinition->hasLinkTemplate('delete-multiple-form')) {
      $delete_multiple_id = $entityDefinition->get('id') . '.multiple_delete_confirm';
      if (!$action = Action::load($delete_multiple_id)) {
        $action = Action::create(array(
          'id' => $delete_multiple_id,
          'type' => $entityDefinition->get('id'),
          'label' => t('Delete entities'),
          'configuration' => array(
            'entity_type' => $entityDefinition->get('id'),
          ),
          'plugin' => 'entity_delete_action:'.$entityDefinition->get('id'),
        ));
        $action->trustData()->save();
      }
      else {
        $action->delete();

        $action = Action::create(array(
          'id' => $delete_multiple_id,
          'type' => $entityDefinition->get('id'),
          'label' => t('Delete entities'),
          'configuration' => array(
            'entity_type' => $entityDefinition->get('id'),
          ),
          'plugin' => 'entity_delete_action:'.$entityDefinition->get('id'),
        ));
        $action->trustData()->save();
      }
    }

  }

}

/**
 * Implements hook_local_tasks_alter().
 * Alter local tasks plugins.
 *
 * @param array $local_tasks
 *   The array of local tasks plugin definitions, keyed by plugin ID.
 *
 * @deprecated
 */
function entity_base_local_tasks_alter(&$local_tasks) {
  $entity_base_types = entity_base_types();
  foreach($entity_base_types as $entity_base_type) {
    $entity_base_definition = $entity_base_type->get('additional')['entity_base'];

    // Add local tasks for derivatives of the EntityBaseSimple.
//    if($entity_base_definition['entity'] == 'simple') {
//
//      // Entities list.
//      $local_tasks[$entity_base_type->id() . '.admin_list_tab'] = array(
//        'id' => $entity_base_type->id() . '.admin_list_tab',
//        'title' => $entity_base_definition['names']['label_plural'],
//        'class' => 'Drupal\Core\Menu\LocalTaskDefault',
//        'route_name' => $entity_base_definition['menu']['admin'],
//        'base_route' => $entity_base_definition['menu']['admin'],
//        'options' => array(),
//      );
//
//    }

    // Add local tasks for derivatives of the EntityBaseGeneric.
    if($entity_base_definition['entity'] == 'generic') {
      $entity_base_bundle = \Drupal::service('entity_type.manager')->getDefinition($entity_base_type->get('bundle_entity_type'));
      $entity_base_bundle_definition = $entity_base_bundle->get('additional')['entity_base_type'];

      // Entities list.
//      $local_tasks[$entity_base_type->id() . '.admin_list_tab'] = array(
//        'id' => $entity_base_type->id() . '.admin_list_tab',
//        'title' => $entity_base_definition['names']['label_plural'],
//        'class' => 'Drupal\Core\Menu\LocalTaskDefault',
//        'route_name' => $entity_base_definition['menu']['admin'],
//        'base_route' => $entity_base_definition['menu']['admin'],
//        'options' => array(),
//      );

      // Entity types list.
      $local_tasks[$entity_base_bundle->id() . '.admin_list_tab'] = array(
        'id' => $entity_base_bundle->id() . '.admin_list_tab',
        'title' => $entity_base_bundle_definition['names']['label_plural'],
        'class' => 'Drupal\Core\Menu\LocalTaskDefault',
        'route_name' => $entity_base_bundle_definition['menu']['admin']['route'],
        'base_route' => $entity_base_definition['menu']['admin']['route'],
        'options' => array(),
      );

      // Manage of Entity type.
      $local_tasks['entity.' . $entity_base_bundle->id() . '.edit_form'] = array(
        'id' => 'entity.' . $entity_base_bundle->id() . '.edit_form',
        'title' => t('Settings'),
        'class' => 'Drupal\Core\Menu\LocalTaskDefault',
        'route_name' => 'entity.' . $entity_base_bundle->id() . '.edit_form',
        'base_route' => 'entity.' . $entity_base_bundle->id() . '.edit_form',
        'options' => array(),
      );

    }
  }

}

/**
 * Implements hook_menu_local_actions_alter().
 *
 * @param $local_actions
 */
function entity_base_menu_local_actions_alter(&$local_actions) {
  $entity_base_types = entity_base_types();
  foreach ($entity_base_types as $entity_base_type) {
    $entity_base_definition = $entity_base_type->get('additional')['entity_base'];

    // Add local actions for derivatives of the EntityBaseSimple.
    if($entity_base_definition['entity'] == 'simple') {
      // "Add entity" link.
      $local_actions['entity.' . $entity_base_type->id() . '.admin.create'] = [
        'route_name' => 'entity.' . $entity_base_type->id() . '.add_form',
        'route_parameters' => [],
        'title' => 'Add ' . $entity_base_definition['names']['label'],
        'class' => 'Drupal\Core\Menu\LocalActionDefault',
        'provider' => 'entity_base',
        'options' => [],
        'weight' => NULL,
        'appears_on' => [$entity_base_definition['menu']['admin']['route']],
      ];
    }

    // Add local actions for derivatives of the EntityBaseGeneric.
    if($entity_base_definition['entity'] == 'generic') {
      $entity_base_bundle = \Drupal::service('entity_type.manager')->getDefinition($entity_base_type->get('bundle_entity_type'));
      $entity_base_bundle_definition = $entity_base_bundle->get('additional')['entity_base_type'];

      // "Add entity" link.
      $local_actions['entity.' . $entity_base_type->id() . '.admin.add_page'] = [
        'route_name' => $entity_base_type->id() . '.add_page',
        'route_parameters' => [],
        'title' => t('Add ' . $entity_base_definition['names']['label']),
        'class' => 'Drupal\Core\Menu\LocalActionDefault',
        'provider' => 'entity_base',
        'options' => [],
        'weight' => NULL,
        'appears_on' => [$entity_base_definition['menu']['admin']['route']],
      ];

      // "Add entity type" link.
      $local_actions['entity.' . $entity_base_bundle->id() . '.admin.add'] = [
        'route_name' => 'entity.' . $entity_base_bundle->id() . '.add_form',
        'route_parameters' => [],
        'title' => t('Add ' . $entity_base_bundle_definition['names']['label']),
        'class' => 'Drupal\Core\Menu\LocalActionDefault',
        'provider' => 'entity_base',
        'options' => [],
        'weight' => NULL,
        'appears_on' => [$entity_base_bundle_definition['menu']['admin']['route']],
      ];

    }
  }
}

/**
 * Helper function returns all "entity base" types.
 */
function entity_base_types() {
  $cid = 'entity_base:types';
  $entity_base_types = array();
  if ($cache = \Drupal::cache()->get($cid)) {
    $entity_base_types = $cache->data;
  }
  else {
    $types = \Drupal::entityTypeManager()->getDefinitions();
    foreach($types as $type) {
      if(isset($type->get('additional')['entity_base'])) {
        $entity_base_types[$type->id()] = $type;
      }
    }
    \Drupal::cache()->set($cid, $entity_base_types, Cache::PERMANENT, array('entity_base', 'entity_base_types'));
  }

  return $entity_base_types;
}

/**
 * Prepares variables for entity templates.
 *
 * Default template: entity-base.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - entity: The entity object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_entity_base(&$variables) {
  // Entity type.
  $entity_type_id = $variables['elements']['#entity_type'];
  $variables['entity'] = $variables['elements']['#' . $entity_type_id];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';

  // Entity object.
  $entity = $variables['entity'];

  // Created and updated dates.
  $variables['created'] = \Drupal::service('renderer')->render($variables['elements']['created']);
  // $variables['updated'] = \Drupal::service('renderer')->render($variables['elements']['updated']);
  unset($variables['elements']['created']);
  // unset($variables['elements']['updated']);

  // Entity owner.
  $variables['owner_name'] = \Drupal::service('renderer')->render($variables['elements']['uid']);
  unset($variables['elements']['uid']);

  // Entity URL.
  $variables['url'] = $entity->url('canonical', array(
    'language' => $entity->language(),
  ));

  // Entity label.
  $variables['label'] = isset($variables['elements']['name']) ? $variables['elements']['name'] : '';
  unset($variables['elements']['name']);
  // The 'page' variable is set to TRUE in two occasions:
  //   - The view mode is 'full'.
  $variables['page'] = ($variables['view_mode'] == 'full');

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Add article ARIA role.
  $variables['attributes']['role'] = 'article';
}

/**
 * Prepares variables for list of available entity type templates.
 *
 * Default template: entity-base-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of entity types.
 */
function template_preprocess_entity_base_add_list(&$variables) {
  $variables['types'] = array();
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $type_info = $type->getEntityType();
      $entity_type = $type_info->get('bundle_of');
      $url = new Url('entity.' . $entity_type . '.add_form', array($type_info->id() => $type->id()));
      $variables['types'][$type->id()] = array(
        'type' => $type->id(),
        'label' => $type->label(),
        'url' => $url->toString(),
        'add_link' => Link::fromTextAndUrl($type->label(), new Url('entity.' . $entity_type . '.add_form', array($type_info->id() => $type->id()))),
        'description' => array(
          '#markup' => $type->getDescription(),
        ),
      );
    }
  }
  $variables['route_type_add'] = 'entity.' . $variables['entity_type_id'] . '.add_form';
}

/**
 * Implements hook_entity_operation().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return array
 */
function entity_base_entity_operation(EntityInterface $entity) {
  $operations = array();

  $entity_base_types = entity_base_types();
  if (array_key_exists($entity->getEntityTypeId(), $entity_base_types)) {
    $entityDefinition = \Drupal::entityTypeManager()->getDefinition($entity->getEntityTypeId());

    // "Current" workflow
    if (isset($entityDefinition->get('additional')['entity_base']['workflows']['current']) && $entityDefinition->get('additional')['entity_base']['workflows']['current']) {
      if (!$entity->get('current')->value) {
        $operations['current'] = array(
          'title' => t('Set as current'),
          'weight' => 20,
          'url' => $entity->toUrl('current'),
        );
      }
    }

    // "Locked" workflow
    if (isset($entityDefinition->get('additional')['entity_base']['workflows']['locked']) && $entityDefinition->get('additional')['entity_base']['workflows']['locked']) {
      if (!$entity->get('locked')->value) {
        $operations['lock'] = array(
          'title' => t('Lock'),
          'weight' => 20,
          'url' => $entity->toUrl('lock'),
        );
      }
      else {
        $operations['unlock'] = array(
          'title' => t('Unlock'),
          'weight' => 20,
          'url' => $entity->toUrl('unlock'),
        );
      }
    }

  }

  return $operations;
}