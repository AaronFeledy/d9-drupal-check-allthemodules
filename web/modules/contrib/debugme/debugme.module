<?php

/**
 * @file
 * Drupal Module: DebugMe.
 *
 * DebugMe visual feedback, issue tracking & project management integration.
 * The module allows you grant access to DebugMe roles and even
 * turn it off for selected pages.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Session\AccountProxyInterface;

/**
 * Implements hook_help().
 */
function debugme_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the debugme module.
    case 'help.page.debugme':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('DebugMe is a visual feedback, issue tracking & project management solution which saves time and frustration for everyone during a website project. This module allows you to quickly and easily add DebugMe to your Drupal site. The module allows you grant access to DebugMe roles and even turn it off for selected pages.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */
function debugme_page_attachments(array &$page) {
  $account = \Drupal::currentUser();
  $config = \Drupal::config('debugme.settings');
  $id = $config->get('project');

  // Add module cache tags.
  $page['#cache']['tags'] = Cache::mergeTags(isset($page['#cache']['tags']) ? $page['#cache']['tags'] : [], $config->getCacheTags());

  // 1. Check if the DebugMe Project ID is set.
  // 2. Check if current page is allowed to display DebugMe code.
  // 3. Check if currently active user's has access to DebugMe.
  if (!empty($id) && _debugme_visibility_pages() && _debugme_visibility_user($account)) {

    // Build DebugMe code.
    $script = '(function (t, d) {
        var dbg = d.createElement("script");
        dbg.type = "text/javascript";
        dbg.src = "https://debugme.eu/App.js";
        dbg.onload = function () {
          Zednet.prototype.projectToken = t;
          var dbm = new Zednet();
          dbm.init();
        };
        d.getElementsByTagName("head")[0].appendChild(dbg);
      })("' . $id . '", document);';

    $page['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#value' => $script,
      ],
      'debugme_script',
    ];
  }

}

/**
 * DebugMe visibility check for pages.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added to the current page and otherwise FALSE.
 */
function _debugme_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $config = \Drupal::config('debugme.settings');
    $visibility_request_path_mode = $config->get('visibility.request_path_mode');
    $visibility_request_path_pages = $config->get('visibility.request_path_pages');

    // Match path if necessary.
    if (!empty($visibility_request_path_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = Unicode::strtolower($visibility_request_path_pages);
      if ($visibility_request_path_mode < 2) {
        // Compare the lowercase path alias (if any) and internal path.
        $path = \Drupal::service('path.current')->getPath();
        $path_alias = Unicode::strtolower(\Drupal::service('path.alias_manager')->getAliasByPath($path));
        $page_match = \Drupal::service('path.matcher')->matchPath($path_alias, $pages) || (($path != $path_alias) && \Drupal::service('path.matcher')->matchPath($path, $pages));
        // When $visibility_request_path_mode has a value of 0, the tracking
        // code is displayed on all pages except those listed in $pages. When
        // set to 1, it is displayed only on those pages listed in $pages.
        $page_match = !($visibility_request_path_mode xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
  }

  return $page_match;
}

/**
 * DebugMe visibility check for an user object.
 *
 * @param \Drupal\Core\Session\AccountProxyInterface $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if the current user can see DebugMe widget,
 *   otherwise FALSE.
 */
function _debugme_visibility_user(AccountProxyInterface $account) {
  return $account->hasPermission('use debugme');
}
