<?php

/**
 * @file
 * Enables functionality for node alias history.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\SafeMarkup;

/**
 * Implements hook_help().
 */
function node_alias_history_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.node_alias_history':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module keeps node alias history') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<p>' . t('Some time user want to know history of alias.') . '</p>';
      return $output;
  }
}

/**
 * Implements node_alias_history_node_insert().
 */
function node_alias_history_node_insert(NodeInterface $node) {
  node_alias_history_operation($node);
}

/**
 * Implements node_alias_history_node_update().
 */
function node_alias_history_node_update(NodeInterface $node) {
  node_alias_history_operation($node);
}

/**
 * Helper function to check existence of alias.
 *
 * @param int $nid
 *   Get nid of node.
 * @param string $alias
 *   Get alias of node.
 *
 * @return int
 *   return integer value of node existence.
 */
function node_alias_history_existence($nid, $alias) {
  $result = db_select('node_alias_history', 'n')
    ->fields('n', ['id'])
    ->condition('nid', $nid)
    ->condition('alias', $alias)
    ->execute();
  $result->allowRowCount = TRUE;
  return $result->rowCount();
}

/**
 * Helper function to perform operation on insert/update node.
 *
 * @param object $node
 *   Get node object.
 */
function node_alias_history_operation($node) {
  $node_id = $node->id();
  $alias = $node->toArray()['path'][0]['alias'];
  $alias_exist = node_alias_history_existence($node_id, $alias);
  if ($alias_exist <= 0) {
    node_alias_history_log($node_id, $alias);
  }
}

/**
 * Helper function to insert data in history table.
 *
 * @param int $nid
 *   Get nid of node.
 * @param string $alias
 *   Get alias of node.
 */
function node_alias_history_log($nid, $alias) {
  $uid = \Drupal::currentUser()->id();
  if (!empty($nid)) {
    try {
      db_insert('node_alias_history')
        ->fields([
          'nid' => $nid,
          'uid' => $uid,
          'alias' => isset($alias) ? $alias : '',
          'timestamp' => REQUEST_TIME,
        ])
        ->execute();
    }
    catch (Exception $ex) {
      drupal_set_message($ex->getMessage(), 'error');
    }
  }
}

/**
 * Function returns list of node alias.
 */
function node_alias_history_rows() {
  $rows = [];
  $get_nid = \Drupal::request()->query->get('nid');
  $get_alias = \Drupal::request()->query->get('alias');
  $sort = \Drupal::request()->query->get('sort');
  $nid = isset($get_nid) ? $get_nid : '';
  $alias = isset($get_alias) ? $get_alias : '';
  $header = [
    t('Sn no.'),
    t('Nid'),
    t('Node Title'),
    t('Alias'),
    t('User'),
    ['data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'ASC'],
  ];
  $query = \Drupal::database()->select('node_alias_history', 'a');
  $query->join('node_field_data', 'n', 'n.nid=a.nid');
  $query->join('users_field_data', 'u', 'u.uid=a.uid');
  $query->fields('n', ['title']);
  $query->fields('a');
  $query->fields('u', ['name']);
  $table_sort = $query->extend('Drupal\Core\Database\Query\TableSortExtender')->orderByHeader($header);
  $pager = $table_sort->extend('Drupal\Core\Database\Query\PagerSelectExtender')->limit(5);
  $database = \Drupal::database();
  if (isset($nid) && !empty($nid)) {
    $query->condition('a.nid', $nid);
  }
  if (isset($alias) && !empty($alias)) {
    $query->condition('alias', '%' . $database->escapeLike($alias) . '%', 'LIKE');
  }
  if (isset($sort) && !empty($sort)) {
    $query->orderBy('a.timestamp', $sort);
  }
  else {
    $query->orderBy('a.timestamp', 'DESC');
  }
  $result = $pager->execute();
  $sn = 0;
  while ($record = $result->fetchObject()) {
    if (empty($record->alias)) {
      $alias_data = node_alias_history_get_first_alias($record->nid);
    }
    else {
      $alias_data = $record->alias;
    }
    $rows[] = [
      ++$sn,
      $record->nid,
      SafeMarkup::checkPlain($record->title),
      SafeMarkup::checkPlain($alias_data),
      SafeMarkup::checkPlain($record->name),
      date('Y-m-d h:i', $record->timestamp),
    ];
  }
  $render_array['node_alias_history'] = [
    [
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#empty' => t('No Record found!'),
    ],
    [
      '#type' => 'pager',
    ],
  ];

  return $render_array;
}

/**
 * Function returns alias on node insert.
 */
function node_alias_history_get_first_alias($ids) {
  $result = db_select('url_alias', 'ua')
    ->fields('ua', ['alias'])
    ->condition('source', '/node/' . $ids)
    ->execute();
  return $result->fetchField();
}
