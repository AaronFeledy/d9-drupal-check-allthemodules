<?php

/**
 * @file
 * Controls the output of image fields like a TouchTouch-gallery.
 */
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function touchtouch_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.touchtouch':
      $help = array();

      $plugin_link = Link::fromTextAndUrl(t('jQuery-plugin by Martin Angelov'), Url::fromUri('http://tutorialzine.com/2012/04/mobile-touch-gallery/'));
      $plugin_link = $plugin_link->toRenderable();
      //$plugin_link['attributes'] = array('target' => '_blank'); 

      $help[] = t("TouchTouch is a module that integrates the @plugin for Imagefields. It's a plugin that enables a popup, but with the difference that it supports responsive design, touch gestures and a bunch of other stuff. The markup provided is easier to theme and customize to what the site theme needs.", array(
        '@plugin' => render($plugin_link),
      ));

      $field_link = Link::fromTextAndUrl(t('field-formatter'), Url::fromRoute('<current>', array(), array('fragment' => 'field-formatter')))->toRenderable();
      $views_link = Link::fromTextAndUrl(t('views-formatter'), Url::fromRoute('<current>', array(), array('fragment' => 'views-formatter')))->toRenderable();

      $help[] = '<h2>' . t('Usage') . '</h2>';
      $help[] = t('You can use this module as a @fieldformatter or a @viewsformatter.', array(
        '@fieldformatter' => render($field_link),
        '@viewsformatter' => render($views_link),
      ));

      $settings_help = array(
        'field' => array(
          'title' => t('Use in Views'),
          'items' => array(
            t('Edit the content type which contains the field you want to show as the TouchTouch-gallery.'),
            t('Manage the display of the content type (usually this is found under www.yoursite.com/admin/structure/types/manage/__your_content_type__/display)'),
            t("Change the format of the Image-field you'd like. Change it to TouchTouch gallery"),
            t('Select an image style for the clickable preview image'),
            t('... and the big image (not required)'),
            t('Save the settings'),
            t("That's it!"),
          ),
        ),
        'views' => array(
          'title' => t('Use in Views'),
          'items' => array(
            t('Add the fields or render the entities and follow the steps under Add as field formatter'),
            t('When selected as fields, set the formatter of the field to TouchTouch gallery'),
            t('Select an image style for the clickable preview image'),
            t('... and the big image (not required)'),
            t('Save the view'),
            t("That's it!"),
          ),
        ),
      );
      foreach ($settings_help as $type => $data) {
        // @see theme_item_list()
        $data['list_type'] = 'ol';
        $data['attributes'] = array('id' => "$type-formatter");
        
        //$help[] = theme('item_list', $data); // @todo <= Buggy
      }
      
      return '<div>' . implode('</div><div>', $help) . '</div>';
  }
}

/**
 * Implements hook_masonry_fields_field_types().
 * 
 * @revise
 */
function touchtouch_masonry_fields_field_types() {
  return array(
    'image' => array(
      'touchtouch',
    ),
  );
}

/**
 * Allow any version.
 *
 * @see touchtouch_libraries_info()
 */
function touchtouch_version() {
  return TRUE;
}

/**
 * Implements hook_preprocess_HOOK().
 * 
 * @depricated
 */
function touchtouch_preproecess_node(&$variables) {
  static $added = FALSE;
  $include = FALSE;

  foreach (array_keys($variables['content']) as $fieldname) {
    if (isset($variables['content'][$fieldname]['#items'])) {
      foreach ($variables['content'][$fieldname]['#items'] as $fieldInstance) {
        if (!isset($fieldInstance['value'])) {
          continue 2;
        }

        $matches = array();
        preg_match_all('/<a.*?class=".*?touchtouch.*?"[^>]*>.*<\/a>/', $fieldInstance['value'], $matches);

        if (count($matches[0])) {
          $include = TRUE;
        }
      }
    }
  }

  if (!$include) {
    return;
  }

  // prevent duplicate addition of JS
  if (!$added) {
    $js_path = drupal_get_path('module', 'touchtouch') . '/assets/js/touchtouch.js';

    foreach (drupal_add_js(NULL, NULL, NULL) as $added_js) {
      $added = ($added_js['data'] === $js_path);
    }

    if (!$added) {
      libraries_load('touchtouch');
      drupal_add_js($js_path, 'file');
    }
  }
}

/**
 * Helper function for grouping options.
 */
function touchtouch_grouping_options(){
    $grouping_options = array(
      'none' => t('None'),
      'field' => t('Field '),
//    'field_item' => t('Field item '),
    );

    // @todo check the difference between regular field and views field
    $grouping_options += array(
      'views_view' => t('View '),
      'views_row_id' => t('Views row '),
      'views_field' => t('Views field '),
    );
    
    return $grouping_options;
}