<?php

/**
 * @file
 * Contains paragraphs_react.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_help().
 */
function paragraphs_react_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the paragraphs_react module.
    case 'help.page.paragraphs_react':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Generates single reactjs pages from a paragraph') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function paragraphs_react_theme() {
  return [
    'paragraphs_react' => [
      'render element' => 'children',
      'variables' => array('data'=>NULL)
    ],
    'paragraphs_react_component' => [
      'template' => 'paragraphs-react-component',
      'base hook' => 'paragraph',
    ]
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function paragraphs_react_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  /** @var \Drupal\field\Entity\FieldConfig $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  if($field_definition instanceof FieldConfig){
    $field_name = $field_definition->get('field_name');
    if(isset($context['widget']) && $context['widget']->getThirdPartySetting('paragraphs_react', 'paragraphs_react_enabled')) {
      if ($context['delta'] == 0) {
        $buildInfo = $form_state->getBuildInfo();
        /** @var \Drupal\node\NodeForm $nodeForm */
        $nodeForm = $buildInfo['callback_object'];
        $entity = $nodeForm->getEntity();
        if(!is_null($entity)) {
          $entityId = $entity->id();
        } else {
          $entityId = FALSE;
        }
        $defaultValues = [];
        if($entityId && $paragraphSetting = \Drupal::service('paragraphs_react.manager')->loadParagraphSetting($entityId,$field_name)){
          $defaultValues['paragraphs_react_is_enabled'] = 1;
          $paragraphSetting = current($paragraphSetting);
          $defaultValues['paragraphs_react_url'] = $paragraphSetting->page_url;
          $defaultValues['paragraphs_react_page_title'] = $paragraphSetting->page_title;
          $defaultValues['paragraphs_react_jsx'] = $paragraphSetting->jsx;
        }
        $element['paragraphs_react_is_enabled'] = [
          '#type' => 'checkbox',
          '#title' => t('Generate a react page from this paragraph field'),
          '#default_value' => $defaultValues['paragraphs_react_is_enabled'],
          '#weight' => -3,
        ];
        $element['paragraphs_react_url'] = [
          '#type' => 'textfield',
          '#title' => t('URL of the generated react page'),
          '#default_value' => $defaultValues['paragraphs_react_url'],
          '#weight' => -2,
          '#description' => 'insert relative URL without initial slash'
        ];
        $element['paragraphs_react_page_title'] = [
          '#type' => 'textfield',
          '#title' => t('Title of the generated react page'),
          '#default_value' => $defaultValues['paragraphs_react_page_title'],
          '#weight' => -1,
        ];
        $element['paragraphs_react_jsx'] = [
          '#type' => 'hidden',
          '#title' => t('JSX for react component generation'),
          '#default_value' => $defaultValues['paragraphs_react_jsx'],
          '#weight' => -1,
          '#attributes' => ['class' => ['react-jsx-save']],
        ];
      }
      $element['#attached']['library'][] = 'paragraphs_react/reactformmanager';
    }
  }
}


/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function paragraphs_react_field_widget_third_party_settings_form(\Drupal\Core\Field\WidgetInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $form_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $element = [];
  if ($plugin->getPluginId() == 'entity_reference_paragraphs') {
    $element['paragraphs_react_enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable paragraphs react'),
      '#default_value' => $plugin->getThirdPartySetting('paragraphs_react', 'paragraphs_react_enabled'),
    ];
  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function paragraphs_react_field_widget_settings_summary_alter(&$summary, $context) {
  if ($context['widget']->getPluginId() == 'entity_reference_paragraphs') {
    if ($context['widget']->getThirdPartySetting('paragraphs_react', 'paragraphs_react_enabled')) {
      $summary[] = t('Paragraphs React enabled.');
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function paragraphs_react_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = 'paragraphs_react_form_submit_management';
}

function paragraphs_react_form_submit_management(&$form, \Drupal\Core\Form\FormStateInterface $form_state){
  \Drupal::service('paragraphs_react.manager')->manageFormSubmit($form,$form_state);
}

/**
 * Implements hook_library_info_build().
 */
function paragraphs_react_library_info_build() {
  $libraries = [];
  $configuration = \Drupal::config('paragraphs_react.paragraphsreactconfig')->get();
  if (isset($configuration['allow_paragraphs_react_to_load']) && $configuration['allow_paragraphs_react_to_load']) {
    if(isset($configuration['react_library_url']) && $configuration['react_library_url']) {
      $libraries['paragraphs_react.reactjs'] = [
        'js' => [
          $configuration['react_library_url'] => [],
        ]
      ];
    }
    if(isset($configuration['reactdom_library_url']) && $configuration['reactdom_library_url']) {
      $libraries['paragraphs_react.reactdom'] = [
        'js' => [
          $configuration['reactdom_library_url'] => [],
        ]
      ];
    }
    if(isset($configuration['babel_transpiler_url']) && $configuration['babel_transpiler_url']) {
      $libraries['paragraphs_react.babel_transpiler'] = [
        'js' => [
          $configuration['babel_transpiler_url'] => [],
        ]
      ];
    }
  }
  return $libraries;
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function paragraphs_react_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if($hook == 'paragraph' && strpos(\Drupal::routeMatch()->getRouteName(),'paragraphs_react_routes')!==FALSE){
    $suggestions[] = 'paragraphs_react_component';
    $suggestions[] = 'paragraphs_react_component__'.$variables['elements']['#paragraph']->getType();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function paragraphs_react_preprocess_paragraph(&$variables) {
  if(strpos(\Drupal::routeMatch()->getRouteName(),'paragraphs_react_routes')!==FALSE) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph = $variables['elements']['#paragraph'];
    $request = \Drupal::request();
    $entity_id = $request->get('entity_id');
    $entity_type = $request->get('entity_type');
    $paragraph_field_name = $request->get('paragraph_field_name');
    $data = \Drupal::service('paragraphs_react.manager')->loadParagraphSetting($entity_id,$paragraph_field_name);
    $parentEntityArray = $paragraph->getParentEntity()->toArray();
    $paragraphIndex = 0;
    if(!isset($parentEntityArray[$paragraph_field_name][0]['target_id'])){
      return;
    }
    foreach($parentEntityArray[$paragraph_field_name] as $index => $v) {
      if($v['target_id'] == $paragraph->id()){
        $paragraphIndex = $index;
      }
    }
    if(isset($data) && !empty($data)) {
      if(empty($data[0]->jsx)){
        return;
      }
      $decodedJsx = json_decode($data[0]->jsx);
      $variables['paragraphs_react_jsx'] = $decodedJsx[$paragraphIndex];
      $variables['paragraphs_react_jsx'] = preg_replace('/<!--(.|\s)*?-->\s*/', '', $variables['paragraphs_react_jsx']);
    }
  }
}