<?php

/**
 * @file
 * Password Change Rules module file.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\password_change_rules\PasswordEnforcer;

/**
 * Implements hook_entity_base_field_info().
 */
function password_change_rules_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() === 'user') {
    $fields['password_change_rules'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Force password change on next login'))
      ->setDefaultValue(FALSE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'weight' => 0,
        'settings' => [
          'display_label' => TRUE,
        ],
      ]);
  }

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function password_change_rules_form_user_form_alter(&$form, FormStateInterface $formState) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PasswordEnforcer::class)
    ->alter($form, $formState);
}

/**
 * Implements hook_entity_field_access().
 */
function password_change_rules_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($field_definition->getName() === 'password_change_rules' && !$account->hasPermission('force users to change password')) {
    return AccessResult::forbidden()
      ->addCacheContexts(['user.permissions']);
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_user_presave().
 */
function password_change_rules_user_presave(EntityInterface $entity) {
  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PasswordEnforcer::class)
    ->userPresave($entity);
}
