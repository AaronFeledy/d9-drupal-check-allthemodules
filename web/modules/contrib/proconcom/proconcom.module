<?php

/**
 * @file
 * Module that adds Pro and Con argumentation to content types.
 */

/**
 * Views support.
 */
if (\Drupal::moduleHandler()->moduleExists('views')) {
  require_once(drupal_get_path('module', 'proconcom') . '/proconcom.views.inc');
}

function proconcom_views_api() {
  return array(
    'api' => 3.0
  );
}

/**
 * @FIXME
 * This implementation of hook_menu() cannot be automatically converted because
 * it contains logic (i.e., branching statements, function calls, object
 * instantiation, etc.) You will need to convert it manually. Sorry!
 *
 * For more information on how to convert hook_menu() to Drupal 8's new routing
 * and linking systems, see https://api.drupal.org/api/drupal/core%21includes%21menu.inc/group/menu/8
 */

function proconcom_menu() {
  $items = array();
  // Use this page instead to add arguments.
  $items['node/%node/add/proconcom-argument'] = array(
    'title' => 'Add argument',
    'page callback' => 'node_add',
    'page arguments' => array('proconcom_argument'),
    'access arguments' => array('create proconcom_argument content'),
    'type' => MENU_CALLBACK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => 1
  );
  return $items;
}

/**
 * Implementation of hook_node_validate().
 */
function proconcom_node_validate(\Drupal\node\NodeInterface $node, $form, \Drupal\Core\Form\FormStateInterface &$form_state){
  if ($node->getType() == 'proconcom_argument' && $node->proconcom_type[0]->value != 1 && $node->proconcom_type[0]->value != 2) {
    $form_state->setErrorByName('proconcom_type', t('Select if argument is Pro or Con.')); // TODO: highlight radios
  }
}

/**
 * Implementation of hook_node_load().
 */
function proconcom_node_load($nodes, $types){
  $nid = key($nodes);
  $object = db_select('proconcom', 'p')
              ->fields('p',array())
              ->condition('nid', $nid,'=')
              ->execute()
              ->fetchObject();    
  // Attach extra data in node object.
  if(isset($nodes[$nid])){
        $nodes[$nid]->parent_nid = isset($object->parent_nid) ? $object->parent_nid : 0;
        $nodes[$nid]->proconcom_is_enabled = isset($object->status) ? $object->status : 0;
        $nodes[$nid]->proconcom_is_allow_only_one = isset($object->one_per_node) ? $object->one_per_node : 0; // To set the value in node.
  }elseif (isset($nodes->{$nid})) {
        $nodes->parent_nid = isset($object->parent_nid) ? $object->parent_nid : 0;
        $nodes->proconcom_is_enabled =isset( $object->status) ?  $object->status : 0;
        $nodes->proconcom_is_allow_only_one = isset($object->one_per_node) ? $object->one_per_node : 0; // To set the value in node.
  }
}

/**
 * Implementation of hook_node_insert().
 */
function proconcom_node_insert(\Drupal\node\NodeInterface $node){
  if ($node->getType() == 'proconcom_argument') {
    if(is_numeric(arg(1))){
      $parent_nid = arg(1);
    }else{
      $parent_nid = 0;
    }
    db_insert('proconcom') // Table name no longer needs {}
      ->fields(array(
        'nid' => $node->id(),
        'parent_nid' => $parent_nid,
        'type' => $node->proconcom_type[0]->value,
        'status' => $node->proconcom_is_enabled,
        'one_per_node' => $node->proconcom_is_allow_only_one,
      ))
      ->execute();
  }
  else {
    db_insert('proconcom') // Table name no longer needs {}
      ->fields(array(
        'nid' => $node->id(),
        'status' => $node->proconcom_is_enabled,
        'one_per_node' => $node->proconcom_is_allow_only_one,
      ))
      ->execute();
  }
}

/**
 * Implementation of hook_node_update().
 */
function proconcom_node_update(\Drupal\node\NodeInterface $node){
  db_delete('proconcom')
    ->condition('nid',$node->id())
    ->execute();
  if ($node->getType() == 'proconcom_argument') {
    db_insert('proconcom') // Table name no longer needs {}
      ->fields(array(
        'nid' => $node->id(),
        'parent_nid' => isset($node->parent_nid) ? $node->parent_nid : 0,
        'type' => $node->proconcom_type[0]->value,
        'status' => isset($node->parent_nid) ? 0 : 1,
        'one_per_node' => $node->proconcom_is_allow_only_one,
      ))
      ->execute();
  }
  else {
    db_insert('proconcom')
      ->fields(array(
        'nid' => $node->id(),
        'parent_nid' => 0,
        'type' => 0,
        'status' => $node->proconcom_is_enabled,
        'one_per_node' => $node->proconcom_is_allow_only_one,
      ))
      ->execute();
  }
}

/**
 * Implementation of hook_node_delete().
 */
function proconcom_node_delete(\Drupal\node\NodeInterface $node){
  db_delete('proconcom')
    ->condition('nid',$node->id())
    ->execute();
}

/**
 * Implementation of hook_node_view().
 */
function proconcom_node_view(array &$build, \Drupal\node\NodeInterface $node, $view_mode, $langcode){
  if (isset($node->proconcom_is_enabled)) {
    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// if ($node->proconcom_is_enabled && node_is_page($node) && !variable_get('proconcom_render_'. $node->getType(), 0)) {
//       $node->content['arguments'] = array(
//         '#markup' => proconcom_render_arguments($node),
//         '#weight' => 3, // 3 seems like high enough for now
//       );
//     }

  }
}

/**
 * Implementation of hook_form_alter().
 */
function proconcom_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id){  
  $type = '';
  if(isset($form['type']['#value'])){
    $type =  $form['type']['#value'];    
  }
    
  switch ($form_id) {
    // Default content type setting
    case 'node_type_form':
      $node_type = $form['old_type']['#value'];
      // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['workflow']['proconcom_enabled'] = array(
//         '#prefix' => '<span class="form-item"><label>'. t('Pro and Con options') .': </label></span>', // Mimic checkboxes rendering as dealing with their variables is too cumbersome.
//         '#type' => 'checkbox',
//         '#title' => t('Enable Pros and Cons arguments by default'),
//         '#default_value' => variable_get('proconcom_enabled_'. $node_type, 0),
//         '#description' => t('Users with the <em>administer comments</em> permission will be able to override this option.'),
//       );

      // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['workflow']['proconcom_render'] = array(
//         '#type' => 'checkbox',
//         '#title' => t('Disable rendering of arguments in the content body'),
//         '#default_value' => variable_get('proconcom_render_'. $node_type, 0),
//         '#description' => t('If rendering of arguments is disabled no arguments are displayed by default. Instead use <code>proconcom_render_arguments($node)</code> in your own theme.'),
//       );

      // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['workflow']['proconcom_allow_only_one'] = array(
//         '#type' => 'checkbox',
//         '#title' => t('Allow users to add only one argument per node'),
//         '#default_value' => variable_get('proconcom_allow_only_one_'. $node_type, 0),
//         '#description' => t('If allow user to add only one argument per node is checked then the users won\'t be able add more than one argument per node.'),
//       );

      break;

    case 'comment_node_proconcom_argument_form':
      // Override default submit function to be able to redirect to parent node.
      // @FIXME
// drupal_set_title() has been removed. There are now a few ways to set the title
// dynamically, depending on the situation.
// 
// 
// @see https://www.drupal.org/node/2067859
// drupal_set_title(t('Reply to Argument'));

      if ($parent_nid = $form['#node']->parent_nid) {
        $form['actions']['submit']['#submit'][] = 'proconcom_comment_form_submit';
      }
      break;

    // Node-specific setting.
    case $type .'_node_form':
      // Comments and arguments are similair so lets re-use some of it.
      if (\Drupal::currentUser()->hasPermission('administer comments')) {
        $form['comment_settings']['#title'] = t('Comment and argument settings');
        // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['comment_settings']['proconcom_is_enabled'] = array(
//           '#type' => 'checkbox',
//           '#title' => t('Enable Pros and Cons arguments'),
//           '#default_value' => isset($form['#node']->proconcom_is_enabled) ? $form['#node']->proconcom_is_enabled : variable_get('proconcom_enabled_'. $type, 0),
//         );

        // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['comment_settings']['proconcom_is_allow_only_one'] = array(
//           '#type' => 'checkbox',
//           '#title' => t('Allow users to add only one argument for this node'),
//           '#default_value' => isset($form['#node']->proconcom_is_allow_only_one) ? $form['#node']->proconcom_is_allow_only_one : variable_get('proconcom_allow_only_one_'. $type, 0),
//         );

      }
      else {
        // Just pass the values for users without the 'administer comments' permission.
        // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['comment_settings']['proconcom_is_enabled'] = array(
//           '#type' => 'value',
//           '#default_value' => isset($form['#node']->proconcom_is_enabled) ? $form['#node']->proconcom_is_enabled : variable_get('proconcom_enabled_'. $type, 0),
//         );

        // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form['comment_settings']['proconcom_is_allow_only_one'] = array(
//           '#type' => 'value',
//           '#default_value' => isset($form['#node']->proconcom_is_allow_only_one) ? $form['#node']->proconcom_is_allow_only_one : variable_get('proconcom_allow_only_one_'. $type, 0),
//         );

      }
      // Argument node form
      if ($type == 'proconcom_argument') {
        $node = $form['#node'];
        // Always redirect to parent node for this content type.
        $form['actions']['submit']['#submit'][] = 'proconcom_type_custom_submit';
      }
      break;
  }
}

function proconcom_type_custom_submit($form, &$form_state){
  $node = $form['#node'];
  if(arg(2) == 'edit') {
    $parent_nid = $node->parent_nid;
  }
  else {
    $parent_nid = arg(1);
  }
  $form_state['redirect'] = 'node/'. $parent_nid;
}

/**
 * Same as comment_form_submit() but with redirect to parent node.
 */
function proconcom_comment_form_submit($form, &$form_state) {
  $parent_nid = $form['#node']->parent_nid;
  $comment = comment_form_submit($form, $form_state);
  $form_state['redirect'] = 'node/'. $parent_nid;
}

function proconcom_render_arguments(\Drupal\node\NodeInterface $node) {
  $output = '';
  $user = \Drupal::currentUser();
  $flag = 1;
  $fivestar_field = '';
  if ($node->proconcom_is_enabled) {
    // Insert CSS
    // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
// 
// 
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_css(drupal_get_path('module', 'proconcom') .'/proconcom.css');


    // Fetch all arguments on the node
    $nodes = views_get_view_result('proconcom_arguments', 'default', $node->id());
    $fields = field_info_instances('node','proconcom_argument');
    
    // To get the fivestar field.
    if (\Drupal::moduleHandler()->moduleExists('fivestar')) {
      foreach ($fields as $field_name => $value) {
        $field = field_info_field($field_name);
        if ($field['type'] == 'fivestar') {
          $fivestar_field = $field_name;
          break;
        }
      }
    }
    // If node has the fivestar field and have some ratings, display the ratings.
    if (!empty($nodes)) {
      $avg_rating['rating'] = 0;
      $avg_rating['count'] = 0;
      foreach ($nodes as $key => $argument) {
        $arg_node = \Drupal::entityManager()->getStorage('node')->load($argument->nid);
        if ($flag && $arg_node->uid == $user->uid && $node->proconcom_is_allow_only_one) {
          $flag = 0;
        }
        if (!empty($fivestar_field)) {
          if (isset($arg_node->{$fivestar_field}['und'][0]['rating']) && !empty($arg_node->{$fivestar_field})) {
            $avg_rating['rating'] = $avg_rating['rating'] + $arg_node->{$fivestar_field}['und'][0]['rating'];
            $avg_rating['count']++;
          }
        }
      }
      if (!empty($fivestar_field)) {
        if ($avg_rating['count']) {
          $avg = $avg_rating['rating']/$avg_rating['count'];
          $stars_given = ceil($avg / 20);
          $stars_remaining = (5 - $stars_given);
          $unit = ($avg_rating['count'] == 1) ? 'Vote' : 'Votes';
          $output .= '<div class="user-ratting">';
                        for ($i=0; $i < $stars_given; $i++) {
                          $output .= '<span class="stars starY">&starf;</span>';
                        }
                        for ($i=0; $i < $stars_remaining; $i++) {
                          $output .= '<span class="stars starG">&starf;</span>';
                        }
          $output .= '<span> '.t('Average Ratings: '. round(($avg / 20), 1) .' ('.$avg_rating['count'].' '. $unit .')') . '</span>
                    </div>';
        }
      }
    }
    if ($flag) {
      //adding link ("Add argument") before rendering the view
      // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
// 
// 
// @see https://www.drupal.org/node/2195739
// $output .= '<div class="argument-link"> ' .theme('proconcom_add_argument') . '</div>';
 
    }
    //calling the theming function thats output the arguments in to nice pros and cons columns
    // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
// 
// 
// @see https://www.drupal.org/node/2195739
// $output .= theme('view_proconcom_arguments', array('parent_nid' => $node->id()));
 
    return $output;
  }
}

/**
 * Implementation of hook_heme()
 */
function proconcom_theme() {
  return array(
    'proconcom_arguments' => array(
      'variables' => array('parent_nid' => NULL,'content' => NULL),
    ),
    'proconcom_add_argument' => array(
      'variables' => array('parent_nid' => NULL,'content' => NULL),
    ),
    'view_proconcom_arguments' => array(
      'variables' => array('parent_nid' => NULL,'content' => NULL)
    )
  );
}

/**
 * Theme the arguments view.
 */
function theme_view_proconcom_arguments($variables) {
  $output = '';
  $proconcom_type_prev = '';
  $first_match = true;

  // Fetch all arguments on the node
  $nodes = views_get_view_result('proconcom_arguments', 'default', $variables['parent_nid']);
  $output .= '<div id="proconcom" class="clear-block">'; // Div wrapper to clear floats

  foreach ($nodes as $n) {
    $node = \Drupal::entityManager()->getStorage('node')->load($n->nid);
    $proconcom_type = $node->proconcom_type['und'][0]['value'];

    if ($proconcom_type != $proconcom_type_prev) {
      if ($first_match) {
        $first_match = false;
      }
      else {
        $output .= '</div>'; // First column closing div
      }
      // Insert div wrapper and heading
      $output .= '<div id="proconcom-'. $proconcom_type .'" class="proconcom-collapsed"><h2 class="proconcom">'. t('@type arguments', array('@type' => proconcom_get_type_name($proconcom_type))) .'</h2>';
    }
    $node_view = node_view($node, 'default');
    $output .= '<div class="node-argument-wrapper">';
    $output .= \Drupal::service("renderer")->render($node_view);
    if ($node->comment_count) {
      $comments = \Drupal::entityManager()->getStorage('comment')->loadMultiple(comment_get_thread($node, '', 100)); // Loads all comments on arguments.
      foreach ($comments as $k => $comment) {
        $comment_view = comment_view($comment, $node, $view_mode = 'full', $langcode = NULL);
        $output .= \Drupal::service("renderer")->render($comment_view); // Render all replies on arguments.
      }
    }
    $output .= '</div>';
    $proconcom_type_prev = $node->proconcom_type['und'][0]['value'];
  }
  $output .= '</div>'; // Second column closing div
  $output .= '</div>'; // Wrapper closing div

  return $output;
}

/**
 * hook_node_view_alter().
 */
function proconcom_node_view_alter(&$build) {
  if ($build['#node']->type == 'proconcom_argument') {  //extra check for content type (optional)
    $build['links']['comment']['#links']['comment-add']['title'] = t('Reply');
  }
}

/**
 * Allow themable wrapping of the argument view.
 */
function theme_proconcom_arguments($view) { //not sure about this one
  // Add the 'add arguments' link here to have it displayed above the arguments.
  // Hook_link_alter which might seem more appropriate renders the link below
  // and several times for each link type (node, term etc) - so this is better.
  // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
// 
// 
// @see https://www.drupal.org/node/2195739
// $output = theme('proconcom_add_argument');

  $output .= $view; //problem probably here
  return $output;
}

function theme_proconcom_add_argument() {
  $user = \Drupal::currentUser();
  if (\Drupal::currentUser()->hasPermission('create proconcom_argument content')) {
    // @FIXME
// l() expects a Url object, created from a route name or external URI.
// return '<ul class="links"><li>'. l(t('Add argument'), 'node/'. arg(1) .'/add/proconcom-argument') .'</li></ul>';

  }
  elseif($user->uid == 0) {
    return '<ul class="links"><li class="add-argument">'. t('<a href="@login">Login</a> to create a new argument.', array('@login' => \Drupal\Core\Url::fromRoute('user.login'))) .'</li></ul>';
  }
}

function proconcom_get_type_name($type = 1) {
  $types = array(t('Pro'), t('Con'));
  return $types[$type-1];
}