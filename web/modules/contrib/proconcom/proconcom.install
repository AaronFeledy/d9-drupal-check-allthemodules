<?php


/**
 * Implements hook_schema().
 */
function proconcom_schema() {
   
  $schema['proconcom'] = array(
    // specification for proconcom
    'description' => 'The base table for proconcom.',
      'fields' => array(
        'nid' => array(
          'type' => 'int',
          'length' => 10,
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0
        ),
      'parent_nid' => array(
        'type' => 'int',
        'length' => 10,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'type' => array(
        'type' => 'int',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'status' => array(
        'type' => 'int',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),

      'one_per_node' => array(
        'type' => 'int',
        'length' => 1,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('nid'),
  
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function proconcom_install() {
  // Create default content type
  $type = array(
      'type' => 'proconcom_argument',
      'name' => t('Argument'),
      'base' => 'node_content',
      'description' => t('An argument can be added to content, much like a comment. It can be marked as "Pro" or "Con" and optionally rated by users.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );

  $type = node_type_set_defaults($type);
  $status = node_type_save($type);
  node_add_body_field($type);
  //attach new fields in proconcom_argument
  add_custom_fields();
  // Don't promote to frontpage
  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_set('node_options_'. $type->type, array('status'));

  // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_set('comment_form_location_'. $type->type, 0);



  if ($status == SAVED_UPDATED) {
    drupal_set_message(t('The content type %name has been updated.', array('%name' => $type->name)));
  }
  elseif ($status == SAVED_NEW) {
    drupal_set_message(t('The content type %name has been added.', array('%name' => $type->name)));
  }

}

/**
 * Implementation of hook_uninstall().
 */
function proconcom_uninstall() {
  $type = 'proconcom_argument';
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => $type));
  $nodeids = array();
  foreach ($result as $row) {
    $nodeids[] = $row->nid;
  }
  node_delete_multiple($nodeids);
  
  // to delete all fields instances associated with the content type.
  foreach( field_info_instances('node', $type) as $field_name  => $instance ) {
    // @FIXME
// Fields and field instances are now exportable configuration entities, and
// the Field Info API has been removed.
// 
// 
// @see https://www.drupal.org/node/2012896
// field_delete_instance($instance);
 
  }
  node_type_delete($type);
  field_purge_batch(500);
  drupal_uninstall_schema('proconcom');

  $types = node_type_get_types();
  foreach ($types as $type) {
    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_del('proconcom_enabled'. $type->type);

    // @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_del('proconcom_render'. $type->type);

  }
}

function add_custom_fields() {
    foreach (_proconcom_argument_installed_fields() as $field) {
        // @FIXME
// Fields and field instances are now exportable configuration entities, and
// the Field Info API has been removed.
// 
// 
// @see https://www.drupal.org/node/2012896
// field_create_field($field);

    }
    foreach (_proconcom_argument_installed_instances() as $fieldinstance) {
        $fieldinstance['entity_type'] = 'node';
        $fieldinstance['bundle'] = 'proconcom_argument';
        print_r($fieldinstance);
        // @FIXME
// Fields and field instances are now exportable configuration entities, and
// the Field Info API has been removed.
// 
// 
// @see https://www.drupal.org/node/2012896
// field_create_instance($fieldinstance);

    }
}

function _proconcom_argument_installed_fields() {
    return array(
        'proconcom_type' => array(
          'field_name' => 'proconcom_type',
          'label' => t('Standpoint'),
          'type' => 'list_text',
          'settings' => array(
            'allowed_values' => array(
              1 => 'Pro',
              2 => 'Con',
            ),
          ),
        ),
    );
}

function _proconcom_argument_installed_instances() {
  return array(
    'proconcom_type' => array(
      'field_name' => 'proconcom_type',
      'type' => 'radios',
      'label' => t('Standpoint'),
      'widget' => array(
        'type' => 'options_buttons'
      ),
      'required' => TRUE,
      'display' => array(
        'default' => array(
          'type' => 'hidden'
        )
      )
    ),
  );
}