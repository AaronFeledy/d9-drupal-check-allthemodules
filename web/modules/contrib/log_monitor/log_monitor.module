<?php

/**
 * @file
 * Contains log_monitor.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\log_monitor\LogMonitorHelper;

/**
 * Implements hook_help().
 */
function log_monitor_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the log_monitor module.
    case 'help.page.log_monitor':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A module to aggregate log messages and send out a digest based on specified conditions.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function log_monitor_cron() {
  // @TODO: Check for matched logs and add to email queue
  // @TODO: Cleanup and table maintenance
}

/**
 * Implements hook_mail().
 */
function log_monitor_mail($key, &$message, $params) {
  switch($key) {
    case 'email_reaction':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = 'Log Monitor ' . $params['format'];
      $message['body'][] = Html::escape($params['message']);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function log_monitor_log_monitor_rule_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  $last_run = new \DateTime('@' . \Drupal::state()->get('system.cron_last'));
  $next_run = LogMonitorHelper::getNextRun($entity, $last_run);
  \Drupal::state()->set('log_monitor.' . $entity->id(), $next_run);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function log_monitor_log_monitor_rule_update(\Drupal\Core\Entity\EntityInterface $entity) {
  $last_run = new \DateTime('@' . \Drupal::state()->get('system.cron_last'));
  $next_run = LogMonitorHelper::getNextRun($entity, $last_run);
  \Drupal::state()->set('log_monitor.' . $entity->id(), $next_run);
}
