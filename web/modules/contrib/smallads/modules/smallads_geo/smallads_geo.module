<?php

use Drupal\smallads\Entity\SmalladInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountProxyInterface;


/**
 * Implements hook_entity_base_field_info().
 *
 * Add a computed geofield to the smallad entity type.
 *
 */
function smallads_geo_entity_base_field_info($entity_type) {
  if ($entity_type->id() == 'smallad') {
    $field = BaseFieldDefinition::create('owner_coordinates')
      ->setLabel(t('Approx location'))
      ->setDescription(t("Slightly displaced coordinates of the smallad owner"))
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', ['type' => 'leaflet_formatter_default', 'weight' => 10, 'region' => 'content'])
      ->setComputed(TRUE)
      ->setReadOnly(TRUE);
    return ['coordinates' => $field];
  }
}

/**
 * Get the fieldname of any geofield on the user entity type
 *
 * @return string|null
 */
function smallads_geo_user_field_map() {
  static $field_names;
  if (!$field_names) {
    $geo_fields = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('geofield');
    $field_names = array_keys($geo_fields['user']);
  }
  return $field_names;
}

/**
 * Default value callback for Smallad location field.
 *
 * @return a POINT (lon lat) or NULL
 */
function smallads_geo_current_user_location(SmalladInterface $smallad, FieldDefinitionInterface $field_config) {
  return smallads_geo_home_location();
}

/**
 * Helper, to get the best location for a user
 * @param AccountProxyInterface $account
 * @return POINT|NULL
 */
function smallads_geo_home_location() {
  $user = User_load(\Drupal::currentUser()->id());
  //mdump($user->toArray());
  if ($user and !$user->coordinates->isEmpty()) {
    return $account->coordinates->getValue();
  }
  else{
    $config = \Drupal::config('smallads_geo.settings');
    if ($point = $config->get('fallback_point')) {
      return $point;
    }
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * Make all the formatters which apply to the geofield, apply to owner_coordinates
 */
function smallads_geo_field_formatter_info_alter(&$info) {
  foreach ($info as &$definition) {
    if (in_array('geofield', $definition['field_types'])) {
      $definition['field_types'][] = 'owner_coordinates';
    }
  }
}

/**
 * Helper
 *
 * @param geostring $point
 *
 * @return array|null
 *   Array keyed by lat and lon; NULL if invalid
 */
function smallads_geo_convert_point($point) {
  if (preg_match_all('/POINT ?\((.*) (.*)\)/', $point, $matches)) {
    return [
      'lon' => $matches[1][0],
      'lat' => $matches[2][0]
    ];
  }
  trigger_error("Badly formed point: '$point'", E_USER_WARNING);
}

function smallads_geo_convert_latlon($lat, $lon) {
  return 'POINT('.(float)$lon.' '.(float)$lat.')';
}
