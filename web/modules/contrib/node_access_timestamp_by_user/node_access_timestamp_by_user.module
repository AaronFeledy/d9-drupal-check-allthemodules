<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Creates a database table to store the last node access timestamp per user per node.
 */

/**
 * Implements HOOK_preprocess_node().
 *
 * Add and update values to the node_access_timestamp_by_user table.
 *
 * @ingroup node_access_timestamp_by_user
 */
function node_access_timestamp_by_user_preprocess_node(&$variables) {

  // Get current user ID.
  $variables['currentUID'] = \Drupal::currentUser()->id();

  // Check if user is authenticated.
  if ($variables['currentUID'] != 0) {

    // Get our form config.
    $config = \Drupal::config('node_access_timestamp_by_user.node_access_timestamp_by_user_settings');
    $variables['filterByContentTypes'] = $config->get('filter_content_types');
    $variables['enabledContentTypes'] = $config->get('content_types');

    // Get current NID.
    $variables['currentNID'] = \Drupal::routeMatch()->getRawParameter('node');

    // Get current timestamp.
    $variables['currentTimestamp'] = intval(time());

    // Get bundle name.
    $variables['contentBundle'] = \Drupal::routeMatch()->getParameter('node')->bundle();

    // Get current langcode.
    $variables['langCodeID'] = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // Connect to database.
    $database = \Drupal::database();

    if ($variables['filterByContentTypes'] == 'yes') {
      foreach ($variables['enabledContentTypes'] as $enabledContentType) {
        if ($enabledContentType != '0' && $enabledContentType == $variables['contentBundle']) {

          // Insert/Update our database data.
          $database->merge('node_access_timestamp_by_user')
          // Check if current UID and NID exist in table.
          ->key([
            'uid' => $variables['currentUID'],
            'nid' => $variables['currentNID'],
          ])
          // If they do, update the timestamp/bundle/langcode field values.
          ->updateFields([
            'timestamp' => $variables['currentTimestamp'],
            'bundle' => $variables['contentBundle'],
            'langcode' => $variables['langCodeID'],
          ])
          // If they dont, create a new row with all values.
          ->insertFields([
            'uid' => $variables['currentUID'],
            'nid' => $variables['currentNID'],
            'timestamp' => $variables['currentTimestamp'],
            'bundle' => $variables['contentBundle'],
            'langcode' => $variables['langCodeID'],
          ])
          ->execute();

        }
      }
    }
    else {

      // Insert/Update our database data.
      $database->merge('node_access_timestamp_by_user')
      // Check if current UID and NID exist in table.
      ->key([
        'uid' => $variables['currentUID'],
        'nid' => $variables['currentNID'],
      ])
      // If they do, update the timestamp/bundle/langcode field values.
      ->updateFields([
        'timestamp' => $variables['currentTimestamp'],
        'bundle' => $variables['contentBundle'],
        'langcode' => $variables['langCodeID'],
      ])
      // If they dont, create a new row with all values.
      ->insertFields([
        'uid' => $variables['currentUID'],
        'nid' => $variables['currentNID'],
        'timestamp' => $variables['currentTimestamp'],
        'bundle' => $variables['contentBundle'],
        'langcode' => $variables['langCodeID'],
      ])
      ->execute();

    }

  }

}

/**
* Implements HOOK_install().
*
* Creates some default entries in node_access_timestamp_by_user table.
*
* @ingroup node_access_timestamp_by_user
*/
function node_access_timestamp_by_user_install() {

  // Get current timestamp.
  $variables['currentTimestamp'] = intval(time());

  // Connect to database.
  $database = \Drupal::database();

  // Define default values.
  $fields = [
    'uid' => 1,
    'nid' => 1,
    'timestamp' => 1,
    'bundle' => '',
    'langcode' => 'en',
  ];

  // Insert our default values.
  $database
    ->insert('node_access_timestamp_by_user')
    ->fields($fields)
    ->execute();
}

/**
* Implements HOOK_schema().
*
* Defines the node_access_timestamp_by_user database table.
*
* @ingroup node_access_timestamp_by_user
*/
function node_access_timestamp_by_user_schema() {

  $schema['node_access_timestamp_by_user'] = [
    'description' => 'Stores node access timestamp per user per node.',
    'fields' => [
      'uid' => [
        'type' => 'int',
        'length' => 32,
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'description' => "User ID",
      ],
      'nid' => [
        'type' => 'int',
        'length' => 32,
        'not null' => TRUE,
        'default' => 1,
        'description' => "Node ID",
      ],
      'timestamp' => [
        'type' => 'int',
        'length' => 11,
        'not null' => TRUE,
        'default' => 1,
        'description' => "Node access timestamp",
      ],
      'bundle' => [
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "Node bundle",
      ],
      'langcode' => [
        'type' => 'varchar_ascii',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'en',
        'description' => "langcode",
      ],
    ],
    'primary key' => ['timestamp'],
    'indexes' => [
      'uid' => ['uid'],
      'nid' => ['nid'],
      'timestamp' => ['timestamp'],
      'bundle' => ['bundle'],
      'langcode' => ['langcode'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_help().
 *
 * {@inheritdoc}
 */
function node_access_timestamp_by_user_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.node_access_timestamp_by_user':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}
