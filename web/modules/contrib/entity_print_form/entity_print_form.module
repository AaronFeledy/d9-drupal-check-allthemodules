<?php

/**
 * @file
 * Contains entity_print_form.module.
 */

use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;

/**
 * Change a form element to output a value.
 */
function entity_print_form_alter_element_value(&$element, $value) {
  if (isset($element['value']['#type'])) {
    $element['value']['#type'] = 'item';
  }
  else {
    $element['#type'] = 'item';
  }
  $element['text_value'] = [
    '#weight' => 999,
    '#markup' => '<span class="entity-print-form-replacement">' . $value . '</span>',
  ];
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_boolean_checkbox_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    $value = $element['value']['#default_value'] === TRUE ? 'Yes' : 'No';
    entity_print_form_alter_element_value($element, $value);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function entity_print_form_preprocess_file_managed_file(&$variables) {
  if (isset($variables['element']['#entity_print_form_file_name'])) {
    $element = [];
    entity_print_form_alter_element_value($element, $variables['element']['#entity_print_form_file_name']);

    $variables['element'] = $element['text_value'];
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_workflow_default_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    // Special snowflake handling of the workflow state field.
    $value = NULL;

    if (isset($element['to_sid']['#default_value'])) {
      $value = $element['to_sid']['#options'][$element['to_sid']['#default_value']];
    }
    elseif (isset($element['to_sid']['#value'])) {
      $value = $element['to_sid']['#options'][$element['to_sid']['#value']];
    }

    if ($value) {
      $element['to_sid']['#type'] = 'item';
      $element['to_sid']['text_value'] = [
        '#weight' => 999,
        '#markup' => '<span class="entity-print-form-replacement">' . $value . '</span>',
      ];
    }

    // @TODO  handle comments.
    unset($element['comment']);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_file_generic_form_alter(&$element, FormStateInterface $form_state, $context) {
  // @TODO config whether to apply file renaming.
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    if (!empty($element['#default_value']['target_id'])) {
      $file = File::load($element['#default_value']['target_id']);
      $uri = $file->getFileUri();
      $uri_parts = explode('/', $uri);
      $file_name = end($uri_parts);

      // Allow other modules to alter the file name.
      $module_handler = \Drupal::moduleHandler();
      $context = [
        'entity' => $form_state->getFormObject()->getEntity(),
      ];

      $module_handler->alter('entity_print_form_file_name', $file_name, $context);

      $element['#entity_print_form_file_name'] = $file_name;
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_datetime_default_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form']) && $element['value']['#default_value'] !== NULL) {
    // @TODO this should come from the widget.
    $date = \Drupal::service('date.formatter')->format($element['value']['#default_value']->format('U'), 'custom', 'd/m/Y');
    entity_print_form_alter_element_value($element, $date);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_options_buttons_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    if ($element['#type'] == 'checkboxes') {
      $value = implode(', ', $element['#default_value']);
      entity_print_form_alter_element_value($element, $value);
    }
    else {
      if ($element['#default_value'] !== NULL) {
        entity_print_form_alter_element_value($element, $element['#options'][$element['#default_value']]);
      }
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_options_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    // @TODO handle multiple selection.
    if (array_key_exists('0', $element['#default_value'])) {
      entity_print_form_alter_element_value($element, $element['#default_value'][0]);
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_number_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    entity_print_form_alter_element_value($element, $element['value']['#default_value']);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_string_textfield_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    entity_print_form_alter_element_value($element, $element['value']['#default_value']);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function entity_print_form_field_widget_string_textarea_form_alter(&$element, FormStateInterface $form_state, $context) {
  $form_state_storage = $form_state->getStorage();
  if (isset($form_state_storage['entity_print_form'])) {
    // Change textareas so that we can see their complete content.
    $value = str_replace("\n", '<br>', $element['value']['#default_value']);
    entity_print_form_alter_element_value($element, $value);
  }
}

/**
 * Fetch the field definitions of an entity and filter out the base fields.
 */
function entity_print_form_fetch_field_definitions($entity_type, $bundle) {
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);

  $field_definitions = array_filter($field_definitions, function ($field_definition) {
    return $field_definition instanceof FieldConfigInterface;
  });

  uasort($field_definitions, ['\Drupal\Core\Config\Entity\ConfigEntityBase', 'sort']);

  return $field_definitions;
}

/**
 * Check if form state value is empty.
 */
function entity_print_form_value_empty($form_state_value_field, $field_definition) {
  $valid = NULL;

  if ($field_definition->getType() == 'entity_reference') {
    $valid = !empty($form_state_value_field[0]['target_id']);
  }
  if ($field_definition->getType() == 'file') {
    $valid = isset($form_state_value_field[0]['fids'][0]);
  }
  elseif ($field_definition->getType() == 'boolean') {
    $valid = !empty($form_state_value_field['value']);
  }
  elseif (is_array($form_state_value_field) &&
    array_key_exists(0, $form_state_value_field) &&
    is_array($form_state_value_field[0]) &&
    array_key_exists('value', $form_state_value_field[0])) {

    $valid = !(empty($form_state_value_field[0]['value']) &&
      $form_state_value_field[0]['value'] !== '0');
  }
  elseif (is_array($form_state_value_field) &&
    array_key_exists('value', $form_state_value_field)) {

    $valid = !(empty($form_state_value_field['value']) &&
      $form_state_value_field['value'] !== '0');
  }
  elseif (empty($form_state_value_field) ||
    is_array($form_state_value_field) &&
    array_key_exists('0', $form_state_value_field) &&
    is_array($form_state_value_field[0]) &&
    array_key_exists('value', $form_state_value_field[0]) &&
    $form_state_value_field[0]['value'] === NULL) {

    $valid = FALSE;
  }
  elseif (is_array($form_state_value_field) &&
    array_key_exists('0', $form_state_value_field) &&
  !is_array($form_state_value_field[0])) {

    $valid = !(empty($form_state_value_field[0]) &&
      $form_state_value_field[0] !== '0');
  }

  // @TODO change this to 'empty'.
  return !$valid;
}

/**
 * Implements hook_entity_print_form_content_alter().
 */
function entity_print_form_entity_print_form_content_alter(&$form, $context) {
  // @TODO add in a config page to be able to set this.
  $hide_empty_multiple_fields = TRUE;
  $hide_empty_fields = FALSE;

  $entity = $context['entity'];
  $form_display = $context['form_display'];

  $bundle = $form_display->getTargetBundle();
  $entity_type_id = $form_display->getTargetEntityTypeId();
  $entity_type_manager = \Drupal::entityTypeManager();

  $module_handler = \Drupal::moduleHandler();

  $form_object = $entity_type_manager->getFormObject($entity->getEntityTypeId(), $form_display->getMode());
  $form_object->setEntity($entity);

  // Populate values in FormState.
  $form_state = new FormState();
  $rebuilt_form = \Drupal::formBuilder()->buildForm($form_object, $form_state);
  $form_state_values = $form_state->getValues();

  $entity_type = $form_display->getTargetEntityTypeId();
  $field_definitions = entity_print_form_fetch_field_definitions($entity_type, $bundle);

  foreach ($field_definitions as $field_name => $field_definition) {
    if ($hide_empty_fields) {
      // @TODO fill this in.
    }

    if ($hide_empty_multiple_fields) {
      $field_storage = $field_definition->getFieldStorageDefinition();
      $cardinality = $field_storage->getCardinality();

      if ($cardinality > 1) {
        $field_definition_type = $field_definition->getType();

        if ($field_definition_type == 'field_collection') {
          $fc_field_definitions = entity_print_form_fetch_field_definitions('field_collection_item', $field_name);
          foreach ($form_state_values[$field_name] as $key => $value) {
            $all_empty = TRUE;

            foreach ($fc_field_definitions as $fc_field_name => $fc_field_definition) {
              if (!isset($form_state_values[$field_name][$key][$fc_field_name])) {
                continue;
              }

              $empty = entity_print_form_value_empty($form_state_values[$field_name][$key][$fc_field_name], $fc_field_definition);

              $all_empty = $all_empty && $empty;
            }

            if ($all_empty) {
              $form[$field_name]['widget'][$key]['#access'] = FALSE;
            }
          }

          continue;
        }

        if ($field_definition_type == 'file') {
          foreach ($form_state_values[$field_name] as $key => $value) {
            if (empty($form_state_values[$field_name][$key]['fids'])) {
              $form[$field_name]['widget'][$key]['#access'] = FALSE;
            }
          }

          continue;
        }

        foreach ($form_state_values[$field_name] as $key => $value) {
          if ($value['value'] === '') {
            $form[$field_name]['widget'][$key]['#access'] = FALSE;
          }
        }
      }
    }
  }
}
