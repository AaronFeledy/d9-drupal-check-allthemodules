<?php

use Drupal\block_placeholder\Entity\BlockPlaceholderReference;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * @file
 * The hook implementations for the block placeholder.
 */

/**
 * Implements hook_theme().
 */
function block_placeholder_theme($existing, $type, $theme, $path) {
  return [
    'block_placeholder' => [
      'render element' => 'element',
      'path' => $path . '/templates',
      'template' => 'block-placeholder',
      'file' => 'block_placeholder.theme',
    ]
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function block_placeholder_theme_suggestions_block_placeholder(array $variables) {
  $suggestions = [];

  $element = $variables['element'];
  $theme_hook = $variables['theme_hook_original'];

  /** @var BlockPlaceholderReference $placeholder */
  $placeholder = $element['#placeholder'];

  /** @var \Drupal\block_content\Entity\BlockContent $block_content */
  $block_content = isset($element['content']['#block_content'])
    ? $element['content']['#block_content']
    : NULL;

  $suggestions[] = $theme_hook . '__' .  $placeholder->id();

  if (isset($block_content)) {
    $suggestions[] = $theme_hook . '__' .  $block_content->getEntityTypeId() . '__' . $block_content->bundle();
  }

  return $suggestions;
}

/**
 * Implements hook_entity_form_BASE_FORM_ID_alter().
 */
function block_placeholder_form_block_content_form_alter(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();

  $form['block_placeholder_info'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => new TranslatableMarkup('Block Placeholder'),
    '#group' => 'advanced',
  ];
  $manager = block_placeholder_get_manager();

  $form['block_placeholder_info']['block_placeholder'] = [
    '#type' => 'select',
    '#title' => new TranslatableMarkup('Block Placeholder'),
    '#description' => new TranslatableMarkup('Select the block placeholder the 
    content will be rendered.'),
    '#group' => 'block_placeholder_info',
    '#options' => $manager->getOptions($entity->bundle()),
    '#empty_option' => new TranslatableMarkup('- None -'),
    '#default_value' => $entity->block_placeholder->value,
  ];
  $form['block_placeholder_info']['block_placeholder_weight'] = [
    '#type' => 'weight',
    '#title' => new TranslatableMarkup('Content Weight'),
    '#description' => new TranslatableMarkup('Set the weight on which the content 
    would be ordered. <br/> <strong>NOTE:</strong> The higher the weight value 
    the more it will sink to the bottom.'),
    '#delta' => 50,
    '#group' => 'block_placeholder_info',
    '#default_value' => $entity->block_placeholder_weight->value,
  ];
  $form['block_placeholder_info']['block_placeholder_class'] = [
    '#type' => 'textfield',
    '#title' => new TranslatableMarkup('Content Classes'),
    '#description' => new TranslatableMarkup('Set classnames that should be 
      used when rendering the block placeholder <br/> <strong>NOTE:</strong> 
      Use a comma delimiter when defining multiple.'),
    '#size' => 40,
    '#group' => 'block_placeholder_info',
    '#default_value' => $entity->block_placeholder_class->value,
  ];

  $form['#validate'][] = 'block_placeholder_block_content_validate';
}

/**
 * Define block content entity form validation.
 *
 * @param $form
 *   The form elements.
 * @param FormStateInterface $form_state
 *   The form state object.
 */
function block_placeholder_block_content_validate($form, FormStateInterface $form_state) {
  if (!$form_state->hasValue('block_placeholder')) {
    return;
  }
  $placeholder_id = $form_state->getValue('block_placeholder');

  if (empty($placeholder_id)) {
    return;
  }
  $manager = block_placeholder_get_manager();
  $entity = $form_state->getFormObject()->getEntity();

  /** @var BlockPlaceholderReference $placeholder */
  $placeholder = $manager->load($placeholder_id);
  $exclude_ids = !$entity->isNew() ? [$entity->id()] : [];

  if ($placeholder->hasReferenceMetLimit($exclude_ids)) {
    $form_state->setErrorByName('block_placeholder_info', new TranslatableMarkup(
      'The block placeholder reference limit has been met.'
    ));
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function block_placeholder_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'block_content') {
    $fields['block_placeholder'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Block placeholder'))
      ->setDescription(new TranslatableMarkup('Define the block placeholder reference.'))
      ->setRevisionable(TRUE);
    $fields['block_placeholder_class'] = BaseFieldDefinition::create('string')
      ->setLabel(new TranslatableMarkup('Block placeholder content class'))
      ->setDescription(new TranslatableMarkup('Define the block placeholder content reference class.'))
      ->setRevisionable(TRUE);
    $fields['block_placeholder_weight'] = BaseFieldDefinition::create('integer')
      ->setLabel(new TranslatableMarkup('Block placeholder content weight'))
      ->setDescription(new TranslatableMarkup('Define the block placeholder content reference weight.'))
      ->setRevisionable(TRUE);
  }

  return $fields;
}

/**
 * Block placeholder get manager.
 *
 * @return mixed
 */
function block_placeholder_get_manager() {
  return Drupal::service('block_placeholder.manager');
}
