<?php

/**
 * Implements hook_help().
 */
function pwned_passwords_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    case 'pwned_passwords.admin_form':
      $output = '<p>'.t("Configure in which forms and fields you want to run the Pwned Password validation.").'</p>';
      break;

  }
  return $output;
}

/**
 * Implements hook_element_info_alter().
 */
function pwned_passwords_element_info_alter(array &$info) {
  $is_all_validation_enabled = _pwned_passwords_get_config()->get('validate_all_passwords');

  // Prevent setting this here means that requires a cache rebuild to register this change, this is taken care on config save.
  if ($is_all_validation_enabled && isset($info['password'])) {
    $info['password']['#element_validate'][] = '_pwned_passwords_validate_form_element';
  }
}

/**
 * @param $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _pwned_passwords_validate_form_element($element, \Drupal\Core\Form\FormStateInterface $form_state) {
  if (isset($element['#value'], $element['#type']) && ($element['#type'] == 'password' || $element['#type'] == 'password_confirm')) {
    // Do not validate current password field to prevent issues
    if (isset($element['#name']) && $element['#name'] !== 'current_pass') {
      return;
    }

    $plaintextPassword = $element['#value'];
    $pwnCount = _pwned_passwords_password_pwn_count($plaintextPassword);

    // Warning and Error thresholds
    $warningThreshold = _pwned_passwords_get_config()->get("pwned_options.threshold_warning");
    $errorThreshold = _pwned_passwords_get_config()->get("pwned_options.threshold_error");

    if ($errorThreshold > 0 && $pwnCount >= $errorThreshold) {
      $notificationMessage = _pwned_passwords_get_message($pwnCount, 'error');

      if (_pwned_passwords_get_config()->get('pwned_options.error_blocks_submit')) {
        // Block submission setting the error on the element.
        $form_state->setError($element, $notificationMessage);
      }
      else {
        // Just set a message otherwise
        drupal_set_message($notificationMessage, 'error');
      }
    }
    elseif ($warningThreshold > 0 && $pwnCount >= $warningThreshold) {
      $notificationMessage = _pwned_passwords_get_message($pwnCount, 'warning');
      drupal_set_message($notificationMessage, 'warning');
    }
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function _pwned_passwords_validate_user_form(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $plaintextPassword = $form_state->getValue('pass');
  if (empty($plaintextPassword)) {
    return;
  }

  $pwnCount = _pwned_passwords_password_pwn_count($plaintextPassword);

  // Warning and Error thresholds
  $warningThreshold = _pwned_passwords_get_config()->get("pwned_options.threshold_warning");
  $errorThreshold = _pwned_passwords_get_config()->get("pwned_options.threshold_error");

  if ($errorThreshold > 0 && $pwnCount >= $errorThreshold) {
    $notificationMessage = _pwned_passwords_get_message($pwnCount, 'error');

    if (_pwned_passwords_get_config()->get('pwned_options.error_blocks_submit')) {
      // Block submission setting the error on the element.
      $form_state->setErrorByName('pass', $notificationMessage);
    }
    else {
      // Just set a message otherwise
      drupal_set_message($notificationMessage, 'error');
    }
  }
  elseif ($warningThreshold > 0 && $pwnCount >= $warningThreshold) {
    $notificationMessage = _pwned_passwords_get_message($pwnCount, 'warning');
    drupal_set_message($notificationMessage, 'warning');
  }
}

/**
 * Implements hook_form_user_login_form_alter().
 */
function pwned_passwords_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Only validate if enabled.
  if (isset(_pwned_passwords_get_enabled_forms()['user_login_form'])) {
//    $form['pass']['#element_validate'][] = '_pwned_passwords_validate_form_element';
  }    $form['#validate'][] = '_pwned_passwords_validate_user_form';

}

/**
 * Implements hook_form_user_register_form_alter().
 */
function pwned_passwords_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Only validate if enabled.
  if (isset(_pwned_passwords_get_enabled_forms()['user_register_form'])) {
//    $form['pass']['#element_validate'][] = '_pwned_passwords_validate_form_element';
    $form['#validate'][] = '_pwned_passwords_validate_user_form';
  }
}

/**
 * Implements hook_form_user_form_alter().
 */
function pwned_passwords_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Only validate if enabled.
  if (isset(_pwned_passwords_get_enabled_forms()['user_form'])) {
    //    $form['pass']['#element_validate'][] = '_pwned_passwords_validate_form_element';
    $form['#validate'][] = '_pwned_passwords_validate_user_form';
  }
}

/**
 * @param $plaintext_password
 *
 * @return int
 */
function _pwned_passwords_password_pwn_count($plaintext_password) {
  /** @var \Drupal\pwned_passwords\PwnedPasswordCheckerControllerInterface $pwnController */
  $pwnController = \Drupal::service('pwned_passwords.validator');

  return $pwnController->getPasswordPwnage($plaintext_password);
}

/**
 * Get module configuration.
 *
 * @return \Drupal\Core\Config\ImmutableConfig
 */
function _pwned_passwords_get_config() {
  return \Drupal::config('pwned_passwords.config');
}

/**
 * Gets the list of the enabled forms, by form_id
 *
 * @return array
 */
function _pwned_passwords_get_enabled_forms() {
  return _pwned_passwords_get_config()->get('check_enabled_forms') ?: [];
}

/**
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 */
function _pwned_passwords_get_message(int $pwn_count, string $level = 'error'){
  $message = _pwned_passwords_get_config()->get("messages.{$level}");
  if ($message) {
    return t($message, ['@count' => $pwn_count,]);
  }

  // TODO: Add watchdog? Throw exception?
  return t("Missing message type: @type", ['@type' => $level]);
}
