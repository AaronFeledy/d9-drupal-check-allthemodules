<?php
/**
 * @file
 * Main file for the views_evi module with some utility functions.
 *
 * @todo Altering the exposed form should be done in the display extender as soon as it can alter the exposed form.
 * Swapping out the exposed form plugin is not an option as the delegation pattern is a PITA
 * in PHP as long as __call does not handle references.
 *
 * @todo Move form and value handling to plugins.
 *
 * @todo Move tokens to plugins.
 *
 * @todo Provide field tokens and alter the query so they are unquoted.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form.
 *
 * Hides exposed filter forms.
 *
 * @param $form
 * @param $form_state
 */
function views_evi_form_views_exposed_form_alter(&$form, FormStateInterface &$form_state) {
  /** @var \Drupal\views\Plugin\views\display\DisplayPluginInterface $display */
  $display = $form_state->get('view')->display_handler;
  /** @var \Drupal\views_evi\Plugin\views\display_extender\ViewsEviDisplayExtender $views_evi */
  if (isset($display->getExtenders()['views_evi'])) {
    $views_evi = $display->getExtenders()['views_evi'];
    $views_evi->viewsEviExposedFormAlter($form, $form_state);
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * Injects exposed filter values.
 *
 * @param ViewExecutable $view
 * @param string $display_id
 * @param array $args
 */
function views_evi_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  /** @var \Drupal\views_evi\Plugin\views\display_extender\ViewsEviDisplayExtender $views_evi */
  if (isset($view->displayHandlers->get($display_id)->getExtenders()['views_evi'])) {
    $views_evi = $view->displayHandlers->get($display_id)->getExtenders()['views_evi'];
    $views_evi->viewsEviPreView();
  }
}

/**
 * Get default plugin class.
 *
 * @return array
 */
function views_evi_plugin_types() {
  $plugin_types['value'] = [
    'label' => t('Value'),
    'default_plugin_id' => 'exposed_form',
  ];
  $plugin_types['visibility'] = [
    'label' => t('Visibility'),
    'default_plugin_id' => 'yes',
  ];
  return $plugin_types;
}

/**
 * Get plugin list.
 *
 * @param $plugin_type
 * @return mixed
 */
function views_evi_plugin_labels($plugin_type) {
  /** @var \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager */
  if ($plugin_type == 'value') {
    $plugin_manager = \Drupal::service('plugin.manager.views_evi.value');
  }
  if ($plugin_type == 'visibility') {
    $plugin_manager = \Drupal::service('plugin.manager.views_evi.visibility');
  }

  $labels = array_map(function ($definition) {
    return $definition['title'];
  }, $plugin_manager->getDefinitions());

  return $labels;
}
