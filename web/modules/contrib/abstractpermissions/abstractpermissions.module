<?php

use Drupal\abstractpermissions\FormAlter\PermissionsFormOnlyUngoverned;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\RoleInterface;

/**
 * Implements hook_ENTITY_TYPE_presave() for user_role.
 */
function abstractpermissions_user_role_presave(RoleInterface $role) {
  abstractpermissions_service()->denormalizeRole($role);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for user_role.
 */
function abstractpermissions_user_role_insert(RoleInterface $role) {
  abstractpermissions_service()->invalidate();
}

/**
 * Implements hook_ENTITY_TYPE_update() for user_role.
 */
function abstractpermissions_user_role_update(RoleInterface $role) {
  abstractpermissions_service()->invalidate();
}

/**
 * Permission callback.
 */
function abstractpermissions_permissions_callback() {
  return abstractpermissions_service()->permissionCallback();
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_permissions.
 */
function abstractpermissions_form_user_admin_permissions_alter(&$form, FormStateInterface $form_state, $form_id) {
  PermissionsFormOnlyUngoverned::alterForm($form['permissions']);
}

/**
 * @return \Drupal\abstractpermissions\AbstractPermissionsServiceInterface
 */
function abstractpermissions_service() {
  return \Drupal::service('abstractpermissions.service');
}

/**
 * Implements hook_ENTITY_TYPE_insert() for abstractpermissions_abstraction.
 */
function abstractpermissions_abstractpermissions_abstraction_insert(EntityInterface $entity) {
  abstractpermisisons_changed();
}

/**
 * Implements hook_ENTITY_TYPE_update() for abstractpermissions_abstraction.
 */
function abstractpermissions_abstractpermissions_abstraction_update(EntityInterface $entity) {
  abstractpermisisons_changed();
}

/**
 * Implements hook_ENTITY_TYPE_delete() for abstractpermissions_abstraction.
 */
function abstractpermissions_abstractpermissions_abstraction_delete(EntityInterface $entity) {
  abstractpermisisons_changed();
}

function abstractpermisisons_changed() {
  // Resave all roles to trigger denormalization.
  foreach (user_roles() as $role) {
    $role->save();
  }
}
