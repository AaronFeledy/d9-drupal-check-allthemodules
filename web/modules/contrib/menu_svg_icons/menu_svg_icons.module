<?php

/**
 * @file
 * Module file for menu_svg_icons.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_svg_icons\Entity\IconSetMenu;
use Drupal\menu_svg_icons\Entity\IconSet;
use Drupal\menu_svg_icons\Entity\MenuSvgIconsItemTree;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function menu_svg_icons_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.menu_svg_icons':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function menu_svg_icons_form_menu_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $menu = \Drupal::routeMatch()->getParameter('menu');
  if ($menu->get('id') != 'admin') {
    $options = [
      'no_icon_set' => t('No icon set for this menu'),
    ];

    $entity_manager = \Drupal::entityTypeManager();
    $icon_sets = $entity_manager->getStorage('menu_svg_icons_icon_set')->loadMultiple();
    foreach ($icon_sets as $entity_key => $entity) {
      $options[$entity_key] = $entity->label;
    }

    $menu = $form_state->getFormObject()->getEntity();
    $menu_name = $menu->get('id');
    $icon_menu_elm = \Drupal::config('menu_svg_icons.icon_set_menu.' . $menu_name);
    $form['menu_svg_icons_icon_set'] = [
      '#type' => 'select',
      '#title' => t('Icon set for this menu'),
      '#weight' => '0',
      '#options' => $options,
      '#default_value' => isset($icon_menu_elm) ? $icon_menu_elm->get('icon_set') : '',
    ];

    $form['actions']['submit']['#submit'][] = '_menu_svg_icons_menu_edit_form_submit';
  }
}

/**
 * Submit function for menu edit form.
 */
function _menu_svg_icons_menu_edit_form_submit($form, FormStateInterface $form_state) {
  $menu = $form_state->getFormObject()->getEntity();
  $menu_name = $menu->get('id');
  $icon_set = $menu->get('menu_svg_icons_icon_set');

  $icon_menu_elm = IconSetMenu::load($menu_name);
  if (!$icon_menu_elm) {
    $icon_menu_elm = IconSetMenu::create([
      'id' => $menu_name,
      'icon_set' => $icon_set,
    ], 'menu_svg_icons_icon_set_menu');
  }
  else {
    $icon_menu_elm->set('icon_set', $icon_set);
  }

  $icon_menu_elm->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_svg_icons_form_menu_link_edit_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $menu_link_id = $form['menu_link_id']['#value'];

  $link_service = \Drupal::service('plugin.manager.menu.link');
  $menu_link = $link_service->getDefinition($menu_link_id);

  if ($icon_set_menu = \Drupal::config('menu_svg_icons.icon_set_menu.' . $menu_link['menu_name'])) {
    $icon_set_id = $icon_set_menu->get('icon_set');
    if ($icon_set_id && $icon_set_id != 'no_icon_set' &&
      ($icon_set = \Drupal::config('menu_svg_icons.icon_set.' . $icon_set_id)) &&
      ($icon_set_src = $icon_set->get('source'))) {

      $xml = simplexml_load_string($icon_set_src);
      $symbols = $xml->defs->symbol;

      $options = [
        'no_icon' => t('No icon'),
      ];
      foreach ($symbols as $symbol) {
        if (is_object($symbol)) {
          $id = (string) $symbol['id'];
          $options[$id] = $id;
        }
      }

      $current_icon = \Drupal::config('menu_svg_icons.item_tree.' . $menu_link_id)->get('icon');
      $form['menu_svg_icons_menu_item_tree_icon'] = [
        '#type' => 'select',
        '#title' => t('Icon'),
        '#weight' => 5,
        '#options' => $options,
        '#default_value' => $current_icon ? $current_icon : 'no_icon',
      ];
      $form['#submit'][] = '_menu_svg_icons_menu_link_edit_form_submit';
    }
  }
}

/**
 * Submit function for menu link edit form.
 */
function _menu_svg_icons_menu_link_edit_form_submit($form, FormStateInterface $form_state) {
  $icon = $form_state->getValue('menu_svg_icons_menu_item_tree_icon');
  $menu_link_id = $form_state->getValue('id');

  // Create new, or update existing.
  $menu_item_tree = MenuSvgIconsItemTree::load($menu_link_id);
  if (!$menu_item_tree) {
    $menu_item_tree = MenuSvgIconsItemTree::create([
      'id' => $menu_link_id,
      'icon' => $icon,
    ], 'menu_svg_icons_item_tree');
  }
  else {
    $menu_item_tree->set('icon', $icon);
  }
  $menu_item_tree->save();
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function menu_svg_icons_form_menu_link_content_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $menu_link = $form_state->getFormObject()->getEntity();
  $menu_name = $menu_link->menu_name->value;

  if ($icon_set_menu = \Drupal::config('menu_svg_icons.icon_set_menu.' . $menu_name)) {
    $icon_set_id = $icon_set_menu->get('icon_set');
    if ($icon_set_id && $icon_set_id != 'no_icon_set' &&
      ($icon_set = \Drupal::config('menu_svg_icons.icon_set.' . $icon_set_id)) &&
      ($icon_set_src = $icon_set->get('source'))) {
      $menu_link_options = $menu_link->link->first()->options ?: [];
      $menu_link_icon = isset($menu_link_options['icon']) ? $menu_link_options['icon'] : 'no_icon';

      $xml = simplexml_load_string($icon_set_src);
      $symbols = $xml->defs->symbol;

      $options = [
        'no_icon' => t('No icon'),
      ];
      foreach ($symbols as $symbol) {
        if (is_object($symbol)) {
          $id = (string) $symbol['id'];
          $options[$id] = $id;
        }
      }
      $form['options']['icon'] = [
        '#type' => 'select',
        '#title' => t('Icon'),
        '#weight' => -2,
        '#options' => $options,
        '#default_value' => $menu_link_icon,
      ];

      $form['actions']['submit']['#submit'][] = '_menu_svg_icons_menu_link_content_form_submit';
    }
  }
}

/**
 * Submit function for menu link content add / edit form.
 */
function _menu_svg_icons_menu_link_content_form_submit($form, FormStateInterface $form_state) {
  $menu_link = $form_state->getFormObject()->getEntity();
  $options = ['icon' => $form_state->getValue('icon')];
  $menu_link_options = $menu_link->link->first()->options;

  $menu_link->link->first()->options = array_merge($menu_link_options, $options);
  $menu_link->save();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function menu_svg_icons_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_menu_block') {

    // Get the icon set based on the menu.
    if ($icon_set_menu_conf = \Drupal::config('menu_svg_icons.icon_set_menu.' . $variables['derivative_plugin_id'])) {
      if ($icon_set = \Drupal::config('menu_svg_icons.icon_set.' . $icon_set_menu_conf->get('icon_set'))) {
        $variables['#attached']['library'][] = 'menu_svg_icons/menu-svg-icons';

        // Sanitize the svg source.
        $icon_set_source_sanitized = IconSet::sanitize($icon_set->get('source'));

        // Inject the svg code to be used in this menu.
        if ($icon_set_source_sanitized) {
          $variables['title_suffix']['svg'] = [
            '#type' => 'inline_template',
            '#template' => '<div style="display:none">' . $icon_set_source_sanitized . '</div>',
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function menu_svg_icons_preprocess_menu(&$variables) {
  /** @var \Drupal\menu_svg_icons\Entity\IconSetMenu $icon_set_menu_conf */
  if ($icon_set_menu_conf = IconSetMenu::load($variables['menu_name'])) {
    /** @var \Drupal\menu_svg_icons\IconSetInterface $icon_set */
    if ($icon_set = IconSet::load($icon_set_menu_conf->get('icon_set'))) {
      IconSet::processMenuLinks($icon_set, $variables['items']);
    }
  }
}

/**
 * Implements hook_theme().
 */
function menu_svg_icons_theme() {
  return [
    'menu_svg_icons_link' => [
      'variables' => [
        'title' => NULL,
        'icon' => NULL,
        'icon_height' => NULL,
        'icon_width' => NULL,
        'placement' => NULL,
      ],
    ],
  ];
}
