<?php

/**
 * @file
 * Implements code to enforce human behavior
 */

/**
 * Implements hook_form_alter().
 *
 */
function human_form_alter (&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  $selectedform = \Drupal::config('human.settings')->get('human_form');
  $selected = explode(',', $selectedform);
  $selected = array_filter(array_map('trim', $selected));
  if (in_array($form_id, $selected)) {
    $form['#validate'][] = 'human_behavior_check';
  }
}

/**
 * Check and validate human behavior.
 */
function human_behavior_check(&$form, &$form_state) {
  // Return without check if it is in maintenance mode.
  $mode = \Drupal::state()->get('system.maintenance_mode', FALSE);

  if ($mode) {
    return;
  }
  $input = $form_state->getUserInput();
  $token = $input['drupal_impression_id'];
  $impression = impression_token_verify($token);
  if ($impression) {
    if (time() - $impression < 10800) {
      return;
    }
  }
  $form_state->setError('title', t('Catpcha verification failed.'));
}

/**
 * Implements hook_permission().
 */
function human_permission() {
  return array(
    'administer human' => array(
      'title' => t('Administer human module'),
      'description' => t('Perform administration tasks for human module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function human_menu() {
  $items = array();

  $items['admin/config/people/human'] = array(
    'title' => 'Human Configuration',
    'description' => 'Human form configuration interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('human_settings'),
    'access arguments' => array('administer human'),
    'file' => 'human.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
