<?php

/**
 * @file
 * Contains twitter_entity.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function twitter_entity_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the twitter_entity module.
    case 'help.page.twitter_entity':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Saves twitter feed as drupal entity') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function twitter_entity_cron() {
  // Access twitter entity settings.
  $config = \Drupal::configFactory()->getEditable('twitter_entity.settings');

  // Default to an hourly interval. Of course, cron has to be running at least,
  // hourly for this to work.
  $interval = $config->get('fetch_interval');
  $interval = !empty($interval) ? $interval : 3600;

  $nextExecution = $config->get('next_execution');
  $nextExecution = !empty($nextExecution) ? $nextExecution : 0;

  if (REQUEST_TIME >= $nextExecution) {
    $twitterManager = \Drupal::service('twitter_entity.twitter_manager');
    $pullStatus = $twitterManager->pull();

    // If there are some errors while pulling add information to logs.
    if (is_array($pullStatus) && !empty($pullStatus['error'])) {
      \Drupal::logger('twitter_entity')->error($pullStatus['error']);
    }
    else {
      // If no errors.
      \Drupal::logger('twitter_entity')->notice($pullStatus);
      $config->set('next_execution', REQUEST_TIME + $interval)->save();
    }
  }
}

/**
 * Implements hook_theme().
 */
function twitter_entity_theme($existing, $type, $theme, $path) {
  $items = [];

  $items['twitter_entity'] = [
    'render element' => 'elements',
    'template' => 'twitter_entity',
  ];

  return $items;
}

/**
 * Prepares variables for Twitter entity template.
 *
 * Default template: twitter_entity.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_twitter_entity(array &$variables) {
  // Fetch TwitterEntity Entity Object.
  /** @var \Drupal\twitter_entity\Entity\TwitterEntity $twitter_entity */
  $twitter_entity = $variables['elements']['#twitter_entity'];

  $variables['created'] = $twitter_entity->getCreatedTime();
  $variables['tweet_id'] = $twitter_entity->getTweetId();
  $variables['tweet_media'] = $twitter_entity->getTweetMedia();
  $variables['twitter_user'] = $twitter_entity->getTwitterUser();
  $variables['tweet_text'] = $twitter_entity->getTweetText();
  $variables['full_response'] = $twitter_entity->getFullResponse();

  if ($variables['tweet_media']) {
    $variables['image'] = [
      '#theme' => 'image',
      '#uri' => $variables['tweet_media'],
      '#alt' => 'Tweet image',
    ];
  }

  $variables['attributes']['class'][] = 'twitter-entity';
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['twitter_user']);
}
