<?php

/**
 * @file
 * Contains be_sure.module.
 */

const BE_SURE_STATUS_OK = 'messages--status';
const BE_SURE_STATUS_NOK = 'messages--warning';

define('BE_SURE_MODULE_PATH', drupal_get_path('module', 'be_sure'));

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function be_sure_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the be_sure module.
    case 'help.page.be_sure':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' .
        t('&quot;Provide interface for other modules to make you sure about your Drupal site.&quot;') .
        '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function be_sure_theme($existing, $type, $theme, $path) {
  $base = [
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  ];

  $items['be_sure_multiple'] = $base + [
      'variables' => [
        'titles' => [],
        'elements' => [],
      ],
      'template' => 'be-sure-multiple',
    ];

  $items['be_sure_element'] = $base + [
      'variables' => [
        'items' => [],
        'status' => '',
        'passed' => '',
      ],
      'template' => 'be-sure-element',
    ];

  $items['be_sure_progress_bar'] = $base + [
      'variables' => [
        'percent' => '',
        'message' => '',
        'attributes' => [],
      ],
      'template' => 'be-sure-progress-bar',
    ];

  return $items;
}


/**
 * Return infos information after all hooks.
 *
 * @return array
 *   Array of sure infos.
 */
function be_sure_get_info() {
  $info = &drupal_static(__FUNCTION__);
  if (is_null($info)) {
    $info = \Drupal::moduleHandler()->invokeAll('sure_info');
    \Drupal::moduleHandler()->alter('sure_info', $info);
  }

  return $info;
}

/**
 * Check array of elements.
 *
 * @param array $items
 *   Array of items for proceed.
 *
 * @return array
 *   Array with results and count of passed elements.
 */
function be_sure_proceed_elements(array $items) {
  $result = [];
  $passed = 0;

  foreach ($items as $key => $element) {
    if (empty($element['args']) || !is_array($element['args'])) {
      $element['args'] = [];
    }

    if (call_user_func($element['callback'])) {
      $passed++;
      $result[$key] = [
        'status' => BE_SURE_STATUS_OK,
        'text' => t($element['ok'], $element['args']),
      ];
    }
    else {
      $result[$key] = [
        'status' => BE_SURE_STATUS_NOK,
        'text' => t($element['nok'], $element['args']),
      ];
    }
  }

  return [$result, $passed];
}

/**
 * Let's return old good days when we can create a link in a simple way.
 *
 * @param string $text
 *   Link text.
 * @param string $uri
 *   URI which will be used for building link.
 *
 * @return string
 *   Well generated link.
 */
function be_sure_link_from_uri($text, $uri) {
  $url = Url::fromUri($uri);
  $project_link = Link::fromTextAndUrl($text, $url);
  $project_link = $project_link->toRenderable();

  return render($project_link);
}
