<?php

use Drupal\config_translation\ConfigEntityMapper;
use Drupal\config_translation\ConfigFieldMapper;

/**
 * Implements hook_schema().
 */
/*
function smartling_config_translation_schema() {
  $schema['smartling_config_translation'] = array(
    'description' => 'Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific nodes.',
    'fields' => array(
      'id' => array(
        'description' => 'The {node}.nid this record affects.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'langcode' => array(
        'description' => 'The {language}.langcode of this node.',
        'type' => 'varchar_ascii',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'fallback' => array(
        'description' => 'Boolean indicating whether this record should be used as a fallback if a language condition is not provided.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'gid' => array(
        'description' => "The grant ID a user must possess in the specified realm to gain this row's privileges on the node.",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'realm' => array(
        'description' => 'The realm in which the user must possess the grant ID. Each node access node can define one or more realms.',
        'type' => 'varchar_ascii',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'grant_view' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can view this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'grant_update' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can edit this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'grant_delete' => array(
        'description' => 'Boolean indicating whether a user with the realm/grant pair can delete this node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
    ),
    'primary key' => array('nid'),
    'foreign keys' => array(
      'affected_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
  );

  return $schema;
}
*/


function smartling_config_translation_install() {//modules_installed($modules) {
//  return;
//  if (!in_array('smartling_config_translation', $modules)) {
//    return;
//  }
  $mprs = \Drupal::getContainer()->get('plugin.manager.config_translation.mapper')->getMappers();
  $mappers = array_filter($mprs, function($mapper) {
    return ($mapper instanceof ConfigEntityMapper
      && ! $mapper instanceof ConfigFieldMapper)
      ;
  });
  $bundles = [];
  foreach ($mappers as $bundle => $mapper) {
    /** @var ConfigEntityMapper $mapper */
    $definition = $mapper->getPluginDefinition();
    $bundles[$bundle] = ucwords($definition['title']);


    $ids = \Drupal::entityQuery($bundle)->execute();
    $entities = \Drupal::entityManager()->getStorage($bundle)->loadMultiple($ids);

    foreach($entities as $entity) {
      db_insert('smartling_config_translation') // Table name no longer needs {}
      ->fields(array(
        'name' => $entity->id(),
        'bundle' => $bundle,
        'label' => $entity->label(),
      ))
        ->execute();
    }
  }
}