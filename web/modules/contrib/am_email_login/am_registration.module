<?php
use Drupal\am_registration\Controller\DeleteLinkController;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Access\AccessResult;

/**
* Implements hook_mail().
*/
function am_registration_mail($key, &$message, $params) {

 $options = array(
   'langcode' => $message['langcode'],
 );
 switch ($key) {
   case 'send_login_link':
     $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['subject'] = $params['subject'];
     $message['body'][] = $params['body'];
     // $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
     $message['headers'] = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
     break;
 }
}

/**
* Implements hook_mail_alter().
*/
function am_registration_mail_alter(&$message) {
  $path = \Drupal::service('file_system')->realpath(file_default_scheme() . "://")."/mail-log";
  $file = \Drupal::service('file_system')->realpath(file_default_scheme() . "://")."/mail-log/log_".date("d_M_Y").".txt";
  
  if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
      $fp = fopen($file, "a+");
      $txt = "[".date("l jS \of F Y h:i:s A")."] to:".$message['to']." Subject:".$message['subject']." message:".$message['body'][0]."\n";
      $txt .= "--MAIL END--\n";
      $txt .= "------------------------------------------------------------------------------------------------------------";
        fwrite($fp, $txt.PHP_EOL);
        fclose($fp);
  }


//$myfile = file_put_contents('logs.txt', $txt.PHP_EOL , FILE_APPEND | LOCK_EX);
  //$myfile = file_put_contents('mail-logs/log_'.date("d_M_Y").'.txt', $txt.PHP_EOL , FILE_APPEND | LOCK_EX);
}

/**
 * Implements hook_user_cancel().
 */
function am_registration_user_delete($account) {

	try{
		 // Delete any previous link
         $delete_result = new DeleteLinkController;
         $value = $delete_result->delete($account->id());
       }catch (Exception $e) {
        drupal_set_message("Some error occured","error");
      return new RedirectResponse('/user/login');
    }
	
}


//If content tpye is Book OR Sponsorship then access denied showing
function am_registration_node_access($node, $op, $account) {
  if ($op == 'view') {
    if($node->bundle() == "book" || $node->bundle() == "sponsorship"){
      return AccessResult::forbidden();
    }
  }
}

/**
 * Return information about forms that can be protected by Mollom.
 *
 * Mollom invokes this hook for all modules to gather information about forms
 * that can be protected. Only forms that have been registered via this hook are
 * configurable in Mollom's administration interface.
 *
 * @return
 *   An associative array containing information about the forms that can be
 *   protected, keyed by $form_id:
 *   - title: The human-readable name of the form.
 *   - entity: (optional) The internal name of the entity type the form is for,
 *     e.g. 'node' or 'comment'. This is required for all forms that will store
 *     the submitted content persistently. It is only optional for forms that do
 *     not permanently store the submitted form values, such as contact forms
 *     that only send an e-mail, but do not store it in the database.
 *     Note that forms that specify 'entity' also need to specify 'post_id' in
 *     the 'mapping' (see below).
 *   - delete form: (optional) The $form_id of a delete confirmation form
 *     constructor function for 'entity'. Mollom automatically adds the
 *     "Report as inappropriate" options to this confirmation form. Requires a
 *     'post_id' mapping via hook_mollom_form_info(). Requires the delete
 *     confirmation form constructor to assign the mapped post_id key in $form
 *     as a #value. See http://drupal.org/node/645374 for examples. Optionally
 *     limit access to report options by defining 'report access' permissions.
 *   - delete submit: (optional) The submit element for button-level submit
 *     handlers.  This defines the element where the delete submit handlers
 *     are attached.  If the element is nested it should be indicated like
 *     "parent[child][submit" similar to FormState->setErrorByName.  If not
 *     indicated, then form-level submit handlers will be used.
 *   - report path: (optional) A Drupal system path pattern to be used for
 *     reporting an entity to Mollom via a "Report to Mollom" link in e-mail
 *     notifications. This typically points to the menu router path that allows
 *     to delete an entity. The placeholder '%id' is dynamically replaced with
 *     the entity ID. For example, user_mollom_form_list() specifies
 *     'user/%id/cancel'.
 *   - report access: (optional) A list containing user permission strings, from
 *     which the current user needs to have at least one. Should only be used if
 *     no "report access callback" was defined.
 *   - report access callback: (optional) A function name to invoke to check
 *     access to Mollom's dedicated "report to Mollom" form, which should return
 *     either TRUE or FALSE (similar to menu access callbacks).
 *   - report delete callback: (optional) A function name to invoke to delete an
 *     entity after reporting it to Mollom.  The callback will receive the
 *     entity id as an argument.
 *   - entity report access callback: (optional) A function name to invoke to
 *     determine if a user has access to report the entity that the form is for.
 *
 * @see hook_mollom_form_info()
 */
function am_registration_mollom_form_list() {
  // One time login form.
  $forms['registration_form'] = array(
    'title' => t('One time login form'),
  );
  
  return $forms;
}

/**
 * Return information about a form that can be protected by Mollom.
 *
 * @param $form_id
 *   The form id to return information for.
 *
 * @return
 *   An associative array describing the form identified by $form_id:
 *   - mode: (optional) The default protection mode for the form, which can be
 *     one of:
 *     - MOLLOM_MODE_ANALYSIS: Text analysis of submitted form values with
 *       fallback to CAPTCHA.
 *     - MOLLOM_MODE_CAPTCHA: CAPTCHA-only protection.
 *   - type: Internal use only.
 *   - bypass access: (optional) A list of user permissions to check for the
 *     current user to determine whether to protect the form with Mollom or do
 *     not validate submitted form values. If the current user has at least one
 *     of the listed permissions, the form will not be protected.
 *   - moderation callback: (optional) A function name to invoke when a form
 *     submission would normally be discarded. This allows modules to put such
 *     posts into a moderation queue (i.e., to accept but not publish them) by
 *     altering the $form or $form_state that are passed by reference.
 *   - context created callback: (optional) A function to invoke to determine
 *     the creation of the context for this form for textual analysis.  The
 *     function receives the id of the entity being processed and should
 *     return the UNIX timestamp for the creation date or FALSE if unavailable.
 *   - elements: (optional) An associative array of elements in the form that
 *     can be configured for Mollom's text analysis. The site administrator can
 *     only select the form elements to process (and exclude certain elements)
 *     when a form registers elements. Each key is a form API element #parents
 *     string representation of the location of an element in the form. For
 *     example, a key of "myelement" denotes a form element value on the
 *     top-level of submitted form values. For nested elements, a key of
 *     "parent][child" denotes that the value of 'child' is found below 'parent'
 *     in the submitted form values. Each value contains the form element label.
 *     If omitted, Mollom can only provide a CAPTCHA protection for the form.
 *   - mapping: (optional) An associative array to explicitly map form elements
 *     (that have been specified in 'elements') to the data structure that is
 *     sent to Mollom for validation. The submitted form values of all mapped
 *     elements are not used for the post's body, so Mollom can validate certain
 *     values individually (such as the author's e-mail address). None of the
 *     mappings are required, but most implementations most likely want to at
 *     least denote the form element that contains the title of a post.
 *     The following mappings are possible:
 *     - post_id: The form element value that denotes the ID of the content
 *       stored in the database.
 *     - post_title: The form element value that should be used as title.
 *     - post_body: Mollom automatically assigns this property based on all
 *       elements that have been selected for textual analysis in Mollom's
 *       administrative form configuration.
 *     - author_name: The form element value that should be used as author name.
 *     - author_mail: The form element value that should be used as the author's
 *       e-mail address.
 *     - author_url: The form element value that should be used as the author's
 *       homepage.
 *     - author_id: The form element value that should be used as the author's
 *       user uid.
 *     - author_openid: The form element value that consists of Open IDs
 *       of the content author, separated by whitespace.
 *     - author_ip: Mollom automatically assigns the user's IP address if no
 *       explicit form element value mapping was specified.
 */
function am_registration_mollom_form_info($form_id) {
  switch ($form_id) {
    // Mymodule's comment form.
    // case 'mymodule_comment_form':
    //   $form_info = array(
    //     'mode' => MOLLOM_MODE_ANALYSIS,
    //     'bypass access' => array('administer comments'),
    //     'mail ids' => array('mymodule_comment_mail'),
    //     'elements' => array(
    //       'subject' => t('Subject'),
    //       'body' => t('Body'),
    //     ),
    //     'mapping' => array(
    //       'post_id' => 'cid',
    //       'post_title' => 'subject',
    //       'author_name' => 'name',
    //       'author_mail' => 'mail',
    //       'author_url' => 'homepage',
    //     ),
    //   );
    //   return $form_info;

    // Mymodule's user registration form.
    case 'registration_form':
      $form_info = array(
        'mode' => MOLLOM_MODE_CAPTCHA,
      );
      return $form_info;
  }
}