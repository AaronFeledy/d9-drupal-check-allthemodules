<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_menu_links_discovered_alter().
 */
function bootstrap_forms_ui_menu_links_discovered_alter(&$links) {

  // Add the elements testing link to the main menu.
  $links['bootstrap_forms.elements_test_'] = [
    'title' => t('Bootstrap forms'),
    'route_name' => 'bootstrap_forms.elements_test',
    'menu_name' => 'admin',
    'parent' => 'system.themes_page',
  ];

  // Lists installed themes.
  //  $installed_themes = installedThemes();
  //  foreach ($installed_themes as $key_theme => $label_theme) {
  //    $links['bootstrap_forms.elements_test_theme' . '.' . $key_theme] = array(
  //      'title' => t($label_theme),
  //      'route_name' => 'bootstrap_forms.elements_test_theme',
  //      'menu_name' => 'admin',
  //      'parent' => 'bootstrap_forms.elements_test_',
  //      'route_parameters' => array(
  //        'theme' => $key_theme,
  //      ),
  //    );
  //  }
}

/**
 * Apply the default settings to the FAPI array.
 *
 * @param $settings
 *   Defaults.
 */
function _bootstrap_forms_ui_apply_defaults(&$settings) {
  $settings['form_type'] = 'basic';
  $settings['title_display'] = 'before';
  $settings['wrappers']['form_type_wrapper'] = 1;
  $settings['wrappers']['form_field_wrapper'] = 1;
  $settings['wrappers']['form_group_wrapper'] = 1;
  $settings['title_grid'] = $settings['element_grid'] = $settings['child_grid'] = [
    'columns' => [
      'xs' => '',
      'sm' => '',
      'md' => '',
      'lg' => '',
    ],
    'offset' => [
      'xs' => '',
      'sm' => '',
      'md' => '',
      'lg' => '',
    ],
    'push' => [
      'xs' => '',
      'sm' => '',
      'md' => '',
      'lg' => '',
    ],
    'pull' => [
      'xs' => '',
      'sm' => '',
      'md' => '',
      'lg' => '',
    ],
  ];
  $settings['addons']['field_prefix'] = '';
  $settings['addons']['field_suffix'] = '';
  $settings['addons']['input_group'] = 0;

  $settings['tooltips']['title_tooltip'] =
  $settings['tooltips']['prefix_tooltip'] =
  $settings['tooltips']['suffix_tooltip'] = [
    'title' => '',
    'position' => 'top',
  ];

  $settings['popovers']['title_popover'] =
  $settings['popovers']['prefix_popover'] =
  $settings['popovers']['suffix_popover'] = [
    'title' => '',
    'description' => '',
    'position' => 'top',
  ];
}


/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function bootstrap_forms_ui_field_widget_third_party_settings_form($plugin, $field_definition, $form_mode, $form, $form_state) {

  $settings = $plugin->getThirdPartySetting('bootstrap_forms_ui', 'layout');

  // If the form has never been saved before then apply the defaults.
  if (!$settings) {
    _bootstrap_forms_ui_apply_defaults($settings);
  }

  // @todo use the helper function for this.
  // Wrapping details.
  $element['layout'] = [
    '#type' => 'details',
    '#title' => 'Bootstrap Form Layout',
    '#tree' => TRUE,
  ];

  // Form Type.
  $element['layout']['form_type'] = _bootstrap_forms_ui_form_type($settings['form_type']);

  // Title Display.
  $element['layout']['title_display'] = _bootstrap_forms_ui_title_display($settings['title_display']);

  // Title Alignment.
  $element['layout']['title_align'] = _bootstrap_forms_ui_title_align($settings['title_align']);

  // Title grid.
  $element['layout']['title_grid'] = [
    '#type' => 'details',
    '#title' => 'Title grid',
  ];
  $element['layout']['title_grid'] += _bootstrap_forms_ui_grid_settings($settings['title_grid']);

  // Element grid.
  $element['layout']['element_grid'] = [
    '#type' => 'details',
    '#title' => 'Element grid',
  ];
  $element['layout']['element_grid'] += _bootstrap_forms_ui_grid_settings($settings['element_grid']);

  // Child grid.
  $element['layout']['child_grid'] = [
    '#type' => 'details',
    '#title' => 'Child element grid',
  ];
  $element['layout']['child_grid'] += _bootstrap_forms_ui_grid_settings($settings['child_grid']);

  // Addons
  $element['layout']['addons'] = [
    '#type' => 'details',
    '#title' => 'Addons (prefix/suffix)',
  ];
  $element['layout']['addons']['field_prefix'] = _bootstrap_forms_ui_field_prefix($settings['addons']['field_prefix']);
  $element['layout']['addons']['field_suffix'] = _bootstrap_forms_ui_field_suffix($settings['addons']['field_suffix']);
  $element['layout']['addons']['input_group'] = _bootstrap_forms_ui_input_group($settings['addons']['input_group']);

  // Tooltips
  $element['layout']['tooltips'] = [
    '#type' => 'details',
    '#title' => 'Tooltips',
    'title_tooltip' => [
      '#type' => 'details',
      '#title' => 'Title Tooltip',
    ],
    'prefix_tooltip' => [
      '#type' => 'details',
      '#title' => 'Prefix Tooltip',
    ],
    'suffix_tooltip' => [
      '#type' => 'details',
      '#title' => 'Suffix Tooltip',
    ],
  ];
  $element['layout']['tooltips']['title_tooltip'] += _bootstrap_forms_ui_tooltip($settings['tooltips']['title_tooltip']);
  $element['layout']['tooltips']['prefix_tooltip'] += _bootstrap_forms_ui_tooltip($settings['tooltips']['prefix_tooltip']);
  $element['layout']['tooltips']['suffix_tooltip'] += _bootstrap_forms_ui_tooltip($settings['tooltips']['suffix_tooltip']);


  // Popovers
  $element['layout']['popovers'] = [
    '#type' => 'details',
    '#title' => 'Popovers',
    'title_popover' => [
      '#type' => 'details',
      '#title' => 'Title Popover',
    ],
    'prefix_popover' => [
      '#type' => 'details',
      '#title' => 'Prefix Popover',
    ],
    'suffix_popover' => [
      '#type' => 'details',
      '#title' => 'Suffix Popover',
    ],
  ];
  $element['layout']['popovers']['title_popover'] += _bootstrap_forms_ui_popover($settings['popovers']['title_popover']);
  $element['layout']['popovers']['prefix_popover'] += _bootstrap_forms_ui_popover($settings['popovers']['prefix_popover']);
  $element['layout']['popovers']['suffix_popover'] += _bootstrap_forms_ui_popover($settings['popovers']['suffix_popover']);

  // Wrappers
  $element['layout']['wrappers'] = [
    '#type' => 'details',
    '#title' => 'Wrappers',
  ];

  $element['layout']['wrappers']['form_type_wrapper'] = _bootstrap_forms_ui_form_type_wrapper($settings['wrappers']['form_type_wrapper']);
  $element['layout']['wrappers']['form_group_wrapper'] = _bootstrap_forms_ui_form_group_wrapper($settings['wrappers']['form_group_wrapper']);
  $element['layout']['wrappers']['form_field_wrapper'] = _bootstrap_forms_ui_form_field_wrapper($settings['wrappers']['form_field_wrapper']);
  //$element['layout']['wrappers']['element_inline_wrapper'] = _bootstrap_forms_ui_element_inline_wrapper($settings['wrappers']['element_inline_wrapper']);

  return $element;
}


/**
 * Helper function to create the 'form_field_wrapper' field.
 *
 * @param null $defaults
 *
 * @return array
 */
function _bootstrap_forms_ui_element_inline_wrapper($defaults = NULL) {
  $element = [
    '#type' => 'checkbox',
    '#title' => 'Element inline wrappers',
    '#description' => 'Render radios/checkboxes inline as per http://getbootstrap.com/css/#inline-checkboxes-and-radios',
  ];
  if (!is_null($defaults)) {
    $element['#default_value'] = $defaults;
  }
  return $element;
}


/**
 * Helper function to create the 'form_type_wrapper' field.
 *
 * @param null $defaults
 *
 * @return array
 */
function _bootstrap_forms_ui_form_type_wrapper($defaults = NULL) {
  $element = [
    '#type' => 'checkbox',
    '#title' => 'Form type wrapper',
  ];
  if (!is_null($defaults)) {
    $element['#default_value'] = $defaults;
  }
  return $element;
}

/**
 * Helper function to create the 'form_group_wrapper' field.
 *
 * @param null $defaults
 *
 * @return array
 */
function _bootstrap_forms_ui_form_group_wrapper($defaults = NULL) {
  $element = [
    '#type' => 'checkbox',
    '#title' => 'Form group wrapper',
  ];
  if (!is_null($defaults)) {
    $element['#default_value'] = $defaults;
  }
  return $element;
}

/**
 * Helper function to create the 'form_field_wrapper' field.
 *
 * @param null $defaults
 *
 * @return array
 */
function _bootstrap_forms_ui_form_field_wrapper($defaults = NULL) {
  $element = [
    '#type' => 'checkbox',
    '#title' => 'Form field wrapper',
  ];
  if (!is_null($defaults)) {
    $element['#default_value'] = $defaults;
  }
  return $element;
}

/**
 *
 */
function _bootstrap_forms_ui_tooltip($defaults = []) {
  $element = [
    'title' => [
      '#type' => 'textfield',
      '#title' => 'Title',
    ],
    'position' => [
      '#type' => 'select',
      '#title' => 'Position',
      '#options' => [
        'top' => 'Top',
        'right' => 'Right',
        'bottom' => 'Bottom',
        'left' => 'Left',
      ],
    ],
  ];

  if (isset($defaults['title'])) {
    $element['title']['#default_value'] = $defaults['title'];
  }

  if (isset($defaults['position'])) {
    $element['position']['#default_value'] = $defaults['position'];
  }

  return $element;

}

/**
 *
 */
function _bootstrap_forms_ui_popover($defaults = []) {
  $element = [
    'title' => [
      '#type' => 'textfield',
      '#title' => 'Title',
    ],
    'content' => [
      '#type' => 'textarea',
      '#title' => 'Description',
    ],
    'position' => [
      '#type' => 'select',
      '#title' => 'Position',
      '#options' => [
        'top' => 'Top',
        'right' => 'Right',
        'bottom' => 'Bottom',
        'left' => 'Left',
      ],
    ],
  ];

  if (isset($defaults['title'])) {
    $element['title']['#default_value'] = $defaults['title'];
  }

  if (isset($defaults['description'])) {
    $element['description']['#default_value'] = $defaults['description'];
  }

  if (isset($defaults['position'])) {
    $element['position']['#default_value'] = $defaults['position'];
  }

  return $element;

}

function _bootstrap_forms_ui_grid_settings($defaults = []) {

  $form = [];
  $form['columns'] = [
    '#type' => 'details',
    '#title' => 'Columns',
  ];
  $form['columns'] += _bootstrap_forms_ui_column_grid($defaults['columns']);

  $form['offset'] = [
    '#type' => 'details',
    '#title' => 'Offset',
  ];
  $form['offset'] += _bootstrap_forms_ui_column_grid($defaults['offset']);

  $form['push'] = [
    '#type' => 'details',
    '#title' => 'Push',
  ];
  $form['push'] += _bootstrap_forms_ui_column_grid($defaults['push']);

  $form['pull'] = [
    '#type' => 'details',
    '#title' => 'Pull',
  ];
  $form['pull'] += _bootstrap_forms_ui_column_grid($defaults['pull']);

  return $form;
}

/**
 *
 */
function _bootstrap_forms_ui_column_grid($defaults = []) {
  $element = [
    'xs' => [
      '#type' => 'select',
      '#title' => 'Extra Small (xs)',
      '#options' => _bootstrap_forms_ui_column_options(),
    ],
    'sm' => [
      '#type' => 'select',
      '#title' => 'Small (sm)',
      '#options' => _bootstrap_forms_ui_column_options(),
    ],
    'md' => [
      '#type' => 'select',
      '#title' => 'Medium (md)',
      '#options' => _bootstrap_forms_ui_column_options(),
    ],
    'lg' => [
      '#type' => 'select',
      '#title' => 'Large (lg)',
      '#options' => _bootstrap_forms_ui_column_options(),
    ],
  ];

  if (isset($defaults['xs'])) {
    $element['xs']['#default_value'] = $defaults['xs'];
  }
  if (isset($defaults['sm'])) {
    $element['sm']['#default_value'] = $defaults['sm'];
  }
  if (isset($defaults['md'])) {
    $element['md']['#default_value'] = $defaults['md'];
  }
  if (isset($defaults['lg'])) {
    $element['lg']['#default_value'] = $defaults['lg'];
  }

  return $element;
}


function _bootstrap_forms_ui_column_options() {
  return [
    '' => 'Disabled',
    '0' => '0 Columns',
    '1' => '1 column',
    '2' => '2 columns',
    '3' => '3 columns',
    '4' => '4 columns',
    '5' => '5 columns',
    '6' => '6 columns',
    '7' => '7 columns',
    '8' => '8 columns',
    '9' => '9 columns',
    '10' => '10 columns',
    '11' => '11 columns',
    '12' => '12 columns',
  ];
}

/**
 * Render element for selecting 'form_type'.
 *
 * @return array
 */
function _bootstrap_forms_ui_form_type($default_value = NULL) {
  $element = [
    '#type' => 'select',
    '#title' => 'Form Type',
    '#options' => [
      'basic' => 'Basic',
      'inline' => 'Inline',
      'horizontal' => 'Horizontal',
    ],
    '#description' => 'Select a Bootstrap form layout to use. http://getbootstrap.com/css/#forms',
    '#weight' => -100,
  ];

  if (!is_null($default_value)) {
    $element['#default_value'] = $default_value;
  }

  return $element;
}

/**
 * Render element for selecting 'title_display'.
 *
 * @return array
 */
function _bootstrap_forms_ui_title_display($default_value = NULL) {
  $element = [
    '#type' => 'select',
    '#title' => 'Title display',
    '#options' => [
      'before' => 'Above',
      'none' => 'None',
    ],
    '#description' => 'Choose a title/label display option.',

  ];

  if (!is_null($default_value)) {
    $element['#default_value'] = $default_value;
  }
  return $element;
}

/**
 * Render element for selecting 'title_display'.
 *
 * @return array
 */
function _bootstrap_forms_ui_title_align($default_value = 'left') {
  $element = [
    '#type' => 'select',
    '#title' => 'Title alignment',
    '#options' => [
      'left' => 'Left',
      'right' => 'Right',
    ],
    '#description' => 'Choose a title/label alignment option.',

  ];

  if (!is_null($default_value)) {
    $element['#default_value'] = $default_value;
  }
  return $element;
}



/**
 * Render element for selecting 'field_prefix'.
 *
 * @return array
 */
function _bootstrap_forms_ui_field_prefix($defaults) {
  $element = [
    '#type' => 'textfield',
    '#title' => t('Field prefix'),
    '#description' => 'Enter a prefix to appear before the field.',
  ];
  if (!is_null($defaults)) {
    $element['#default_value'] = $defaults;
  }
  return $element;
}

/**
 * Render element for selecting 'field_suffix'.
 *
 * @return array
 */
function _bootstrap_forms_ui_field_suffix($defaults) {
  $element = [
    '#type' => 'textfield',
    '#title' => t('Field suffix'),
    '#description' => 'Enter a suffix to appear after the field.',
  ];
  if (!is_null($defaults)) {
    $element['#default_value'] = $defaults;
  }
  return $element;
}

/**
 * Render element for selecting 'input_group'.
 *
 * @return array
 */
function _bootstrap_forms_ui_input_group($defaults = NULL) {
  $element = [
    '#type' => 'checkbox',
    '#title' => t('Show prefix and suffix in input groups?'),
    '#description' => 'Checking this box will make the field prefix and suffix appear as an input group.',
  ];
  if (!is_null($defaults)) {
    $element['#default_value'] = $defaults;
  }
  return $element;
}


function boostrap_forms_ui_build_form($settings = []) {

  $element = [];

  // Wrapping details.
  $element['layout'] = [
    '#type' => 'details',
    '#title' => 'Bootstrap Form Layout',
    '#tree' => TRUE,
    '#parents' => ['properties', 'layout'],
  ];

  // Form Type.
  $element['layout']['form_type'] = _bootstrap_forms_ui_form_type($settings['form_type']);

  // Title Display.
  $element['layout']['title_display'] = _bootstrap_forms_ui_title_display($settings['title_display']);

  // Title Alignment.
  $element['layout']['title_align'] = _bootstrap_forms_ui_title_align($settings['title_align']);

  // Title grid.
  $element['layout']['title_grid'] = [
    '#type' => 'details',
    '#title' => 'Title grid',
  ];
  $element['layout']['title_grid'] += _bootstrap_forms_ui_grid_settings($settings['title_grid']);

  // Element grid.
  $element['layout']['element_grid'] = [
    '#type' => 'details',
    '#title' => 'Element grid',
  ];
  $element['layout']['element_grid'] += _bootstrap_forms_ui_grid_settings($settings['element_grid']);

  // Child grid.
  $element['layout']['child_grid'] = [
    '#type' => 'details',
    '#title' => 'Child element grid',
  ];
  $element['layout']['child_grid'] += _bootstrap_forms_ui_grid_settings($settings['child_grid']);

  // Addons
  $element['layout']['addons'] = [
    '#type' => 'details',
    '#title' => 'Addons (prefix/suffix)',
  ];
  $element['layout']['addons']['field_prefix'] = _bootstrap_forms_ui_field_prefix($settings['addons']['field_prefix']);
  $element['layout']['addons']['field_suffix'] = _bootstrap_forms_ui_field_suffix($settings['addons']['field_suffix']);
  $element['layout']['addons']['input_group'] = _bootstrap_forms_ui_input_group($settings['addons']['input_group']);

  // Tooltips
  $element['layout']['tooltips'] = [
    '#type' => 'details',
    '#title' => 'Tooltips',
    'title_tooltip' => [
      '#type' => 'details',
      '#title' => 'Title Tooltip',
    ],
    'prefix_tooltip' => [
      '#type' => 'details',
      '#title' => 'Prefix Tooltip',
    ],
    'suffix_tooltip' => [
      '#type' => 'details',
      '#title' => 'Suffix Tooltip',
    ],
  ];
  $element['layout']['tooltips']['title_tooltip'] += _bootstrap_forms_ui_tooltip($settings['tooltips']['title_tooltip']);
  $element['layout']['tooltips']['prefix_tooltip'] += _bootstrap_forms_ui_tooltip($settings['tooltips']['prefix_tooltip']);
  $element['layout']['tooltips']['suffix_tooltip'] += _bootstrap_forms_ui_tooltip($settings['tooltips']['suffix_tooltip']);


  // Popovers
  $element['layout']['popovers'] = [
    '#type' => 'details',
    '#title' => 'Popovers',
    'title_popover' => [
      '#type' => 'details',
      '#title' => 'Title Popover',
    ],
    'prefix_popover' => [
      '#type' => 'details',
      '#title' => 'Prefix Popover',
    ],
    'suffix_popover' => [
      '#type' => 'details',
      '#title' => 'Suffix Popover',
    ],
  ];
  $element['layout']['popovers']['title_popover'] += _bootstrap_forms_ui_popover($settings['popovers']['title_popover']);
  $element['layout']['popovers']['prefix_popover'] += _bootstrap_forms_ui_popover($settings['popovers']['prefix_popover']);
  $element['layout']['popovers']['suffix_popover'] += _bootstrap_forms_ui_popover($settings['popovers']['suffix_popover']);

  // Wrappers
  $element['layout']['wrappers'] = [
    '#type' => 'details',
    '#title' => 'Wrappers',
  ];

  $element['layout']['wrappers']['form_type_wrapper'] = _bootstrap_forms_ui_form_type_wrapper($settings['wrappers']['form_type_wrapper']);
  $element['layout']['wrappers']['form_group_wrapper'] = _bootstrap_forms_ui_form_group_wrapper($settings['wrappers']['form_group_wrapper']);
  $element['layout']['wrappers']['form_field_wrapper'] = _bootstrap_forms_ui_form_field_wrapper($settings['wrappers']['form_field_wrapper']);

  return $element;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function bootstrap_forms_ui_form_webform_ui_element_form_alter(&$form, FormStateInterface $form_state) {
  // Define default custom properties.
  $default_custom_properties = [
    'layout' => [],
  ];

  // Append the $default_custom_properties to $default_properties stored in the
  // webform's state. This allows default custom properties to be removed when the
  // webform is submitted. If this is omitted, custom properties will always
  // be append to the element's properties.
  // @see \Drupal\webform\WebformElementBase::getConfigurationFormProperties
  $form_state->set(
    'default_properties',
    $form_state->get('default_properties') + $default_custom_properties
  );

  // Retrieve the values from the custom properties element's default value.
  // @see \Drupal\webform\WebformElementBase::buildConfigurationForm
  $custom_properties = $form['properties']['custom']['properties']['#default_value'];

  // Make sure to unset the custom properties which are going to be handled via
  // the below webform elements.
  $form['properties']['custom']['properties']['#default_value'] = array_diff_key(
    $custom_properties,
    $default_custom_properties
  );

  // Finally, append the default custom property values.
  $custom_properties += $default_custom_properties;

  // If there are no saved settings then apply the defaults.
  if (!$custom_properties['layout']) {
    _bootstrap_forms_ui_apply_defaults($custom_properties['layout']);
  }

  // Set custom properties details element.
  $form['properties'] += boostrap_forms_ui_build_form($custom_properties['layout']);
}


/**
 * Implements hook_webform_element_alter().
 */
function bootstrap_forms_ui_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  // Add data-custom to the element's attributes.
  if (!empty($element['#layout'])) {
    // Merge the properties.
    _bootstrap_forms_ui_merge_properties($element, $element['#layout']);
  }
}

/**
 * Implements hook_form_alter().
 */
function bootstrap_forms_ui_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {

  $settings = $context['widget']->getThirdPartySetting('bootstrap_forms_ui', 'layout');

  // If there are any third party settings then add them to the field widget
  if ($settings) {
    // Apply the settings.
    if (isset($element['value'])) {
      _bootstrap_forms_ui_merge_properties($element['value'], $settings);
    }
    else {
      _bootstrap_forms_ui_merge_properties($element, $settings);
    }
  }
}

/**
 * @param $element
 * @param $settings
 */
function _bootstrap_forms_ui_merge_properties(&$element, $settings) {

  // Form Type.
  if (isset($settings['form_type'])) {
    $element['#form_type'] = $settings['form_type'];
  }

  if (isset($settings['title_display'])) {
    $element['#title_display'] = $settings['title_display'];
  }

  if (isset($settings['label_display'])) {
    $element['#label_display'] = $settings['label_display'];
  }

  // Title grid.
  if (isset($settings['title_grid'])) {
    $element['#title_grid'] = $settings['title_grid'];
  }

  // Element Grid.
  if (isset($settings['element_grid'])) {
    $element['#element_grid'] = $settings['element_grid'];
  }

  // Element Columns.
  if (isset($settings['child_grid'])) {
    $element['#element_columns'] = $settings['child_grid'];
  }

  // Tooltips.
  if (isset($settings['tooltips'])) {
    if (isset($settings['tooltips']['title_tooltip'])) {
      $element['#title_tooltip'] = $settings['tooltips']['title_tooltip'];
    }
    if (isset($settings['tooltips']['prefix_tooltip'])) {
      $element['#prefix_tooltip'] = $settings['tooltips']['prefix_tooltip'];
    }
    if (isset($settings['tooltips']['suffix_tooltip'])) {
      $element['#suffix_tooltip'] = $settings['tooltips']['suffix_tooltip'];
    }
  }

  // Popovers.
  if (isset($settings['popovers'])) {
    if (isset($settings['popovers']['title_popover'])) {
      $element['#title_popover'] = $settings['popovers']['title_popover'];
    }
    if (isset($settings['popovers']['prefix_popover'])) {
      $element['#prefix_popover'] = $settings['popovers']['prefix_popover'];
    }
    if (isset($settings['popovers']['suffix_popover'])) {
      $element['#suffix_popover'] = $settings['popovers']['suffix_popover'];
    }
  }

  // Addons - Prefix/Suffixes
  if (isset($settings['addons'])) {
    if (isset($settings['addons']['field_prefix'])) {
      $element['#field_prefix'] = $settings['addons']['field_prefix'];
    }
    if (isset($settings['addons']['field_suffix'])) {
      $element['#field_suffix'] = $settings['addons']['field_suffix'];
    }
    if (isset($settings['addons']['input_group'])) {
      $element['#input_group'] = $settings['addons']['input_group'];
    }
  }

  // Wrappers.
  if (isset($settings['wrappers'])) {
    if (isset($settings['wrappers']['form_field_wrapper'])) {
      $element['#form_field_wrapper'] = $settings['wrappers']['form_field_wrapper'];
    }
    if (isset($settings['wrappers']['form_type_wrapper'])) {
      $element['#form_type_wrapper'] = $settings['wrappers']['form_type_wrapper'];
    }
    if (isset($settings['wrappers']['form_group_wrapper'])) {
      $element['#form_group_wrapper'] = $settings['wrappers']['form_group_wrapper'];
    }
  }

}


