<?php

/**
 * @file
 * Module adds contextual links for clearing Blocks, Views and Panels cache.
 */

/**
 * Implements hook_menu().
 */
function ui_cache_clear_menu() {
  $items = array();
  if (module_exists('block')) {
    // Special root item with custom access arguments.
    $items['admin/structure/block/ui_cache_clear/%'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/block/ui_cache_clear',
      'tab_parent' => 'admin/structure/block/ui_cache_clear',
    );

    $items['admin/structure/block/manage/%/cacheclear'] = array(
      'title' => 'Clear cache',
      'page callback' => 'ui_cache_clear_block_callback',
      'page arguments' => array(4),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/block/ui_cache_clear',
      'tab_parent' => 'admin/structure/block/ui_cache_clear',

    );
  }

  if (module_exists('views_ui')) {
    // Special root item with custom access arguments.
    $items['admin/structure/views/ui_cache_clear/%'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/views/ui_cache_clear',
      'tab_parent' => 'admin/structure/views/ui_cache_clear',
    );

    $items['admin/structure/views/view/%/cacheclear'] = array(
      'title' => 'Clear cache',
      'page callback' => 'ui_cache_clear_views_callback',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'access callback' => 'user_access',
      'access arguments' => array('use clear cache ui'),
      'tab_root' => 'admin/structure/views/ui_cache_clear',
      'tab_parent' => 'admin/structure/views/ui_cache_clear',
    );
  }

  $items['admin/config/development/performance/ui_cache_clear'] = array(
    'title' => 'UI Cache Clear',
    'description' => 'UI Cache Clear settings',
    'route_name' => 'ui_cache_clear_settings',
  );

  $items['admin/config/development/performance/ui_cache_clear/page'] = array(
    'title' => 'Clear this page cache',
    'type' => MENU_CALLBACK,
    'page callback' => 'ui_cache_clear_page_callback',
    'access arguments' => array('use clear cache ui'),
  );

  return $items;
}

/**
 * Implements hook_menu_link_presave().
 */
function hook_menu_link_presave(\Drupal\menu_link\Plugin\Core\Entity\MenuLink $menu_link) {
  // Flag a link to be altered by hook_menu_link_load().
  if ($menu_link->link_path == 'admin/config/development/performance/ui_cache_clear/page') {
    $menu_link->options['alter'] = TRUE;
  }
}

/**
 * Implements hook_menu_link_load().
 */
function ui_cache_clear_menu_link_load($menu_links) {
  foreach ($menu_links as &$menu_link) {
    if ($menu_link->link_path == 'admin/config/development/performance/ui_cache_clear/page') {
      $menu_link->options['query'] = drupal_get_destination();
    }
  }

}

/**
 * Implements hook_permission().
 */
function ui_cache_clear_permission() {
  return array(
    'use clear cache ui' => array(
      'title' => t('Use contextual UI Cache Clear links'),
      'description' => t('Use contextual links to flush blocks, Views and Panels cache.'),
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function ui_cache_clear_page_alter(&$page) {
  global $theme;

  $all_regions = system_region_list($theme);
  foreach (array_keys($all_regions) as $region) {
    if (empty($page[$region]) || !is_array($page[$region])) {
      continue;
    }

    foreach ($page[$region] as $key => &$item) {
      // Check that it is a block.
      if (!(is_array($item) && isset($item['#block']))) {
        continue;
      }

      $block = $item['#block'];
      $settings = $block->get('settings');
      $granularity = $settings['cache'];

      // Add cache tag 'block_id'.
      if (!empty($item['#cache'])) {
        $item['#cache']['tags']['block_id'] = $block->id;
        // @note: tag 'content' removed temporarily to test how UI Cache Clear works now.
        // unset($item['#cache']['tags']['content']);
      }

      // Add "Clear cache" contextual link to blocks.
      if ($granularity != DRUPAL_NO_CACHE) {
        if (empty($item['#contextual_links'])) {
          $item['#contextual_links'] = array();
        }
        $item['#contextual_links']['ui_cache_clear'] = array('admin/structure/block/ui_cache_clear', array($key));
      }
    }
  }

}

/**
 * Implements hook_views_plugins_display_alter().
 */
function ui_cache_clear_views_plugins_display_alter(&$plugins) {
  foreach ($plugins as &$display) {
    $display['contextual links']['ui_cache_clear'] = array(
      'parent path' => 'admin/structure/views/ui_cache_clear',
      'argument properties' => array('id'),
    );
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 * @see views_ui_contextual_links_view_alter()
 */
function ui_cache_clear_contextual_links_view_alter(&$element, $items) {
  // Append the display ID to "Clear cache" link.
  if (!empty($element['#links']['ui-cache-clear-'])) {
    $display_id = $element['#contextual_links']['ui_cache_clear'][2]['display_id'];
    $element['#links']['ui-cache-clear-']['href'] .= '/' . $display_id;
  }
}

/**
 * Block clear cache callback.
 */
function ui_cache_clear_block_callback($block_id) {
  cache('block')->invalidateTags(array('block_id' => $block_id));
  drupal_set_message(t('Block cache tag %tag invalidated.', array('%tag' => $block_id)));

  // Clear Views data cache if it is a Views block.
  $block = entity_load('block', $block_id);
  $plugin_name = explode(':', $block->get('plugin'), 2);
  if ($plugin_name[0] == 'views_block' && !empty($plugin_name[1])) {
    $delta = $plugin_name[1];
    list($name, $display_id) = explode('-', $delta, 2);
    $view = views_get_view($name);
    $view->setDisplay($display_id);

    $cache_plugin = $view->display_handler->getPlugin('cache');
    $cache_plugin_name = $cache_plugin->getPluginId();

    // @note: Method cache_flush does nothing now.
    $cache_plugin->cache_flush();
    drupal_set_message(t('Views %view data cache flushed for cache plugin %plugin.', array('%view' => $name, '%plugin' => $cache_plugin_name)));
  }

  ui_cache_clear_page();
  drupal_goto();
}

/**
 * Views clear cache callback.
 */
function ui_cache_clear_views_callback($display_id) {
  $view_name = arg(4);

  $view = views_get_view($view_name);
  $view->setDisplay($display_id);

  // Get name of current cache plugin to inform user.
  $cache_plugin = $view->display_handler->getPlugin('cache');
  $cache_plugin_name = $cache_plugin->getPluginId();

  // @note: Method cache_flush does nothing now.
  $cache_plugin->cacheFlush();
  // Clear all Views data cache as temporary solution.
  if ($cache_plugin_name != 'none') {
    cache($cache_plugin->table)->invalidateAll();
  }

  drupal_set_message(t('Views data cache cleared for cache plugin %plugin.', array('%plugin' => $cache_plugin_name)));

  ui_cache_clear_page();
  drupal_goto();
}

/**
 * Page clear cache callback.
 */
function ui_cache_clear_page_callback() {
  global $base_root;

  ui_cache_clear_page(FALSE);

  // @note Temporarily use $redirect_path because of problems with hook_menu_link_load().
  $referer = drupal_container()->get('request')->server->get('HTTP_REFERER');
  if (strpos($referer, $base_root) === 0) {
    $redirect_path = str_replace($base_root . '/', '', $referer);
  }

  if (empty($redirect_path)) {
    $redirect_path = '<front>';
  }

  $_GET['destination'] = $redirect_path;
  drupal_goto();
}

/**
 * Page clear cache helper function.
 */
function ui_cache_clear_page($check_setting = TRUE) {
  global $base_root;

  $always_clear_page = Drupal::config('ui_cache_clear.settings')->get('always_clear_page');
  if ($check_setting && !$always_clear_page) {
    return;
  }

  $referer = drupal_container()->get('request')->server->get('HTTP_REFERER');
  if (strpos($referer, $base_root) !== 0) {
    return;
  }
  $urls[] = $referer;
  cache('page')->invalidateMultiple($urls);

  drupal_set_message(t('Page cache cleared for %urls.', array('%urls' => implode(', ', $urls))));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_cache_clear_form_block_form_alter(&$form, $form_state) {
  $config_entity = $form_state['controller']->getEntity();

  $block_settings = $config_entity->get('settings');
  $plugin_config = $config_entity->getPlugin()->getConfig();
  $cache_value = isset($settings['cache']) ? $settings['cache'] : $plugin_config['cache'];

  // Blockcache options.
  $block_cache_options = array(
    DRUPAL_NO_CACHE => t('Do not cache'),
    DRUPAL_CACHE_GLOBAL => t('Cache once for everything (global)'),
    DRUPAL_CACHE_PER_PAGE => t('Per page'),
    DRUPAL_CACHE_PER_ROLE => t('Per role'),
    DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE => t('Per role per page'),
    DRUPAL_CACHE_PER_USER => t('Per user'),
    DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE => t('Per user per page'),
  );

  // Block cache fieldset.
  $form['cache_details'] = array(
    '#type' => 'details',
    '#title' => t('Cache settings'),
    '#collapsed' => FALSE,
    '#weight' => 1,
  );

  // Cache setting.
  $form['cache_details']['cache'] = array(
    '#type' => 'select',
    '#parents' => array('settings', 'cache'),
    '#title' => t('Cache setting'),
    '#description' => t('Select the appropriate cache setting for this block.'),
    '#options' => $block_cache_options,
    '#default_value' => $cache_value,
  );

  array_unshift($form['actions']['submit']['#submit'], 'ui_cache_clear_form_block_form_submit');
}

/**
 * Submit callback.
 */
function ui_cache_clear_form_block_form_submit($form, $form_state) {
  $config_entity = $form_state['controller']->getEntity();
  // Set config value before enity saved.
  $config_entity->getPlugin()->setConfig('cache', $form_state['values']['settings']['cache']);
}
