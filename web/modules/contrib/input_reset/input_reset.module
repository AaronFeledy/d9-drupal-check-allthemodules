<?php

/**
 * @file
 * Contains input_reset.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function input_reset_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the input_reset module.
    case 'help.page.input_reset':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The module provides a cross icon for Textfield, Email, Search and Password fields. So that user can reset the field individually by clicking on the cross icon closed to the field.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_element_info_alter().
 */
function input_reset_element_info_alter(array &$types) {
  foreach (array_keys($types) as $type) {
    $allowed_types = [
      'textfield',
      'email',
      'search',
      'password',
    ];
    if (in_array($type, $allowed_types)) {
      $types[$type]['#process'][] = 'input_reset_process_element';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function input_reset_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_ids          = [];
  $enabled_field_ids = \Drupal::config('input_reset.inputrestsetting')->get('field_ids_array');
  if (!empty($enabled_field_ids)) {
    foreach ($enabled_field_ids as $fields) {
      $field_form_id_array = explode("|", $fields);
      $form_ids[]          = trim($field_form_id_array[0]);
    }
  }
  if (!empty($form_ids) && in_array($form_id, $form_ids)) {
    $form['#attached']['library'][] = 'input_reset/input_reset';
  }
}

/**
 * Element process callback.
 *
 * @param array $element
 *   The render array element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The FormStateInterface object for this form.
 *
 * @return array
 *   The processed element.
 */
function input_reset_process_element(array $element, FormStateInterface &$form_state, array &$complete_form) {
  $matching_string   = $complete_form['#form_id'] . "|" . $element['#id'];
  $enabled_field_ids = \Drupal::config('input_reset.inputrestsetting')->get('field_ids_array');
  if ((!empty($enabled_field_ids) && in_array($matching_string, $enabled_field_ids))) {
    $element['#attributes']['class'][] = 'clearable_input clearable_input_type_' . $element['#type'];
  }
  return $element;
}
