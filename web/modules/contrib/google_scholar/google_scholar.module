<?php

/**
 * @file
 * Integrates content types with Google Scholar.
 */

/**
 * Implements hook_ENTITY_TYPE_view_alter(): node
 */
function google_scholar_node_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  // Check we're on the node's page: first check view mode.
  if ($build['#view_mode'] != 'full') {
    return;
  }
  // Double-check that we're actually viewing the node on its own page.
  // (We could for example be on a view showing lots of full nodes, or a node
  // with another full node in the sidebar.)
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() != 'entity.node.canonical') {
    return;
  }
  $request_node = \Drupal::routeMatch()->getParameters()->get('node');
  if ($request_node->id() != $entity->id()) {
    // The node we're altering and the node being shown are not the same.
    return;
  }

  // Get the node type entity.
  // Could be simpler -- see https://www.drupal.org/node/2699835.
  $node_type = \Drupal\node\Entity\NodeType::load($entity->bundle());

  if (!$node_type->getThirdPartySetting('google_scholar', 'enabled', FALSE)) {
    // The node does not have Google Scholar support enabled.
    return;
  }

  $tag_renderer = \Drupal::service('google_scholar.tag_renderer');
  $tags = $tag_renderer->buildTags($entity);

  foreach ($tags as $tag_key => $tag_attributes) {
    $build['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => $tag_attributes,
      ],
      $tag_key,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter(): node_type_form.
 *
 * @see NodeTypeForm::form()
 */
function google_scholar_form_node_type_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $bundle = $form_state->getFormObject()->getEntity();

  $form['google_scholar'] = array(
    '#type' => 'details',
    '#title' => t('Google Scholar settings'),
    '#group' => 'additional_settings',
  );

  $form['google_scholar']['google_scholar_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Google Scholar integration.'),
    '#description' => t('Content of this type outputs Google Scholar meta tags based on its field values.'),
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'enabled', FALSE),
  ];

  // Assemble the options for each of the meta tag settings.
  // This is a list of all the base and config fields on the bundle which are
  // suitable.
  $bundle_name = $bundle->id();
  $field_manager = \Drupal::service('entity_field.manager');
  $fields = $field_manager->getFieldDefinitions('node', $bundle_name);

  $field_options = [];
  $field_options_file = [];
  $field_options_datetime = [];
  foreach ($fields as $field_name => $field_definition) {

    $field_type = $field_definition->getType();

    switch ($field_type) {
      case 'file':
        $field_options_file[$field_name] = $field_definition->getLabel();
        break;
      case 'datetime':
      // The created and changed base fields on nodes have their own types...
      case 'created':
      case 'changed':
        $field_options_datetime[$field_name] = $field_definition->getLabel();
        break;
      case 'image':
      case 'path':
      case 'boolean':
      case 'changed':
      case 'language':
      case 'uuid':
        //dont show
        break;
      default:
        $field_options[$field_name] = $field_definition->getLabel();

    }
  }
  natcasesort($field_options);
  natcasesort($field_options_file);
  natcasesort($field_options_datetime);

  $field_options = [NULL => t('- Empty -')] + $field_options;
  $field_options_file = [NULL => t('- Empty -')] + $field_options_file;
  $field_options_datetime = [NULL => t('- Empty -')] + $field_options_datetime;

  $form['google_scholar']['google_scholar_citation_title'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation title'),
    '#description' => t('The field whose value should be used in the Citation title Google Scholar meta tag.'),
    '#options' => $field_options,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_title', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
      // Google Scholar requires title, author, and date as a minimum.
      'required' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_author'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation author'),
    '#description' => t('The field whose value should be used in the Citation author Google Scholar meta tag.'),
    '#options' => $field_options,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_author', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
      'required' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_publication_date'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation publication date'),
    '#description' => t('The field whose value should be used in the Citation publication date Google Scholar meta tag.'),
    '#options' => $field_options_datetime,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_publication_date', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
      'required' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_journal_title'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation journal title'),
    '#description' => t('The field whose value should be used in the Citation journal title Google Scholar meta tag.'),
    '#options' => $field_options,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_journal_title', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_volume'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation volume'),
    '#description' => t('The field whose value should be used in the Citation volume Google Scholar meta tag.'),
    '#options' => $field_options,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_volume', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_issue'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation issue'),
    '#description' => t('The field whose value should be used in the Citation issue Google Scholar meta tag.'),
    '#options' => $field_options,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_issue', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_first_page'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation first page'),
    '#description' => t('The field whose value should be used in the Citation first page Google Scholar meta tag.'),
    '#options' => $field_options,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_first_page', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_last_page'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation last page'),
    '#description' => t('The field whose value should be used in the Citation last page Google Scholar meta tag.'),
    '#options' => $field_options,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_last_page', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];
  $form['google_scholar']['google_scholar_citation_pdf_url'] = [
    '#type' => 'select',
    '#title' => t('Field for Citation PDF URL'),
    '#description' => t('The field whose value should be used in the Citation PDF URL Google Scholar meta tag.'),
    '#options' => $field_options_file,
    '#default_value' => $bundle->getThirdPartySetting('google_scholar', 'citation_pdf_url', NULL),
    '#states' => [
      'visible' => [
        ':input[name="google_scholar_enabled"]' => array('checked' => TRUE),
      ],
    ],
  ];

  $form['#entity_builders'][] = 'google_scholar_form_node_type_form_builder';
  // Assume Field UI module is present, since fields will need to be set up.
  // See https://www.drupal.org/node/2802851.
  $form['actions']['save_continue']['#submit'][] = 'google_scholar_form_node_type_form_submit';
}

/**
 * Entity builder for the node type form with menu options.
 *
 * @see google_scholar_form_node_type_form_alter()
 */
function google_scholar_form_node_type_form_builder($entity_type, \Drupal\node\NodeTypeInterface $type, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $schema_keys = [
    'citation_title',
    'citation_author',
    'citation_publication_date',
    'citation_journal_title',
    'citation_volume',
    'citation_issue',
    'citation_first_page',
    'citation_last_page',
    'citation_pdf_url',
  ];

  // Save our third party settings.
  $enabled = $form_state->getValue('google_scholar_enabled');
  $type->setThirdPartySetting('google_scholar', 'enabled', $form_state->getValue('google_scholar_enabled'));
  if ($enabled) {
    $type->setThirdPartySetting('google_scholar', 'citation_title', $form_state->getValue('google_scholar_citation_title'));
    $type->setThirdPartySetting('google_scholar', 'citation_author', $form_state->getValue('google_scholar_citation_author'));
    $type->setThirdPartySetting('google_scholar', 'citation_publication_date', $form_state->getValue('google_scholar_citation_publication_date'));
    $type->setThirdPartySetting('google_scholar', 'citation_journal_title', $form_state->getValue('google_scholar_citation_journal_title'));
    $type->setThirdPartySetting('google_scholar', 'citation_volume', $form_state->getValue('google_scholar_citation_volume'));
    $type->setThirdPartySetting('google_scholar', 'citation_issue', $form_state->getValue('google_scholar_citation_issue'));
    $type->setThirdPartySetting('google_scholar', 'citation_first_page', $form_state->getValue('google_scholar_citation_first_page'));
    $type->setThirdPartySetting('google_scholar', 'citation_last_page', $form_state->getValue('google_scholar_citation_last_page'));
    $type->setThirdPartySetting('google_scholar', 'citation_pdf_url', $form_state->getValue('google_scholar_citation_pdf_url'));
  }
  else {
    // Unset the mappings if Google Scholar is being disabled on this type.
    foreach ($schema_keys as $key) {
      $type->unsetThirdPartySetting('google_scholar', $key);
    }
  }
}

/**
 * Submit handler for the node type form.
 *
 * Creates and sets up the entity view mode if necessary.
 *
 * Needs to run in a submit handler so the node type entity is already saved.
 */
function google_scholar_form_node_type_form_submit($form, \Drupal\Core\Form\FormStateInterface &$form_state) {
  $node_type = $form_state->getFormObject()->getEntity();

  if (!$node_type->getThirdPartySetting('google_scholar', 'enabled', FALSE)) {
    return;
  }

  // Create the new entity view display for our view mode if necessary.
  $bundle_name = $node_type->id();
  $entity_view_display_storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');
  $view_display = $entity_view_display_storage->load('node' . '.' . $bundle_name . '.' . 'google_scholar');
  if (empty($view_display)) {
    $values = array(
      'targetEntityType' => 'node',
      'bundle' => $bundle_name,
      'mode' => 'google_scholar',
      'status' => TRUE,
    );
    $view_display = $entity_view_display_storage->create($values);

    $entity_type = \Drupal::service('entity_type.manager')->getDefinition('node');
    $url = \Drupal\Core\Url::fromRoute('entity.entity_view_display.node.view_mode', [
      'view_mode_name' => 'google_scholar',
    ] + \Drupal\field_ui\FieldUI::getRouteBundleParameter($entity_type, $bundle_name));

    drupal_set_message(t('The Google Scholar custom display settings have been enabled. You might want to <a href=":url">configure</a> the output of fields used for tag output.', [
      ':url' => $url->toString(),
    ]));
  }

  // Enable the selected fields on the view display.
  foreach (\Drupal\google_scholar\TagRenderer::METATAG_NAMES as $key) {
    $field_name = $form_state->getValue('google_scholar_' . $key);

    if (!empty($field_name)) {
      // Not all fields are configurable in display (e.g. most base fields)
      // but nothing complains if you do this for one that isn't.
      // Hide the label, otherwise it ends up in the rendered output.
      $options = [
        'label' => 'hidden',
      ];
      $view_display->setComponent($field_name, $options);
    }
  }

  $view_display->save();
}
