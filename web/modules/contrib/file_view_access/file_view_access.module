<?php

/**
 * @file
 * Contains core functions for the File view access module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;

/**
 * Implements hook_entity_base_field_info().
 */
function file_view_access_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'file') {
    $fields['view_access'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('View access permission'))
      ->setDescription(t('Access permission by role to view the files.'))
      ->setDefaultValue(FALSE);
  }

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function file_view_access_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var Drupal\field\Entity\FieldConfig $field */
  $field = $form_state->getFormObject()->getEntity();

  if ($field->getClass() == '\Drupal\file\Plugin\Field\FieldType\FileFieldItemList') {
    $settings = $field->getThirdPartySettings('file_view_access');
    $form['settings']['view_access'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable file view access on upload'),
      '#default_value' => isset($settings) ? $settings : FALSE,
      '#description' => t('Access permission to view the each file by roles.'),
      '#parents' => ['third_party_settings', 'file_view_access'],
    ];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function file_view_access_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Check whether the field have settings to control view permission.
  if (isset($element['#type']) && $element['#type'] == 'managed_file') {
    $settings = $context['items']->getFieldDefinition()
      ->getThirdPartySettings('file_view_access');
    if (is_numeric($settings) && $settings) {
      $element['#process'][] = 'file_view_access_field_widget_form_process';
    }
  }
}

/**
 * Custom function after process.
 */
function file_view_access_field_widget_form_process(&$element, FormStateInterface $form_state, $context) {
  $fid = $element['fids']['#value'][0];
  if (is_numeric($fid)) {
    $file = $element['#files'][$fid];
    // Get default values.
    $view_access = $file->get('view_access')->value;
    $element['access'][$fid]['view_access'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable file view access.'),
      '#attributes' => ['class' => ['file-view-access']],
      '#default_value' => $view_access,
      '#ajax' => [
        'event' => 'change',
        'callback' => 'file_view_access_field_widget_change_handler',
      ],
    ];
  }
  return $element;
}

/**
 * Custom function for handle the Ajax request.
 */
function file_view_access_field_widget_change_handler(&$element, FormStateInterface $form_state) {
  $triggering_element = $form_state->getTriggeringElement();
  // Triggered value.
  $value = $triggering_element['#value'];
  // File Id.
  $fid = $triggering_element['#parents'][3];
  $file = File::load($fid);
  if (is_object($file)) {
    $file->view_access = $value;
    // Save the updated the file.
    $file->save();
  }
  $form_state->setRebuild();
}

/**
 * Implements hook_entity_type_alter().
 */
function file_view_access_entity_type_alter(&$entity_types) {
  $entity_types['file']->setAccessClass('Drupal\file_view_access\FileViewAccessControlHandler');
}
