<?php

use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Html;

/**
 * Function to find all opengraph (and related) tags from a uri.
 *
 * Returns a (multidimensional) array on success, or an empty one on failure.
 */
function opengraph_filter_find_tags($uri, $reset = FALSE) {

  $tags = &drupal_static(__FUNCTION__);
  $cache_key = md5($uri);

  // TODO: fix our own cache bin
  // Maybe wait for http://drupal.org/node/1167144 to be implemented?
  $cacheBin = \Drupal::cache('opengraph_filter');

  if (!$reset) {
    // Try to find results in static cache (memory).
    if (!empty($tags) && isset($tags[$cache_key])) {
      return $tags[$cache_key];
    }

    // Try to find results in cache table (database).
    if ($cache = $cacheBin->get('tags:' . $cache_key)) {
      // Save result in static cache
      $tags[$cache_key] = $cache->data;
      return $tags[$cache_key];
    }
  }

  // We really do need to query the web, since we have no cached version.
  // Let us start with an empty array.
  $tags[$cache_key] = array(
    'request_uri' => $uri,
  );

  if ($html = opengraph_filter_get_html($uri, $reset)) {

    // Preg Query for title.
    $search = '/<title>(.*)<\/title>/Ui';
    if (preg_match($search, $html, $found)) {
      $tags[$cache_key]['title'] = Html::decodeEntities($found[1]);
    }

    // Preg Query for correct metatags.
    $search = '/<meta[^>]+(name|property)\s?=\s?([\'"]+)(.*)\2[^>]+(value|content)\s?=\s?([\'"]+)(.*)\5.*>/Ui';

    if (preg_match_all($search, $html, $found, PREG_PATTERN_ORDER)) {
      $num_found = count($found[0]);
      for ($i = 0; $i < $num_found; $i++) {
        $found[3][$i] = preg_replace('/[^a-z0-9:\._-]/', '', strtolower(trim($found[3][$i])));
        $found[6][$i] = Xss::filter(Html::decodeEntities(trim($found[6][$i])));

        // Ignore if either the tag name or the tag value is empty.
        if (!Unicode::strlen($found[3][$i]) || !Unicode::strlen($found[6][$i])) {
          continue;
        }

        // Magic to put the found tags in a multidimensional array.
        $these_tags = &$tags[$cache_key];
        $keys = preg_split('/[\.|:]/', $found[3][$i]);
        $num_keys = count($keys);
        for ($j = 0; $j < $num_keys; $j++) {
          $key = $keys[$j];

          if (gettype(@$these_tags) == 'array' && count($these_tags) && $these_tags == array_values($these_tags)) {
            // numeric array
            $these_tags = &$these_tags[count($these_tags) - 1];
          }

          if ($j == ($num_keys - 1)) {
            // We write the value in the array.
            if (gettype(@$these_tags[$key]) != 'NULL') {
              if (gettype(@$these_tags) == 'string') {
                $these_tags = array($keys[$j - 1] => $these_tags);
                $these_tags[$key] = $found[6][$i];
              }
              elseif (gettype(@$these_tags[$key]) != 'array' || (gettype(@$these_tags[$key]) == 'array' && $these_tags[$key] != array_values($these_tags[$key]))) {
                $these_tags[$key] = array($these_tags[$key], $found[6][$i]);
              }
              else {
                $these_tags[$key][] = $found[6][$i];
              }
            }
            else {
              $these_tags[$key] = $found[6][$i];
            }

          }
          else {

            // We need to move one level deeper in our array.
            if (gettype(@$these_tags[$key]) == 'NULL') {
              $these_tags[$key] = array();
            }
            elseif (gettype(@$these_tags[$key]) == 'string') {
              $these_tags[$key] = array($key => $these_tags[$key]);
            }
            $these_tags = &$these_tags[$key];
          }
        }
        unset($these_tags);
      }
    }
  }


  // Write results back to the database cache.
  $cacheBin->set('tags:' . $cache_key, $tags[$cache_key], (REQUEST_TIME + 3600));

  return $tags[$cache_key];
}

/**
 * Function to get HTML from uri.
 * Stored in cache so that we can also get other things than metatags out the HTML (RDFa?).
 */
function opengraph_filter_get_html($uri, $reset = FALSE) {
  $cache_key = md5($uri);
  $html = FALSE;

  // TODO: fix our own cache bin
  // Maybe wait for http://drupal.org/node/1167144 to be implemented?
  $cacheBin = \Drupal::cache('opengraph_filter');

  if (!$reset) {
    // Try to find results in cache table (database).
    if ($cache = $cacheBin->get('html:' . $cache_key)) {
      // Save result in static cache
      $html = $cache->data;
      return $html;
    }
  }

  $request = \Drupal::httpClient()
    ->get($uri, ['headers' => ['User-Agent' => 'Drupal OpenGraph Filter (+http://drupal.org/)']]);

  if ($request->getStatusCode() == 200) {
    $html = $request->getBody()->getContents();
  }

  // Write results back to the database cache.
  $cacheBin->set('html:' . $cache_key, $html, (REQUEST_TIME + 3600));

  return $html;
}

/**
 * Settings callback for URL filter.
 */
function _opengraph_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $settings = array();
  $settings['opengraph_filter_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of previews'),
    '#default_value' => $filter->settings['opengraph_filter_num'],
    '#size' => 5,
    '#maxlength' => 4,
    '#field_suffix' => t('previews'),
    '#description' => t('The number of previews that will be add. The URL that is first found will be processed first. A preview will be genereated from a succesfull call for metatags.'),
    '#element_validate' => array('_opengraph_filter_element_validate_integer_positive'),
  );

  return $settings;
}

/*
 * Check if our value is a integer
 * Copied from D7 as we don't have this function in D8
 */
function _opengraph_filter_element_validate_integer_positive($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value <= 0)) {
    form_error($element, t('%name must be a positive integer.', array('%name' => $element['#title'])));
  }
}

/**
 * Implements hook_theme().
 */
function opengraph_filter_theme($existing, $type, $theme, $path) {
  return array(
    'opengraph_filter' => array(
      'variables' => array(
        'uri' => NULL,
        'imagestyle' => NULL,
        'tags' => [],
        'metatags' => [],
        'multiple_images' => FALSE
      ),
      'path' => drupal_get_path('module', 'opengraph_filter') . '/theme',
      'template' => 'opengraph-filter',
      'pattern' => 'opengraph_filter__',
    ),
  );
}

function template_preprocess_opengraph_filter(&$variables) {

  if (!count($variables['metatags']) && !empty($variables['uri'])) {
    $tags = opengraph_filter_find_tags($variables['uri']);
    if (count($tags) > 1) {
      $variables['metatags'] = $tags;
    }
  }

  $keys = ['title', 'description', 'image', 'url', 'type'];

  // Set default
  foreach ($keys as $key) {
    if (isset($variables['metatags'][$key])) {
      $variables['tags'][$key] = NULL;
    }
  }
  $variables['tags']['url'] = $variables['metatags']['request_uri'];
  $variables['tags']['type'] = 'website';
  foreach ($keys as $key) {
    if (isset($variables['metatags'][$key])) {
      $variables['tags'][$key] = $variables['metatags'][$key];
    }
  }

// Override with OpenGraph vars
  if (isset($variables['metatags']) && isset($variables['metatags']['og']) && is_array($variables['metatags']['og'])) {
    foreach ($keys as $key) {
      if (isset($variables['metatags']['og'][$key])) {
        if ($key == 'image') {
          if(!is_array($variables['metatags']['og'][$key])) {
            $variables['tags']['image'][$key] = $variables['metatags']['og'][$key];
          } else {
            $variables['tags']['image'][$key] = array_shift($variables['metatags']['og'][$key]);
          }
        } else {
          $variables['tags'][$key] = $variables['metatags']['og'][$key];
        }
      }
    }
  }

// We need to show at least something!
// If tags is empty we give back an empty template in the tpl.php
  if (!isset($variables['tags']['title']) && !isset($variables['tags']['description'])) {
    $variables['tags'] = array();
  }

// Detect multiple images.
  if (isset($variables['tags']['image']) && is_array($variables['tags']['image']) && count($variables['tags']['image']) && $variables['tags']['image'] == array_values($variables['tags']['image'])) {
    $variables['multiple_images'] = TRUE;
  }

  if (count($variables['tags'])) {
    if (!empty($variables['tags']['type'])) {
      if (strstr($variables['tags']['type'], '.') !== FALSE) {
        $type = explode('.', $variables['tags']['type']);
        $variables['theme_hook_suggestions'][] = 'opengraph_filter__' . $type[0];
        $variables['attributes']['class'][] = $type[0];
      }
      $variables['theme_hook_suggestions'][] = 'opengraph_filter__' . str_replace('.', '__', $variables['tags']['type']);
      $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['tags']['type']);
    }
    $domain = @parse_url($variables['uri']);
    if (Unicode::substr($domain['host'], 0, 4) == 'www.') {
      $domain['host'] = Unicode::substr($domain['host'], 4);
    }
    $variables['attributes']['class'][] = Html::cleanCssIdentifier($domain['host']);

    if (!empty($variables['tags']['image'])) {
      $theme_images = array(
        'image' => $variables['tags']['image'],
        'url' => $variables['tags']['url'],
        'title' => $variables['tags']['title'],
      );

      $variables['image'] = $theme_images;

    }
  }
}