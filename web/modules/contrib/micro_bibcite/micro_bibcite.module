<?php

/**
 * @file
 * Contains micro_bibcite.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\micro_site\Entity\SiteInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\VocabularyInterface;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_help().
 */
function micro_bibcite_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the micro_bibcite module.
    case 'help.page.micro_bibcite':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Integrates Bibcite into micro site') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function micro_bibcite_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'bibcite_reference') {
    $fields['site_id'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Site'))
      ->setDescription(t('The site on which the reference is created.'))
      ->setRevisionable(TRUE)
      ->setSetting('target_type', 'site')
      ->setSetting('handler', 'default')
      ->setSetting('handler_settings', [
        'target_bundles' => NULL,
        'auto_create' => FALSE,
      ])
      ->setDefaultValueCallback('Drupal\micro_bibcite\MicroBibciteManager::getCurrentSiteId')
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => 5,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function micro_bibcite_bibcite_reference_insert(EntityInterface $entity) {
  /** @var \Drupal\micro_bibcite\MicroBibciteManagerInterface $microBibciteManager */
  $microBibciteManager = \Drupal::service('micro_bibcite.manager');
  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
  $negotiator = \Drupal::service('micro_site.negotiator');

  // During batch operation, before creating entity set the active site if exists.
  $active_site = $negotiator->getActiveSite();
  if ($active_site instanceof SiteInterface) {
    $entity_site = $microBibciteManager->getSite($entity);
    if (!$entity_site && $entity instanceof ContentEntityInterface && $entity->hasField('site_id')) {
      $entity->set('site_id', $active_site);
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function micro_bibcite_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['bibcite_reference']->setAccessClass('Drupal\micro_bibcite\MicroReferenceAccessControlHandler');
  $entity_types['bibcite_contributor']->setAccessClass('Drupal\micro_bibcite\MicroContributorAccessControlHandler');
  $entity_types['bibcite_keyword']->setAccessClass('Drupal\micro_bibcite\MicroKeywordAccessControlHandler');
}
