<?php
/**
 * @file
 * Hook implementations for HipChat so we can respond to various system events.
 */

use Drupal\Core\Link;
use Drupal\node\Entity\Node;


/**
 * A wrapper around the HipChat.php to send messages.
 *Â©
 * @param string $message
 *   The message to send. Keep it relatively brief.
 * @param string $room
 *   Optional room to send it to (defaults to the sitewide value).
 * @param string $site_name
 *   Optional "site name" defaults to the Drupal site name.
 */
function hipchat_send($message, $room = NULL, $site_name = NULL) {

  // Ensure the site_name is less than 15 characters -- an API limit of HipChat.
  $room = empty($room) ? $items_per_page = \Drupal::config('hipchat_settings.config')->get('hipchat_default_room') : $room;
  $site_name = empty($site_name) ? \Drupal::config('system.site')->get('name') : $site_name;
  $site_name = substr($site_name, 0, 15);
  $token = \Drupal::config('hipchat_settings.config')->get('hipchat_token');

  $hc = new HipChat\HipChat($token);

  // Messages won't send properly without all three of these.
  if (empty($site_name) || empty($room) || empty($message)) {
    \Drupal::logger('hipchat')->notice('Skipping sending a message because site_name, room or message were empty');
    return;
  }

  try {
    $hc->message_room($room, $site_name, $message);
  }
  catch (Exception $e) {
    \Drupal::logger('hipchat')->error($e->getMessage());
  }
}

/**
 * Implements hook_node_delete().
 */
function hipchat_node_delete($node) {
  if (!_hipchat_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  $user = \Drupal::currentUser();

  hipchat_send(t('@user_name deleted "@node_title" of type <em>@node_type</em>. !link', array(
    '@user_name' => $user->getAccountName(),
    '@node_type' => $node->getType(),
    '@node_title' => $node->getTitle(),
    '!link' => Link::fromTextAndUrl(t('Link'), $node->toUrl())->toString()->getGeneratedLink(),
  )));
}

/**
 * Implements hook_node_insert().
 */
function hipchat_node_insert($node) {
  if (!_hipchat_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  $user = \Drupal::currentUser();

  hipchat_send(t('@user_name created a new <em>@node_type</em>: "@node_title":<br /> !link', array(
    '@user_name' => $user->getAccountName(),
    '@node_type' => $node->getType(),
    '@node_title' => $node->getTitle(),
    '!link' => Link::fromTextAndUrl(t('Link'), $node->toUrl())->toString()->getGeneratedLink(),
  )));
}

/**
 * Implements hook_node_update().
 */
function hipchat_node_update($node) {
  if (!_hipchat_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  $user = \Drupal::currentUser();

  hipchat_send(t('@user_name edited \"@node_title\" of type <em>@node_type</em>. !link', array(
    '@user_name' => $user->getAccountName(),
    '@node_type' => $node->getType(),
    '@node_title' => $node->getTitle(),
    '!link' => Link::fromTextAndUrl(t('Link'), $node->toUrl())->toString()->getGeneratedLink(),
  )));
}

/**
 * Implements hook_comment_insert().
 */
function hipchat_comment_insert($comment) {
  $user = \Drupal::currentUser();
  $node = Node::load($comment->get('entity_id')->target_id);

  hipchat_send(t('@user_name added a new comment to "@node_title":<br /> !link', array(
      '@user_name' => $user->getAccountName(),
      '@node_title' => $node->getTitle(),
      '!link' => Link::fromTextAndUrl(t('Link'), $comment->toUrl()->setAbsolute() )->toString()->getGeneratedLink()
  )));
}

/**
 * Implements hook_comment_update().
 */
function hipchat_comment_update($comment) {
  $user = \Drupal::currentUser();
  $node = Node::load($comment->get('entity_id')->target_id);

  if (!_hipchat_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }

  hipchat_send(t('@user_name edited their comment to "@node_title". !link', array(
    '@user_name' => $user->getAccountName(),
    '@node_title' => $node->getTitle(),
    '!link' => Link::fromTextAndUrl(t('Link'), $comment->toUrl()->setAbsolute() )->toString()->getGeneratedLink(),
  )));
}

/**
 * Implements hook_comment_delete().
 */
function hipchat_comment_delete($comment) {
  $user = \Drupal::currentUser();
  $node = Node::load($comment->get('entity_id')->target_id);

  if (!_hipchat_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }

  hipchat_send(t('@user_name deleted a comment on "@node_title". !link', array(
    '@user_name' => $user->getAccountName(),
    '@node_title' => $node->getTitle(),
    '!link' => Link::fromTextAndUrl(t('Link'), $comment->toUrl()->setAbsolute() )->toString()->getGeneratedLink(),
  )));
}

/**
 * Helper function determines if a Node is of an enabled type.
 *
 * @param object $node
 *   A Node object with a 'type' property.
 *
 * @return mixed
 *   Returns TRUE if hipchat is enabled for all types.
 */
function _hipchat_is_enabled_type($node) {

  $types = \Drupal::config('hipchat_settings.config')->get('hipchat_content_types');

  // This filter gets us an empty array if no types have been selected.
  $types = array_filter($types, function ($value) {
    return $value !== 0;
  }
  );

  // If none are selected it's enabled for all types.
  if (empty($types)) {
    return TRUE;
  }
  else {
    return array_key_exists($node->getType(), $types);
  }
}
