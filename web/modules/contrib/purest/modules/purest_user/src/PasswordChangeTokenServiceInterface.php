<?php

namespace Drupal\purest_user;

use Drupal\user\UserInterface;

/**
 * Interface PasswordChangeTokenServiceInterface.
 */
interface PasswordChangeTokenServiceInterface {

  /**
   * Send an email to the user with a one time login link.
   */
  public function sendPasswordChangeTokenEmail(UserInterface $account, $langcode = NULL);

  /**
   * Generate a temporary token for authentication & activation of am account.
   *
   * @param \Drupal\user\UserInterface $account
   *   The user account to check & authenticate.
   * @param string $base_url
   *   The base url.
   */
  public function changePasswordTokenUrl(UserInterface $account, $base_url);

  /**
   * Token callback to add unsafe tokens for user mail.
   *
   * This function is used by \Drupal\Core\Utility\Token::replace() to set up
   * some additional tokens that can be used in email messages generated by
   * user_mail().
   *
   * @param array $replacements
   *   An associative array variable containing mappings from token names to
   *   values (for use with strtr()).
   * @param array $data
   *   An associative array of token replacement values. If the 'user' element
   *   exists, it must contain a user account object with the following
   *   properties:
   *   - login: The UNIX timestamp of the user's last login.
   *   - pass: The hashed account login password.
   * @param array $options
   *   A keyed array of settings and flags to control the token replacement
   *   process. See \Drupal\Core\Utility\Token::replace().
   */
  public function token(array &$replacements, array $data, array $options);

  /**
   * Logs in an account.
   *
   * Expects an account, the generated token, and the timestamp
   * of when the token was generated.
   *
   * @param \Drupal\user\UserInterface $account
   *   The user account to check & authenticate.
   * @param string $token
   *   The hash initially generated using the account and timestamp.
   * @param int $timestamp
   *   The timestamp when the original hash was generated.
   * @param string $password
   *   The new password.
   *
   * @return bool
   *   Whether or not the account was successfully logged in.
   */
  public function changePassword(UserInterface $account, $token, $timestamp, $password);

  /**
   * Logs in an account.
   *
   * Expects an account, the generated token, and the timestamp
   * of when the token was generated.
   *
   * @param \Drupal\user\UserInterface $account
   *   The user account to check & authenticate.
   * @param string $langcode
   *   The langcode to use in the email.
   */
  public function sendPasswordChangedConfirmationEmail(UserInterface $account, $langcode = NULL);

}
