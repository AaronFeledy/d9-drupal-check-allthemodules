<?php

/**
 * @file
 * Drupal Module: LeadBoxer
 *
 * Adds the LeadBoxer Lead Pixel to your website to capture Leads on your site.
 *
 * @author: Baris Wanschers <https://www.drupal.org/u/barisw>
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function leadboxer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.leadboxer':
      return t('<a href=":ga_url">LeadBoxer</a> is a trackin plugin that turns your anonymous web traffic into big sales.', [
        ':lb_url' => 'https://www.leadboxer.com/',
      ]);
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */
function leadboxer_page_attachments(array &$page) {
  $account = \Drupal::currentUser();
  $config = \Drupal::config('leadboxer.settings');
  $id = $config->get('dataset_id');

  // Add module cache tags.
  $page['#cache']['tags'] = Cache::mergeTags(isset($page['#cache']['tags']) ? $page['#cache']['tags'] : [], $config->getCacheTags());

  // 1. Track page views based on visibility value.
  // 2. Check if we should track the currently active user's role.
  if (!empty($id) && _leadboxer_visibility_pages() && _leadboxer_visibility_user($account)) {
    $script = '//script.leadboxer.com/?account=' . $id;
    $page['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#attributes' => [
          'src' => $script,
          'defer' => 'defer',
        ],
      ],
      'leadboxer_tracking_script'
    ];
  }
}

/**
 * Tracking visibility check for an user object.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if the current user is being tracked by LeadBoxer,
 *   otherwise FALSE.
 */
function _leadboxer_visibility_user($account) {
  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_leadboxer_visibility_roles($account)) {
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check for user roles.
 *
 * Based on visibility setting this function returns TRUE if JS code should be
 * added for the current role and otherwise FALSE.
 *
 * @param object $account
 *   A user object containing an array of roles to check.
 *
 * @return bool
 *   TRUE if JS code should be added for the current role and otherwise FALSE.
 */
function _leadboxer_visibility_roles($account) {
  $config = \Drupal::config('leadboxer.settings');
  $enabled = $visibility_user_role_mode = $config->get('visibility.user_role_mode');
  $visibility_user_role_roles = $config->get('visibility.user_role_roles');

  if (count($visibility_user_role_roles) > 0) {
    // One or more roles are selected.
    foreach (array_values($account->getRoles()) as $user_role) {
      // Is the current user a member of one of these roles?
      if (in_array($user_role, $visibility_user_role_roles)) {
        // Current user is a member of a role that should be tracked/excluded
        // from tracking.
        $enabled = !$visibility_user_role_mode;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Tracking visibility check for pages.
 *
 * Based on visibility setting this function returns TRUE if JS code should
 * be added to the current page and otherwise FALSE.
 */
function _leadboxer_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {
    $config = \Drupal::config('leadboxer.settings');
    $visibility_request_path_mode = $config->get('visibility.request_path_mode');
    $visibility_request_path_pages = $config->get('visibility.request_path_pages');

    // Match path if necessary.
    if (!empty($visibility_request_path_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = Unicode::strtolower($visibility_request_path_pages);
      if ($visibility_request_path_mode < 2) {
        // Compare the lowercase path alias (if any) and internal path.
        $path = \Drupal::service('path.current')->getPath();
        $path_alias = Unicode::strtolower(\Drupal::service('path.alias_manager')->getAliasByPath($path));
        $page_match = \Drupal::service('path.matcher')->matchPath($path_alias, $pages) || (($path != $path_alias) && \Drupal::service('path.matcher')->matchPath($path, $pages));
        // When $visibility_request_path_mode has a value of 0, the tracking
        // code is displayed on all pages except those listed in $pages. When
        // set to 1, it is displayed only on those pages listed in $pages.
        $page_match = !($visibility_request_path_mode xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}
