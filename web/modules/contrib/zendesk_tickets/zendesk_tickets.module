<?php

/**
 * @file
 * Hook implementation code for the Zendesk Tickets module.
 */

/**
 * Implements hook_theme().
 */
function zendesk_tickets_theme($existing, $type, $theme, $path) {
  return array(
    'zendesk_tickets_submission_success' => array(
      'variables' => [
        'entity' => NULL,
      ],
      'template' => 'zendesk-tickets-submission-success',
    ),
  );
}

/**
 * Implements template_preprocess_zendesk_tickets_submission_success().
 */
function template_preprocess_zendesk_tickets_submission_success(&$vars) {
  if (!empty($vars['entity'])) {
    $vars['label'] = $vars['entity']->label();
  }
}

/**
 * Implements hook_cron().
 */
function zendesk_tickets_cron() {
  $settings = \Drupal::configFactory()->getEditable('zendesk_tickets.settings');
  if (empty($settings)) {
    return;
  }

  // Skip if configured to never run.
  $import_cron_dt = $settings->get('import_cron_dt');
  if (empty($import_cron_dt) || $import_cron_dt < 0) {
    return;
  }

  // Run import all.
  $last_import = \Drupal::state()->get('zendesk_tickets.last_cron_import', 0);
  if (!$last_import || ($last_import < REQUEST_TIME && (REQUEST_TIME - $last_import) >= $import_cron_dt)) {
    $importer = \Drupal::service('zendesk_tickets.zendesk_ticket_form_type_importer');
    if ($importer) {
      $success = FALSE;
      try {
        // @TODO: batch size for import during cron?
        $importer->importAll();
        $success = TRUE;
      }
      catch (\Exception $e) {
        // Suppress since the api should have logged the errors.
      }

      // Set last cron import.
      $importer->getState()->set('zendesk_tickets.last_cron_import', REQUEST_TIME);

      // Message based on import status.
      if ($success) {
        $importer->getLogger()->notice('Zendesk ticket form import via cron completed.');
      }
      else {
        $importer->getLogger()->warning('Zendesk ticket form import via cron failed. Check the logs for errors from the Zendesk API.');
      }
    }
  }
}
