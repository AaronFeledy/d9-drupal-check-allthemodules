<?php
/**
 * @file
 * Code for Iubenda Integration module.
 */

/**
 * Defining Iubenda privacy policy URL.
 */
define('IUBENDA_INTEGRATION_PRIVACY_POLICY_URL', '//www.iubenda.com/privacy-policy/');

/**
 * The minimum required version of the Iubenda PHP class plugin.
 */
define('IUBENDA_INTEGRATION_CLASS_MIN_VER', '1.0.1');
define('IUBENDA_INTEGRATION_CLASS_LIB_NAME', 'iubenda-cookie-class');
define('IUBENDA_INTEGRATION_MODULE_NAME', 'iubenda_integration');

use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function iubenda_integration_theme($existing, $type, $theme, $path) {
  return [
    'block__iubenda_privacy_policy' => [
      'variables' => [
        'pre_text' => NULL,
        'link' => NULL,
        'post_text' => NULL,
      ]
    ]
  ];
}

/**
 * Implements hook_form_alter().
 */
function iubenda_integration_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  $form_ids = iubenda_integration_get_form_ids();
  if (empty($form_ids) || !in_array($form_id, $form_ids)) {
    return;
  }

  $form['iubenda_integration_privacy_policy'] = [
    '#type' => \Drupal::config('iubenda_integration.settings')->get('iubenda_integration_form_element_type'),
    '#title' => iubenda_integration_build_string(),
    '#required' => TRUE,
  ];
}

/**
 * Helper function: get a list of form id enabled for Iubenda.
 *
 * @return array
 *   An array of form id enabled for Iubenda privacy policy link.
 */
function iubenda_integration_get_form_ids() {
  $form_ids = explode("\n",
    \Drupal::config('iubenda_integration.settings')
      ->get('iubenda_integration_forms'));

  foreach ($form_ids as $i => $form_id) {
    $form_ids[$i] = trim($form_id);
  }

  return $form_ids;
}

/**
 * Build the Iubenda privacy policy text.
 *
 * @return string
 *   A string containing the configured Iubenda pre-text, link and post-text.
 */
function iubenda_integration_build_string() {
  $pre_text = \Drupal::config('iubenda_integration.settings')
    ->get('iubenda_integration_pretext');
  $post_text = \Drupal::config('iubenda_integration.settings')
    ->get('iubenda_integration_posttext');
  return $pre_text . iubenda_integration_build_link() . $post_text;
}

/**
 * Helper function: builds the Iubenda privacy policy link.
 *
 * @return string
 *   Iubenda privacy policy link as HTML markup.
 */
function iubenda_integration_build_link() {
  $settings = \Drupal::config('iubenda_integration.settings');

  $text = $settings->get('iubenda_integration_text');
  $code = $settings->get('iubenda_integration_policy_code');
  $link_classes = [
    $settings->get('iubenda_integration_style'),
    'iubenda-embed',
  ];

  if ($settings->get('iubenda_integration_legal_only')) {
    $link_classes[] = 'iub-legal-only';
  }

  if (!$settings->get('iubenda_integration_show_brand')) {
    $link_classes[] = 'no-brand';
  }

  $link_options = [
    'external' => TRUE,
    'attributes' => [
      'class' => $link_classes,
      'title' => $text,
    ],
  ];

  $iubenda_url = Url::fromUri(IUBENDA_INTEGRATION_PRIVACY_POLICY_URL . $code);
  $iubenda_url->setOptions($link_options);

  return \Drupal::l($text, $iubenda_url);
}

/**
 * Implements hook_token_info_alter().
 */
function iubenda_integration_token_info() {
  $info['tokens']['site'][IUBENDA_INTEGRATION_MODULE_NAME] = [
    'name' => t('Iubenda'),
    'description' => t('The Iubenda privacy policy link'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function iubenda_integration_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];

  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      if ($name == IUBENDA_INTEGRATION_MODULE_NAME) {
        $replacements[$original] = iubenda_integration_build_link();
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_page_attachments().
 */
function iubenda_integration_page_attachments(array &$attachments) {

  $config = \Drupal::config('iubenda_integration.settings');

  // Attach JS when privacy policy ID is filled.
  // Setting page: admin/config/system/iubenda-integration.
  if (!empty($config->get('iubenda_integration_policy_code'))) {
    // Attach iubenda js library.
    $attachments['#attached']['library'][] = 'iubenda_integration/iubenda-privacy-policy';
  }

  // Attach JS when cookie policy is enabled.
  // Setting page: admin/config/system/iubenda-integration/cookie-policy.
  if ($config->get('iubenda_integration_cookie_policy_enabled')) {

    // Attach setting values that we need to enable cookie banner.
    $iubenda_integration = [
      'iubendaIntegration' => [
        'iubendaCookiePolicy' => [
          'cookiePolicyId' => $config->get('cookiePolicyId'),
          'siteId' => $config->get('siteId'),
          'language' => \Drupal::languageManager()->getCurrentLanguage()->getId(),
          'banner' => [
            'slideDown' => $config->get('slideDown'),
            'applyStyles' => $config->get('applyStyles'),
          ]
        ]
      ]
    ];
    $attachments['#attached']['drupalSettings'] = $iubenda_integration;

    // Attach iubenda js library.
    $attachments['#attached']['library'][] = 'iubenda_integration/iubenda-cookie-policy';
    $attachments['#attached']['library'][] = 'iubenda_integration/iubenda-cs';
  }
}

/**
 * Get Iubenda cookie policy settings.
 */
function iubenda_integration_cookie_policy_settings() {
  // Could not extract the default value because it is either indeterminate, or
  // not scalar. You'll need to provide a default value in
  // config/install/iubenda_integration.settings.yml and config/schema/iubenda_integration.schema.yml.
  $settings = \Drupal::config('iubenda_integration.settings')
    ->get('iubenda_integration_cookie_policy');
  $settings = _iubenda_integration_cookie_policy_filter_settings($settings);
  $developers = $settings['developers'];
  unset($settings['developers']);
  return array_merge($settings, $developers);
}

/**
 * Helper function: filter cookie policy settings recursively.
 */
function _iubenda_integration_cookie_policy_filter_settings($settings) {
  foreach ($settings as $key => &$value) {
    if (is_array($value)) {
      $value = _iubenda_integration_cookie_policy_filter_settings($value);
      if (empty($value)) {
        unset($settings[$key]);
      }
    }
    else {
      if (!is_numeric($value) && empty($value)) {
        unset($settings[$key]);
      }
    }
  }

  return $settings;
}

