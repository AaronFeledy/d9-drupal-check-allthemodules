<?php

/**
 * @file
 * Integrates QuickPay with Ubercart.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\uc_order\Entity\Order;
use Drupal\Core\Routing\RouteMatchInterface;
use QuickPay\QuickPay;

/**
 * Implements hook_help().
 */
function uc_quickpay_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the block module.
    case 'help.page.uc_quickpay':
      $output = '<p>' . t('Ubercart quickpay is the payment gateway module for Drupal version 8 and above. The module uses the Danish Payment Gateway ‘QuickPay’ to make payment') . '</p>';
      $output .= '<p><strong>' . t('The module supports two different payment methods') . '</strong></p>';
      $output .= '<ul><li>' . t('QuickPay Embedded method') . '</li><li>' . t('QuickPay Form method') . '</li></ul>';
      $output .= '<p>' . t('This module does have the payment refund functionality. But, you can’t do partial refund using the Quickpay Embedded payment method. Payment must be captured by the system to make it valid for the refund. That can be done manually as well as automatically. You can enable the auto capture in order to activate the instant refund of the payment.') . '</p>';
      $output .= '<p>' . t('Auto capture payment option is a default setting for the Quickpay Embedded method. You can also do that in QuickPay Form method.') . '</p>';
      $output .= '<p>' . t('Please refer README.txt included with the module for further information. You must install the quickpay PHP client library. If you uncover anything that needs fixing, please inform us about that in the issue queue.') . '</p>';
      $output .= '<p><strong>' . t('Cart detail validation is the must while using the QuickPay Embedded method. So, when users will select the QuickPay Embedded payment method, the page will automatically get refreshed to verify the card details and proceed with the payment process.') . '</strong></p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_form_alter().
 */
function uc_quickpay_form_uc_cart_checkout_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions'] = ['#type' => 'actions'];
  // Unset cancel event when submit from checkout to cart_review.
  unset($form['actions']['cancel']);
  $form['actions']['continue'] = [
    '#type' => 'submit',
    '#value' => t('Review order'),
    '#validate' => [],
    '#limit_validation_errors' => [],
    '#button_type' => 'primary',
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_order_view_update_form_alter().
 */
function uc_quickpay_form_uc_order_view_update_form_alter(&$form, FormStateInterface $form_state) {
  // Checking payment method for including library files.
  $form['#attached']['library'][] = 'uc_quickpay/uc_quickpay';
  // Get order id.
  $refund_order_id = $form['order_id']["#value"];
  // Load order using order id.
  $order = Order::load($refund_order_id);
  // Get order total.
  $order_total = $order->getTotal();

  // Get payment detail.
  $payment_detail = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
  if ($payment_detail->getPluginId() == "quickpay_gateway" && $order_total != 0) {
    $form['actions'] = ['#type' => 'actions'];
    $form['actions']['order_refund'] = [
      "#type" => 'submit',
      "#value" => 'Refund',
      "#attributes" => [
        'id' => 'quickpay-refund',
        'autocomplete' => 'off',
      ],
      '#weight' => 15,
    ];
    // Calling function on order views refund button.
    $form['actions']['order_refund']['#submit'][] = 'uc_quickpay_form_order_refund_process';
  }
}

/**
 * QuickPay refund process using "Refund" button on order panel.
 */
function uc_quickpay_form_order_refund_process(&$form, FormStateInterface $form_state) {
  // Get order id.
  $refund_order_id = $form['order_id']["#value"];
  // Load order using order id.
  $order = Order::load($refund_order_id);
  // Get current order payment method.
  $plugin = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
  $configuration = $plugin->getConfiguration();
  // Order total.
  $amount_currency = uc_currency_format($order->getTotal(), FALSE, FALSE, FALSE);
  // Get payment_id.
  $refund_payment_id = '';
  $payment_query = db_select('uc_payment_quickpay_callback', 'u')
    ->fields('u', ['payment_id'])
    ->condition('order_id', $refund_order_id, '=')
    ->range(0, 1)
    ->execute();
  while ($p_record = $payment_query->fetchAssoc()) {
    $refund_payment_id = $p_record['payment_id'];
  }
  // Create QuickPay client for refund process.
  $client = new QuickPay(":{$configuration['api']['user_api_key']}");
  // Refund variables.
  $refund_data = [
    'amount' => $amount_currency,
  ];
  // Checking payment id is in order or not.
  if (!empty($refund_payment_id)) {
    // Request for refund process.
    $refund_request = $client->request->post("/payments/{$refund_payment_id}/refund?synchronized", $refund_data);
    // Return refund order.
    $refund_response = $refund_request->asObject();
    // Checking refund is success or not.
    if ($refund_request->isSuccess()) {
      // Order comment.
      uc_order_comment_save($order->id(), 1, t('QuickPay payment is refunded successfully: @amount', ['@amount' => uc_currency_format($order->getTotal())]), 'admin');
      db_update('uc_orders')
        ->fields([
          'order_total' => 0,
        ])
        ->condition('order_id', $order->id())
        ->execute();
      // Updating quickpay schema.
      db_update('uc_payment_quickpay_callback')
        ->fields([
          'payment_amount' => 0,
        ])
        ->condition('order_id', $order->id())
        ->execute();
    }
    else {
      // Otherwise display the failure message in the logs.
      \Drupal::logger('uc_payment')->warning(t('Quickpay payment can not be refunded, The order has not captured'));
      uc_order_comment_save($order->id(), 1, t('Quickpay payment can not be refunded, The order has not captured'), 'admin');
    }
  }
  else {
    // Payment is not captured or payment id is not in the database.
    \Drupal::logger('uc_payment')->warning(
      t('Quickpay payment was not successful with payment id. The payment id has not found in order @order_id.', ['@order_id' => $order->id()]));
    uc_order_comment_save($order->id(), 1, t('Quickpay payment was not successful with payment id. The payment id has not found in order @order_id.', ['@order_id' => $order->id()]), 'admin');
  }
}

/**
 * Check that all API keys are configured.
 *
 * @return bool
 *   TRUE if all 4 keys have a value.
 */
function uc_quickpay_check_api_keys_and_ids($configuration) {
  return $configuration['api']['merchant_id'] &&
    $configuration['api']['user_api_key'] &&
    $configuration['api']['agreement_id'] &&
    $configuration['api']['payment_api_key'];
}
