<?php

use Drupal\node\Controller\NodeController;

function compose_theme() {
  $theme = [];

  $theme['compose_tabs'] = [
    'render element' => 'content',
    'template' => 'compose-tabs',
  ];

  return $theme;
}

function compose_theme_registry_alter(&$registry) {
  $registry['node_edit_form']['path'] = drupal_get_path('module', 'compose') . '/templates';
  $registry['node_edit_form']['template'] = 'node-edit-compose-form';
}

function compose_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['_field_layout']) && $form['_field_layout']['#theme'] == 'compose_tabs') {
    $form['#compose'] = true;
    $form['#attributes']['data-compose'] = 'compose-form';

    // Move fields to settings tab and set order
    $settings_fields = array(
      'revision_log'          => -99,
      'moderation_state'      => 99,
      'meta'                  => 100,
      'revision_information'  => 200,
      'options'               => 300,
      'author'                => 400,
      'menu'                  => 500,
      'path'                  => 600,
      'advanced'              => 700,
      'footer'                => 800,
    );
    foreach ($settings_fields as $field => $weight) {
      if (isset($form[$field])) {
        if ($field == 'path' || $field == 'moderation_state') {
          $form[$field]['#type'] = 'hidden';
          $form[$field]['widget'][0]['#type'] = 'details';
          $form[$field]['widget'][0]['#group'] = 'settings';
          $form[$field]['widget'][0]['#open'] = false;
          $form[$field]['widget'][0]['#weight'] = $weight;
        }
        else if ($field == 'footer' || $field == 'revision_log') {
          $form[$field]['#group'] = 'settings';
          $form[$field]['#weight'] = $weight;
        }
        else {
          $form[$field]['#type'] = 'details';
          $form[$field]['#group'] = 'settings';
          $form[$field]['#open'] = false;
          $form[$field]['#weight'] = $weight;
        }
      }
    }

    // Build the Revisions content in node form
    $storage = $form_state->getStorage();
    if (isset($storage['form_display'])) {
      $ogm = $storage['form_display']->getOriginalMode();
      if ($ogm == 'edit' || $ogm == 'new') {
        $entity = $form_state->getFormObject()->getEntity();
        $node_controller = new NodeController(\Drupal::service('date.formatter'), \Drupal::service('renderer'));
        $revisions = $node_controller->revisionOverview($entity);
        $form['revisions_content'] = $revisions;
        $form['revisions_content']['#type'] = 'container';
        $form['revisions_content']['#group'] = 'revisions';
      }
    }
  }
}

function compose_form_entity_form_display_edit_form_alter(&$form, &$form_state, $form_id) {
  // Hide revisions region header
  if (isset($form['fields']['#regions']['revisions'])) {
    unset($form['fields']['#regions']['revisions']);
  }
  // Hide revisions region option from select for fields
  foreach ($form['#fields'] as $field) {
    if (isset($form['fields'][$field]['region']['#options']['revisions'])) {
      unset($form['fields'][$field]['region']['#options']['revisions']);
    }
  }
  // Manually hide revisions region option from url_redirects since it's not included in #fields
  if (isset($form['fields']['url_redirects']['region']['#options']['revisions'])) {
    unset($form['fields']['url_redirects']['region']['#options']['revisions']);
  }
  // Hide revisions region option from select for field groups
  if (isset($form['#fieldgroups'])) {
    foreach ($form['#fieldgroups'] as $field) {
      if (isset($form['fields'][$field]['region']['#options']['revisions'])) {
        unset($form['fields'][$field]['region']['#options']['revisions']);
      }
    }
  }
}
