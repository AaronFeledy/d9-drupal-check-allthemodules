<?php

/**
 * @file
 * Update function for the tmgmt_smartling module.
 */
use Drupal\Core\Utility\UpdateException;

/**
 * Define needed states.
 *
 * Variable 'tmgmt_smartling.bucket_name' must be unique per installation and
 * must not be deleted when module is being uninstalled.
 */
function tmgmt_smartling_install() {
  if (!Drupal::state()->get('tmgmt_smartling.bucket_name', FALSE)) {
    Drupal::state()->set('tmgmt_smartling.bucket_name', uniqid());
  }
}

/**
 * Set default custom_regexp_placeholder string.
 */
function tmgmt_smartling_update_8001() {

  $custom_regexp_placeholder = \Drupal::config('tmgmt.translator.smartling')->get('settings.custom_regexp_placeholder');

  // Update custom_regexp_placeholder if not already set.
  if (empty($custom_regexp_placeholder)) {
    \Drupal::configFactory()
      ->getEditable('tmgmt.translator.smartling')
      ->set('settings.custom_regexp_placeholder', '(@|%|!)[\w-]+')
      ->save(TRUE);
  }
}

/**
 * Add file name into job entries.
 */
function tmgmt_smartling_update_8002() {
  drupal_flush_all_caches();

  // Apply new field to a job entity.
  Drupal::service('entity.definition_update_manager')->applyUpdates();

  Drupal::database()->update('tmgmt_job')
    ->expression(
      'job_file_name',
      'CONCAT(:job, tmgmt_job.tjid, :underscore, tmgmt_job.source_language, :underscore, tmgmt_job.target_language, :extension)',
      [
        ':job' => 'JobID',
        ':underscore' => '_',
        ':extension' => '.xlf',
      ]
    )
    ->execute();

  $translator_ids = \Drupal::configFactory()->listAll('tmgmt.translator');
  foreach ($translator_ids as $id) {
    $config = \Drupal::configFactory()->getEditable($id);

    if ($config && $config->get('plugin') === 'smartling') {
        $config->set('settings.export_format', 'xlf')->save(TRUE);
    }
  }
}

/**
 * Enable needed dependency.
 */
function tmgmt_smartling_update_8003() {
  // Check if dependency exists. Not enabled/disabled, but exists or not.
  $dependency_exists = module_load_include('module', 'tmgmt_extension_suit');

  if (!$dependency_exists) {
    throw new UpdateException('Unresolved dependency: tmgmt_extension_suit (missing).');
  }

  // Enable module if it's not enabled yet.
  if (!Drupal::service('module_handler')->moduleExists('tmgmt_extension_suit')) {
    Drupal::service('module_installer')->install(['tmgmt_extension_suit']);
  }
}

/**
 * Migrate users from fake xml (html) to new xml format.
 */
function tmgmt_smartling_update_8004() {
  $translator_ids = \Drupal::configFactory()->listAll('tmgmt.translator');

  foreach ($translator_ids as $id) {
    $config = \Drupal::configFactory()->getEditable($id);

    if ($config && $config->get('plugin') === 'smartling' && $config->get('settings')['export_format'] === 'html') {
      $config->set('settings.export_format', 'xml')->save(TRUE);
    }
  }

  // There are might be affected titles with encoded special chars. Fix it.
  \Drupal::database()->update('node_field_data', [
    'allow_delimiter_in_query' => TRUE,
  ])
    ->expression('title', "REPLACE(title, '&amp;', '&')")
    ->condition('title', '%&amp;%', 'LIKE')
    ->condition('langcode', 'en', '!=')
    ->execute();

  \Drupal::database()->update('node_field_revision', [
    'allow_delimiter_in_query' => TRUE,
  ])
    ->expression('title', 'REPLACE(title, \'&amp;\', \'&\')')
    ->condition('title', '%&amp;%', 'LIKE')
    ->condition('langcode', 'en', '!=')
    ->execute();
}

/**
 * Add new field to a job entity.
 */
function tmgmt_smartling_update_8005() {
  drupal_flush_all_caches();

  Drupal::service('entity.definition_update_manager')->applyUpdates();
}

/**
 * Rebuild the container as services changed.
 */
function tmgmt_smartling_update_8006() {
  drupal_flush_all_caches();
}

/**
 * Rebuild the container as services changed.
 */
function tmgmt_smartling_update_8007() {
  drupal_flush_all_caches();
}

/**
 * Set format to xml.
 */
function tmgmt_smartling_update_8401() {
  $translator_ids = \Drupal::configFactory()->listAll('tmgmt.translator');

  foreach ($translator_ids as $id) {
    $config = \Drupal::configFactory()->getEditable($id);

    if ($config && $config->get('plugin') === 'smartling') {
      $config->set('settings.export_format', 'xml')->save(TRUE);
    }
  }

  Drupal::state()->set('tmgmt_smartling.bucket_name', uniqid());
}
