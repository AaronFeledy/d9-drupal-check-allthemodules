<?php
/**
 * Created by PhpStorm.
 * User: andy
 * Date: 16/04/2015
 * Time: 22:09
 */
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldItemList;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\subsite\Plugin\Subsite\BookSubsitePlugin;
use Drupal\subsite\Plugin\Subsite\SocialMediaPlugin;
use Drupal\subsite\SubsiteBookManager;
use Drupal\subsite\SubsiteManager;
use Drupal\subsite\SubsitePluginInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Adds the subsite form element to the node form.
 */
function subsite_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var Node $node */
  $node = $form_state->getFormObject()->getEntity();
  $account = \Drupal::currentUser();
  $access = $account->hasPermission('administer subsite configuration');
  /** @var FieldItemList $subsite_field */
  $subsite_field = \Drupal::service('subsite.manager')->getSubsiteField($node);
  if ($subsite_field) {
    if (!$access) {
      if ($account->hasPermission('maintain subsite') && subsite_type_is_allowed($node->getType())) {
        // This node type is allowed.
        $access = TRUE;
      }
    }

    if ($access) {
      $collapsed = !($node->isNew());
      $form = \Drupal::service('subsite.manager')->addFormElements($form, $form_state, $node, $account, $collapsed);
      $form['#entity_builders'][] = 'subsite_node_builder';
      $form['#validate'][] = 'subsite_form_validate';
      $form['#subsite_fieldname'] = $subsite_field->getName();
    }
  }
}

/**
 * Validation handler for node edit form to validate subsite field.
 *
 * @param $form
 * @param $form_state
 */
function subsite_form_validate(&$form, &$form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $account = \Drupal::currentUser();
  \Drupal::service('subsite.manager')->validateFormElements($form, $form_state, $node, $account);
}

/**
 * Entity form builder to add the subsite information to the node.
 *
 * @todo: Remove this in favor of an entity field.
 */
function subsite_node_builder($entity_type, NodeInterface $entity, &$form, FormStateInterface $form_state) {
  $values = \Drupal::service('subsite.manager')->getFormValues($form, $form_state);

  if (isset($form['#subsite_fieldname'])) {
    $entity->set($form['#subsite_fieldname'], array('value' => $values));

    // Always save a revision for non-administrators.
    if (!\Drupal::currentUser()->hasPermission('administer nodes')) {
      $entity->setNewRevision();
    }
  }
}

/**
 * Determines if a given node type is in the list of types allowed for books.
 *
 * @param string $type
 *   A node type.
 *
 * @return bool
 *   A Boolean TRUE if the node type can be included in books; otherwise, FALSE.
 */
function subsite_type_is_allowed($type) {
  return in_array($type, \Drupal::config('subsite.settings')->get('allowed_types'));
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for node entities.
 */
function subsite_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
  if (!empty($node)) {
    $subsite_manager = \Drupal::service('subsite.manager');
    $subsite_manager->nodeViewAlter($build, $node, $display);
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * @param $attachments
 */
function subsite_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  $subsite_manager = \Drupal::service('subsite.manager');
  $subsite_manager->blockViewAlter($build, $block);
}

/**
 * Implements hook_page_attachments_alter().
 *
 * @param $attachments
 */
function subsite_page_attachments_alter(&$attachments) {
  $subsite_manager = \Drupal::service('subsite.manager');
  $subsite_manager->pageAttachmentsAlter($attachments);
}
