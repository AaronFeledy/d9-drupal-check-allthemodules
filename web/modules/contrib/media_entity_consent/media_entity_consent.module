<?php

/**
 * @file
 * Contains media_entity_consent.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\media_entity_consent\ConsentHelper;

/**
 * Implements hook_help().
 */
function media_entity_consent_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the media_entity_consent module.
    case 'help.page.media_entity_consent':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Enables users to give consent to load external media before their IP is sent to the external media providers. Inspired by tagesschau.de') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function media_entity_consent_theme() {
  return [
    'media_entity_consent_wrapper' => [
      'variables' => [
        'consent_form' => NULL,
        'consent_footer' => NULL,
        'consent_id' => NULL,
        'consent_status' => FALSE,
        'content' => NULL,
        'attributes' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_view_alter().
 */
function media_entity_consent_entity_view_alter(array &$build, $entity, $display) {
  if (isset($build['#media']) && !isset($build['#media_entity_consent_processed'])) {

    // Copy original render array.
    $build_media = $build;

    // Set flag to prevent endless loop of building render arrays.
    $build_media['#media_entity_consent_processed'] = TRUE;

    // Build consent render array.
    $build = [
      'content' => [
        '#type' => 'consent_wrapper',
        '#content' => $build_media,
      ],
      '#media' => $build_media['#media'],
      '#cache' => $build_media['#cache'],
      '#entity_type' => 'media',
    ];
  }
}

/**
 * Implements hook_js_alter().
 *
 * Removes the libraries of external sources from the drupal head.
 */
function media_entity_consent_js_alter(&$javascript, $assets) {
  $media_types_libs = ConsentHelper::identifyExternalLibraries();
  foreach ($media_types_libs as $media_type => $libs_to_exclude) {
    // Todo: Make this function executable for every user depending on Cookies.
    foreach ($libs_to_exclude as $lib_to_exclude) {
      unset($javascript[$lib_to_exclude]);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function media_entity_consent_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (($form['#form_id'] == 'config_translation_add_form' || $form['#form_id'] == 'config_translation_edit_form') && isset($form['config_names']['media_entity_consent.settings'])) {
    foreach ($form['config_names']['media_entity_consent.settings']['media_types'] as $type => &$form) {
      if (strpos($type, '#') !== 0) {
        $form['#title'] = $type;
      }
    }
  }
}
