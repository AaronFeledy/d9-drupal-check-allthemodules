<?php

/**
 * @file
 */

use Drupal\taxonomy\Entity\Vocabulary;
use Symfony\Component\Routing\Route;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\group_taxonomy\GroupTaxonomyAccessCheck;

/**
 * @param array $entity_types
 */
function group_taxonomy_entity_type_alter(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['taxonomy_vocabulary']->setHandlerClass('list_builder', 'Drupal\group_taxonomy\VocabularyListBuilder');
}

/**
 * @param \Symfony\Component\Routing\Route $route
 * @param \Drupal\Core\Routing\RouteMatchInterface $match
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function group_taxonomy_route_access(Route $route, RouteMatchInterface $match, AccountInterface $account) {
  $op = $route->getOption('op');
  $vocabulary = $match->getParameter('taxonomy_vocabulary');
  $term_id = $match->getRawParameters()->getDigits('taxonomy_term');

  if ($match->getRouteName() == 'entity.taxonomy_term.delete_form') {
    $op = 'delete terms';
  };

  if ((!$vocabulary) && !empty($term_id)) {
    $vocabulary_id = Term::load($term_id)->bundle();

    if (GroupTaxonomyAccessCheck::CheckAccess($op, $vocabulary_id, $account)->isAllowed()) {
      return AccessResult::allowed();
    }
    elseif (GroupTaxonomyAccessCheck::checkCreatorAccess($op, $vocabulary_id)) {
      return AccessResult::allowed();
    };

  }
  elseif ($vocabulary && is_string($vocabulary)) {
    $vocabulary = Vocabulary::load($vocabulary);
    $vocabulary_id = $vocabulary->id();
  }
  elseif (!$vocabulary) {
    // Do nothing when vocab is null.
    $vocabulary_id = NULL;
  }
  else {
    $vocabulary_id = $vocabulary->id();
  }

  if (GroupTaxonomyAccessCheck::checkCreatorAccess($op, $vocabulary_id)) {
    return AccessResult::allowed();
  }

  return AccessResult::forbidden();
}


/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function group_taxonomy_entity_access(EntityInterface $entity) {
  $entity_type_id = $entity->getEntityTypeId();

  if (($entity_type_id == 'taxonomy_vocabulary'
  && GroupTaxonomyAccessCheck::checkCreatorAccess('', $entity->getConfigTarget()))
    ||$entity_type_id == 'taxonomy_term') {
    return AccessResult::allowed();
  }

  return AccessResult::neutral();
}
