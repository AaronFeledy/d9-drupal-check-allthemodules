<?php

use Drupal\Core\Form\FormStateInterface;

// Endpoint for HIBP password checks.
const HIBP_API_URL = 'https://haveibeenpwned.com/api/v2/pwnedpassword';

// User Agent to report to endpoint.
const HIBP_UA = 'Drupal password_haveibeenpwned';

// Timeout for requests to HIBP.
const HIBP_CONNECT_TIMEOUT = 2;

// Default result for HIBP checks which do no work (e.g. timeout, rate limited)
// N.B. "true" means that the password was found in the HIBP repository.
const HIBP_FAILED_CHECK_DEFAULT = false;


const PASSWORD_HAVEIBEENPWNED_IGNORE = 0;
const PASSWORD_HAVEIBEENPWNED_WARN = 1;
const PASSWORD_HAVEIBEENPWNED_BLOCK = 2;

/**
 * Check a password with an API call to haveibeenpwned.
 *
 * @param string $password
 *   The plain text password.
 *
 * @return boolean
 *   Whether the password was found in the Pwned Passwords repository.
 */
function password_haveibeenpwned_check_password($password) {
  $hash = hash('sha1', $password);
  try {
    $result = Drupal::httpClient()->post(HIBP_API_URL, [
        'form_params' => ['Password' => $hash],
        'http_errors' => false, // Do not throw exception on 404.
        'timeout' => HIBP_CONNECT_TIMEOUT,
        'headers' => [
          'User-Agent' => HIBP_UA . ' (' . \Drupal::VERSION . ')',
        ],
      ]
    );
  }
  catch(Exception $e) {
    // Log failed request to HIBP.
    $message = 'Request to ' . HIBP_API_URL . ' failed. ';
    $message .= 'Responding with default for failed check ';
    $message .= '(' . (HIBP_FAILED_CHECK_DEFAULT ? 'true' : 'false') . ').';
    if (is_callable([$e, 'getMessage'])) {
      $details = $e->getMessage();
      // Ensure that we do not log actual hashes.
      $search = [$hash, "\n"];
      $replace = ['**PASSWORD-HASH-REDACTED**', ' '];
      $details = str_replace($search, $replace, $details);
      $message .= ' Details: ' . $details;
    }
    \Drupal::logger('password_haveibeenpwned')->error($message);
    return HIBP_FAILED_CHECK_DEFAULT;
  }
  switch ($result->getStatusCode()) {
    case 200;
      $status = true;
      break;
    case 404;
      $status = false;
      break;
    case 429:
      // Rate limit has been exceeded.
      // @todo: Make the behaviour in this situation configurable.
      // Deliberately no break.
    default:
      // @todo: Log http errors (e.g. 401, 403, 50x); no exceptions are thrown.
      $status = HIBP_FAILED_CHECK_DEFAULT;
      break;
  }
  return $status;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_login_form().
 */
function password_haveibeenpwned_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('password_haveibeenpwned.settings');
  if ($config->get('login_policy') == PASSWORD_HAVEIBEENPWNED_IGNORE) {
    return;
  }
  $form['#validate'][] = 'password_haveibeenpwned_user_login_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 */
function password_haveibeenpwned_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('password_haveibeenpwned.settings');
  if ($config->get('register_policy') == PASSWORD_HAVEIBEENPWNED_IGNORE) {
    return;
  }
  // Only add password validation if a password is going to be provided at registration.
  $account = \Drupal::currentUser();
  $config = \Drupal::config('user.settings');
  if ($account->isAnonymous() and !$config->get('verify_mail')) {
    $form['#validate'][] = 'password_haveibeenpwned_user_register_form_validate';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_form().
 */
function password_haveibeenpwned_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('password_haveibeenpwned.settings');
  if ($config->get('change_policy') == PASSWORD_HAVEIBEENPWNED_IGNORE) {
    return;
  }
  $form['#validate'][] = 'password_haveibeenpwned_user_form_validate';
}

/**
 * Validation for user_login_form().
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function password_haveibeenpwned_user_login_form_validate($form, FormStateInterface $form_state) {
  $config = \Drupal::config('password_haveibeenpwned.settings');
  if (!isset($form_state->getUserInput()['pass'])) {
    return;
  }
  if (password_haveibeenpwned_check_password($form_state->getUserInput()['pass'])) {
    switch ($config->get('login_policy')) {
      case PASSWORD_HAVEIBEENPWNED_WARN:
        // At validation, the user is not yet authenticated so we can't provide an edit link.
        drupal_set_message(_password_haveibeenpwned_pwned_password_login_warning_message(), 'warning');
        break;
      case PASSWORD_HAVEIBEENPWNED_BLOCK:
        // Do we really want to be doing this?
        $form_state->setErrorByName('pass', _password_haveibeenpwned_pwned_password_login_blocked_message());
        break;
    }
  }
}

/**
 * Validation for user_register_form().
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function password_haveibeenpwned_user_register_form_validate($form, FormStateInterface $form_state) {
  if (!isset($form_state->getUserInput()['pass'])) {
    return;
  }
  if (!($pass = _password_haveibeenpwned_extract_one_password($form_state->getUserInput()['pass']))) {
    return;
  }
  if (password_haveibeenpwned_check_password($pass)) {
    $config = \Drupal::config('password_haveibeenpwned.settings');
    switch ($config->get('register_policy')) {
      case PASSWORD_HAVEIBEENPWNED_WARN:
        // At validation, the user is not yet authenticated so we can't provide an edit link.
        drupal_set_message(_password_haveibeenpwned_pwned_password_warning(), 'warning');
        break;
      case PASSWORD_HAVEIBEENPWNED_BLOCK:
        $form_state->setErrorByName('pass', _password_haveibeenpwned_pwned_password_register_blocked_message());
        break;
    }
  }
}

/**
 * Validation for user_form().
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function password_haveibeenpwned_user_form_validate($form, FormStateInterface $form_state) {
  if (!isset($form_state->getUserInput()['pass'])) {
    return;
  }
  if (!($pass = _password_haveibeenpwned_extract_one_password($form_state->getUserInput()['pass']))) {
    return;
  }
  if (password_haveibeenpwned_check_password($pass)) {
    $config = \Drupal::config('password_haveibeenpwned.settings');
    switch ($config->get('change_policy')) {
      case PASSWORD_HAVEIBEENPWNED_WARN:
        // At validation, the user is not yet authenticated so we can't provide an edit link.
        drupal_set_message(_password_haveibeenpwned_pwned_password_warning(), 'warning');
        break;
      case PASSWORD_HAVEIBEENPWNED_BLOCK:
        $form_state->setErrorByName('pass', _password_haveibeenpwned_pwned_password_change_blocked_message());
        break;
    }
  }
}

/**
 * Extract individual password from pair of password confirmation inputs.
 *
 * @param array $passwords
 *
 * @return string OR boolean false if passwords did not match.
 */
function _password_haveibeenpwned_extract_one_password($passwords) {
  if (!is_array($passwords)) {
    return $passwords;
  }
  if (count(($password = array_unique($passwords))) > 1) {
    // Passwords didn't match.
    return false;
  }
  else {
    return array_pop($password);
  }
}

/**
 * Generic warning about pwned password.
 *
 * @return string
 */
function _password_haveibeenpwned_pwned_password_warning() {
  return t(<<<EOM
The password you have supplied previously appeared in a data breach of another 
site. <strong>This is not related to a security incident on this site</strong>, 
however the fact that it has previously appeared elsewhere puts your account at 
risk. You should consider changing your password on this site as well as on any 
other site you may have used it.
EOM
  );
}

/**
 * Warning about pwned password on login.
 *
 * @return string
 */
function _password_haveibeenpwned_pwned_password_login_warning_message() {
  return t(<<<EOM
The password you have supplied previously appeared in a data breach of another 
site. <strong>This is not related to a security incident on this site</strong>, 
however the fact that it has previously appeared elsewhere puts your account at 
risk. You should consider <a href="@user_edit">changing your password</a> on 
this site as well as on any other site you may have used it.
EOM
  , ['@user_edit' => '/password_haveibeenpwned/redirect_edit']);
}

/**
 * Error message when a login has been blocked.
 *
 * @return string
 */
function _password_haveibeenpwned_pwned_password_login_blocked_message() {
  // @todo: provide a placeholder for a link to the password reset form
  return t(<<<EOM
The password you have supplied previously appeared in a data breach of another 
site. <strong>This is not related to a security incident on this site</strong>, 
however the fact that it has previously appeared elsewhere puts your account at 
risk. You need to reset your password to something else.
EOM
  );
}

/**
 * Error message when registration has been blocked.
 *
 * @return string
 */
function _password_haveibeenpwned_pwned_password_register_blocked_message() {
  return t(<<<EOM
The password you have supplied previously appeared in a data breach of another 
site. <strong>This is not related to a security incident on this site</strong>, 
however the fact that it has previously appeared elsewhere puts your account at 
risk. You need to choose a different password for your account.
EOM
  );
}

/**
 * Error message when a password change has been blocked.
 *
 * @return string
 */
function _password_haveibeenpwned_pwned_password_change_blocked_message() {
  return t(<<<EOM
The new password you have supplied previously appeared in a data breach of 
another site. <strong>This is not related to a security incident on this 
site</strong>, however the fact that it has previously appeared elsewhere puts 
your account at risk. You need to change your password to something else.
EOM
  );
}
