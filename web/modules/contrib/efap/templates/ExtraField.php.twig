{% extends "base/class.php.twig" %}

{% block file_path %}
  \Drupal\{{ module }}\Plugin\ExtraField\{{ folder }}\{{ class}}.
{% endblock %}

{% block namespace_class %}
namespace Drupal\{{ module }}\Plugin\ExtraField\{{ folder }};
{% endblock %}

{% block use_class %}
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\efap\ExtraFieldBase;
{% if services is not empty %}
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
{% endif %}
{% endblock %}

{% block class_declaration %}
/**
 * Class {{ class }}
 *
 * @ExtraField(
 *   id = "{{ id }}",
 *   label = @Translation("{{ label }}"),
 *   description = @Translation("{{ description }}"),
 * )
 */
class {{ class }} extends ExtraFieldBase {% if services is not empty %}implements ContainerFactoryPluginInterface {% endif %}{% endblock %}
{% block class_construct %}
{% if services is not empty %}

  /**
   * Constructs a new {{ class }} object.
   *
   * @param array $configuration
   * @param string $plugin_id
   * @param mixed $plugin_definition
   */
  public function __construct(
    array $configuration,
    $plugin_id,
    $plugin_definition,
    {{ servicesAsParameters(services)|join(', \n\t') }}
  ) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
{{ serviceClassInitialization(services) }}
  }

{% endif %}
{% endblock %}
{% block class_create %}
{% if services is not empty %}
  /**
   * {@inheritdoc}
   */
  public static function create(
    ContainerInterface $container,
    array $configuration,
    $plugin_id,
    $plugin_definition
  ) {
    return new self(
      $configuration,
      $plugin_id,
      $plugin_definition,
{{ serviceClassInjection(services) }}
    );
  }

{% endif %}
{% endblock %}
{% block class_methods %}
  /**
   * {@inheritdoc}
   */
  public function info(): array {
    $field['{{ entityType }}']['{{ bundle }}']['display'][$this->pluginDefinition['id']] = [
      'label' => $this->pluginDefinition['label'],
      'description' => $this->pluginDefinition['description'],
      'weight' => 0,
      'visible' => FALSE,
    ];

    return $field;
  }

  /**
   * {@inheritdoc}
   */
  public function view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $viewMode): array {
    $output = parent::view($build, $entity, $display, $viewMode);



    return $output;
  }
{% endblock %}
