<?php

/**
 * @file
 * Contains display_sync.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

const DISPLAY_SYNC_ENABLED_ID = 'enable_display_sync';

/**
 * Implements hook_help().
 */
function display_sync_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the display_sync module.
    case 'help.page.display_sync':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Synchronise entity displays (form and view) on save.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Enable sync on a display.
 */
function display_sync_enable_display_sync(&$entity_display) {
  $entity_display->setThirdPartySetting('display_sync', DISPLAY_SYNC_ENABLED_ID, 1)->save();
}

/**
 * Alter the entity view/form display edit form.
 */
function display_sync_form_entity_form_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $display = $form_state->getFormObject()->getEntity();

  if ($display->getMode() !== 'default') {
    $sync_enabled = $display->getThirdPartySetting('display_sync', DISPLAY_SYNC_ENABLED_ID, 0);

    if ($sync_enabled === 1) {
      drupal_set_message(t('Note: this form mode is currently synchronised to the default mode. You must either disable synchronising below or make any changes in the default mode.'), 'warning');
    }

    $form[DISPLAY_SYNC_ENABLED_ID] = [
      '#type' => 'checkbox',
      '#title' => t('Synchronise with default'),
      '#description' => t('Check this box to enable synchronising of this display with the default display.'),
      '#default_value' => $sync_enabled,
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function display_sync_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  display_sync_form_entity_form_view_display_edit_form_alter($form, $form_state, $form_id);

  $form['actions']['submit']['#submit'][] = 'display_sync_form_entity_view_display_edit_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function display_sync_form_entity_form_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  display_sync_form_entity_form_view_display_edit_form_alter($form, $form_state, $form_id);

  $form['actions']['submit']['#submit'][] = 'display_sync_form_entity_form_display_edit_form_submit';
}

/**
 * Custom entity_view_display_edit_form submit handler.
 */
function display_sync_form_entity_view_display_edit_form_submit(array &$form, FormStateInterface $form_state) {
  display_sync_form_entity_view_form_display_edit_form_submit($form, $form_state, 'entity_view_display', 'getViewModes');
}

/**
 * Custom entity_form_display_edit_form submit handler.
 */
function display_sync_form_entity_form_display_edit_form_submit(array &$form, FormStateInterface $form_state) {
  display_sync_form_entity_view_form_display_edit_form_submit($form, $form_state, 'entity_form_display', 'getFormModes');
}

/**
 * Replace a display with another and set sync.
 */
function display_sync_replace_display_sync(&$target_display, &$source_display) {
  // Remove, copy, set sync, save.
  $target_mode = $target_display->getMode();
  $target_display->delete();
  $new_display = $source_display->createCopy($target_mode);
  $new_display->save();
  display_sync_enable_display_sync($new_display);
}

/**
 * Common view/form submit handler functionality.
 */
function display_sync_form_entity_view_form_display_edit_form_submit(array &$form, FormStateInterface $form_state, $storage, $mode_function_name) {
  $current_mode = $form['#context']->getMode();
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $entity_manager = \Drupal::service('entity.manager');

  $sync_enabled = $form_state->getValue(DISPLAY_SYNC_ENABLED_ID);

  $default_display = $entity_manager->getStorage($storage)->load($entity_type . '.' . $bundle . '.default');

  if ($current_mode !== 'default') {
    if ($sync_enabled === 1) {
      $current_display = $entity_manager->getStorage($storage)->load($entity_type . '.' . $bundle . '.' . $current_mode);
      display_sync_replace_display_sync($current_display, $default_display);
    }
  }
  else {
    $other_display_modes = $entity_manager->{$mode_function_name}($entity_type);
    foreach (array_keys($other_display_modes) as $other_display_mode) {
      $other_display = $entity_manager->getStorage($storage)->load($entity_type . '.' . $bundle . '.' . $other_display_mode);

      if ($other_display !== NULL && $other_display->get('id') !== NULL) {
        $sync_display = $other_display->getThirdPartySetting('display_sync', DISPLAY_SYNC_ENABLED_ID, 0);
        if ($sync_display === 1) {
          display_sync_replace_display_sync($other_display, $default_display);
          drupal_set_message(t('Other displays have been synchronised to this display.'));
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function display_sync_module_implements_alter(&$implementations, $hook) {
  // Put our alters after all others e.g. field_group.
  if ($hook == 'form_entity_form_display_edit_form_alter' ||
    $hook == 'form_entity_view_display_edit_form_alter' ||
    $hook == 'form_alter') {
    if (isset($implementations['display_sync'])) {
      $group = $implementations['display_sync'];
      unset($implementations['display_sync']);
      $implementations['display_sync'] = $group;
    }
  }
}
