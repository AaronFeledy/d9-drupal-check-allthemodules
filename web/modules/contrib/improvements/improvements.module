<?php

use Drupal\contact\MessageForm;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

require_once __DIR__ . '/includes/improvements.admin.inc';
require_once __DIR__ . '/includes/improvements.contact.inc';
require_once __DIR__ . '/includes/improvements.toolbar.inc';

/**
 * Implements hook_theme().
 */
function improvements_theme() {
  return [
    'extra_field' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function improvements_page_attachments(array &$page) {
  // Attach main library to all pages.
  $page['#attached']['library'][] = 'improvements/main';

  // Add to js info about submitted forms.
  if ($submitted_forms = improvements_get_submitted_forms()) {
    $page['#attached']['drupalSettings']['submittedForms'] = $submitted_forms;
  }

  // Add to js info about current and default themes.
  $page['#attached']['drupalSettings']['path']['currentThemePath'] = \Drupal::service('theme.manager')->getActiveTheme()->getPath();
  $page['#attached']['drupalSettings']['path']['defaultThemePath'] = drupal_get_path('theme', \Drupal::config('system.theme')->get('default'));
}

/**
 * Implements hook_library_info_alter().
 */
function improvements_library_info_alter(&$libraries, $extension) {
  static $module_path;

  if (!$module_path) {
    $module_path = '/' . drupal_get_path('module', 'improvements');
  }

  // core
  if ($extension == 'core') {
    $libraries['drupal.ajax']['js'][$module_path . '/assets/improvements.ajax.js'] = [];

    $libraries['jquery.form']['js'][$module_path . '/assets/improvements.form.js'] = [];
    $libraries['jquery.form']['dependencies'][] = 'core/drupal.debounce';
  }
  // file
  elseif ($extension == 'file') {
    $libraries['drupal.file']['js'][$module_path . '/assets/improvements.file.js'] = [];
  }
  // contextual
  elseif ($extension == 'contextual') {
    $libraries['drupal.contextual-links']['js'][$module_path . '/assets/improvements.contextual.js'] = [];
  }
}

/**
 * Implements hook_ajax_render_alter().
 */
function improvements_ajax_render_alter(array &$data) {
  if ($submitted_forms = improvements_get_submitted_forms()) {
    $command = new SettingsCommand(['submittedForms' => $submitted_forms]);
    $data[] = $command->render();
  }
}

/**
 * Implements hook_element_info_alter().
 */
function improvements_element_info_alter(array &$elements) {
  // Add page #pre_render callback to delete "off canvas" wrapper.
  $elements['page']['#pre_render'][] = 'improvements_page_pre_render';

  // Add "managed_file" #pre_render callback to improvements element functionality.
  $elements['managed_file']['#pre_render'][] = 'improvements_element_managed_file_pre_render';

  // Attach library to improvements textareas.
  $elements['textarea']['#attached']['library'][] = 'improvements/textarea';

  // Tweak toolbar.
  improvements_toolbar_element_info_alter($elements);
}

/**
 * Page pre render callback.
 * @see improvements_element_info_alter().
 */
function improvements_page_pre_render($element) {
  // Remove "off canvas" wrapper for non-admin users.
  if (!\Drupal::currentUser()->hasPermission('administer site configuration')) {
    unset($element['#theme_wrappers']['off_canvas_page_wrapper']);
  }

  return $element;
}

/**
 * Managed file pre render callback.
 * @see improvements_element_info_alter().
 */
function improvements_element_managed_file_pre_render($element) {
  // Ability disable file auto-upload.
  if (isset($element['upload']) && $element['upload']['#type'] == 'file') {
    if (isset($element['#autoupload']) && !$element['#autoupload']) {
      $element['upload']['#attributes']['class'][] = 'js-form-file--no-autoupload';
    }
  }

  // Upload button state.
  if (isset($element['upload_button'], $element['#upload_button_state'])) {
    if ($element['#upload_button_state'] == 1) {
      $element['upload_button']['#attributes']['class'] = array_diff($element['upload_button']['#attributes']['class'], ['js-hide']);
    }
    elseif ($element['#upload_button_state'] == 0) {
      $element['upload_button']['#access'] = FALSE;
    }
  }

  return $element;
}

/**
 * Implements hook_form_alter().
 */
function improvements_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Move hidden system elements to form bottom.
  foreach (['form_build_id', 'form_token', 'form_id'] as $element_name) {
    if (isset($form[$element_name])) {
      $form[$element_name]['#weight'] = 1000;

      if (isset($form[$element_name]['#attributes']['autocomplete'])) {
        unset($form[$element_name]['#attributes']['autocomplete']);
      }
    }
  }

  // Add tracking form submit.
  if (!empty($form['#tracking_submit'])) {
    $form_object = $form_state->getFormObject();
    // For contact message form.
    if ($form_object instanceof MessageForm && isset($form['actions']['submit'])) {
      $form['actions']['submit']['#submit'][] = 'improvements_tracking_form_submit';
    }
    // For other forms.
    else {
      $form['#submit'][] = 'improvements_tracking_form_submit';
    }
  }
}

/**
 * All forms submit callback.
 */
function improvements_tracking_form_submit($form, FormStateInterface $form_state) {
  $session = \Drupal::request()->getSession();
  $submitted_forms = $session->get('submitted_forms', []);
  $form_id = $form_state->getFormObject()->getFormId();

  if (!in_array($form_id, $submitted_forms)) {
    $submitted_forms[] = $form_id;
  }

  $session->set('submitted_forms', $submitted_forms);
}

/**
 * Return submitted forms.
 */
function improvements_get_submitted_forms() {
  $session = \Drupal::request()->getSession();
  $submitted_forms = $session->get('submitted_forms', []);
  if ($submitted_forms) {
    $session->remove('submitted_forms');
  }
  return $submitted_forms;
}

/**
 * Implements hook_entity_operation_alter().
 */
function improvements_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // ???
  foreach ($operations as &$operation) {
    $query = $operation['url']->getOption('query');
    if ($query && isset($query['destination'])) {
      unset($query['destination']);
      $operation['url']->setOption('query', $query);
    }
  }
}

/**
 * Preprocess function for captcha.html.twig.
 */
function improvements_preprocess_captcha(&$variables) {
  if (isset($variables['element']['#captcha_validate']) && $variables['element']['#captcha_validate'] == 'recaptcha_captcha_validation') {
    $variables['#attached']['library'][] = 'improvements/recaptcha';
  }
}

/**
 * Preprocess function for input.html.twig.
 */
function improvements_preprocess_input(&$vars) {
  // Attach improvements/spinner library if input has class "form-spinner".
  if (!empty($vars['attributes']['class']) && in_array('form-spinner', $vars['attributes']['class'])) {
    $vars['#attached']['library'][] = 'improvements/spinner';
  }
}

/**
 * Preprocess function for extra-field.html.twig.
 */
function improvements_preprocess_extra_field(&$vars) {
  $vars['content'] = $vars['element'] + [
    '#entity_type' => 'node',
    '#bundle' => 'unknown',
    '#field_name' => 'unknown',
    '#field_type' => 'string',
    '#label_display' => 'hidden',
    '#title' => 'unknown',
    '#is_multiple' => FALSE,
  ];

  $vars['content']['#theme'] = 'field';

  if (is_array($vars['element']['#items'])) {
    $vars['content'] += $vars['element']['#items'];
  }
  elseif (is_string($vars['element']['#items'])) {
    $vars['content'][0] = ['#markup' => $vars['element']['#items']];
  }

  unset($vars['content']['#children']);
  unset($vars['content']['#render_children']);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_alter(): datetime_default.
 */
function custom_admin_field_widget_datetime_default_form_alter(&$element, $form_state, $context) {
  // Remove wrapper from datetime widget.
  if (isset($element['#theme_wrappers'])) {
    $element['#type'] = 'item';
    $element['#theme_wrappers'] = array_diff($element['#theme_wrappers'], ['fieldset']);
    $element['#theme_wrappers'][] = 'form_element';
  }
}
