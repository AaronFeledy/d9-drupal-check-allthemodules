<?php
/**
 * @file
 * Interfaces with the Edgecast CDN API.
 *
 * Responds to Drupal node changes based on hooks from other modules.
 */

/**
 * Implements hook_permission().
 */
function edgecast_permission() {
  return array(
    'administer edgecast' => array(
      'title' => 'Administer Edgecast',
      'description' => t('Configure the customer account.'),
    ),
  );
}

///**
// * Implements hook_menu().
// */
//function edgecast_menu() {
//  $items = array();
//
//  $items['admin/config/development/edgecast'] = array(
//    'title' => 'Edgecast',
//    'description' => 'Configure your CDN integration and force clear the cache.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('edgecast_selective_purge_form'),
//    'access arguments' => array('administer edgecast'),
//    'type' => MENU_NORMAL_ITEM,
//    'weight' => -5,
//  );
//
//  $items['admin/config/development/edgecast/api'] = array(
//    'title' => 'Edgecast API Settings',
//    'description' => 'Configure your CDN integration.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('edgecast_admin_settings'),
//    'access arguments' => array('administer edgecast'),
//    'type' => MENU_LOCAL_TASK,
//  );
//
//  $items['admin/config/development/edgecast/purge'] = array(
//    'title' => 'Edgecast Purge',
//    'description' => 'Force clear the CDN cache.',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('edgecast_selective_purge_form'),
//    'access arguments' => array('purge edgecast'),
//    'type' => MENU_DEFAULT_LOCAL_TASK,
//    'weight' => -5,
//  );
//
//  return $items;
//}
//
///*
// * Provide the facility to bulk delete known paths without editing content individually
// */
//function edgecast_selective_purge_form() {
//  $form = array();
//
//  $form['paths'] = array(
//    '#type' => 'textarea',
//    '#title' => t('Paths to Purge'),
//    '#rows' => 6,
//    '#description' => t('One path per line. Do not include the domain. For example: node/1234. To purge the entire domain enter *.'),
//  );
//  $form['submit'] = array(
//    '#type' => 'submit',
//    '#value' => 'Purge',
//  );
//
//  return $form;
//}
//
///*
// * Purge all paths manually entered
// */
//function edgecast_selective_purge_form_submit($form_id, $form_state) {
//  $paths = explode("\n", $form_state['values']['paths']);
//  $domain = variable_get('edgecast_path', '');
//
//  // Create a purge request for each path
//  foreach ($paths AS $path) {
//    $path = trim($path);
//    edgecast_purge($path);
//  }
//}
//
///**
// * @ingroup forms
// * @see system_settings_form()
// */
//function edgecast_admin_settings() {
//  $form = array();
//
//  $form['edgecast_customer'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Edgecast Account ID'),
//    '#size' => 4,
//    '#maxlength' => 4,
//    '#default_value' => variable_get('edgecast_customer', ''),
//    '#description' => t('The Edgecast account id (4 characters).'),
//  );
//
//  $form['edgecast_token'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Edgecast Token'),
//    '#default_value' => variable_get('edgecast_token', ''),
//    '#description' => t('The Edgecast token is used to make authenticated requests to clear the CDN cache. Find the token after logging in to my.edgecast.com and accessing "My Settings".'),
//  );
//
//  $form['edgecast_path'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Default Path'),
//    '#default_value' => variable_get('edgecast_path', ''),
//    '#description' => t('The default path used to clear the Edgecast CDN cache. No trailing slash.'),
//  );
//
//  return system_settings_form($form);
//}
//
///*
// * Connect to the Edgecast API
// */
//function edgecast_purge($path) {
//  $customer = variable_get('edgecast_customer', '');
//  $token = variable_get('edgecast_token', '');
//
//  // Ensure the CDN account is valid
//  if (empty($customer) || empty($token)) {
//    drupal_set_message(t('Please define the Edgecast account settings in !settings_url.', array('!settings_url' => l(t('Edgecast API Settings'), 'admin/config/development/edgecast/api'))), 'error');
//    return FALSE;
//  }
//
//  $arr = array(
//    'MediaPath' => $path,
//    // @todo make this configurable
//    'MediaType' => 8,
//  );
//
//  $fp = fopen('php://temp/maxmemory:256000', 'w');
//  if (!$fp) {
//    die('could not open temp memory data');
//  }
//  fwrite($fp, json_encode($arr));
//  fseek($fp, 0);
//
//  $ch = curl_init('https://api.edgecast.com/v2/mcc/customers/' . $customer . '/edge/purge');
//  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
//  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
//  curl_setopt($ch, CURLOPT_PUT, 1);
//  curl_setopt($ch, CURLOPT_INFILE, $fp);
//  curl_setopt($ch, CURLOPT_INFILESIZE, strlen(json_encode($arr)));
//
//  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
//      'Authorization: TOK:' . $token,
//      'Accept: application/json',
//      'Content-Type: application/json',
//      'Host: api.edgecast.com',
//    ));
//
//  $output = curl_exec($ch);
//  $code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
//
//  // Determine if the message is a status or error
//  $status = ($code < 300) ? 'status' : 'error';
//
//  // Report errors to user and watchdog
//  if ($status == 'error') {
//    watchdog('edgecast', 'CDN purge of %path return code: %code', array('%path' => $path, '%code' => $code), WATCHDOG_ERROR);
//    drupal_set_message(t('CDN purge of %path return code: %code', array('%path' => $path, '%code' => $code)), $status);
//  }
//
//  // Clean up
//  curl_close($ch);
//  fclose($fp);
//}
//
///*
// * React to Expire module cache clearing
// */
//function edgecast_expire_cache($paths) {
//  // Create a purge request for each path
//  foreach ($paths AS $path) {
//    $path = trim($path);
//    edgecast_purge($path);
//  }
//}
//
//// Only enable these if the expire.module is not enabled
//if (!module_exists('expire')) {
//  function edgecast_nodepurge($node) {
//    $domain = variable_get('edgecast_path', '');
//
//    if (edgecast_purge($domain . '/node/' . $node->nid)) {
//      edgecast_purge(drupal_get_path_alias($domain . '/node/' . $node->nid));
//
//      // Purge the front page if item is promoted to front page
//      if ($node->promote) {
//        edgecast_purge($domain);
//      }
//    }
//  }
//
//  function edgecast_node_insert($node) {
//    edgecast_nodepurge($node);
//  }
//
//  function edgecast_node_update($node) {
//    edgecast_nodepurge($node);
//  }
//
//  function edgecast_node_delete($node) {
//    edgecast_nodepurge($node);
//  }
//}
