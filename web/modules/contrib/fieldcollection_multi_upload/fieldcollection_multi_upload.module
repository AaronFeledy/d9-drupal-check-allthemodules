<?php

/**
 * @file
 * Contains fieldcollection_multi_upload.module..
 */

use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field_collection\Entity\FieldCollectionItem;

/**
 * Implements hook_help().
 */
function fieldcollection_multi_upload_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the fieldcollection_multi_upload module.
    case 'help.page.fieldcollection_multi_upload':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Quick Upload Field Collection Images') . '</p>';
      return $output;

    default:
  }
}

/**
 * Searching first widget parameter.
 */
function _fieldcollection_multi_upload__search_widget0(&$value) {
  $widget0 = NULL;
  for ($i = 0; $i < 100; $i++) {
    if (!empty($value['widget'][$i])) {
      $widget0 = $value['widget'][$i];
      break;
    }
  }
  return $widget0;
}

/**
 * Searching needed fields in node fields.
 */
function _fieldcollection_multi_upload__search_fieldcollection_w_files(&$form) {
  $complex_field_names = [];
  foreach ($form as $nm => &$value) {
    if (substr($nm, 0, 1) == '#') {
      continue;
    }

    if ($value['#type'] == 'container' and !empty($value['#attributes']['class'])
         and in_array('field--type-field-collection', $value['#attributes']['class'])) {

      $widget0 = _fieldcollection_multi_upload__search_widget0($value);
      if (!$widget0) {
        continue;
      }

      foreach ($widget0 as $nm_wd => &$cmpl_value) {
        if (substr($nm_wd, 0, 1) == '#' or empty($cmpl_value['widget'])) {
          continue;
        }

        $sub_widget0 = _fieldcollection_multi_upload__search_widget0($cmpl_value);
        if (!$sub_widget0) {
          continue;
        }

        if (!empty($sub_widget0['#type']) and $sub_widget0['#type'] == 'managed_file') {
          $complex_field_names[$value['widget']['#field_name']] = $sub_widget0['#field_name'];
          // kint($sub_widget0);.
        }
      }
      unset($cmpl_value);
    }

  }
  unset($value);

  return $complex_field_names;
}

/**
 * Implements hook_form_alter().
 */
function fieldcollection_multi_upload_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only node edition form.
  if (!preg_match('/node_([a-z0-9_]+)_edit_form/', $form_id)) {
    return;
  }

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' and !empty($form['actions'][$action]['#type']) and
                    $form['actions'][$action]['#type'] === 'submit') {
      // array_unshift($form['actions'][$action]['#submit'].//,'fieldcollection_multi_upload_node_form_submit');.
      $form['actions'][$action]['#submit'][] = 'fieldcollection_multi_upload_node_form_submit';
    }
  }

  $complex_field_names = _fieldcollection_multi_upload__search_fieldcollection_w_files($form);

  foreach ($complex_field_names as $complex_field_name => $file_field_name) {
    $form[$complex_field_name][$complex_field_name . '__file_uploader'] = [
      '#weight' => -10,
      '#type' => 'plupload',
      '#title' => t('Upload files'),
      '#description' => t('This multi-upload widget uses Plupload library.'),
      '#autoupload' => TRUE,
      '#autosubmit' => FALSE,
      '#upload_validators' => [
        'file_validate_extensions' => ['jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'],
      ],
      '#plupload_settings' => [
        'runtimes' => 'html5',
        'chunk_size' => '1mb',
      ],
    ];

  }

  $form['bulk_upload__field_added_list'] = [
    '#type' => 'hidden',
    '#value' => serialize($complex_field_names),
  ];
}

/**
 * Adding new field collection entities during node form sumbit.
 */
function fieldcollection_multi_upload_node_form_submit($form, $form_state) {
  $uid = Drupal::currentUser()->id();
  $tempDir = drupal_realpath('temporary://') . '/';
  $publicDir = drupal_realpath('public://');

  $node = $form_state->getFormObject()->getEntity();
  // \Drupal::logger(' fieldcollection_multi_upload')->notice('it submit ') ;.
  $field_names = unserialize($form_state->getValue('bulk_upload__field_added_list', ''));
  if (!$field_names) {
    return;
  }

  $files = [];
  $fcs = [];
  foreach ($field_names as $field_name => $file_field_name) {
    $files[$field_name] = $form_state->getValue($field_name . '__file_uploader', []);
    $fcs[$field_name] = $node->get($field_name)->getValue();

    if (!count($files[$field_name])) {
      continue;
    }

    $destDir = $publicDir . '/bulk_upl__' . $field_name;
    if (!file_exists($destDir)) {
      mkdir($destDir, 0775, TRUE);
    }
    if (!file_exists($destDir) or !is_writable($destDir)) {
      drupal_set_message('Can\'t create directory "' . str_replace($publicDir, 'public://',
                $destDir) . '"', 'error');
      continue;
    }

    foreach ($files[$field_name] as $fileArr) {
      $info = pathinfo($fileArr['name']);
      // Unique file name.
      $newFileName = $info['filename'] . '_' . time() . '_' . rand(1000, 9999) . '.' . $info['extension'];
      $newUrl = str_replace($publicDir, 'public://', $destDir . '/' . $newFileName);
      if (!rename(str_replace('temporary://', $tempDir, $fileArr['tmppath']),
            $destDir . '/' . $newFileName)) {
        drupal_set_message('Can\'t create file "' . $newUrl . '"', 'error');
        continue;
      }
      $fileEntity = File::create([
        'uid' => $uid,
        'filename' => $newFileName,
        'uri' => $newUrl,
        'status' => FILE_STATUS_PERMANENT,
        'timestamp' => time(),
      ]);
      $fileEntity->save();
      $fid = $fileEntity->id();
      if (!$fid) {
        drupal_set_message('Can\'t create file entity with url "' . $newUrl . '"', 'error');
        continue;
      }

      $fc = FieldCollectionItem::create(['field_name' => $field_name]);
      $fc->$file_field_name->setValue($fid);
      $fc->setHostEntity($node);
      $fc->save();
    }
  }
}
