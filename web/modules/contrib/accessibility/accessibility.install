<?php

/**
 * Implements hook_requirements().
 */
function accessibility_requirements($phase) {
  if (!module_exists('libraries')) {
    return array();
  }
  $requirements = array('quail_installed' => array('title' => t('QUAIL library installed')));
  $library_path = libraries_get_path('quail');
  if ($library_path && file_exists($library_path . '/quail.json')) {
    $version = json_decode(file_get_contents($library_path . '/quail.json'));
    if(version_compare(ACCESSIBILITY_QUAIL_VERSION, $version->version) < 1) {
      $requirements['quail_installed']['value'] = t('QUAIL version @version installed', array('@version' => $version->version));
      $requirements['quail_installed']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['quail_installed']['value'] = t('QUAIL should be at least version 2.0.3, installed version is @version', array('@version' => $version->version));
      $requirements['quail_installed']['severity'] = REQUIREMENT_ERROR;
      $requirements['quail_installed']['description'] = t('You must download the !link and install it in your libraries folder, and make sure the folder is re-named to "quail" without a version number.', array(
        '!link' => l('QUAIL jQuery library', 'https://github.com/kevee/quail/releases'),
          )
        ); 
    }
  }
  else {
    $requirements['quail_installed']['value'] = t('QUAIL not installed');
    $requirements['quail_installed']['severity'] = REQUIREMENT_ERROR;
    $requirements['quail_installed']['description'] = t('You must download the !link version @version and install it in your libraries folder, and make sure the folder is re-named to "quail" without a version number.', array(
      '@version' => ACCESSIBILITY_QUAIL_VERSION, 
      '!link' => l('QUAIL jQuery library', 'https://github.com/kevee/quail/releases'),
        )
      ); 
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function accessibility_schema() {
  $schema = array();

  $schema['accessibility_test'] = array(
    'description' => 'Accessibility tests.',
    'fields' => array(
      'test_id' => array(
        'description' => 'Primary Key: Identifier for an accessibility test.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uuid' => array(
        'description' => 'Unique Key: Universally unique identifier for this entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'langcode' => array(
        'description' => 'The language of the test.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the test - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'quail_name' => array(
        'description' => 'The name of the related QUAIL test label.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'severity' => array(
        'description' => 'The severity of the test.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => 'suggestion',
      ),
      'status' => array(
        'description' => 'Whether the test is active or not.',
        'type' => 'int',
        'length' => 1,
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the test was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the test was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('test_id'),
  );

  return $schema;
}