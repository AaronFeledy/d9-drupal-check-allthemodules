<?php

/**
 * @file
 * Contains adobe_dtm.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function adobe_dtm_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    // Main module help for the Adobe DTM module.
    case 'adobe_dtm.settings_form':
    case 'help.page.adobe_dtm':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This Adobe DTM module allows the use of Adobe Systems' Dynamic Tag Management hosted application to insert new tags into your Drupal website.") . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_module_implements_alter().
 */
function adobe_dtm_module_implements_alter(&$implementations, $hook) {
  $hooks = ['page_attachments', 'page_bottom'];

  if (in_array($hook, $hooks)) {
    $group = $implementations['adobe_dtm'];
    unset($implementations['adobe_dtm']);
    $implementations['adobe_dtm'] = $group;
  }
}

/**
 * Implements hook_page_attachments().
 */
function adobe_dtm_page_attachments(&$attachments) {
  $adobe_dtm_attachments = &drupal_static('adobe_dtm_attachments');

  if (is_null($adobe_dtm_attachments)) {
    if ($embed_code = _adobe_dtm_embed_code_tag_array()) {
      // Add embed code.
      $attachments['#attached']['html_head'][] = $embed_code;

      if ($datalayer = _adobe_dtm_datalayer_tag_array($attachments)) {
        // Add datalayer object.
        $attachments['#attached']['html_head'][] = $datalayer;
      }
    }
  }
}

/**
 * Implements hook_page_bottom().
 */
function adobe_dtm_page_bottom(array &$page_bottom) {
  if (_adobe_dtm_embed_code_tag_array()) {
    $page_bottom['adobe_dtm'] = [
      '#type'       => 'html_tag',
      '#tag'        => 'script',
      '#value'      => '_satellite.pageBottom();',
      '#attributes' => [
        'type' => 'text/javascript',
      ],
    ];
  }
}

/**
 * Returns tag array with embed code.
 *
 * @return array|bool
 *   The tag array or FALSE if failed.
 */
function _adobe_dtm_embed_code_tag_array() {
  $config = \Drupal::config('adobe_dtm.settings');
  $enabled = $config->get('enabled');

  // If Adobe DTM is disabled, return.
  if (!$enabled) {
    return FALSE;
  }

  $id = $config->get('property_embed_code_id');
  $hash = $config->get('property_embed_code_hash');
  $environment = $config->get('environment');

  if (empty($id) || empty($hash)) {
    return FALSE;
  }

  $script = '//assets.adobedtm.com/' . $id . '/satelliteLib-' . $hash;
  $script .= ($environment == 'production') ? '.js' : '-staging.js';

  $tag = [
    '#type'       => 'html_tag',
    '#tag'        => 'script',
    '#attributes' => [
      'type' => 'text/javascript',
      'src'  => $script,
    ],
  ];

  $attachment = [
    $tag,
    'adobe_dtm_tag',
  ];

  return $attachment;
}

/**
 * Returns tag array with datalayer object.
 *
 * @param array $attachments
 *   Attachments coming from adobe_dtm_page_attachments().
 *
 * @return array|bool
 *   The tag array or FALSE if failed.
 */
function _adobe_dtm_datalayer_tag_array(&$attachments) {
  $config = \Drupal::config('adobe_dtm.settings');
  $enabled = $config->get('datalayer_enabled');

  // If Adobe DTM Datalayer is disabled, return.
  if (!$enabled) {
    return FALSE;
  }

  // Initializing default divisions.
  $datalayer_tags = [
    'event' => [],
    'page' => [],
    'session' => [],
    'user' => [],
  ];

  \Drupal::moduleHandler()->alter('adobe_dtm_datalayer_tags', $datalayer_tags, $attachments);
  ksort($datalayer_tags);

  // Do not proceed if there're no tags to return.
  if (empty($datalayer_tags)) {
    return FALSE;
  }

  // In order not to retrieve empty arrays, we use JSON_FORCE_OBJECT to
  // retrieve empty array objects instead.
  $datalayer_tags = json_encode($datalayer_tags, JSON_FORCE_OBJECT);
  $tag = [
    '#type'       => 'html_tag',
    '#tag'        => 'script',
    '#value'      => "digitalData = $datalayer_tags;",
    '#attributes' => [
      'type' => 'text/javascript',
    ],
  ];

  $attachment = [
    $tag,
    'adobe_dtm_datalayer_tag',
  ];

  return $attachment;
}
