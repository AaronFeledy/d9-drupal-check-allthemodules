<?php

/**
 * @file
 * Code for the password_policy_configuration module.
*/
use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;
use Drupal\user\Entity\Role;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_alter().
 */
function password_policy_configuration_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 if ($form_id == 'user_form' || $form_id == 'user_register_form' || $form_id == 'user_pass_reset') {
    $form['#attached']['library'][] = 'password_policy_configuration/password_policy_configuration.assets';
    $form['#validate'][] = '_password_policy_configuration_pass_form_validation';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function password_policy_configuration_element_info_alter(array &$types) {
  if (isset($types['password'])) {
    $types['password']['#process'][] = 'pp_user_form_process_password_confirm';
  }
}

/**
 * Form element process handler for client-side password validation.
 *
 * This #process handler is automatically invoked for 'password_confirm' form
 * elements to add the JavaScript and string translations for dynamic password
 * validation.
 */
function pp_user_form_process_password_confirm($element) {
    $password_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('password_length');
    $upper_case_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('upper_case_length');
    $lower_case_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('lower_case_length');
    $numeric_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('numeric_length');
    $special_char_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('special_char_length');

  $password_settings = [
    'confirmTitle' => t('Passwords match:'),
    'confirmSuccess' => t('yes'),
    'confirmFailure' => t('no'),
    'showStrengthIndicator' => FALSE,
  ];

  if (\Drupal::config('user.settings')->get('password_strength')) {
    $password_settings['showStrengthIndicator'] = TRUE;
    $password_settings += [
      'strengthTitle' => t('Password strength:'),
      'hasWeaknesses' => t('Recommendations to make your password stronger:'),
      'tooShort' => t('Password must contain at least '.$password_length.' characters in length'),
      'addUpperCase' => t('Password must contain at least '.$upper_case_length.' uppercase characters'),
      'addLowerCase' => t('Password must contain at least '.$lower_case_length.' lowercase characters'),
      'addNumbers' => t('Password must contain at least '.$numeric_length.' numbers'),
      'addPunctuation' => t('Password must contain at least '.$special_char_length.' punctuations (not whitespace or an alphanumeric) characters'),
      'sameAsUsername' => t('Make it different from your username'),
      'weak' => t('Weak'),
      'fair' => t('Fair'),
      'good' => t('Good'),
      'strong' => t('Strong'),
      'username' => \Drupal::currentUser()->getUsername(),
    ];
  }
  $element['#attached']['library'][] = 'user/drupal.user';
  $element['#attached']['drupalSettings']['password'] = $password_settings;

  $element['#attached']['drupalSettings']['lowercase'] = $lower_case_length;
  $element['#attached']['drupalSettings']['uppercase'] = $upper_case_length;
  $element['#attached']['drupalSettings']['passlength'] = $password_length;
  $element['#attached']['drupalSettings']['numeric_length'] = $numeric_length;
  $element['#attached']['drupalSettings']['punctuation_length'] = $special_char_length;

  return $element;
}

function password_policy_configuration_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  $javascript['core/modules/user/user.js']['data'] = '';
}

/*
 * Perform validation action on Page reset page
 *
 */
function _password_policy_configuration_pass_form_validation(&$form, FormStateInterface $form_state) {
  $pass_config = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration');
  $pass_reuse = $pass_config->get('pass_reuse');
  $exclude_admin = $pass_config->get('exclude_admin');
  $force_validation = $pass_config->get('force_validation');
  $en_pass_reuse = $pass_config->get('en_pass_reuse');
  $user = User::load(\Drupal::currentUser()->id());
  $user_role = $user->getroles();
  $user_pass = $form_state->getValue('pass');
  if ($form_state->getFormObject()->getFormId() == 'user_pass_reset') {
    $current_path = \Drupal::service('path.current')->getPath();
    $user_val = explode('/', $current_path);
    $user_id = $user_val[3];
  } else {
    $user_id = $form_state->getFormObject()->getEntity()->id();
  }
  $current_pass = get_current_user_pass($user_id);
  $password_hasher = \Drupal::service('password');
  $password = $user_pass;

  if (!empty($user_id)) {
    $query = \Drupal::database()->select('password_policy_configuration_history', 'u');
    $query->fields('u', ['uid','pass_hash']);
    $query->condition('uid', $user_id);
    $query->range(0, $pass_reuse-1);
    $query->orderBy('id', 'DESC');
    $result = $query->execute()->fetchAll();
  }
  if ($force_validation == '1' && $en_pass_reuse == '1') {
    if ($password_hasher->check($password, $current_pass)) {
      $form_state->setErrorByName('pass', t('Password should not match with last ' . $pass_reuse . ' passwords.'));
    }

    if (!empty($user_pass) && !empty($result)) {
      foreach ($result as $value) {
        if ($password_hasher->check($password, $value->pass_hash)) {
          $form_state->setErrorByName('pass', t('Password should not match with last ' . $pass_reuse . ' passwords.'));
        }
      }
    }
  }
  if (!empty($user_pass)) {
    $validate = password_strength($user_pass);
    if($user_role[1] == 'administrator' && $exclude_admin == '1') {
      $validate = '';
    }
    if (!empty($validate) && $force_validation == '1') {
      $form_state->setErrorByName('pass', t($validate));
    }
  }
}

/**
 * Password Strength.
 *
 */
function password_strength($password, $email_id = '', $device_opt_id = '') {
  if (!empty($password)) {

    $password_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('password_length');
    $upper_case_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('upper_case_length');
    $lower_case_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('lower_case_length');
    $special_char_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('special_char_length');
    $numeric_length = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('numeric_length');
    $validate_message = \Drupal::config('password_policy_configuration.passwordpolicyconfiguration')
    ->get('validate_message');
    if (empty($validate_message)) {
      $validate_message = 'Your password does not comply with password policy. Please choose a different one.';
    }
    $pass_err_msg = '';
    $character_sets = count(array_filter([
      preg_match('/[a-z]/', $password),
      preg_match('/[A-Z]/', $password),
      preg_match('/[0-9]/', $password),
      preg_match('/[^a-zA-Z0-9]/', $password),
      preg_match('/[^@]+/', $password),
    ]));

    // Get user name from email id.
    $user_name = explode('@', $email_id);

    $character_sets;
    $character_distribution = count_chars($password);

    foreach ($character_distribution as $i => $val) {
      if ($val) {
        $char = chr($i);
        if (is_numeric($char)) {
          $count_numeric++;
        }
        else {
          if (ctype_upper($char)) {
            $count_upper++;
          }
          else {
            if (ctype_lower($char)) {
              $count_lower++;
            }
            else {
              $count_special++;
            }
          }
        }
      }
    }

    // Match successive identical characters.
    $pattern = '/(.)\1+/';
    preg_match_all($pattern, $password, $sic);

    $passcount = strlen($password);

    // Validate password length must be greater than 8 chars
    if ($passcount < $password_length) {
      $pass_err_msg .= '<li>' . t('Password must contain at least '.$password_length.' characters in length.') . '</li>';
    }

    if ($count_lower < $lower_case_length) {
      $pass_err_msg .= '<li>' . t('Password must contain at least '.$lower_case_length.' lowercase characters.') . '</li>';
    }

    if ($count_upper < $upper_case_length) {
      $pass_err_msg .= '<li>' . t('Password must contain at least '.$upper_case_length.' uppercase characters.') . '</li>';
    }

    if ($count_numeric < $numeric_length) {
      $pass_err_msg .= '<li>' . t('Password must contain at least '.$numeric_length.' numbers.') . '</li>';
    }

    if ($count_special < $special_char_length) {
      $pass_err_msg .= '<li>' . t('Password must contain at least '.$special_char_length.' punctuations (not whitespace or an alphanumeric) characters') . '</li>';
    }

    if ($user_name[0] == $password) {
      $pass_err_msg .= '<li>' . t('Password should not be identical to the username of the account.') . '</li>';
    }
    if (!empty($pass_err_msg)) {
      $pass_err_msg = '<ul style="color:red;">'.$validate_message.'</ul>';
    }
    return $pass_err_msg;
  }
}
/**
* Implements hook_user_presave().
*
* Adds entry to password history when password is changed for a user. This
* should work whether the password is changed via the User module forms or
* programmatically via user_save().
*/
function password_policy_configuration_user_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $uid = $entity->id();
  $user_pass = $entity->getPassword();
  $uuid = $entity->get('uuid')->getValue()[0]['value'];
  if (!empty($uid)) {
    $current_pass = get_current_user_pass($uid);
  }
  // If there is a pass value...
  if (!empty($user_pass)) {
    if ($current_pass != $user_pass && !$entity->isNew()) {
      // Then store the password hash to history.
      password_policy_store_password($uid, $current_pass, $uuid);
    }
  }
}

/**
* Stores user password hash.
*
* @param int $uid
* User id.
* @param string $pass
* Password hash.
*/
function password_policy_store_password($uid, $pass, $uuid) {
  db_insert('password_policy_configuration_history')
  ->fields(array(
    'uid' => $uid,
    'pass_hash' => $pass,
    'created' => time(),
    'uuid' => $uuid,
  ))
  ->execute();
}

function get_current_user_pass($uid) {
  $query = \Drupal::database()->select('users_field_data', 'u');
  $query->fields('u', ['uid','pass']);
  $query->condition('uid', $uid);
  $query->condition('status', '1');
  $result = $query->execute()->fetchAll();
  return $result[0]->pass;
}
