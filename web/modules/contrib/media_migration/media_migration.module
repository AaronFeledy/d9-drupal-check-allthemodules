<?php

/**
 * @file
 * Primary module hooks for Media migration module.
 */

use Drupal\field\Plugin\migrate\source\d7\Field;
use Drupal\field\Plugin\migrate\source\d7\FieldInstance;
use Drupal\field\Plugin\migrate\source\d7\ViewMode;
use Drupal\migrate_drupal\Plugin\migrate\FieldMigration;

/**
 * Implements hook_migration_plugins_alter().
 */
function media_migration_migration_plugins_alter(array &$migrations) {
  foreach ($migrations as &$migration) {
    /** @var \Drupal\migrate\Plugin\MigrationPluginManager $migration_plugin_manager */
    $migration_plugin_manager = \Drupal::service('plugin.manager.migration');
    $migration_stub = $migration_plugin_manager->createStubMigration($migration);
    /** @var \Drupal\migrate\Plugin\MigrateSourcePluginManager $source_plugin_manager */
    $source_plugin_manager = \Drupal::service('plugin.manager.migrate.source');
    $source = NULL;
    $configuration = $migration['source'];
    $source = $source_plugin_manager->createInstance($migration['source']['plugin'], $configuration, $migration_stub);
    if ($source) {
      if (is_a($migration['class'], FieldMigration::class, TRUE)) {

        // Field storage, instance, widget and formatter migrations.
        if (is_a($source, Field::class) || is_a($source, FieldInstance::class)) {
          _media_migration_map_file_fields($migration);
        }
      }

      // View Modes.
      if (is_a($source, ViewMode::class)) {
        _media_migration_map_file_to_media_bundle($migration);
      }
    }
  }
}

/**
 * Maps file type fields to media ones.
 *
 * @param array $migration
 *   The migration to alter.
 */
function _media_migration_map_file_fields(array &$migration) {
  $entity_type_process = $migration['process']['entity_type'];

  if (isset($entity_type_process['media_migration'])) {
    return;
  }
  $entity_type_process = _media_migration_make_associative($entity_type_process);

  $entity_type_process['media_migration'] = [
    'plugin' => 'static_map',
    'map' => [
      'file' => 'media',
    ],
    'bypass' => TRUE,
  ];
  $migration['process']['entity_type'] = $entity_type_process;
}

/**
 * Adds static mapping from file to media to a entity references.
 *
 * @param array $migration
 *   The migration to alter.
 */
function _media_migration_map_file_to_media_bundle(array &$migration) {
  $entity_type_process = $migration['process']['targetEntityType'];

  if (isset($entity_type_process['media_migration'])) {
    return;
  }
  $entity_type_process = _media_migration_make_associative($entity_type_process);

  $entity_type_process['media_migration'] = [
    'plugin' => 'static_map',
    'map' => [
      'file' => 'media',
    ],
    'bypass' => TRUE,
  ];
  $migration['process']['targetEntityType'] = $entity_type_process;
}

/**
 * Ensures that a plugin process mapping is an associative array.
 *
 * @param array|string $plugin_process
 *   The plugin process mapping.
 *
 * @return array
 *   The plugin process mapping as an associative array.
 */
function _media_migration_make_associative($plugin_process) {
  if (!is_array($plugin_process)) {
    $plugin_process = [
      [
        'plugin' => 'get',
        'source' => $plugin_process,
      ],
    ];
  }
  elseif (array_key_exists('plugin', $plugin_process)) {
    $plugin_process = [$plugin_process];
  }

  return $plugin_process;
}
