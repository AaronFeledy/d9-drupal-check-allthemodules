<?php

use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;

/**
 * Implements hook_entity_type_build().
 * @param array $entity_types
 */
function entity_grants_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type_id => &$entity_type) {
    if ($entity_type instanceof ContentEntityTypeInterface) {
      if (!$entity_type->hasHandlerClass('entity_grants_operations')) {
        $entity_type->setHandlerClass('entity_grants_operations', 'Drupal\entity_grants\Grants\EntityGrantsOperationsProvider');
      }
    }
  }
}

/**
 * Fetches an array of permission IDs granted to the given user ID.
 *
 * The implementation here provides only the universal "all" grant. An entity
 * access module should implement hook_entity_grants() to provide a grant list for
 * the user.
 *
 * After the default grants have been loaded, we allow modules to alter the
 * grants array by reference. This hook allows for complex business logic to be
 * applied when integrating multiple node access modules.
 *
 * @param string $op
 *   The operation that the user is trying to perform.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The account object for the user performing the operation.
 *
 * @return array
 *   An associative array in which the keys are realms, and the values are
 *   arrays of grants for those realms.
 */
function entity_grants_access_grants($op, AccountInterface $account) {
  // Fetch entity access grants from other modules.
  $grants = \Drupal::moduleHandler()->invokeAll('entity_grants', [$account, $op]);
  // Allow modules to alter the assigned grants.
  \Drupal::moduleHandler()->alter('entity_grants', $grants, $account, $op);

  return $grants;
}

/**
 * Implements hook_entity_grants().
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 * @param $op
 *
 * @return array
 */
function entity_grants_entity_grants(AccountInterface $account, $op) {
  $grants = [
    'all' => ['all'],
  ];

  return $grants;
}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function entity_grants_entity_delete(EntityInterface $entity) {
  // @todo Handle the case when user is deleted.
  // @todo Handle the case when the entity is deleted.
}

/**
 * Implements hook_views_data_alter().
 *
 * @param array $data
 */
function entity_grants_views_data_alter(array &$data) {

  // Get all entity types to next handling.
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();

  // Process all entity types.
  foreach ($entity_types as $entity_type_id => $entity_type) {
    // We need to process only content entity types.
    if ($entity_type instanceof ContentEntityTypeInterface) {
      // The table name where the data stored for specific entity.
      $table_name = $entity_type->getDataTable() ?: $entity_type->getBaseTable();
      // The field for ID key.
      $field_id = $entity_type->getKey('id');

      // Add entity grants access checker.
      $data[$table_name][$field_id . '_entity_grants_check'] = [
        'title' => t($entity_type->getLabel()->__toString() . ' entity grants checker'),
        'help' => t('Check entity grants for ' . $entity_type->getLabel()->__toString()),
        'argument' => [
          'field' => $field_id,
          'id' => 'standard',
        ],
        'filter' => [
          'field' => $field_id,
          'id' => 'entity_grant_access',
        ],
      ];

    }
  }

}