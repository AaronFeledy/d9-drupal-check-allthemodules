<?php

/**
 * @file
 * The core Publish Away module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function publish_away_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    case "help.page.publish_away":
      $output = '<p>' . t("This module is used to post the Tweet and Facebook status with Image from your content forms.") . '</p>';
      $output .= '<h3>' . t("Configuration") . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t("1. Get your Facebook keys on https://developers.facebook.com/apps") . '</dt>';
      $output .= '<dt>' . t("2. Get your Twitter keys on https://apps.twitter.com") . '</dt>';
      $output .= '<dt>' . t("3. Get your Bilty API Keys on https://bitly.com/a/your_api_key") . '</dt>';
      $output .= '<dt>' . t("4. Visit admin > config > services > publish-away") . '</dt>';
      $output .= '</dl>';
      break;
  }
  return $output;
}

/**
 * Implements hook_publish_away_info().
 */
function publish_away_publish_away_info() {
  $library_classes = array(
    // Facebook.
    0 => 'Facebook\FacebookSession',
    1 => 'Facebook\FacebookRedirectLoginHelper',
    2 => 'Facebook\FacebookRequest',
    3 => 'Facebook\FacebookRequestException',
    4 => 'Facebook\GraphUser',
    5 => 'Facebook\FacebookSDKException',
    // Twitter.
    6 => 'Guzzle\Plugin\Oauth\OauthPlugin',
  );
  $providers = array('facebook' => 'Facebook', 'twitter' => 'Twitter');
  return array(
    'library_classes' => $library_classes,
    'providers' => $providers,
  );
}

/**
 * Fetch all publish away field types.
 * @return array of fields types keyed by field system names. 
 */
function _publish_away_field_type() {
  $publish_away_field_types = array();
  $field_storages = entity_load_multiple_by_properties('field_storage_config', array('module' => 'publish_away'));
  if ($field_storages) {
    foreach ($field_storages as $field) {
      $publish_away_field_types[$field->get('field_name')] = $field->get('type');
    }
  }
  
  return $publish_away_field_types;
}

/**
 * Fetch all publish away fields.
 * @return array of field system names keyed by field's uuid. 
 */
function _publish_away_fields() {
  $publish_away_fields = array();
  $field_storages = entity_load_multiple_by_properties('field_storage_config', array('module' => 'publish_away'));
  if ($field_storages) {
    // Provide an explanation message (only mention pending deletions if there
    // remains no actual, non-deleted fields)
    foreach ($field_storages as $field) {
      if (empty($field->deleted) || (is_string($field->deleted) && trim($field->deleted) === '')) {
        $publish_away_fields[$field->uuid()] = $field->get('field_name');
      }
    }
  }
  
  return $publish_away_fields;
}

/**
 * Implements hook_form_alter().
 */
function publish_away_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $publish_away_fields = _publish_away_field_type();
  $intersect = array_intersect(array_keys($publish_away_fields), array_keys($form));
  if (!empty($intersect)) {
    $form['#validate'][] = '_publish_away_field_validate';
  }
}

/**
 * Form API validate callback.
 * @param array $form
 * @param array $form_state
 */
function _publish_away_field_validate($form, &$form_state) {
  $form_state->cleanValues();
  $publish_away_fields = _publish_away_field_type();
  $intersect = array_intersect(array_keys($publish_away_fields), array_keys($form));
  if (!empty($intersect)) {
    $entity = $form_state->getFormObject()->getEntity();
    $entity_type = $entity->getEntityTypeId();
    foreach ($intersect as $k => $field_name) {
      $values = $form_state->getValue($field_name);
      // Default image required check.
      if (empty($values[0]['fids']) && isset($form[$field_name]['widget'][0]['#default_image']['fid'])
        && (int) $form[$field_name]['widget'][0]['#default_image']['fid']) {
        $values[0]['fids'][0] = $form[$field_name]['widget'][0]['#default_image']['fid'];
        $form_state->setValue($field_name, $values);
      }
      // End default image situation.
      if (!empty($values) && !empty($entity)) {
        $token_service = \Drupal::token();
        $language_interface = \Drupal::languageManager()->getCurrentLanguage();
        foreach ($values as $key => $value) {
          if (!empty($value['message'])) {
            $message = $token_service->replace($value['message'], array($entity_type => $entity), array('langcode' => $language_interface->getId()));
            $message = trim(strip_tags($message));
            $maxlength = strlen($message);
            if (trim($value['message']) != $message && $form[$field_name]['widget'][$key]['message']['#maxlength'] < $maxlength) {
              $getLabel = !empty($form[$field_name]['widget'][$key]['message']['#title']) ? $form[$field_name]['widget'][0]['message']['#title'] : t('Message');
              $form_state->setErrorByName($field_name, t('%name cannot be longer than @max characters but is currently @leng characters long.',
                array('%name' => $getLabel, '@max' => $form[$field_name]['widget'][0]['message']['#maxlength'], '@leng' => $maxlength)));
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function publish_away_form_field_ui_field_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide required field on admin/structure/types/manage/article/fields/[publish away field].
  $form['field']['required']['#default_value'] = FALSE;
  $form['field']['required']['#disabled'] = TRUE;
  $form['field']['required']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function publish_away_form_field_ui_field_storage_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide cardinality situation on admin/structure/types/manage/article/fields/[publish away field]/storage.
  $form['field_storage']['cardinality_container']['cardinality']['#default_value'] = 'number'; // Limited.
  $form['field_storage']['cardinality_container']['cardinality']['#disabled'] = TRUE;
  $form['field_storage']['cardinality_container']['cardinality']['#access'] = FALSE;
  $form['field_storage']['cardinality_container']['cardinality_number']['#default_value'] = 1;
  $form['field_storage']['cardinality_container']['cardinality_number']['#disabled'] = TRUE;
  $form['field_storage']['cardinality_container']['cardinality_number']['#access'] = FALSE;
  $form['field_storage']['cardinality_container']['#suffix'] = t('One value for this field.');
}

/**
 * The URL shortening service.
 * @param string $longUrl
 * @return string
 */
function _publish_away_generate_short_url($longUrl) {
  $publish_away_config = \Drupal::config('publish_away.bitly');
  $bitly_username = $publish_away_config->get('bitly.username');
  $bitly_apikey = $publish_away_config->get('bitly.apikey');
  if (trim($bitly_username) != '' && trim($bitly_apikey) != '') {
    $apiUrl = 'http://api.bit.ly';
    $version = 'v3';
    $action = 'shorten';
    $format = 'txt';
    $callback = '';

    $parameters = "login=$bitly_username&apiKey=$bitly_apikey&longUrl=$longUrl&format=$format&callback=$callback";
    // With CURL extension.
    $ch = curl_init("$apiUrl/$version/$action?$parameters");
    curl_setopt($ch, CURLOPT_NOBODY, False);
    curl_setopt($ch, CURLOPT_HEADER, False);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, True);
    $shortUrl = curl_exec($ch);
    return $shortUrl;
  }
  else {
    return '';
  }
}
