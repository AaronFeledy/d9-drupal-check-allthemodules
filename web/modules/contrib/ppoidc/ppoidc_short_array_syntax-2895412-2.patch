diff --git a/README.md b/README.md
index 36a689a..82a639d 100644
--- a/README.md
+++ b/README.md
@@ -16,4 +16,4 @@ Features
 
 Installation Instructions
 ------------
-Step-by-step Installation instructions can be found on our dedicated developer site.
\ No newline at end of file
+Step-by-step Installation instructions can be found on our dedicated developer site.
diff --git a/config/fields/field.field.user.user.field_birthdate_pixelpin.yml b/config/fields/field.field.user.user.field_birthdate_pixelpin.yml
index 3e55edb..7ef5d92 100644
--- a/config/fields/field.field.user.user.field_birthdate_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_birthdate_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_country_pixelpin.yml b/config/fields/field.field.user.user.field_country_pixelpin.yml
index 80606e6..e35d3ef 100644
--- a/config/fields/field.field.user.user.field_country_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_country_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_family_name_pixelpin.yml b/config/fields/field.field.user.user.field_family_name_pixelpin.yml
index 14fc25c..342f6bc 100644
--- a/config/fields/field.field.user.user.field_family_name_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_family_name_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_gender_rename.yml b/config/fields/field.field.user.user.field_gender_rename.yml
index e5735f5..0d80e2b 100644
--- a/config/fields/field.field.user.user.field_gender_rename.yml
+++ b/config/fields/field.field.user.user.field_gender_rename.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_given_name_pixelpin.yml b/config/fields/field.field.user.user.field_given_name_pixelpin.yml
index daece6c..78e3797 100644
--- a/config/fields/field.field.user.user.field_given_name_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_given_name_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_nickname_pixelpin.yml b/config/fields/field.field.user.user.field_nickname_pixelpin.yml
index 9ffce2e..150551b 100644
--- a/config/fields/field.field.user.user.field_nickname_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_nickname_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_phone_number_pixelpin.yml b/config/fields/field.field.user.user.field_phone_number_pixelpin.yml
index 87bbc2e..b43a8c3 100644
--- a/config/fields/field.field.user.user.field_phone_number_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_phone_number_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_postal_code_pixelpin.yml b/config/fields/field.field.user.user.field_postal_code_pixelpin.yml
index 6d2a418..71c24e6 100644
--- a/config/fields/field.field.user.user.field_postal_code_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_postal_code_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_region_pixelpin.yml b/config/fields/field.field.user.user.field_region_pixelpin.yml
index 2c18a0c..e120ffb 100644
--- a/config/fields/field.field.user.user.field_region_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_region_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_street_address_pixelpin.yml b/config/fields/field.field.user.user.field_street_address_pixelpin.yml
index a766d3f..6c9be63 100644
--- a/config/fields/field.field.user.user.field_street_address_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_street_address_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.field.user.user.field_town_city_pixelpin.yml b/config/fields/field.field.user.user.field_town_city_pixelpin.yml
index d88b3a6..e6d4295 100644
--- a/config/fields/field.field.user.user.field_town_city_pixelpin.yml
+++ b/config/fields/field.field.user.user.field_town_city_pixelpin.yml
@@ -19,4 +19,4 @@ translatable: false
 default_value: {  }
 default_value_callback: ''
 settings: {  }
-field_type: string
\ No newline at end of file
+field_type: string
diff --git a/config/fields/field.storage.user.field_birthdate_pixelpin.yml b/config/fields/field.storage.user.field_birthdate_pixelpin.yml
index 80ed21f..2589f10 100644
--- a/config/fields/field.storage.user.field_birthdate_pixelpin.yml
+++ b/config/fields/field.storage.user.field_birthdate_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_country_pixelpin.yml b/config/fields/field.storage.user.field_country_pixelpin.yml
index a9d12ec..6cf2252 100644
--- a/config/fields/field.storage.user.field_country_pixelpin.yml
+++ b/config/fields/field.storage.user.field_country_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_family_name_pixelpin.yml b/config/fields/field.storage.user.field_family_name_pixelpin.yml
index f55c769..b5e55af 100644
--- a/config/fields/field.storage.user.field_family_name_pixelpin.yml
+++ b/config/fields/field.storage.user.field_family_name_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_gender_pixelpin.yml b/config/fields/field.storage.user.field_gender_pixelpin.yml
index 92cc79b..4d285bb 100644
--- a/config/fields/field.storage.user.field_gender_pixelpin.yml
+++ b/config/fields/field.storage.user.field_gender_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_given_name_pixelpin.yml b/config/fields/field.storage.user.field_given_name_pixelpin.yml
index 8750d3d..8dfacad 100644
--- a/config/fields/field.storage.user.field_given_name_pixelpin.yml
+++ b/config/fields/field.storage.user.field_given_name_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_nickname_pixelpin.yml b/config/fields/field.storage.user.field_nickname_pixelpin.yml
index 571dc39..3e483c8 100644
--- a/config/fields/field.storage.user.field_nickname_pixelpin.yml
+++ b/config/fields/field.storage.user.field_nickname_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_phone_number_pixelpin.yml b/config/fields/field.storage.user.field_phone_number_pixelpin.yml
index ff2ce40..24da005 100644
--- a/config/fields/field.storage.user.field_phone_number_pixelpin.yml
+++ b/config/fields/field.storage.user.field_phone_number_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_postal_code_pixelpin.yml b/config/fields/field.storage.user.field_postal_code_pixelpin.yml
index 8dbf14d..9b2e27b 100644
--- a/config/fields/field.storage.user.field_postal_code_pixelpin.yml
+++ b/config/fields/field.storage.user.field_postal_code_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_region_pixelpin.yml b/config/fields/field.storage.user.field_region_pixelpin.yml
index cbc9254..346dee4 100644
--- a/config/fields/field.storage.user.field_region_pixelpin.yml
+++ b/config/fields/field.storage.user.field_region_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_street_address_pixelpin.yml b/config/fields/field.storage.user.field_street_address_pixelpin.yml
index 7dd2f9f..ab10004 100644
--- a/config/fields/field.storage.user.field_street_address_pixelpin.yml
+++ b/config/fields/field.storage.user.field_street_address_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/fields/field.storage.user.field_town_city_pixelpin.yml b/config/fields/field.storage.user.field_town_city_pixelpin.yml
index 53697c7..b6182fc 100644
--- a/config/fields/field.storage.user.field_town_city_pixelpin.yml
+++ b/config/fields/field.storage.user.field_town_city_pixelpin.yml
@@ -20,4 +20,4 @@ cardinality: 1
 translatable: true
 indexes: {  }
 persist_with_no_fields: false
-custom_storage: false
\ No newline at end of file
+custom_storage: false
diff --git a/config/install/pixelpin_openid_connect.settings.yml b/config/install/pixelpin_openid_connect.settings.yml
index 11551bf..d869b13 100644
--- a/config/install/pixelpin_openid_connect.settings.yml
+++ b/config/install/pixelpin_openid_connect.settings.yml
@@ -19,4 +19,3 @@ userinfo_mappings:
   field_region_pixelpin: region
   field_postal_code_pixelpin: postal_code
   field_country_pixelpin: country
-
diff --git a/css/style.css b/css/style.css
index 05ec81b..d131c8f 100644
--- a/css/style.css
+++ b/css/style.css
@@ -8,49 +8,49 @@
 }
 
 #edit-pixelpin-openid-connect-client-enable-login-hide {
-	display:none;
+  display: none;
 }
 
 #edit-pixelpin-openid-connect-client-enable-connect-hidden {
-	display:none;
+  display: none;
 }
 
 #edit-pixelpin-openid-connect-client-enable-disconnect-hidden {
-	display:none;
+  display: none;
 }
 
 #edit-pixelpin-openid-connect-client-enable-login {
-	background-color: #000;
-	background-image: linear-gradient(to bottom, #5d5d5d, #000000);
-	border: 1px solid #000000;
-	border-bottom-color: #000000;
-	border-left-color: #000000;
-	border-right-color: #000000;
-	color: #ffffff;
-	margin-top: 5px;
-	margin-bottom: 5px;
+  background-color: #000;
+  background-image: linear-gradient(to bottom, #5d5d5d, #000000);
+  border: 1px solid #000000;
+  border-bottom-color: #000000;
+  border-left-color: #000000;
+  border-right-color: #000000;
+  color: #ffffff;
+  margin-top: 5px;
+  margin-bottom: 5px;
 }
 
 #edit-pixelpin-openid-connect-client-enable-connect {
-	background-color: #000;
-	background-image: linear-gradient(to bottom, #5d5d5d, #000000);
-	border: 1px solid #000000;
-	border-bottom-color: #000000;
-	border-left-color: #000000;
-	border-right-color: #000000;
-	color: #ffffff;
-	margin-top: 5px;
-	margin-bottom: 5px;
+  background-color: #000;
+  background-image: linear-gradient(to bottom, #5d5d5d, #000000);
+  border: 1px solid #000000;
+  border-bottom-color: #000000;
+  border-left-color: #000000;
+  border-right-color: #000000;
+  color: #ffffff;
+  margin-top: 5px;
+  margin-bottom: 5px;
 }
 
 #edit-pixelpin-openid-connect-client-enable-disconnect {
-	background-color: #000;
-	background-image: linear-gradient(to bottom, #5d5d5d, #000000);
-	border: 1px solid #000000;
-	border-bottom-color: #000000;
-	border-left-color: #000000;
-	border-right-color: #000000;
-	color: #ffffff;
-	margin-top: 5px;
-	margin-bottom: 5px;
-}
\ No newline at end of file
+  background-color: #000;
+  background-image: linear-gradient(to bottom, #5d5d5d, #000000);
+  border: 1px solid #000000;
+  border-bottom-color: #000000;
+  border-left-color: #000000;
+  border-right-color: #000000;
+  color: #ffffff;
+  margin-top: 5px;
+  margin-bottom: 5px;
+}
diff --git a/pixelpin_openid_connect.install b/pixelpin_openid_connect.install
index f01c4d7..6f7c804 100644
--- a/pixelpin_openid_connect.install
+++ b/pixelpin_openid_connect.install
@@ -1,7 +1,8 @@
 <?php
 
-use Drupal\Core\Field\BaseFieldDefinition;
-use Drupal\Core\Entity\EntityTypeInterface;
+/**
+ * @file
+ */
 
 /**
  * @file
@@ -12,152 +13,153 @@ use Drupal\Core\Entity\EntityTypeInterface;
  * Implements hook_schema().
  */
 function pixelpin_openid_connect_schema() {
-  $schema['pixelpin_openid_connect_authmap'] = array(
+  $schema['pixelpin_openid_connect_authmap'] = [
     'description' => 'Stores OpenID Connect authentication mapping.',
-    'fields' => array(
-      'aid' => array(
+    'fields' => [
+      'aid' => [
         'description' => 'Primary Key: Unique authmap ID.',
         'type' => 'serial',
         'unsigned' => TRUE,
         'not null' => TRUE,
-      ),
-      'uid' => array(
+      ],
+      'uid' => [
         'type' => 'int',
         'not null' => TRUE,
         'default' => 0,
         'description' => "User's {users}.uid.",
-      ),
-      'client_name' => array(
+      ],
+      'client_name' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'The client name.',
-      ),
-      'sub' => array(
+      ],
+      'sub' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Unique subject identifier.',
-      ),
-    ),
-    'primary key' => array('aid'),
-    'indexes' => array(
-      'uid' => array('uid'),
-      'identifier' => array('client_name', 'sub'),
-    ),
-    'foreign keys' => array(
-      'user' => array(
+      ],
+    ],
+    'primary key' => ['aid'],
+    'indexes' => [
+      'uid' => ['uid'],
+      'identifier' => ['client_name', 'sub'],
+    ],
+    'foreign keys' => [
+      'user' => [
         'table' => 'users',
-        'columns' => array('uid' => 'uid'),
-      ),
-    ),
-  );
+        'columns' => ['uid' => 'uid'],
+      ],
+    ],
+  ];
 
   return $schema;
 }
 
+/**
+ *
+ */
 function users_field_data_schema() {
-  $schema['users_field_data'] = array(
+  $schema['users_field_data'] = [
     'description' => 'Stores OpenID Connect User Data.',
-    'fields' => array(
-      'family_name' => array(  
+    'fields' => [
+      'family_name' => [
         'type' => 'varchar',
         'length' => 255,
         'default' => '',
         'not null' => TRUE,
         'description' => 'First Name.',
-      ),
-      'given_name' => array(
+      ],
+      'given_name' => [
         'type' => 'varchar',
         'length' => 255,
         'default' => '',
         'not null' => TRUE,
         'description' => 'Given Name.',
-      ),
-      'nickname' => array(
+      ],
+      'nickname' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Nickname.',
-      ),
-      'gender' => array(
+      ],
+      'gender' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Gender.',
-      ),
-      'birthdate' => array(
+      ],
+      'birthdate' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Birthdate.',
-      ),
-      'phone_number' => array(
+      ],
+      'phone_number' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Phone Number.',
-      ),
-      'street_address' => array(
+      ],
+      'street_address' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Street Address.',
-      ),
-      'town_city' => array(
+      ],
+      'town_city' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Town City.',
-      ),
-      'region' => array(
+      ],
+      'region' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Region.',
-      ),
-      'postal_code' => array(
+      ],
+      'postal_code' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Postal Code.',
-      ),
-      'country' => array(
+      ],
+      'country' => [
         'type' => 'varchar',
         'length' => 255,
         'not null' => TRUE,
         'default' => '',
         'description' => 'Country.',
-      ),
-    ),
-    'primary key' => array('aid'),
-    'indexes' => array(
-      'uid' => array('uid'),
-      'identifier' => array('client_name', 'sub'),
-    ),
-    'foreign keys' => array(
-      'user' => array(
+      ],
+    ],
+    'primary key' => ['aid'],
+    'indexes' => [
+      'uid' => ['uid'],
+      'identifier' => ['client_name', 'sub'],
+    ],
+    'foreign keys' => [
+      'user' => [
         'table' => 'users',
-        'columns' => array('uid' => 'uid'),
-      ),
-    ),
-  );
+        'columns' => ['uid' => 'uid'],
+      ],
+    ],
+  ];
 
   return $schema;
 }
 
-
-
 /**
  * Converts client settings to the new format.
  */
@@ -166,10 +168,10 @@ function pixelpin_openid_connect_update_7100() {
     $client_id = variable_get('pixelpin_openid_connect_client_' . $client['name'] . '_client_id', '');
     $client_secret = variable_get('pixelpin_openid_connect_client_' . $client['name'] . '_client_secret', '');
 
-    $new_configuration = array(
+    $new_configuration = [
       'client_id' => $client_id,
       'client_secret' => $client_secret,
-    );
+    ];
     variable_set('pixelpin_openid_connect_client_' . $client['name'], $new_configuration);
   }
 }
diff --git a/pixelpin_openid_connect.libraries.yml b/pixelpin_openid_connect.libraries.yml
index 331ea19..a391782 100644
--- a/pixelpin_openid_connect.libraries.yml
+++ b/pixelpin_openid_connect.libraries.yml
@@ -7,4 +7,4 @@ pixelpin_logo:
     js/svgxuse.js: {}
     js/getClass.js: {}
   dependencies:
-    - core/jquery
\ No newline at end of file
+    - core/jquery
diff --git a/pixelpin_openid_connect.links.menu.yml b/pixelpin_openid_connect.links.menu.yml
index 6df1e54..738c59f 100644
--- a/pixelpin_openid_connect.links.menu.yml
+++ b/pixelpin_openid_connect.links.menu.yml
@@ -3,4 +3,3 @@ pixelpin_openid_connect.admin_settings:
   description: 'Configure OpenID Connect, choose active OpenID Connect clients etc.'
   route_name: pixelpin_openid_connect.admin_settings
   parent: 'system.admin_config_services'
-
diff --git a/pixelpin_openid_connect.module b/pixelpin_openid_connect.module
index c10f095..8d3d337 100644
--- a/pixelpin_openid_connect.module
+++ b/pixelpin_openid_connect.module
@@ -7,8 +7,6 @@
 
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\user\Entity\User;
-use Drupal\Core\Field\BaseFieldDefinition;
-use Drupal\Core\Entity\EntityTypeInterface;
 
 /**
  * Implements hook_entity_property_info_alter().
@@ -18,14 +16,14 @@ function pixelpin_openid_connect_entity_property_info_alter(&$info) {
   if (!isset($properties['timezone'])) {
 
     // Adds the missing timezone property.
-    $properties['timezone'] = array(
+    $properties['timezone'] = [
       'label' => t('Time zone'),
       'description' => t("The user's time zone."),
       'options list' => 'system_time_zones',
       'getter callback' => 'entity_property_verbatim_get',
       'setter callback' => 'entity_property_verbatim_set',
       'schema field' => 'timezone',
-    );
+    ];
 
   }
 }
@@ -82,7 +80,7 @@ function pixelpin_openid_connect_form_user_form_alter(&$form, &$form_state) {
   $access = pixelpin_openid_connect_set_password_access($account);
   if (!$access) {
     $account_form['current_pass']['#access'] = FALSE;
-    $account_form['current_pass_required_values']['#value'] = array();
+    $account_form['current_pass_required_values']['#value'] = [];
     $account_form['pass']['#access'] = FALSE;
     $account_form['pass']['#required'] = FALSE;
   }
@@ -102,7 +100,7 @@ function pixelpin_openid_connect_form_user_profile_form_alter(&$form, &$form_sta
   $account = \Drupal::currentUser();
   if (!empty($account_form['pass']['#access']) && !pixelpin_openid_connect_set_password_access($account)) {
     $account_form['current_pass']['#access'] = FALSE;
-    $account_form['current_pass_required_values']['#value'] = array();
+    $account_form['current_pass_required_values']['#value'] = [];
     $account_form['pass']['#access'] = FALSE;
   }
 }
@@ -179,9 +177,9 @@ function pixelpin_openid_connect_save_destination() {
   // The destination could contain query parameters. Ensure that they are
   // preserved.
   $parsed = parse_url($destination);
-  $_SESSION['pixelpin_openid_connect_destination'] = array(
-    $parsed['path'], array('query' => isset($parsed['query']) ? $parsed['query'] : ''),
-  );
+  $_SESSION['pixelpin_openid_connect_destination'] = [
+    $parsed['path'], ['query' => isset($parsed['query']) ? $parsed['query'] : ''],
+  ];
 }
 
 /**
@@ -194,7 +192,7 @@ function pixelpin_openid_connect_save_destination() {
  * @param string $client_name
  *   The machine name of the client.
  *
- * @return object|FALSE
+ * @return object|false
  *   The user object or FALSE on failure.
  */
 function pixelpin_openid_connect_create_user($sub, $userinfo, $client_name) {
@@ -205,21 +203,20 @@ function pixelpin_openid_connect_create_user($sub, $userinfo, $client_name) {
   $firstName = $userinfo['given_name'];
   $lastName = $userinfo['family_name'];
 
-
   $streetAddress2 = $decodeAddress->{"street_address"};
   $townCity2 = $decodeAddress->{"locality"};
   $region2 = $decodeAddress->{"region"};
   $postalCode2 = $decodeAddress->{"postal_code"};
   $country2 = $decodeAddress->{"country"};
 
-  $streetAddress = (string)$streetAddress2;
-  $townCity = (string)$townCity2;
-  $region = (string)$region2;
-  $postalCode = (string)$postalCode2;
-  $country = (string)$country2;
+  $streetAddress = (string) $streetAddress2;
+  $townCity = (string) $townCity2;
+  $region = (string) $region2;
+  $postalCode = (string) $postalCode2;
+  $country = (string) $country2;
 
   $account = User::create([
-    'name' => $firstName.$lastName.$sub,
+    'name' => $firstName . $lastName . $sub,
     'pass' => user_password(),
     'mail' => $userinfo['email'],
     'init' => $userinfo['email'],
@@ -247,7 +244,7 @@ function pixelpin_openid_connect_create_user($sub, $userinfo, $client_name) {
  * Generate a username for a new account.
  *
  * @param string $sub
- *    The subject identifier.
+ *   The subject identifier.
  * @param array $userinfo
  *   The user claims.
  * @param string $client_name
@@ -258,7 +255,7 @@ function pixelpin_openid_connect_create_user($sub, $userinfo, $client_name) {
  */
 function pixelpin_openid_connect_generate_username($sub, $userinfo, $client_name) {
   $name = 'oidc_' . $client_name . '_' . $sub;
-  $candidates = array('preferred_username', 'name');
+  $candidates = ['preferred_username', 'name'];
   foreach ($candidates as $candidate) {
     if (!empty($userinfo[$candidate])) {
       $name = trim($userinfo[$candidate]);
@@ -284,9 +281,9 @@ function pixelpin_openid_connect_generate_username($sub, $userinfo, $client_name
  *   TRUE if a user exists with the given name, FALSE otherwise.
  */
 function pixelpin_openid_connect_username_exists($name) {
-  return db_query('SELECT COUNT(*) FROM {users_field_data} WHERE name = :name', array(
+  return db_query('SELECT COUNT(*) FROM {users_field_data} WHERE name = :name', [
     ':name' => $name,
-  ))->fetchField() > 0;
+  ])->fetchField() > 0;
 }
 
 /**
@@ -314,11 +311,11 @@ function pixelpin_openid_connect_set_password_access($account) {
  * Returns user properties that can be skipped when mapping user profile info.
  */
 function _pixelpin_openid_connect_user_properties_to_skip() {
-  $properties_to_skip = array(
+  $properties_to_skip = [
     'uid', 'uuid', 'langcode', 'preferred_langcode', 'preferred_admin_langcode',
     'name', 'pass', 'mail', 'status', 'created', 'changed', 'access', 'login',
     'init', 'roles', 'default_langcode',
-  );
+  ];
   \Drupal::moduleHandler()->alter(__FUNCTION__, $properties_to_skip);
   return array_combine($properties_to_skip, $properties_to_skip);
 }
@@ -366,7 +363,7 @@ function pixelpin_openid_connect_disconnect_account($account, $client_name) {
  *   The user claims as returned from
  *   OpenIDConnectClientInterface::retrieveUserInfo().
  *
- * @return string|FALSE
+ * @return string|false
  *   The sub, or FALSE if there was an error.
  */
 function pixelpin_openid_connect_extract_sub($user_data, $userinfo) {
@@ -408,7 +405,7 @@ function pixelpin_openid_connect_complete_authorization($client, $tokens, &$dest
 
   if ($userinfo && empty($userinfo['email'])) {
     $message = 'No e-mail address provided by PixelPin';
-    $variables = array('@provider' => $client->getPluginId());
+    $variables = ['@provider' => $client->getPluginId()];
     $logger->error($message . ' (@code @error). Details: @details', $variables);
     return FALSE;
   }
@@ -416,7 +413,7 @@ function pixelpin_openid_connect_complete_authorization($client, $tokens, &$dest
   $sub = pixelpin_openid_connect_extract_sub($user_data, $userinfo);
   if (empty($sub)) {
     $message = 'No "sub" found from PixelPin';
-    $variables = array('@provider' => $client->getPluginId());
+    $variables = ['@provider' => $client->getPluginId()];
     $logger->error($message . ' (@code @error). Details: @details', $variables);
     return FALSE;
   }
@@ -434,9 +431,9 @@ function pixelpin_openid_connect_complete_authorization($client, $tokens, &$dest
     if (!\Drupal::service('email.validator')->isValid($userinfo['email'])) {
       drupal_set_message(
         t('The e-mail address is not valid: @email',
-          array(
+          [
             '@email' => $userinfo['email'],
-          )
+          ]
         ),
         'error'
       );
@@ -446,9 +443,9 @@ function pixelpin_openid_connect_complete_authorization($client, $tokens, &$dest
     if (user_load_by_mail($userinfo['email'])) {
       drupal_set_message(
         t('The e-mail address is already taken: @email',
-          array(
+          [
             '@email' => $userinfo['email'],
-          )
+          ]
         ),
         'error'
       );
@@ -464,9 +461,9 @@ function pixelpin_openid_connect_complete_authorization($client, $tokens, &$dest
 
   pixelpin_openid_connect_login_user($account);
 
-  \Drupal::moduleHandler()->invokeAll('pixelpin_openid_connect_post_authorize', array(
+  \Drupal::moduleHandler()->invokeAll('pixelpin_openid_connect_post_authorize', [
     $tokens, $account, $userinfo, $client->getPluginId(),
-  ));
+  ]);
 
   return TRUE;
 }
@@ -496,7 +493,7 @@ function pixelpin_openid_connect_connect_current_user($client, $tokens) {
 
   /* @var \Psr\Log\LoggerInterface $logger */
   $logger = \Drupal::logger('pixelpin_openid_connect');
-  $provider_param = array('@provider' => $client->getPluginId());
+  $provider_param = ['@provider' => $client->getPluginId()];
 
   if ($userinfo && empty($userinfo['email'])) {
     $message = 'No e-mail address provided by PixelPin';
@@ -530,9 +527,9 @@ function pixelpin_openid_connect_connect_current_user($client, $tokens) {
     pixelpin_openid_connect_save_userinfo($account, $userinfo);
   }
 
-  \Drupal::moduleHandler()->invokeAll('pixelpin_openid_connect_post_authorize', array(
+  \Drupal::moduleHandler()->invokeAll('pixelpin_openid_connect_post_authorize', [
     $tokens, $account, $userinfo, $client->getPluginId(),
-  ));
+  ]);
 
   return TRUE;
 }
diff --git a/pixelpin_openid_connect.services.yml b/pixelpin_openid_connect.services.yml
index 4dcddf9..ed10f38 100644
--- a/pixelpin_openid_connect.services.yml
+++ b/pixelpin_openid_connect.services.yml
@@ -14,4 +14,3 @@ services:
   pixelpin_openid_connect.state_token:
     class: Drupal\pixelpin_openid_connect\StateToken
     arguments: []
-
diff --git a/src/Authmap.php b/src/Authmap.php
index ce44964..148310e 100644
--- a/src/Authmap.php
+++ b/src/Authmap.php
@@ -40,11 +40,11 @@ class Authmap {
    *   The remote subject identifier.
    */
   public function createAssociation($account, $client_name, $sub) {
-    $fields = array(
+    $fields = [
       'uid' => $account->id(),
       'client_name' => $client_name,
       'sub' => $sub,
-    );
+    ];
     $this->connection->insert('pixelpin_openid_connect_authmap')
       ->fields($fields)
       ->execute();
@@ -80,7 +80,7 @@ class Authmap {
    */
   public function userLoadBySub($sub, $client_name) {
     $result = $this->connection->select('pixelpin_openid_connect_authmap', 'a')
-      ->fields('a', array('uid'))
+      ->fields('a', ['uid'])
       ->condition('client_name', $client_name, '=')
       ->condition('sub', $sub, '=')
       ->execute();
@@ -104,10 +104,10 @@ class Authmap {
    */
   public function getConnectedAccounts($account) {
     $result = $this->connection->select('pixelpin_openid_connect_authmap', 'a')
-      ->fields('a', array('client_name', 'sub'))
+      ->fields('a', ['client_name', 'sub'])
       ->condition('uid', $account->id())
       ->execute();
-    $authmaps = array();
+    $authmaps = [];
     foreach ($result as $record) {
       $client = $record->client_name;
       $sub = $record->sub;
diff --git a/src/Claims.php b/src/Claims.php
index 6d6e52a..9e88e0e 100644
--- a/src/Claims.php
+++ b/src/Claims.php
@@ -171,7 +171,7 @@ class Claims implements ContainerInjectionInterface {
    *   List of claims as options
    */
   public function getOptions() {
-    $options = array();
+    $options = [];
     foreach ($this->getClaims() as $claim_name => $claim) {
       $options[ucfirst($claim['scope'])][$claim_name] = $claim['title'];
     }
@@ -191,7 +191,7 @@ class Claims implements ContainerInjectionInterface {
       ->getEditable('pixelpin_openid_connect.settings')
       ->get('userinfo_mappings');
 
-    $scopes = array('openid', 'email');
+    $scopes = ['openid', 'email'];
     $claims_info = Claims::getClaims();
     foreach ($claims as $claim) {
       if (isset($claims_info[$claim]) &&
diff --git a/src/Controller/RedirectController.php b/src/Controller/RedirectController.php
index 9bc0386..cb22631 100644
--- a/src/Controller/RedirectController.php
+++ b/src/Controller/RedirectController.php
@@ -113,11 +113,11 @@ class RedirectController extends ControllerBase implements AccessInterface {
     unset($_SESSION['pixelpin_openid_connect_state']);
 
     // Get parameters from the session, and then clean up.
-    $parameters = array(
+    $parameters = [
       'destination' => 'user',
       'op' => 'login',
       'connect_uid' => NULL,
-    );
+    ];
     foreach ($parameters as $key => $default) {
       if (isset($_SESSION['pixelpin_openid_connect_' . $key])) {
         $parameters[$key] = $_SESSION['pixelpin_openid_connect_' . $key];
@@ -152,10 +152,10 @@ class RedirectController extends ControllerBase implements AccessInterface {
       }
       else {
         // Any other error should be logged. E.g. invalid scope.
-        $variables = array(
+        $variables = [
           '@error' => $query->get('error'),
           '@details' => $query->get('error_description') ? $query->get('error_description') : $this->t('Unknown error.'),
-        );
+        ];
         $message = 'Authorization failed: @error. Details: @details';
         $this->loggerFactory->get('pixelpin_openid_connect_' . $client_name)->error($message, $variables);
         drupal_set_message(t('Could not authenticate with PixelPin.'), 'error');
diff --git a/src/Form/AccountsForm.php b/src/Form/AccountsForm.php
index ad1df90..941bb17 100644
--- a/src/Form/AccountsForm.php
+++ b/src/Form/AccountsForm.php
@@ -115,10 +115,10 @@ class AccountsForm extends FormBase implements ContainerInjectionInterface {
 
     $read_only = $this->currentUser->id() != $user->id();
 
-    $form['help'] = array(
+    $form['help'] = [
       '#prefix' => '<p class="description">',
       '#suffix' => '</p>',
-    );
+    ];
 
     if (empty($clients)) {
       $form['help']['#markup'] = t('No external account providers are available.');
@@ -138,61 +138,61 @@ class AccountsForm extends FormBase implements ContainerInjectionInterface {
         continue;
       }
 
-      $form['#attached'] = array(
-            'library' => array(
-              'pixelpin_openid_connect/pixelpin_logo',
-          ),
-      );
+      $form['#attached'] = [
+        'library' => [
+          'pixelpin_openid_connect/pixelpin_logo',
+        ],
+      ];
 
-      $form[$client['id']] = array(
+      $form[$client['id']] = [
         '#type' => 'fieldset',
-        '#title' => t('Provider: PixelPin', array('@title' => $client['label'])),
-      );
+        '#title' => t('Provider: PixelPin', ['@title' => $client['label']]),
+      ];
 
       $fieldset = &$form[$client['id']];
       $connected = isset($connected_accounts[$client['id']]);
-      $fieldset['status'] = array(
+      $fieldset['status'] = [
         '#type' => 'item',
         '#title' => t('Status'),
         '#markup' => t('Not connected'),
-      );
+      ];
       if ($connected) {
-        $fieldset['status']['#markup'] = t('Connected as %sub', array(
+        $fieldset['status']['#markup'] = t('Connected as %sub', [
           '%sub' => $connected_accounts[$client['id']],
-        ));
+        ]);
 
-        $fieldset['pixelpin_openid_connect_client_' . $client['id'] . '_disconnect'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-disconnect" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-disconnect" name="disconnect__enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> Disconnect From PixelPin</button></div>',
-            '#context' => [
-              'value' => t('Disconnect From PixelPin', array('@client_title' => $client['label'])),
-            ],
-          );
+        $fieldset['pixelpin_openid_connect_client_' . $client['id'] . '_disconnect'] = [
+          '#type' => 'inline_template',
+          '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-disconnect" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-disconnect" name="disconnect__enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> Disconnect From PixelPin</button></div>',
+          '#context' => [
+            'value' => t('Disconnect From PixelPin', ['@client_title' => $client['label']]),
+          ],
+        ];
 
-        $fieldset['pixelpin_openid_connect_client_' . $client['id'] . '_disconnect_hidden'] = array(
+        $fieldset['pixelpin_openid_connect_client_' . $client['id'] . '_disconnect_hidden'] = [
           '#type' => 'submit',
-          '#value' => t('Disconnect from PixelPin', array('@client_title' => $client['label'])),
+          '#value' => t('Disconnect from PixelPin', ['@client_title' => $client['label']]),
           '#name' => 'disconnect__' . $client['id'],
           '#access' => !$read_only,
-        );
+        ];
       }
       else {
         $fieldset['status']['#markup'] = t('Not connected');
 
-        $fieldset['pixelpin_openid_connect_client_' . $client_id . '_connect'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-connect" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-connect" name="connect__enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> Connect With PixelPin</button></div>',
-            '#context' => [
-              'value' => t('Connect With PixelPin', array('@client_title' => $client['label'])),
-            ],
-        );
+        $fieldset['pixelpin_openid_connect_client_' . $client_id . '_connect'] = [
+          '#type' => 'inline_template',
+          '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-connect" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-connect" name="connect__enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> Connect With PixelPin</button></div>',
+          '#context' => [
+            'value' => t('Connect With PixelPin', ['@client_title' => $client['label']]),
+          ],
+        ];
 
-        $fieldset['pixelpin_openid_connect_client_' . $client['id'] . '_connect_hidden'] = array(
+        $fieldset['pixelpin_openid_connect_client_' . $client['id'] . '_connect_hidden'] = [
           '#type' => 'submit',
-          '#value' => t('Connect with PixelPin', array('@client_title' => $client['label'])),
+          '#value' => t('Connect with PixelPin', ['@client_title' => $client['label']]),
           '#name' => 'connect__' . $client['id'],
           '#access' => !$read_only,
-        );
+        ];
       }
     }
     return $form;
@@ -207,7 +207,7 @@ class AccountsForm extends FormBase implements ContainerInjectionInterface {
     if ($op === 'disconnect') {
       $this->authmap->deleteAssociation($form_state->get('account')->id(), $client_name);
       $client = $this->pluginManager->getDefinition($client_name);
-      drupal_set_message(t('Account successfully disconnected from PixelPin.', array('@client' => $client['label'])));
+      drupal_set_message(t('Account successfully disconnected from PixelPin.', ['@client' => $client['label']]));
       return;
     }
 
diff --git a/src/Form/LoginForm.php b/src/Form/LoginForm.php
index 86fc661..7607067 100644
--- a/src/Form/LoginForm.php
+++ b/src/Form/LoginForm.php
@@ -70,48 +70,48 @@ class LoginForm extends FormBase implements ContainerInjectionInterface {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $definitions = $this->pluginManager->getDefinitions();
     foreach ($definitions as $client_id => $client) {
-        if (!$this->config('pixelpin_openid_connect.settings.enable')
-          ->get('enabled')) {
-          continue;
-        }                
-          $form['#attached'] = array(
-            'library' => array(
-              'pixelpin_openid_connect/pixelpin_logo',
-            ),
-          );
-
-          $value = 'Log in Using PixelPin';
-
-          $form['pixelpin_openid_connect_text'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><p>If you already registered with PixelPin, you can use your PixelPin picture to login to our site.</p></div>',
-          );
-
-          $form['pixelpin_openid_connect_client_' . $client_id . '_login'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-login" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-login" name="enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> {{text}}</button></div>',
-            '#context' => [
-              'text' => $value,
-              'value' => t($value, array(
-              '@client_title' => $client['label'],
-            )),
-            ],
-          );
-
-          $form['pixelpin_openid_connect_link'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><a href="https://www.pixelpin.co.uk" target="_blank">What is PixelPin?</a></div>',
-          );
-
-          $form['pixelpin_openid_connect_client_' . $client_id . '_login_hide'] = array(
-            '#type' => 'submit',
-            '#value' => t($value, array(
-              '@client_title' => $client['label'],
-            )),
-            '#name' => $client_id,
-            '#prefix' => '<div>',
-            '#suffix' => '</div>',
-          );
+      if (!$this->config('pixelpin_openid_connect.settings.enable')
+        ->get('enabled')) {
+        continue;
+      }
+      $form['#attached'] = [
+        'library' => [
+          'pixelpin_openid_connect/pixelpin_logo',
+        ],
+      ];
+
+      $value = 'Log in Using PixelPin';
+
+      $form['pixelpin_openid_connect_text'] = [
+        '#type' => 'inline_template',
+        '#template' => '<div><p>If you already registered with PixelPin, you can use your PixelPin picture to login to our site.</p></div>',
+      ];
+
+      $form['pixelpin_openid_connect_client_' . $client_id . '_login'] = [
+        '#type' => 'inline_template',
+        '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-login" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-login" name="enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> {{text}}</button></div>',
+        '#context' => [
+          'text' => $value,
+          'value' => t($value, [
+            '@client_title' => $client['label'],
+          ]),
+        ],
+      ];
+
+      $form['pixelpin_openid_connect_link'] = [
+        '#type' => 'inline_template',
+        '#template' => '<div><a href="https://www.pixelpin.co.uk" target="_blank">What is PixelPin?</a></div>',
+      ];
+
+      $form['pixelpin_openid_connect_client_' . $client_id . '_login_hide'] = [
+        '#type' => 'submit',
+        '#value' => t($value, [
+          '@client_title' => $client['label'],
+        ]),
+        '#name' => $client_id,
+        '#prefix' => '<div>',
+        '#suffix' => '</div>',
+      ];
     }
     return $form;
   }
diff --git a/src/Form/RegisterForm.php b/src/Form/RegisterForm.php
index 844bb67..29e0573 100644
--- a/src/Form/RegisterForm.php
+++ b/src/Form/RegisterForm.php
@@ -1,138 +1,138 @@
-<?php
-
-namespace Drupal\pixelpin_openid_connect\Form;
-
-use Drupal\Core\Form\FormBase;
-use Drupal\Core\Form\FormStateInterface;
-use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
-use Drupal\pixelpin_openid_connect\Claims;
-use Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager;
-use Symfony\Component\DependencyInjection\ContainerInterface;
-
-/**
- * Class RegisterForm.
- *
- * @package Drupal\pixelpin_openid_connect\Form
- */
-class RegisterForm extends FormBase implements ContainerInjectionInterface {
-
-  /**
-   * Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager definition.
-   *
-   * @var \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager
-   */
-  protected $pluginManager;
-
-  /**
-   * The OpenID Connect claims.
-   *
-   * @var \Drupal\pixelpin_openid_connect\Claims
-   */
-  protected $claims;
-
-  /**
-   * The constructor.
-   *
-   * @param \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
-   *   The plugin manager.
-   * @param \Drupal\pixelpin_openid_connect\Claims $claims
-   *   The OpenID Connect claims.
-   */
-  public function __construct(
-      OpenIDConnectClientManager $plugin_manager,
-      Claims $claims
-  ) {
-
-    $this->pluginManager = $plugin_manager;
-    $this->claims = $claims;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container) {
-    return new static(
-      $container->get('plugin.manager.pixelpin_openid_connect_client.processor'),
-      $container->get('pixelpin_openid_connect.claims')
-    );
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getFormId() {
-    return 'pixelpin_openid_connect_login_form';
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function buildForm(array $form, FormStateInterface $form_state) {
-    $definitions = $this->pluginManager->getDefinitions();
-    foreach ($definitions as $client_id => $client) {
-        if (!$this->config('pixelpin_openid_connect.settings.enable')
-          ->get('enabled')) {
-          continue;
-        }
-          $form['#attached'] = array(
-            'library' => array(
-              'pixelpin_openid_connect/pixelpin_logo',
-            ),
-          );                 
-       
-          $value = 'Register Using PixelPin';
-
-          $form['pixelpin_openid_connect_text'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><p>Not registered? If you have a PixelPin account already, you can register with us without needing to fill out those time consuming registration forms! If you don\'t have a PixelPin account, sign up to PixelPin using this button too! And use your PixelPin picture to log into our website as well as other websites in the future.</p></div>',
-          );
-
-          $form['pixelpin_openid_connect_client_' . $client_id . '_login'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-login" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-login" name="enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> {{text}}</button></div>',
-            '#context' => [
-              'text' => $value,
-              'value' => t($value, array(
-              '@client_title' => $client['label'],
-            )),
-            ],
-          );
-
-          $form['pixelpin_openid_connect_link'] = array(
-            '#type' => 'inline_template',
-            '#template' => '<div><a href="https://www.pixelpin.co.uk" target="_blank">What is PixelPin?</a></div>',
-          );
-
-          $form['pixelpin_openid_connect_client_' . $client_id . '_login_hide'] = array(
-            '#type' => 'submit',
-            '#value' => t($value, array(
-              '@client_title' => $client['label'],
-            )),
-            '#name' => $client_id,
-            '#prefix' => '<div>',
-            '#suffix' => '</div>',
-          );  
-    }
-    return $form;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function submitForm(array &$form, FormStateInterface $form_state) {
-    pixelpin_openid_connect_save_destination();
-    $client_name = $form_state->getTriggeringElement()['#name'];
-
-    $configuration = $this->config('pixelpin_openid_connect.settings.' . $client_name)
-      ->get('settings');
-    $client = $this->pluginManager->createInstance(
-      $client_name,
-      $configuration
-    );
-    $scopes = $this->claims->getScopes();
-    $_SESSION['pixelpin_openid_connect_op'] = 'login';
-    $response = $client->authorize($scopes, $form_state);
-    $form_state->setResponse($response);
-  }
-
-}
+<?php
+
+namespace Drupal\pixelpin_openid_connect\Form;
+
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Drupal\pixelpin_openid_connect\Claims;
+use Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Class RegisterForm.
+ *
+ * @package Drupal\pixelpin_openid_connect\Form
+ */
+class RegisterForm extends FormBase implements ContainerInjectionInterface {
+
+  /**
+   * Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager definition.
+   *
+   * @var \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager
+   */
+  protected $pluginManager;
+
+  /**
+   * The OpenID Connect claims.
+   *
+   * @var \Drupal\pixelpin_openid_connect\Claims
+   */
+  protected $claims;
+
+  /**
+   * The constructor.
+   *
+   * @param \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   *   The plugin manager.
+   * @param \Drupal\pixelpin_openid_connect\Claims $claims
+   *   The OpenID Connect claims.
+   */
+  public function __construct(
+      OpenIDConnectClientManager $plugin_manager,
+      Claims $claims
+  ) {
+
+    $this->pluginManager = $plugin_manager;
+    $this->claims = $claims;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('plugin.manager.pixelpin_openid_connect_client.processor'),
+      $container->get('pixelpin_openid_connect.claims')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'pixelpin_openid_connect_login_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $definitions = $this->pluginManager->getDefinitions();
+    foreach ($definitions as $client_id => $client) {
+      if (!$this->config('pixelpin_openid_connect.settings.enable')
+        ->get('enabled')) {
+        continue;
+      }
+      $form['#attached'] = [
+        'library' => [
+          'pixelpin_openid_connect/pixelpin_logo',
+        ],
+      ];
+
+      $value = 'Register Using PixelPin';
+
+      $form['pixelpin_openid_connect_text'] = [
+        '#type' => 'inline_template',
+        '#template' => '<div><p>Not registered? If you have a PixelPin account already, you can register with us without needing to fill out those time consuming registration forms! If you don\'t have a PixelPin account, sign up to PixelPin using this button too! And use your PixelPin picture to log into our website as well as other websites in the future.</p></div>',
+      ];
+
+      $form['pixelpin_openid_connect_client_' . $client_id . '_login'] = [
+        '#type' => 'inline_template',
+        '#template' => '<div><button data-drupal-selector="edit-pixelpin-openid-connect-client-enable-login" class="button js-form-submit form-submit" id="edit-pixelpin-openid-connect-client-enable-login" name="enable" type="submit"><svg class="icon icon-pixelpin-connect" value="{{value}}"><use xlink:href="#icon-pixelpin-connect"></use></svg> {{text}}</button></div>',
+        '#context' => [
+          'text' => $value,
+          'value' => t($value, [
+            '@client_title' => $client['label'],
+          ]),
+        ],
+      ];
+
+      $form['pixelpin_openid_connect_link'] = [
+        '#type' => 'inline_template',
+        '#template' => '<div><a href="https://www.pixelpin.co.uk" target="_blank">What is PixelPin?</a></div>',
+      ];
+
+      $form['pixelpin_openid_connect_client_' . $client_id . '_login_hide'] = [
+        '#type' => 'submit',
+        '#value' => t($value, [
+          '@client_title' => $client['label'],
+        ]),
+        '#name' => $client_id,
+        '#prefix' => '<div>',
+        '#suffix' => '</div>',
+      ];
+    }
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    pixelpin_openid_connect_save_destination();
+    $client_name = $form_state->getTriggeringElement()['#name'];
+
+    $configuration = $this->config('pixelpin_openid_connect.settings.' . $client_name)
+      ->get('settings');
+    $client = $this->pluginManager->createInstance(
+      $client_name,
+      $configuration
+    );
+    $scopes = $this->claims->getScopes();
+    $_SESSION['pixelpin_openid_connect_op'] = 'login';
+    $response = $client->authorize($scopes, $form_state);
+    $form_state->setResponse($response);
+  }
+
+}
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index d8759d1..f70a0e6 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -96,12 +96,12 @@ class SettingsForm extends ConfigFormBase implements ContainerInjectionInterface
     $settings = $this->configFactory()
       ->getEditable('pixelpin_openid_connect.settings');
 
-    $options = array();
+    $options = [];
     foreach ($this->pluginManager->getDefinitions() as $client_plugin) {
       $options[$client_plugin['id']] = $client_plugin['label'];
     }
 
-    $clients_enabled = array();
+    $clients_enabled = [];
     foreach ($this->pluginManager->getDefinitions() as $client_plugin) {
       $enabled = $this->configFactory()
         ->getEditable('pixelpin_openid_connect.settings.' . $client_plugin['id'])
@@ -109,15 +109,13 @@ class SettingsForm extends ConfigFormBase implements ContainerInjectionInterface
       $clients_enabled[$client_plugin['id']] = (bool) $enabled ? $client_plugin['id'] : 0;
     }
 
-    
-
     $form['#tree'] = TRUE;
-    $form['clients_enabled'] = array(
+    $form['clients_enabled'] = [
       '#title' => t('Enable PixelPin OpenID Connect'),
       '#type' => 'checkboxes',
-      '#options' => $options, 
+      '#options' => $options,
       '#default_value' => $clients_enabled,
-    );
+    ];
 
     foreach ($this->pluginManager->getDefinitions() as $client_name => $client_plugin) {
       $configuration = $this->configFactory()
@@ -131,31 +129,31 @@ class SettingsForm extends ConfigFormBase implements ContainerInjectionInterface
       );
 
       $element = 'clients_enabled[' . $client_plugin['id'] . ']';
-      $form['clients'][$client_plugin['id']] = array(
+      $form['clients'][$client_plugin['id']] = [
         '#title' => $client_plugin['label'],
         '#type' => 'fieldset',
         '#tree' => TRUE,
-        '#states' => array(
-          'visible' => array(
-            ':input[name="' . $element . '"]' => array('checked' => TRUE),
-          ),
-        ),
-      );
-      $form['clients'][$client_plugin['id']]['settings'] = array();
+        '#states' => [
+          'visible' => [
+            ':input[name="' . $element . '"]' => ['checked' => TRUE],
+          ],
+        ],
+      ];
+      $form['clients'][$client_plugin['id']]['settings'] = [];
       $form['clients'][$client_plugin['id']]['settings'] += $client->buildConfigurationForm([], $form_state);
     }
 
-    $form['always_save_userinfo'] = array(
+    $form['always_save_userinfo'] = [
       '#type' => 'checkbox',
       '#title' => $this->t('Save user claims on every login'),
       '#description' => $this->t('If disabled, user claims will only be saved when the account is first created.'),
       '#default_value' => $settings->get('always_save_userinfo'),
-    );
+    ];
 
-    $form['userinfo_mappings'] = array(
+    $form['userinfo_mappings'] = [
       '#title' => t('User claims mapping'),
       '#type' => 'fieldset',
-    );
+    ];
 
     $properties = $this->entityFieldManager->getFieldDefinitions('user', 'user');
     $properties_skip = _pixelpin_openid_connect_user_properties_to_skip();
@@ -210,7 +208,7 @@ class SettingsForm extends ConfigFormBase implements ContainerInjectionInterface
         $default_value = 'country';
       }
 
-      $form['userinfo_mappings'][$property_name] = array(
+      $form['userinfo_mappings'][$property_name] = [
         '#type' => 'select',
         '#title' => $property->getLabel(),
         '#description' => $property->getDescription(),
@@ -218,7 +216,7 @@ class SettingsForm extends ConfigFormBase implements ContainerInjectionInterface
         '#empty_value' => 0,
         '#empty_option' => t('- No mapping -'),
         '#default_value' => isset($mappings[$property_name]) ? $mappings[$property_name] : $default_value,
-      );
+      ];
     }
 
     return parent::buildForm($form, $form_state);
@@ -250,11 +248,11 @@ class SettingsForm extends ConfigFormBase implements ContainerInjectionInterface
       if ((bool) $status) {
         $this->configFactory()
           ->getEditable('pixelpin_openid_connect.settings.' . $client_name)
-          ->set('settings', $form_state->getValue(array(
+          ->set('settings', $form_state->getValue([
             'clients',
             $client_name,
             'settings',
-          )))
+          ]))
           ->save();
       }
     }
diff --git a/src/Plugin/Block/RegisterBlock.php b/src/Plugin/Block/RegisterBlock.php
index 21c66f9..96c9533 100644
--- a/src/Plugin/Block/RegisterBlock.php
+++ b/src/Plugin/Block/RegisterBlock.php
@@ -1,82 +1,82 @@
-<?php
-
-namespace Drupal\pixelpin_openid_connect\Plugin\Block;
-
-use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Form\FormBuilder;
-use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
-use Symfony\Component\DependencyInjection\ContainerInterface;
-use Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager;
-
-/**
- * Provides a 'OpenID Connect login' block.
- *
- * @Block(
- *  id = "pixelpin_openid_connect_register",
- *  admin_label = @Translation("Register Using PixelPin"),
- * )
- */
-class RegisterBlock extends BlockBase implements ContainerFactoryPluginInterface {
-
-  /**
-   * Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager definition.
-   *
-   * @var \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager
-   */
-  protected $pluginManager;
-
-  /**
-   * The form builder.
-   *
-   * @var \Drupal\Core\Form\FormBuilder
-   */
-  protected $formBuilder;
-
-  /**
-   * Construct.
-   *
-   * @param array $configuration
-   *   A configuration array containing information about the plugin instance.
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param string $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
-   *   The OpenID Connect client manager.
-   * @param \Drupal\Core\Form\FormBuilder $form_builder
-   *   The form builder.
-   */
-  public function __construct(
-      array $configuration,
-      $plugin_id,
-      $plugin_definition,
-      OpenIDConnectClientManager $plugin_manager,
-      FormBuilder $form_builder
-  ) {
-    parent::__construct($configuration, $plugin_id, $plugin_definition);
-
-    $this->pluginManager = $plugin_manager;
-    $this->formBuilder = $form_builder;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    return new static(
-      $configuration,
-      $plugin_id,
-      $plugin_definition,
-      $container->get('plugin.manager.pixelpin_openid_connect_client.processor'),
-      $container->get('form_builder')
-    );
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function build() {
-    return $this->formBuilder->getForm('Drupal\pixelpin_openid_connect\Form\RegisterForm');
-  }
-
-}
+<?php
+
+namespace Drupal\pixelpin_openid_connect\Plugin\Block;
+
+use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Form\FormBuilder;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager;
+
+/**
+ * Provides a 'OpenID Connect login' block.
+ *
+ * @Block(
+ *  id = "pixelpin_openid_connect_register",
+ *  admin_label = @Translation("Register Using PixelPin"),
+ * )
+ */
+class RegisterBlock extends BlockBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager definition.
+   *
+   * @var \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager
+   */
+  protected $pluginManager;
+
+  /**
+   * The form builder.
+   *
+   * @var \Drupal\Core\Form\FormBuilder
+   */
+  protected $formBuilder;
+
+  /**
+   * Construct.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param string $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientManager $plugin_manager
+   *   The OpenID Connect client manager.
+   * @param \Drupal\Core\Form\FormBuilder $form_builder
+   *   The form builder.
+   */
+  public function __construct(
+      array $configuration,
+      $plugin_id,
+      $plugin_definition,
+      OpenIDConnectClientManager $plugin_manager,
+      FormBuilder $form_builder
+  ) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+
+    $this->pluginManager = $plugin_manager;
+    $this->formBuilder = $form_builder;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('plugin.manager.pixelpin_openid_connect_client.processor'),
+      $container->get('form_builder')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function build() {
+    return $this->formBuilder->getForm('Drupal\pixelpin_openid_connect\Form\RegisterForm');
+  }
+
+}
diff --git a/src/Plugin/OpenIDConnectClient/Enable.php b/src/Plugin/OpenIDConnectClient/Enable.php
index 7766393..54df817 100644
--- a/src/Plugin/OpenIDConnectClient/Enable.php
+++ b/src/Plugin/OpenIDConnectClient/Enable.php
@@ -1,39 +1,39 @@
-<?php
-
-namespace Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClient;
-
-use Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientBase;
-
-/**
- * OpenID Connect client for PixelPin.
- *
- * Implements OpenID Connect Client plugin for PixelPin.
- *
- * @OpenIDConnectClient(
- *   id = "enable",
- *   label = @Translation("Enable")
- * )
- */
-class Enable extends OpenIDConnectClientBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getEndpoints() {
-    return array(
-      'authorization' => 'https://login.pixelpin.io/connect/authorize',
-      'token' => 'https://login.pixelpin.io/connect/token',
-      'userinfo' => 'https://login.pixelpin.io/connect/userinfo',
-    );
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function retrieveUserInfo($access_token) {
-    $userinfo = parent::retrieveUserInfo($access_token);
-
-    return $userinfo;
-  }
-
-}
\ No newline at end of file
+<?php
+
+namespace Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClient;
+
+use Drupal\pixelpin_openid_connect\Plugin\OpenIDConnectClientBase;
+
+/**
+ * OpenID Connect client for PixelPin.
+ *
+ * Implements OpenID Connect Client plugin for PixelPin.
+ *
+ * @OpenIDConnectClient(
+ *   id = "enable",
+ *   label = @Translation("Enable")
+ * )
+ */
+class Enable extends OpenIDConnectClientBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getEndpoints() {
+    return [
+      'authorization' => 'https://login.pixelpin.io/connect/authorize',
+      'token' => 'https://login.pixelpin.io/connect/token',
+      'userinfo' => 'https://login.pixelpin.io/connect/userinfo',
+    ];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function retrieveUserInfo($access_token) {
+    $userinfo = parent::retrieveUserInfo($access_token);
+
+    return $userinfo;
+  }
+
+}
diff --git a/src/Plugin/OpenIDConnectClientBase.php b/src/Plugin/OpenIDConnectClientBase.php
index d84e982..1be067a 100644
--- a/src/Plugin/OpenIDConnectClientBase.php
+++ b/src/Plugin/OpenIDConnectClientBase.php
@@ -105,33 +105,33 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
 
     $redirect_uri = Url::fromRoute(
       'pixelpin_openid_connect.redirect_controller_redirect',
-      array(
+      [
         'client_name' => 'pixelpin',
-      ),
-      array(
+      ],
+      [
         'absolute' => TRUE,
         'language' => $language_none,
-      )
+      ]
     )->toString(TRUE);
 
-    $form['client_id'] = array(
+    $form['client_id'] = [
       '#title' => t('Client ID'),
       '#type' => 'textfield',
       '#default_value' => $this->configuration['client_id'],
-    );
-    $form['client_secret'] = array(
+    ];
+    $form['client_secret'] = [
       '#title' => t('Client secret'),
       '#type' => 'textfield',
       '#maxlength' => 1024,
       '#default_value' => $this->configuration['client_secret'],
-    );
-    $form['redirect'] = array(
+    ];
+    $form['redirect'] = [
       '#title' => t('Redirect URI'),
       '#type' => 'textfield',
       '#maxlength' => 1024,
       '#default_value' => $redirect_uri->getGeneratedUrl(),
-      '#attributes' => array('disabled' => 'disabled'),
-    );
+      '#attributes' => ['disabled' => 'disabled'],
+    ];
     return $form;
   }
 
@@ -172,24 +172,24 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       ->getLanguage(LanguageInterface::LANGCODE_NOT_APPLICABLE);
     $redirect_uri = Url::fromRoute(
       'pixelpin_openid_connect.redirect_controller_redirect',
-      array(
+      [
         'client_name' => 'pixelpin',
-      ),
-      array(
+      ],
+      [
         'absolute' => TRUE,
         'language' => $language_none,
-      )
+      ]
     )->toString(TRUE);
 
-    $url_options = array(
-      'query' => array(
+    $url_options = [
+      'query' => [
         'client_id' => $this->configuration['client_id'],
         'response_type' => 'code',
         'scope' => $scope,
         'redirect_uri' => $redirect_uri->getGeneratedUrl(),
         'state' => StateToken::create(),
-      ),
-    );
+      ],
+    ];
 
     $endpoints = $this->getEndpoints();
     // Clear _GET['destination'] because we need to override it.
@@ -218,25 +218,25 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       ->getLanguage(LanguageInterface::LANGCODE_NOT_APPLICABLE);
     $redirect_uri = Url::fromRoute(
       'pixelpin_openid_connect.redirect_controller_redirect',
-      array(
+      [
         'client_name' => 'pixelpin',
-      ),
-      array(
+      ],
+      [
         'absolute' => TRUE,
         'language' => $language_none,
-      )
+      ]
     )->toString(TRUE);
     $endpoints = $this->getEndpoints();
 
-    $request_options = array(
-      'form_params' => array(
+    $request_options = [
+      'form_params' => [
         'code' => $authorization_code,
         'client_id' => $this->configuration['client_id'],
         'client_secret' => $this->configuration['client_secret'],
         'redirect_uri' => $redirect_uri->getGeneratedUrl(),
         'grant_type' => 'authorization_code',
-      ),
-    );
+      ],
+    ];
 
     /* @var \GuzzleHttp\ClientInterface $client */
     $client = $this->httpClient;
@@ -245,10 +245,10 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       $response_data = json_decode((string) $response->getBody(), TRUE);
 
       // Expected result.
-      $tokens = array(
+      $tokens = [
         'id_token' => $response_data['id_token'],
         'access_token' => $response_data['access_token'],
-      );
+      ];
       if (array_key_exists('expires_in', $response_data)) {
         $tokens['expire'] = REQUEST_TIME + $response_data['expires_in'];
       }
@@ -258,10 +258,10 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       return $tokens;
     }
     catch (Exception $e) {
-      $variables = array(
+      $variables = [
         '@message' => 'Could not retrieve tokens',
         '@error_message' => $e->getMessage(),
-      );
+      ];
       $this->loggerFactory->get('pixelpin_openid_connect_' . $this->pluginId)
         ->error('@message. Details: @error_message', $variables);
       return FALSE;
@@ -273,7 +273,7 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    */
   public function decodeIdToken($id_token) {
     list($headerb64, $claims64, $signatureb64) = explode('.', $id_token);
-    $claims64 = str_replace(array('-', '_'), array('+', '/'), $claims64);
+    $claims64 = str_replace(['-', '_'], ['+', '/'], $claims64);
     $claims64 = base64_decode($claims64);
     return json_decode($claims64, TRUE);
   }
@@ -288,11 +288,11 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
    *   A result array or false.
    */
   public function retrieveUserInfo($access_token) {
-    $request_options = array(
-      'headers' => array(
+    $request_options = [
+      'headers' => [
         'Authorization' => 'Bearer ' . $access_token,
-      ),
-    );
+      ],
+    ];
     $endpoints = $this->getEndpoints();
 
     $client = $this->httpClient;
@@ -303,10 +303,10 @@ abstract class OpenIDConnectClientBase extends PluginBase implements OpenIDConne
       return json_decode($response_data, TRUE);
     }
     catch (Exception $e) {
-      $variables = array(
+      $variables = [
         '@message' => 'Could not retrieve user profile information',
         '@error_message' => $e->getMessage(),
-      );
+      ];
       $this->loggerFactory->get('pixelpin_openid_connect_' . $this->pluginId)
         ->error('@message. Details: @error_message', $variables);
       return FALSE;
