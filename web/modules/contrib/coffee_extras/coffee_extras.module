<?php

/**
 * @file
 * Core functionality for Coffee Extras module.
 */

use Drupal\Core\Url;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityTypeManagerInterface;

/**
 * Implements hook_coffee_commands().
 */
function coffee_extras_coffee_commands() {
  // Initialize the commands array.
  $commands = [];

  // Initialize the entity manager.
  $entity_manager = \Drupal::entityTypeManager();

  // These modules are part of core, so we don't have to check
  // to see if they are enabled.
  coffee_extras_add_entity_type_commands($commands, $entity_manager);
  coffee_extras_add_taxonomy_commands($commands, $entity_manager);
  if (\Drupal::moduleHandler()->moduleExists('views_ui')) {
    coffee_extras_add_views_commands($commands, $entity_manager);
  }

  return $commands;
}

/**
 * Add coffee commands for entity types.
 *
 * @param array $commands
 *   The commands array from hook_coffee_commands(), which is
 *   passed by reference.
 */
function coffee_extras_add_entity_type_commands(array &$commands, EntityTypeManagerInterface $entity_manager) {
  $account = \Drupal::currentUser();

  foreach ($entity_manager->getDefinitions() as $entity_type_id => $entity_type) {
    $entity_type_label = $entity_type->getLabel();

    if ($bundle_of = $entity_type->getBundleOf()) {
      // Add a link to the page listing all bundles
      // for an entity type.
      $commands[] = [
        'value' => Url::fromRoute("entity.{$entity_type_id}.collection")->toString(),
        'label' => t('Manage @label', [
          '@label' => $entity_type_label . 's',
        ]),
        'command' => ':types ' . Unicode::strtolower($entity_type_label),
      ];

      foreach ($entity_manager->getStorage($entity_type_id)->loadMultiple() as $bundle) {
        // Add the edit bundle page.
        $commands[] = [
          'value' => Url::fromRoute(
            "entity.{$entity_type_id}.edit_form",
            [$entity_type_id => $bundle->id()]
          )->toString(),
          'label' => t('Manage @type', [
            '@type' => $bundle->label(),
          ]),
          'command' => ':types ' . Unicode::strtolower($bundle->label()),
        ];

        if ($entity_manager->getDefinition($bundle_of)->get('field_ui_base_route')) {
          if ($account->hasPermission('administer ' . $bundle_of . ' fields')) {
            // Add the 'Manage fields' page for each bundle.
            $commands[] = [
              'value' => Url::fromRoute(
                "entity.{$bundle_of}.field_ui_fields",
                [$entity_type_id => $bundle->id()]
              )->toString(),
              'label' => t('Manage fields for @bundle', [
                '@bundle' => $bundle->label(),
              ]),
              'command' => ':fields ' . Unicode::strtolower($bundle->label()),
            ];
          }
          if ($account->hasPermission('administer ' . $bundle_of . ' form display')) {
            // Add the 'Manage form display' page for each bundle.
            $commands[] = [
              'value' => Url::fromRoute(
                "entity.entity_form_display.{$bundle_of}.default",
                [$entity_type_id => $bundle->id()]
              )->toString(),
              'label' => t('Manage form display for @bundle', [
                '@bundle' => $bundle->label(),
              ]),
              'command' => ':fields ' . Unicode::strtolower($bundle->label()),
            ];
          }
          if ($account->hasPermission('administer ' . $bundle_of . ' display')) {
            // Add the 'Manage display' page for each bundle.
            $commands[] = [
              'value' => Url::fromRoute(
                "entity.entity_view_display.{$bundle_of}.default",
                [$entity_type_id => $bundle->id()]
              )->toString(),
              'label' => t('Manage display for @bundle', [
                '@bundle' => $bundle->label(),
              ]),
              'command' => ':fields ' . Unicode::strtolower($bundle->label()),
            ];
          }
        }
      }
    }
  }
}

/**
 * Add coffee commands for taxonomy vocabularies.
 *
 * @param array $commands
 *   The commands array from hook_coffee_commands(), which is
 *   passed by reference.
 */
function coffee_extras_add_taxonomy_commands(array &$commands, EntityTypeManagerInterface $entity_manager) {
  $command = ':vocabs';

  foreach ($entity_manager->getStorage('taxonomy_vocabulary')->loadMultiple() as $vocab) {
    $vocab_id = $vocab->id();

    // Add the edit vocabulary page for each vocabulary.
    $commands[] = [
      'value' => Url::fromRoute('entity.taxonomy_vocabulary.overview_form', ['taxonomy_vocabulary' => $vocab_id])->toString(),
      'label' => t('Manage terms for @vocab', [
        '@vocab' => $vocab->label(),
      ]),
      'command' => $command . ' ' . Unicode::strtolower($vocab->label()),
    ];
  }
}

/**
 * Add coffee commands for views.
 *
 * @param array $commands
 *   The commands array from hook_coffee_commands(), which is
 *   passed by reference.
 */
function coffee_extras_add_views_commands(array &$commands, EntityTypeManagerInterface $entity_manager) {
  $command = ':views';
  foreach ($entity_manager->getStorage('view')->loadMultiple() as $view) {
    // Add the edit view page for each view.
    $commands[] = [
      'value' => Url::fromRoute('entity.view.edit_form', ['view' => $view->id()])->toString(),
      'label' => t('Edit @view view', [
        '@view' => $view->label(),
      ]),
      'command' => $command . ' ' . Unicode::strtolower($view->label()),
    ];
  }
}
