<?php

/**
 * @file
 * Hook implementations and other custom S3 functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Aws\S3\S3Client;

/**
 * Internal validate callback to check if path in S3 exists.
 */
function _s3fs_plus_path_exists(&$entity_form, FormStateInterface $form_state) {
  $field_media_value = $form_state->getValue('field_media');
  $directory_path = rtrim($field_media_value['form']['inline_entity_form']['image'][0]['s3fs_directory'], '/');
  if (!empty($directory_path)) {
    $s3fs_config = \Drupal::config('s3fs.settings');
    $s3fs = get_client($s3fs_config);

    // Check if the directory exists.
    $directory_exists = $s3fs->listObjectsV2(['Bucket' => $s3fs_config->get('bucket'), 'Prefix' => $directory_path]);
    $directory_contents = $directory_exists->toArray()['Contents'];
    // Create a directory, if does not exist.
    if (empty($directory_contents)) {
      $s3fs->putObject(array(
        'Bucket' => $s3fs_config->get('bucket'),
        'Key'    => $directory_path . '/',
        'Body'   => "",
        'ACL'    => 'public-read',
      ));
    }
  }
}

/**
 * Get S3 client.
 *
 * @param object $s3fs_config
 *   S3fs config object.
 *
 * @return object|null
 *   Aws\S3\S3Client if config exists.
 */
function get_client($s3fs_config) {
  if (!empty($s3fs_config)) {

    $client = S3Client::factory(array(
      'credentials' => array(
        'key' => $s3fs_config->get('access_key'),
        'secret' => $s3fs_config->get('secret_key'),
      ),
      'region' => $s3fs_config->get('region'),
      'version' => 'latest',
    ));
    return $client;
  }
  return NULL;
}
