<?php

/**
 * @file
 * Reapply term merge actions on presave.
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\term_merge_manager\Entity\TermMergeFrom;
use Drupal\term_merge_manager\Entity\TermMergeInto;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function term_merge_manager_taxonomy_term_presave(Term $entity) {
  $name = $entity->getName();
  $vid = $entity->getVocabularyId();

  $from = TermMergeFrom::loadByVidName($vid, $name);

  // Leave if there is no merge entry.
  if ($from === FALSE) {
    return TRUE;
  }

  // There is an entry so we rewrite the name.
  $into = $from->getIntoName();
  $entity->setName($into);

  if (\Drupal::currentUser()->hasPermission('view term merged manager messages')) {
    drupal_set_message(t('There is a merge action - so we merged "@name" into "@into"', ['@name' => $name, '@into' => $into]));
  }

  return TRUE;
}

/**
 * Delete existing merge actions on term delete.
 *
 * Implements hook_taxonomy_term_delete().
 * @param $term
 */
function term_merge_manager_taxonomy_term_delete($term) {
  $tid = $term->get('tid')->value;

  if (empty($tid)) {
    // something is wrong
    return FALSE;
  }

  // delete merge into
  $id = TermMergeInto::loadIdByTid($tid);
  TermMergeInto::load($id)->delete();

  // delete merge from
  $from = TermMergeFrom::loadByMergeId($id);
  if (!empty($from) && is_array($from)) {
    foreach ($from as $id) {
      TermMergeFrom::load($id)->delete();
    }
  }

  return TRUE;
}
