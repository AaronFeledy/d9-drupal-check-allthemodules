<?php

/**
 * @file
 * Contains user_lock.module..
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\RoleInterface;
use Drupal\Core\TypedData\Type\DateTimeInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_lock_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
  $form['#validate'][] = 'user_lock_validate';
}

/**
 * Implements validate for user login form.
 */
function user_lock_validate(array &$form, FormStateInterface $form_state){
  $values = $form_state->getValues();
  $user_name = $values['name'];
  $conn = Database::getConnection();
  $name = $conn->select('users_field_data', 'uf');
  $name->fields('uf', ['uid']);
  $name->condition('name',$user_name,'=');
  $uid = $name->execute()->fetchField();
  $id = '';
  if($uid){
  	$entities_load = \Drupal::entityTypeManager()->getStorage('user_lock_config_entity')->loadMultiple();
	  $break = FALSE;
	  $time = date('Y-m-d h:i:s a', time());
	  $str_time = strtotime($time);
	  foreach($entities_load as $entity){
	    $users = $entity->get_user();
	    $user_uids = explode(',',$users);
      if(in_array($uid, $user_uids)){
        $redirect_url = $entity->get_redirect_url();
        $message = $entity->get_lock_message();
        if($entity->get_lock_period_from()){
          $default_lock_from = DrupalDateTime::createFromTimestamp($entity->get_lock_period_from());
          $lock_from = @strtotime($default_lock_from->format('Y-m-d h:i:s a'));
        }
        if($entity->get_lock_period_to()){
          $default_lock_to = DrupalDateTime::createFromTimestamp($entity->get_lock_period_to());
          $lock_to = @strtotime($default_lock_to->format('Y-m-d h:i:s a'));
        }
        if(($str_time >= $lock_from) && ($str_time <= $lock_to)){
          $id = $entity->id();
          $break = TRUE;
        }
      }
	    if($break){
	      user_lock_redirect($redirect_url.'?id='.$id);
	      break;
	    }
	  }
  }
}

/**
 * Implements hook_help().
 */
function user_lock_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_lock module.
    case 'help.page.user_lock':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Customize the user login by setting lock period to disable login for selected time.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Fetch Usernames with ID's for dropdown.
 */
function _user_lock_fetch_names() {
  $conn = Database::getConnection();
  $user_query = $conn->select('users_field_data', 'u');
  $user_query->fields('u', ['uid', 'name']);
  $user_result = $user_query->execute()->fetchAll();
  $users = [];
  foreach ($user_result as $user_array) {
    if (!empty($user_array->name)) {
      $users[$user_array->uid] = $user_array->name;
    }
  }
  return $users;
}

/**
 * Redirect path.
 */
function user_lock_redirect($path) {
  //drupal_set_message(t($message), 'error', TRUE);
  $response = new RedirectResponse($path);
  $response->send();
  exit;
}