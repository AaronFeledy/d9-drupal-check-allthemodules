<?php

/**
 * @file
 * Code for the entity library module.
 */

use Drupal\Component\Serialization\Yaml;

/**
 * Implements hook_library_info_build().
 */
function entity_library_library_info_build() {
  /** @var \Drupal\entity_library\Entity\EntityLibraryInterface[] $entity_libraries */
  $entity_libraries = \Drupal::entityTypeManager()->getStorage('entity_library')->loadMultiple();

  $libraries = [];
  foreach ($entity_libraries as $entity_library) {
    $libraries[$entity_library->id()] = Yaml::decode($entity_library->getLibraryInfo());
  }

  return $libraries;
}


/**
 * Implements hook_page_attachments().
 */
function entity_library_page_attachments(array &$attachments) {
  /** @var \Drupal\system\Plugin\Condition\RequestPath $request_path_condition */
  $request_path_condition = \Drupal::getContainer()->get('plugin.manager.condition')->createInstance('request_path');
  /** @var \Drupal\entity_library\Entity\EntityLibraryInterface[] $entity_libraries */
  $entity_libraries = \Drupal::entityTypeManager()->getStorage('entity_library')->loadMultiple();

  foreach ($entity_libraries as $entity_library) {
    // Configure the request path condition instance.
    $request_path_condition->setConfiguration($entity_library->getConditions());

    // Execute the conditions and attach the library.
    if ($request_path_condition->execute()) {
      $attachments['#attached']['library'][] = 'entity_library/' . $entity_library->id();
    }
  }
}
