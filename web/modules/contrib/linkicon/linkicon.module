<?php

/**
 * @file
 * A link field formatter to create icon classes based on predefined titles.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Play safe predefined option on forms and settings, where DRUPAL_REQUIRED = 2.
 */
const LINKICON_PREDEFINED = 5;

/**
 * Implements hook_library_info_build().
 */
function linkicon_library_info_build() {
  $libraries = [];

  if ($font_path = \Drupal::service('linkicon.manager')->getSetting('font')) {
    $libraries['linkicon.font'] = [
      'css' => [
        'base' => [
          $font_path => [],
        ],
      ],
    ];
  }

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function linkicon_theme() {
  return [
    'linkicon' => [
      'render element' => 'element',
      'file' => 'linkicon.theme.inc',
    ],
    'linkicon_item' => [
      'render element' => 'element',
      'file' => 'linkicon.theme.inc',
    ],
  ];
}

/**
 * Implements hook_field_info_alter().
 */
function linkicon_field_info_alter(&$info) {
  if (isset($info['link'])) {
    $info['link']['class'] = '\Drupal\linkicon\LinkIconItem';
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function linkicon_field_widget_link_default_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  if (isset($element['uri']) && isset($element['title'])) {
    $items = $context['items'];
    // @todo drop 'predefined' for the new integer: LINKICON_PREDEFINED.
    $predefined = $items->getSetting('title') === LINKICON_PREDEFINED || $items->getSetting('title') === 'predefined';
    if ($predefined && ($title_predefined = $items->getSetting('title_predefined')) !== NULL) {
      $linkicon = \Drupal::service('linkicon.manager');
      $options = $linkicon->extractAllowedValues($title_predefined);
      $element['title']['#type'] = 'select';
      $element['title']['#options'] = $options;
      $element['title']['#empty_option'] = t('- Select -');
      $element['title']['#access'] = TRUE;
      $element['#element_validate'] = ['\Drupal\linkicon\LinkIconItem::elementValidateLinkIcon'];
    }
  }
}

/**
 * Implements hook_help().
 */
function linkicon_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.linkicon':
      return check_markup(file_get_contents(dirname(__FILE__) . '/README.html'), 'restricted_html');
  }
}
