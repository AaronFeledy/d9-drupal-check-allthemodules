<?php

/**
 * @file
 * Defines an extensive api for Entity Access Plugins.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\adva\Plugin\adva\OverridingAccessConsumerInterface;

/**
 * Implements hook_entity_type_build().
 *
 * Alter the access handlers for any entity types with an Overriding Access
 * Consumer plugin.
 */
function adva_entity_type_build(array &$entity_types) {
  $consumerManager = \Drupal::service("plugin.manager.adva.consumer");
  $overridingConsumers = $consumerManager->getOverrideConsumers();

  foreach ($overridingConsumers as $consumer) {
    $entityTypeId = $consumer->getEntityTypeId();
    if (isset($entity_types[$entityTypeId])) {
      $consumer->overrideAccessControlHandler($entity_types[$entityTypeId]);
    }
  }
}

/**
 * Rebuild Entity Permssions from the Advanced Access plugins.
 *
 * Rebuilds node access permissions in a batch operation to effectively update
 * all items. During initialization, existing records are all droped, and then
 * rebuilt completely.
 *
 * @param string $entityTypeId
 *   Entity Type having permissions rebuilt.
 * @param array $context
 *   An array of contextual key/value information for rebuild batch process.
 *
 * @see \Drupal\adva\AccessStorage::reloadRecords()
 */
function _adva_rebuild_access_batch_operation($entityTypeId, array &$context) {
  $consumer = \Drupal::service("plugin.manager.adva.consumer")->getConsumerForEntityTypeId($entityTypeId);
  $storage = \Drupal::entityManager()->getStorage($entityTypeId);

  // @var \Drupal\adva\AccessStorage $accessStorage.
  $accessStorage = \Drupal::service('adva.access_storage');

  if (empty($context['sandbox'])) {
    $accessStorage->clearRecords($entityTypeId);
    // Initiate multistep processing.
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['page'] = 0;
    $context['sandbox']['max'] = $storage->getQuery()->count()->execute();
  }

  // Process the next 20 nodes.
  $limit = 20;
  $page = $context['sandbox']['page'];
  $ids = $storage->getQuery()
    ->range($page * $limit, $limit)
    ->execute();
  $storage->resetCache($ids);
  $entities = $storage->loadMultiple($ids);
  foreach ($entities as $entity) {
    $accessStorage->updateRecordsFor($consumer, $entity);
    $context['sandbox']['progress']++;
  }
  $context['sandbox']['page']++;

  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $consumer->rebuildRequired(FALSE);
  }

}

/**
 * Batch operation callback to rebuild access data for a consumer.
 */
function _adva_rebuild_access_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('%type Permissions Rebuild Complete.', []);
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

/**
 * Implements hook_entity_insert().
 *
 * When an entity is updated, update the access records.
 */
function adva_entity_insert(EntityInterface $entity) {
  $consumerManager = \Drupal::service('plugin.manager.adva.consumer');
  $consumer = $consumerManager->getConsumerForEntityTypeId($entity->getEntityTypeId());
  if ($consumer && $consumer instanceof OverridingAccessConsumerInterface) {
    \Drupal::service('adva.access_storage')->updateRecordsFor($consumer, $entity);
  }
}

/**
 * Implements hook_entity_update().
 *
 * When an entity is updated, update the access records.
 */
function adva_entity_update(EntityInterface $entity) {
  $consumerManager = \Drupal::service('plugin.manager.adva.consumer');
  $consumer = $consumerManager->getConsumerForEntityTypeId($entity->getEntityTypeId());
  if ($consumer && $consumer instanceof OverridingAccessConsumerInterface) {
    \Drupal::service('adva.access_storage')->updateRecordsFor($consumer, $entity);
  }
}

/**
 * Implements hook_entity_delete().
 *
 * When an entity is updated, update the access records.
 */
function adva_entity_delete(EntityInterface $entity) {
  $consumerManager = \Drupal::service('plugin.manager.adva.consumer');
  $consumer = $consumerManager->getConsumerForEntityTypeId($entity->getEntityTypeId());
  if ($consumer && $consumer instanceof OverridingAccessConsumerInterface) {
    \Drupal::service('adva.access_storage')->deleteRecordsFor($entity);
  }
}
