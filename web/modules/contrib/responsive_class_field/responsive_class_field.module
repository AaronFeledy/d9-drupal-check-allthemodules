<?php

/**
 * @file
 * Hook implementations of the responsive_class_field module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function responsive_class_field_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.responsive_class_field':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Responsive Class Field module provides a field type that allows content editors to define breakpoint dependent styling options (CSS classes) for the entity view display of the entity it is attached to.') . '</p>';
      $output .= '<p>' . t('Rather than using general display settings for an entity type/bundle, the styling can be configured individually for each entity.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Define CSS class patterns that depend on breakpoints and a list of given options') . '</dt>';
      $output .= '<dd>' . t('Configure a set of options for each field instance. These options can be chosen for every enabled breakpoint. The module will automatically generate the CSS classes and add them to the entity view display.') . '</dd>';
      $output .= '<dt>' . t('Automatically attach the CSS classes to certain entity view displays only') . '</dt>';
      $output .= '<dd>' . t('When using different entity view displays for an entity, the CSS classes will be attached to the view display only, where the responsive class field(s) are configured to be visible.') . '</dd>';
      $output .= '<dt>' . t('Limit automatically attached classes to certain themes') . '</dt>';
      $output .= '<dd>' . t('Selectively define the theme(s) where generated CSS classes should be added to your entity view displays.') . '</dd>';
      $output .= '</dl>';

      return $output;

  }
  return NULL;
}

/**
 * Implements hook_entity_display_build_alter().
 */
function responsive_class_field_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Whether the entity is not fieldable.
  if (!$entity instanceof FieldableEntityInterface) {
    return;
  }

  // Whether the attach CSS conditions are not met.
  $responsiveClassField = \Drupal::service('responsive_class_field');
  if (!$responsiveClassField->checkConditions()) {
    return;
  }

  // Get field definitions.
  $field_definitions = $entity->getFieldDefinitions();
  // Get all components that are configured visible within the
  // entity view display.
  $components = $display->getComponents();

  // Loop over all enabled components.
  foreach ($components as $field_name => $component) {
    // Whether the component is not a field of type 'responsive_class'.
    if (
      !isset($field_definitions[$field_name])
      || $field_definitions[$field_name]->getType() != 'responsive_class'
    ) {
      continue;
    }

    // Get field.
    $field = $entity->get($field_name);
    // Get generated CSS classes.
    $classes = $field->classes;

    // Whether there aren't classes to attach.
    if (empty($classes)) {
      continue;
    }

    // Add CSS classes to the entity's attributes.
    foreach ($classes as $class) {
      $build['#attributes']['class'][] = $class;
    }
  }
}
