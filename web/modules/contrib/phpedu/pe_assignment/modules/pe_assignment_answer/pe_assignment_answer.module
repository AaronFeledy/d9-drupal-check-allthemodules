<?php
/**
 * @file
 *
 */

use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

const NODE_TYPE_ASSIGNMENT_ANSWER = 'pe_assignment_answer';


/**
 * Implements hook_help().
 */
function pe_assignment_answer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.pe_assignment_answer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('TODO') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pe_assignment_answer_preprocess_node_add_list(&$variables) {
  $variables['types'] = array();
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      if($type->id() != NODE_TYPE_ASSIGNMENT_ANSWER) {
        $variables['types'][$type->id()] = array(
          'type' => $type->id(),
          'add_link' => \Drupal::l($type->label(), new Url('node.add', array('node_type' => $type->id()))),
          'description' => array(
            '#markup' => $type->getDescription(),
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for node entities.
 */
function pe_assignment_answer_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
  if ($node->bundle() == NODE_TYPE_ASSIGNMENT_QUESTION) {
    $account = \Drupal::currentUser();
    // @todo:
    if($account->hasPermission('create pe_assignment_answer content')) {
      // Has the user answered this question before?
      $nodes = \Drupal::entityQuery('node')
        ->condition('uid', $account->id())
        ->condition('type', NODE_TYPE_ASSIGNMENT_ANSWER)
        ->condition('field_question.target_id', $node->id())
        ->execute();

      if($nodes) {
        $nid = array_pop(array_keys($nodes));
        $entity = \Drupal\node\Entity\Node::load($nid);

        $uri = $entity->urlInfo();
        $options = $uri->getOptions();
        $uri->setOptions($options);
        $assignment_answer_form_element = array(
          '#type' => 'link',
          '#title' => $entity->label(),
          '#url' => $uri,
        );
      }
      else {
        // New attempt.
        $assignment_answer_form_element = [
          '#lazy_builder' => ['pe_assignment_answer.lazy_builder:renderForm', [
            $node->id(),
          ]],
          '#create_placeholder' => TRUE,
        ];
      }

      // create fieldset.
      $element['answer'] = array(
        '#type' => 'details',
        '#title' => 'Assignment answer',
        '#tree' => TRUE,
        '#open' => TRUE,
      );

      $element['answer']['assignment_answer_form'] = $assignment_answer_form_element;

      $build['assignment_answer'] = $element;
      $build['assignment_answer'] += [
        '#weight' => 100,
      ];
    }
  }
}
