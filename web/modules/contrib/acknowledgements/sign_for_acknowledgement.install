<?php
/**
 * @file
 * Module installation.
 */
use Drupal\sign_for_acknowledgement\Service\AcknowledgementsNodeFields;
use Drupal\Core\Database\Database;

/**
 * Change alternate field type.
 */
function sign_for_acknowledgement_update_8101(&$sandbox) {
  $fieldman = \Drupal::service('sign_for_acknowledgement.field_manager');
  $fieldman->resetFields();
  $table = 'sign_for_acknowledgement';
  $field = 'alternate';
  $tableSchema = drupal_get_module_schema('sign_for_acknowledgement', $table);
  $dbSchema = Database::getConnection()->schema();
  $dbSchema->changeField($table, $field, $field, $tableSchema['fields'][$field]);
  if (!$dbSchema->indexExists($table, 'nid_uid')) {
    $dbSchema->addIndex($table, 'nid_uid', array('node_id', 'user_id'), $tableSchema);
  }
  if (!$dbSchema->indexExists($table, 'mydate')) {
    $dbSchema->addIndex($table, 'mydate', array('mydate'), $tableSchema);
  }
  $table = 'sign_for_acknowledgement_email';
  $tableSchema = drupal_get_module_schema('sign_for_acknowledgement', $table);
  if (!$dbSchema->indexExists($table, 'nid_uid')) {
    $dbSchema->addIndex($table, 'nid_uid', array('node_id', 'user_id'), $tableSchema);
  }
  if (!$dbSchema->indexExists($table, 'mydate')) {
    $dbSchema->addIndex($table, 'mydate', array('mydate'), $tableSchema);
  }
}

/**
 * Implements hook_install().
 */
function sign_for_acknowledgement_install() {
    $fieldman = \Drupal::service('sign_for_acknowledgement.field_manager');
    $fieldman->resetFields();
}
/**
 * Implements hook_schema().
 */
function sign_for_acknowledgement_schema() {
  $schema['sign_for_acknowledgement'] = array(
    'description' => 'Having read table.',
    'fields' => array(
      'hid'  => array(
        'description' => 'autoincremental index',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'node_id'  => array(
        'description' => 'node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'user_id' => array(
        'description' => 'user id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'mydate' => array(
        'description' => 'datestamp of the signature',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'alternate' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
        'description' => 'User selection in alternate form.',
      ),
      'annotation' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => FALSE,
        'description' => 'User annotation any form.',
      ),
    ),
    'primary key' => array('hid'),
    'indexes' => array(
      'nid_uid' => array('node_id', 'user_id'),
      'mydate' => array('mydate'),
    ),
  );
  $schema['sign_for_acknowledgement_email'] = array(
    'description' => 'Emails sent table.',
    'fields' => array(
      'eid'  => array(
        'description' => 'autoincremental index',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'node_id'  => array(
        'description' => 'node id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'user_id' => array(
        'description' => 'user id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'mydate' => array(
        'description' => 'datestamp of the email',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('eid'),
    'indexes' => array(
      'nid_uid' => array('node_id', 'user_id'),
      'mydate' => array('mydate'),
    ),
  );

  return $schema;
}
/**
 * Implements hook_uninstall().
 */
function sign_for_acknowledgement_uninstall() {
  // Remove the sfa fields.
  $fields = \Drupal::entityTypeManager()
    ->getStorage('field_storage_config')
    ->loadByProperties(['type' => 'sign_for_acknowledgement']);
  foreach ($fields as $field) {
    $field->delete();
  }
}
