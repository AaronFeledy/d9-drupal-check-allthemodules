<?php

/**
 * @file
 * Main module file for the Local Translator language combination module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageManager;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Prepares a language code list for a select form item with all languages.
 */
function language_combination_languages_predefined_list() {
  $predefined = &drupal_static(__FUNCTION__);

  if (!isset($predefined)) {
    $predefined = LanguageManager::getStandardLanguageList();

    foreach ($predefined as $key => $value) {

      // Include native name in output, if possible.
      if (count($value) > 1) {
        $predefined[$key] = ($value[0] == $value[1]) ? $value[0] : "$value[0] ($value[1])";
      }
      else {
        $predefined[$key] = $value[0];
      }
    }

    // Add custom languages that are not part of the iso.inc definition.
    $installed_languages = \Drupal::languageManager()->getLanguages();
    foreach ($installed_languages as $lang => $info) {
      if (!isset($predefined[$lang])) {
        $predefined[$lang] = $info->getName();
      }
    }

    asort($predefined);
  }

  return $predefined;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function language_combination_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  $languages = array_map(function ($language) {
    /** @var \Drupal\Core\Language\LanguageInterface $language */
    return $language->getName();
  }, \Drupal::languageManager()->getLanguages());
  $children = Element::children($form);
  foreach ($children as $child) {
    if (preg_match("/(language_source|language_target)/i", $child) === 1) {
      $input        = $form_state->getUserInput();
      $multiple     = $form[$child]['#multiple'];
      $options      = !$multiple ? ['All' => '- Any -'] + $languages : $languages;
      $form[$child] = [
        '#type'          => 'select',
        '#options'       => $options,
        '#default_value' => isset($input[$child]) ? $input[$child] : 'All',
        '#value'         => isset($input[$child]) ? $input[$child] : 'All',
        '#multiple'      => $multiple,
      ];
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function language_combination_views_data_alter(array &$data) {
  /** @var \Drupal\Core\Entity\EntityFieldManager $manager */
  $manager = \Drupal::service('entity_field.manager');
  $fields  = $manager->getFieldMapByFieldType('language_combination');
  if (!empty($fields)) {
    foreach ($fields as $entity_type => $fields_list) {
      foreach ($fields_list as $name => $values) {
        $key = $entity_type . '__' . $name;
        $data[$key][$name]['filter']['id'] = 'language';
        $data[$key][$name . '_language_source']['filter']['id'] = 'language';
        $data[$key][$name . '_language_target']['filter']['id'] = 'language';
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function language_combination_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.language_combination':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}
