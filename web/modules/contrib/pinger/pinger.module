<?php
/**
 * @file
 * Provides simple website monitoring via http requests.
 */

/**
 * Implements hook_menu().
 */
function pinger_menu() {
  $items = array();
  $items['admin/config/services/pinger'] = array(
    'title' => 'Pinger add site form.',
    'route_name' => 'pinger.admin',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function pinger_permission() {
  return array(
    'administer pinger' => array(
      'title' => t('Administer pinger'),
      'description' => t('Manage sites to be monitored.'),
    ),
  );
}

/**
  * Implements hook_cron().
  */
function pinger_cron(){
  // Get pending sites that need to be run through monitoring checks.
  $dataset = db_query('SELECT id FROM {pinger_sites}')->fetchCol();
  $queue = Drupal::queue('pinger_queue');
  foreach ($dataset as $data) {
    $site = entity_load('pinger_site', $data);
    $queue->createItem($site);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function pinger_queue_info() {
  $queues['pinger_queue'] = array(
    'worker callback' => 'pinger_queue_worker',
    'cron' => array(
      'time' => 60,
    ),
  );

  return $queues;
}

/**
 * Worker function for pinger queue.
 */
function pinger_queue_worker(PingerSite $site){

  $id = $site->id();
  $url = $site->getUrl();

  $request = Drupal::httpClient()->get($url);
  try {
    $pre_time = microtime(TRUE);
    $fetch = $request->send();
    $post_time = microtime(TRUE);
    // Expected result.
    $duration = $post_time - $pre_time;

    $response = entity_create('pinger_response', array(
      'site_id' => $id,
      'response_code' => $fetch->getStatusCode(),
      'response_time' => $duration,
      'timestamp' => time(),
    ));
    $response->save();
  }
  catch (RequestException $e) {
    watchdog_exception('pinger', $e);
  }
}
