<?php

/**
 * @file
 * Hook implementations of commerce_cashpresso module.
 */

use Drupal\commerce\PurchasableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_display_build_alter().
 */
function commerce_cashpresso_entity_display_build_alter(array &$build, $context) {
  $entity = $context['entity'];
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $context['display'];
  if ($entity instanceof PurchasableEntityInterface) {
    /** @var \Drupal\commerce_cashpresso\CashpressoProductLevelPreviewRendererInterface $product_level_preview_renderer */
    $product_level_preview_renderer = \Drupal::service('commerce_cashpresso.product_level_preview_renderer');

    foreach ($build as $field_name => $render_array) {
      if (!empty($build[$field_name]['#field_type']) && $build[$field_name]['#field_type'] == 'commerce_price') {
        $component = $display->getComponent($field_name);
        if (!empty($component['third_party_settings'])) {
          foreach ($component['third_party_settings'] as $third_party_settings) {
            if (!empty($third_party_settings['cashpresso_show_preview'])) {
              $adjustment_types = [];
              if (array_key_exists('adjustment_types', $component['settings'])) {
                $adjustment_types = array_filter($component['settings']['adjustment_types']);
              }
              elseif (array_key_exists('adjustment_types', $third_party_settings)) {
                $adjustment_types = array_filter($third_party_settings['adjustment_types']);
              }
              $minimum_price = isset($third_party_settings['cashpresso_min_price']) ? $third_party_settings['cashpresso_min_price'] : 40;
              if (empty($build[$field_name][0]['#suffix'])) {
                $build[$field_name][0]['#suffix'] = '';
              }
              if (!empty($third_party_settings['cashpresso_use_static_label'])) {
                $build[$field_name][0]['#suffix'] .= $product_level_preview_renderer->renderCashpressoStaticLabelPreview($entity, $adjustment_types, $minimum_price, !empty($third_party_settings['cashpresso_enable_direct_checkout']));
              }
              else {
                $build[$field_name][0]['#suffix'] .= $product_level_preview_renderer->renderCashpressoPreview($entity, $adjustment_types, $minimum_price, !empty($third_party_settings['cashpresso_enable_direct_checkout']));
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function commerce_cashpresso_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element = [];
  if ($plugin->getPluginId() == 'commerce_price_calculated') {
    $element = commerce_cashpresso_build_product_preview_field_settings($plugin, 'commerce_cashpresso');
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function commerce_cashpresso_field_formatter_settings_summary_alter(array &$summary, $context) {
  /** @var \Drupal\Core\Field\FormatterInterface $formatter */
  $formatter = $context['formatter'];
  $cp_settings = $formatter->getThirdPartySettings('commerce_cashpresso');
  if (!empty($cp_settings)) {
    commerce_cashpresso_alter_field_formatter_summary_product_preview($summary, $cp_settings);
  }
}

/**
 * Adds the third party settings needed for product level preview.
 *
 * This is used by our hook_field_formatter_third_party_settings_form()
 * implementation for adding the product level preview markup settings to the
 * 'commerce_price_calculated' field formatter. We have refactored this part
 * into this standalone function for easier re-use with custom field
 * implementations.
 *
 * @param \Drupal\Core\Field\FormatterInterface $plugin
 *   The field formatter plugin.
 * @param string $module
 *   The module that is providing the third party settings. Defaults to
 *   'commerce_cashpresso', but needs to be overridden for custom fields.
 *
 * @return array
 *   Form elements, as expected by
 *   hook_field_formatter_third_party_settings_form().
 */
function commerce_cashpresso_build_product_preview_field_settings(FormatterInterface $plugin, $module = 'commerce_cashpresso') {
  return [
    'cashpresso_show_preview' => [
      '#type' => 'checkbox',
      '#title' => t('Show cashpresso preview'),
      '#description' => t('Whether to display the cashpresso product level preview.'),
      '#default_value' => $plugin->getThirdPartySetting($module, 'cashpresso_show_preview', TRUE),
    ],
    'cashpresso_min_price' => [
      '#type' => 'number',
      '#min' => 0,
      '#step' => 1,
      '#title' => t('cashpresso minimum price'),
      '#description' => t('Define a minimum price for showing the product level preview.'),
      '#default_value' => $plugin->getThirdPartySetting($module, 'cashpresso_min_price', 40),
    ],
    'cashpresso_use_static_label' => [
      '#type' => 'checkbox',
      '#title' => t('Cashpresso: use static label display'),
      '#description' => t('If you do not want to add a script to your product page that modifies the DOM tree you can use our static label version. It offers the basic preview functionality, but has some drawbacks compared with the normal product level integration.'),
      '#default_value' => $plugin->getThirdPartySetting($module, 'cashpresso_use_static_label', FALSE),
    ],
    'cashpresso_enable_direct_checkout' => [
      '#type' => 'checkbox',
      '#title' => t('Cashpresso: enable direct checkout'),
      '#default_value' => $plugin->getThirdPartySetting($module, 'cashpresso_enable_direct_checkout', TRUE),
    ],
  ];
}

/**
 * Extends the given field formatter summary text with the cashpresso settings.
 *
 * Like commerce_cashpresso_build_product_preview_field_settings(), this is
 * implemented in a standalone function, so that any custom field formatter,
 * which wants to add the cashpresso product preview to the field output, can
 * re-use this function. For correct usage, see our hook implementation of
 * hook_field_formatter_settings_summary_alter().
 *
 * @param array $summary
 *   An array of summary messages.
 * @param array $cashpresso_product_preview_settings
 *   An array of cashpresso product preview settings. The contained fields must
 *   match the ones defined by
 *   commerce_cashpresso_build_product_preview_field_settings().
 */
function commerce_cashpresso_alter_field_formatter_summary_product_preview(array &$summary, array $cashpresso_product_preview_settings) {
  if (array_key_exists('cashpresso_show_preview', $cashpresso_product_preview_settings)) {
    if (!empty($cashpresso_product_preview_settings['cashpresso_show_preview'])) {
      $summary[] = t('Show cashpresso product preview.');
      if (!empty($cashpresso_product_preview_settings['cashpresso_min_price'])) {
        $summary[] = t('Minimum price for showing cashpresso product preview: @price.', ['@price' => $cashpresso_product_preview_settings['cashpresso_min_price']]);
      }
      if (!empty($cashpresso_product_preview_settings['cashpresso_use_static_label'])) {
        $summary[] = t('Cashpresso: use static label display');
      }
      if (!empty($cashpresso_product_preview_settings['cashpresso_enable_direct_checkout'])) {
        $summary[] = t('Cashpresso: direct checkout is enabled');
      }
      else {
        $summary[] = t('Cashpresso: direct checkout is disabled');
      }
    }
    else {
      $summary[] = t('Do not show cashpresso product preview.');
    }
  }
}
