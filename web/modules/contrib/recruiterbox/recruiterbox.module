<?php

/**
 * @file
 * Defines common functionality for all Recruiter box modules.
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function recruiterbox_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the recruiterbox module.
    case 'help.page.recruiterbox':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Recruiterbox is used to access/use recruiterbox.com Api.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function recruiterbox_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  /*
   * Get the Recruiter box configuration object.
   */
  $recruiterbox_config = \Drupal::config('recruiterbox.recruiterboxapplysettings');

  /*
   * Get total field mapping count.
   */
  $recruiterbox_forms_data_count = $recruiterbox_config->get('recruiterbox_form_fieldset_count');
  for ($i = 1; $i <= $recruiterbox_forms_data_count; $i++) {
    /*
     * Get the Drupal form id to add Recruiter box feature.
     */
    $drupal_form_id = key($recruiterbox_config->get($i));
    if ($form_id == $drupal_form_id) {
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          /*
           * Set recruiterbox config key in $form
           */
          $form['recruiterbox_key'] = [
            '#type' => 'value',
            '#value' => $i . '.' . $drupal_form_id,
          ];
          $form['actions'][$action]['#submit'][] = 'recruiterbox_form_submit';
        }
      }
      continue;
    }
  }
}

/**
 * Custom form submit handler for Recruiter box API services.
 */
function recruiterbox_form_submit(&$form, FormStateInterface $form_state) {
  $entity_obj = $form_state->getFormObject()->getEntity();
  if (!empty($entity_obj) && is_object($entity_obj)) {
    global $base_url;

    /*
     * Get recruiterbox config key From $form
     */
    $recruiterbox_config_key = $form['recruiterbox_key']['#value'];

    /*
     * Get the Recruiter box configuration object.
     */
    $recruiterbox_config = \Drupal::config('recruiterbox.recruiterboxapplysettings');

    /*
     * Get the Recruiter box Opening ID.
     */
    $recruiter_box_opening_id = $recruiterbox_config->get($recruiterbox_config_key . '.recruiter_box_opening_id');

    /*
     * Get the Recruiter box/Drupal initial form fields mapping.
     */
    $recruiter_box_initial_field_mapping = $recruiterbox_config->get($recruiterbox_config_key . '.initial_forms_field_mapping');

    /*
     * Get the Recruiter box/Drupal profile form fields mapping.
     */
    $recruiter_box_profile_field_mapping = $recruiterbox_config->get($recruiterbox_config_key . '.profile_forms_field_mapping');

    /*
     * Prepare Json array for Recruiter box post api.
     * Add source with recruiter box json data
     */
    $recruiter_box_data_json['source'] = $base_url;

    /*
     * Check and Add Opening id with recruiter box json data
     */
    if (isset($recruiter_box_opening_id) && $recruiter_box_opening_id != NULL) {
      $recruiter_box_data_json['opening_id'] = (int)$recruiter_box_opening_id;
    }

    /*
     * Prepare initial fields Json array for Recruiter box post api.
     */
    $recruiter_box_initial_field_mapping_arr = explode(PHP_EOL, $recruiter_box_initial_field_mapping);
    foreach ($recruiter_box_initial_field_mapping_arr as $recruiter_box_initial_field_value) {
      $recruiter_box_fields = explode('|', $recruiter_box_initial_field_value);
      if (!empty($recruiter_box_fields)) {
        $drupal_field_machine_name = trim($recruiter_box_fields[0]);
        $recruiter_box_field_machine_name = trim($recruiter_box_fields[1]);

        $drupal_field_type = $entity_obj->get($drupal_field_machine_name)->getFieldDefinition()->getType();
        if (isset($drupal_field_type) && $drupal_field_type != NULL) {
          if ($recruiter_box_field_machine_name == 'resume' && $drupal_field_type == 'file') {

            //Check Resume Field's value
            if (!isset($entity_obj->get($drupal_field_machine_name)->entity->uri->value)) {
              continue;
            }
            $resume_uri = $entity_obj->get($drupal_field_machine_name)->entity->uri->value;
            $resume_url = \Drupal::service('file_system')->realpath($resume_uri);
            $fhandle = fopen($resume_url, 'r');
            $resume_content = fread($fhandle, filesize($resume_url));
            fclose($fhandle);

            $recruiter_box_data_json[$recruiter_box_field_machine_name] = [
              "content" => base64_encode($resume_content),
              "file_name" => 'Resume',
            ];
          }
          else {
            //Check Others Field's value
            if (!isset($entity_obj->get($drupal_field_machine_name)->value)) {
              continue;
            }
            $drupal_field_val = $entity_obj->get($drupal_field_machine_name)->value;
            $recruiter_box_data_json[$recruiter_box_field_machine_name] = $drupal_field_val;
          }
        }
      }
    }

    /*
     * Prepare profile fields Json array for Recruiter box post api.
     */
    $recruiter_box_profile_field_mapping_arr = explode(PHP_EOL, $recruiter_box_profile_field_mapping);
    foreach ($recruiter_box_profile_field_mapping_arr as $recruiter_box_profile_field_value) {
      $recruiter_box_fields = explode('|', $recruiter_box_profile_field_value);
      if (!empty($recruiter_box_fields[0])) {
        $drupal_field_machine_name = trim($recruiter_box_fields[0]);
        $recruiter_box_field_machine_name = trim($recruiter_box_fields[1]);

        $drupal_field_type = $entity_obj->get($drupal_field_machine_name)->getFieldDefinition()->getType();
        $drupal_field_label = $entity_obj->get($drupal_field_machine_name)->getFieldDefinition()->getLabel();

        if (isset($drupal_field_type) && $drupal_field_type != NULL) {
          if ($drupal_field_type == 'list_string') {

            //Check list_string profile Field's value
            if (empty($entity_obj->get($drupal_field_machine_name)->getValue())) {
              continue;
            }
            $drupal_field_value_array = $entity_obj->get($drupal_field_machine_name)->getValue();
            $drupal_field_value_string = '';
            foreach ($drupal_field_value_array as $field_key => $field_value) {
              $drupal_field_value_string .= $field_value['value'] . ', ';
            }
            $drupal_field_value_string = rtrim($drupal_field_value_string, ', ');

            $recruiter_box_data_json['profile_data'][] = [
              'name' => $drupal_field_label,
              'value' => $drupal_field_value_string,
            ];
          }
          elseif ($drupal_field_type == 'timestamp') {
            //Check timestamp profile Field's value
            if (!isset($entity_obj->get($drupal_field_machine_name)->value)) {
              continue;
            }
            $drupal_field_val = $entity_obj->get($drupal_field_machine_name)->value;
            $recruiter_box_data_json['profile_data'][] = [
              'name' => $drupal_field_label,
              'value' => format_date($drupal_field_val, 'custom', 'j M, Y'),
            ];
          }
          elseif ($drupal_field_type == 'datetime') {
            //Check datetime profile Field's value
            if (!isset($entity_obj->get($drupal_field_machine_name)->value)) {
              continue;
            }
            $drupal_field_val = $entity_obj->get($drupal_field_machine_name)->value;
            $drupal_field_val_timestamp = strtotime($drupal_field_val);
            $recruiter_box_data_json['profile_data'][] = [
              'name' => $drupal_field_label,
              'value' => format_date($drupal_field_val_timestamp, 'custom', 'j M, Y'),
            ];
          }
          else {
            //Check Other profile Field's value
            if (!isset($entity_obj->get($drupal_field_machine_name)->value)) {
              continue;
            }
            $drupal_field_val = $entity_obj->get($drupal_field_machine_name)->value;
            $recruiter_box_data_json['profile_data'][] = [
              'name' => $drupal_field_label,
              'value' => $drupal_field_val,
            ];
          }
        }
      }
    }

    if (!empty($recruiter_box_data_json)) {
      \Drupal::service('recruiterbox.recruiter_apply')->recruiterApply($recruiter_box_data_json);
    }
  }
}
