<?php

/**
 * @file
 * Insert, Update and theme function.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_theme().
 */
function term_revision_theme() {
  $theme['view_revision'] = [
    'variables' => [
      'revision_data' => NULL,
    ],
    'template' => 'view-revision',
  ];
  return $theme;
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function term_revision_taxonomy_term_update(EntityInterface $entity) {
  term_revision_create_term_revision($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function term_revision_taxonomy_term_insert(EntityInterface $entity) {
  term_revision_create_term_revision($entity);
}

/**
 * Function to insert revision information into taxonomy revision table.
 */
function term_revision_create_term_revision($term) {
  // entity_id.
  $entity_id = $term->id();

  // changed.
  $changed = $term->getChangedTime();

  // langcode.
  $langcode = $term->get('langcode')->value;

  // fields.
  $fields = $term->getFields();

  // Serialized data.
  $serialized_data = serialize($fields);

  // Revision User.
  $userCurrent = \Drupal::currentUser();
  $userId = $userCurrent->id();

  $values = [$entity_id, $serialized_data, $changed, $langcode, $userId];

  // Database Connection Object.
  $connection = Database::getConnection();
  // Database Schema.
  $schema = $connection->schema();

  if ($schema->tableExists('term_revision')) {
    $connection->insert('term_revision')
      ->fields([
        'entity_id',
        'revision_data',
        'changed',
        'langcode',
        'revision_user',
      ], $values)
      ->execute();
  }
}

/**
 * Implements hook_help().
 */
function term_revision_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.term_revision':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module allows you to create revisions for a taxonomy term. Also, you can view all the created revisions in tabular form, view the contents of a particular revision, delete a revision and revert to a previous revision.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function term_revision_taxonomy_term_delete(EntityInterface $entity) {
  // entity_id.
  $entity_id = $entity->id();
  // Database Connection Object.
  $connection = Database::getConnection();
  // Database Schema.
  $schema = $connection->schema();

  // Delete all revision of a term when the term is deleted.
  if ($schema->tableExists('term_revision')) {
    $connection->delete('term_revision')
      ->condition('entity_id', intval($entity_id))
      ->execute();
  }
}
