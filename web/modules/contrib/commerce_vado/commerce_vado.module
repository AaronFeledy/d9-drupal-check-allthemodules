<?php

/**
 * @file
 * Defines the "meat and potatoes" of Vado, aka hooks to add addons to orders.
 */

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_order\Entity\OrderItem;
use Drupal\commerce_product\Entity\ProductVariation;

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Adds an addon to the cart if it's not already there, or locks the quantity
 * if required. The meat and potatoes of this module.
 */
function commerce_vado_commerce_order_presave(OrderInterface $order) {
  $order_items = $order->getItems();
  foreach ($order_items as $order_item) {
    /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $product_variation */
    $product_variation = $order_item->getPurchasedEntity();
    if ($product_variation && $product_variation->hasField('field_variation_addon')
       && $product_variation->get('field_variation_addon')->getValue()[0]['target_id']) {

      $child = ProductVariation::load($product_variation->get('field_variation_addon')
        ->getValue()[0]['target_id']);
      $sync_quantity = $product_variation->hasField('field_variation_addon_sync');
      if ($sync_quantity && !empty($product_variation->get('field_variation_addon_sync')->getValue())) {
        $sync_quantity = $product_variation->get('field_variation_addon_sync')->getValue()[0]['value'] == 1;
      }
      $child_order_item = OrderItem::create([
        'type' => 'default',
        'unit_price' => $child->getPrice(),
        'purchased_entity' => $child->id(),
        'quantity' => $sync_quantity ? $order_item->getQuantity() : 1,
      ]);

      $child_order_item->save();
      $child_order_item = OrderItem::load($child_order_item->id());

      if (!commerce_vado_order_has_item($order, $child_order_item)) {
        $order->addItem($child_order_item);
      }

      foreach ($order_items as $order_item_round2) {
        if ($order_item_round2->getPurchasedEntityId() === $child->id()) {
          if ($product_variation->get('field_variation_addon_sync')->getValue()[0]['value'] === '1') {
            $order->removeItem($order_item_round2);
            $order->addItem($child_order_item);
          }
        }
      }
    }
  }
}

/**
 * Custom function for verifying if we have a specific item already in order.
 *
 * Written because order->hasItem() is strict about the order item ID rather
 * than checking the purchasable entity ID, which is what we really care about
 * in this case.
 *
 * @param \Drupal\commerce_order\Entity\OrderInterface $order
 *   Order entity to check against.
 * @param \Drupal\commerce_order\Entity\OrderItem $orderItem
 *   Custom order entity to check presence of.
 *
 * @return bool
 *   FALSE if the item is not found, or TRUE if it is.
 */
function commerce_vado_order_has_item(OrderInterface $order, OrderItem $orderItem) {
  foreach ($order->getItems() as $item) {
    if ($item->getPurchasedEntityId() == $orderItem->getPurchasedEntityId()) {
      return TRUE;
    }
  }
  return FALSE;
}
