<?php

/**
 * @file
 * Contains media_lazy_load_formatter.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_help().
 */
function media_lazy_load_formatter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the media_lazy_load_formatter module.
    case 'help.page.media_lazy_load_formatter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds option to lazy load in various media field formatters.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function media_lazy_load_formatter_field_formatter_settings_summary_alter(&$summary, $context) {
  // Append a message to the summary when media has
  // media_lazy_load_formatter_enabled set to TRUE for the current view mode.
  if ($context['formatter']->getPluginId() == 'image') {
    if ($context['formatter']->getThirdPartySetting('media_lazy_load_formatter', 'media_lazy_load_formatter_enabled')) {
      $summary[] = t('Lazy load this media field.');
    }
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function media_lazy_load_formatter_field_formatter_third_party_settings_form($plugin, $field_definition, $view_mode, $form, $form_state) {
 $element = array();
  // Add a 'media_lazy_load_formatter_enabled' checkbox to the settings form for media field
  // formatters.
  if ($plugin->getPluginId() == 'image') {
    $element['media_lazy_load_formatter_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Lazy load media'),
      '#default_value' => $plugin->getThirdPartySetting('media_lazy_load_formatter', 'media_lazy_load_formatter_enabled'),
    );
  }
  return $element;
}

/**
 * Implements hook_preprocess_field().
 */
function media_lazy_load_formatter_preprocess_field(&$variables) {
  // Provide an extra variable to the field template when the field uses
  // a formatter of a media type
  if ($variables['element']['#formatter'] == 'image') {

    $entity = $variables['element']['#object'];
    $view_mode = $variables['element']['#view_mode'];
    $field_name = $variables['element']['#field_name'];

    // get the field formatter settings...
    $entity_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
    $field_display = $entity_display->getComponent($field_name);

    // make the setting available in the field template
    $variables['media_lazy_load_formatter_media_lazy_load_formatter_enabled'] = $field_display['third_party_settings']['media_lazy_load_formatter']['media_lazy_load_formatter_enabled'];

    if ($variables['media_lazy_load_formatter_media_lazy_load_formatter_enabled']) {
      $image = $variables['items'][0]['content']['#item']->getValue();
      $file = File::load($image['target_id']);
      if ($variables['items'][0]['content']['#image_style']) {
        $image_style = ImageStyle::load($variables['items'][0]['content']['#image_style']);
        $style_config = reset($image_style->getEffects()->getConfiguration());
        if (isset($style_config['data']['width'])) {
          $variables['items'][0]['content']['#item_attributes']['width'] = $style_config['data']['width'] . 'px';
        }
        if (isset($style_config['data']['height'])) {
          $variables['items'][0]['content']['#item_attributes']['height'] = $style_config['data']['height'] . 'px';
        }
        $image_url = $image_style->buildUrl($file->getFileUri());
      }
      else {
        $image_url = $file->url();
      }
      $image['target_id'] = NULL;
      $variables['items'][0]['content']['#image_style'] = NULL;
  
      $variables['items'][0]['content']['#item_attributes']['data-lazy-loaded-by'] = 'media_lazy_load_formatter';
      $variables['items'][0]['content']['#item_attributes']['data-src'] = $image_url;
      $variables['items'][0]['content']['#item']->setValue($image);

      $variables['#attached']['library'][] = 'media_lazy_load_formatter/media_lazy_load_formatter_images';
    }
  }
}
