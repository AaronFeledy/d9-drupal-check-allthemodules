<?php

/**
 * @file
 * Create Droogle Hangout.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function droogle_hangout_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.droogle_hangout':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The module allows Google Hangouts to be created from within your Drupal site.") . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Google-side Configuration') . '</dt>';
      $output .= '<dd>' . t('See README.txt for detailed instructions.') . '</dd>';
      $output .= '<dt>' . t('Permissions for Droogle Hangout') . '</dt>';
      $output .= '<dd>' . t('Set permissions for which roles can administer Droogle Hangout
  in Administration » People » Permissions.</dd>');
      $output .= '<dt>' . t('Administer Droogle Hangout') . '</dt>';
      $output .= '<dd>' . t('Grant the Administer Droogle Hangout permission to any roles that
  should have the ability to configure Droogle Hangout.  Enter the Google Console information in
  Administration » Configuration » Droogle Hangout') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function droogle_hangout_theme($existing, $type, $theme, $path) {
  return array(
    'droogle_hangout_invite_button' => array(
      'variables' => array(
        'email' => NULL,
        'fullname' => NULL,
        'src' => NULL,
        'text' => TRUE,
      ),
      'file' => 'droogle_hangout.inc',
      'template' => 'droogle-hangout-invite-button',
    ),
    'droogle_hangout_contact_me_popup' => array(
      'variables' => array(
        'uid' => NULL,
        'email' => TRUE,
        'chat' => FALSE,
        'hangout' => FALSE,
      ),
      'file' => 'droogle_hangout.inc',
      'template' => 'droogle-hangout-popup',
    ),
    'droogle_hangout_invitee_window' => array(
      'variables' => array(
        'scheduler' => NULL,
      ),
      'file' => 'droogle_hangout.inc',
      'template' => 'droogle-hangout-invitee-window',
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function droogle_hangout_theme_registry_alter(&$theme_registry) {
  if ($theme_registry['username']) {
    // Create new function for theme_username to use.
    $theme_registry['username']['function'] = 'theme_droogle_hangout_username_output';
  }
}

/**
 * Implements function for theme_username to use.
 */
function theme_droogle_hangout_username_output($variables) {

  if ($variables['uid']) {
    $account = User::load($variables['uid']);
    $email = $account->getEmail();
    $username = $account->getUsername();
    //Link to user profile page.
    $profile_link = Url::fromRoute('entity.user.canonical', [
      'user' => $account->id(),
    ]);
    $username_link = \Drupal::l($username, $profile_link);

    // If Realname module is installed then use realname for fullname.
    // Otherwise, get the account username.
    if (\Drupal::moduleHandler()->moduleExists('realname')) {
      $realname = db_query("SELECT realname
                            FROM {realname}
                            WHERE uid = :uid", array(':uid' => $account->id()))->fetchField();
    }
    elseif (!\Drupal::moduleHandler()->moduleExists('realname') &&
    db_table_exists('field_data_field_first_name') &&
    db_table_exists('field_data_field_last_name')) {
      $realname = db_query("SELECT CONCAT(field_first_name_value, ' ', field_last_name_value) AS fullname
                            FROM {users} u
                            LEFT OUTER JOIN {field_data_field_first_name} fn ON u.uid = fn.entity_id
                            LEFT OUTER JOIN {field_data_field_last_name} ln ON u.uid = ln.entity_id
                            WHERE uid = :uid", array(':uid' => $account->id()))->fetchField();
    }
    else {
      $realname = '';
    }

    $hangout_button_array = array(
      '#theme' => 'droogle_hangout_invite_button',
      '#email' => $email,
      '#fullname' => $realname == '' ? $username : $realname,
      '#text' => FALSE,
    );
    $hangout_button = \Drupal::service('renderer')->render($hangout_button_array);

    // If only user name then use link with username. Otherwise use link with realname.
    $realname_link = $realname == '' ? $username_link : \Drupal::l($realname, $profile_link);

    $output = $realname_link . $hangout_button;

    return $output;
  }
}

/**
 * Implements hook_page_alter().
 */
function droogle_hangout_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['library'][] = 'droogle_hangout/droogle.hangout.main';
  $libraries = libraries_get_libraries();
  $datetimepicker = FALSE;
  if (array_key_exists('datetimepicker', $libraries)) {
    $datetimepicker = TRUE;
  }

  if ($datetimepicker) {
    global $base_url;
    $attachments['#attached']['library'][] = 'droogle_hangout/droogle.hangout.scheduler';
    $attachments['#attached']['drupalSettings']['droogle_hangout']['droogleHangout']['calendar_img_path'] = $base_url . '/' . drupal_get_path('module', 'droogle_hangout') . '/images/calendar.png';
  }
}

/**
 * Converts date to RFC3339 format for Google Calendar compatibility.
 */
function date3339($timestamp = 0) {
  if (!$timestamp) {
    $timestamp = time();
  }
  $date = date('Y-m-d\TH:i:s', $timestamp);

  $matches = array();
  if (preg_match('/^([\-+])(\d{2})(\d{2})$/', date('O', $timestamp), $matches)) {
    $date .= $matches[1] . $matches[2] . ':' . $matches[3];
  }
  else {
    $date .= 'Z';
  }

  return $date;
}

/**
 * Implements hook_mail().
 */
function droogle_hangout_mail($key, &$message, $params) {
  switch ($key) {
    case 'droogle_hangout_alert':
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      }

      if (isset($params['body'])) {
        $message['body'] = $params['body'];
      }

      if (isset($params['headers']) && is_array($params['headers'])) {
        $message['headers'] += $params['headers'];
      }
      break;
  }
}

/**
 * Implements hook_libraries_info().
 */
function droogle_hangout_libraries_info() {
  $libraries['google_api_php_client'] = array(
    'name' => 'Google API PHP client',
    'vendor url' => 'https://console.developers.google.com',
    'download url' => 'https://github.com/hurley-drupal/google-api-php-client',
    'files' => array(
      'php' => array(
        'Google_Client.php',
      ),
    ),
  );

  return $libraries;
}