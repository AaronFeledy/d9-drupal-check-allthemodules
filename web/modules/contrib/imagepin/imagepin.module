<?php

/**
 * @file
 * Imagepin module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function imagepin_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.imagepin':
      return '<h2>' . t("Quick start") . '</h2>'
        . '<ul><li>' . t("Go to the \"Manage display\" section of your content type and choose the view mode where you'd like the pins to be displayed.") . '</li>'
        . '<li>' . t("This module gives you the option for enabling users to pin widgets for the Image and Responsive image formatter. Enable it as you like and optionally set a breakpoint for mobile and desktop resolutions.") . '</li>'
        . '<li>' . t("Editors now get a link on image fields for pinning widgets on each uploaded image.") . '</li>'
        . '<li>' . t("Set the pins, save the positions.") . '</li>'
        . '<li>' . t("View your content.") . '</li></ul>';
  }
}

/**
 * Implements hook_theme().
 */
function imagepin_theme($existing, $type, $theme, $path) {
  return [
    'imagepin_widgets' => [
      'variables' => [
        'widgets' => [],
        'attach_id' => '',
        'breakpoint' => '1024',
      ],
      'file' => 'imagepin.theme.inc',
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 */
function imagepin_library_info_build() {
  $libraries = [];
  $libraries['extensions'] =
    ['dependencies' => ['core/drupal', 'core/jquery'], 'css' => [], 'js' => []];

  if (\Drupal::service('module_handler')->moduleExists('slick')) {
    $libraries['extensions']['dependencies'][] = 'slick/slick';
    $libraries['extensions']['css']['base']['css/extensions/imagepin.slick.css'] = [];
    $libraries['extensions']['js']['js/extensions/imagepin.slick.js'] = [];
  }

  return $libraries;
}

/**
 * Implements hook_entity_insert().
 */
function imagepin_entity_insert(EntityInterface $entity) {
  $widget_repository = \Drupal::service('imagepin.widget_repository');
  $widget_repository->adoptFromNew($entity);
}

/**
 * Implements hook_entity_delete().
 */
function imagepin_entity_delete(EntityInterface $entity) {
  $widget_repository = \Drupal::service('imagepin.widget_repository');
  $widget_repository->deleteAllByEntity($entity);
}

/**
 * Implements hook_entity_translation_delete().
 */
function imagepin_entity_translation_delete(EntityInterface $translation) {
  $widget_repository = \Drupal::service('imagepin.widget_repository');
  $widget_repository->deleteAllByEntity($translation, $translation->language()->getId());
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function imagepin_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  if ($field_definition->getType() != 'image') {
    return [];
  }

  \Drupal::service('module_handler')->loadInclude('imagepin', 'inc', 'imagepin.forms');
  return imagepin_build_formatter_settings_form($plugin, $field_definition, $view_mode, $form, $form_state);
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function imagepin_field_formatter_settings_summary_alter(&$summary, $context) {
  if ($context['field_definition']->getType() != 'image') {
    return;
  }

  if (($formatter = $context['formatter']) && ($formatter->getThirdPartySetting('imagepin', 'pinable'))) {
    $breakpoint = $formatter->getThirdPartySetting('imagepin', 'breakpoint');
    if (empty($breakpoint)) {
      $variant = is_numeric($breakpoint) ? t('Desktop') : t('Mobile');
      $breakpoint_info = t('Always display <strong>@variant</strong> variant.', ['@variant' => $variant]);
    }
    else {
      $breakpoint_info = t('Breakpoint switch at <strong>@breakpoint px</strong>', ['@breakpoint' => $breakpoint]);
    }
    $style = $formatter->getThirdPartySetting('imagepin', 'image_style');
    $style_info = !empty($style) ? t('Style for dragging: <strong>@style</strong>.', ['@style' => $style]) : '';
    $summary[] = t('<strong>Pins are enabled</strong>. @style_info @breakpoint_info', ['@style_info' => $style_info, '@breakpoint_info' => $breakpoint_info]);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function imagepin_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  if ($field_definition->getType() != 'image'
    || empty($element['#default_value']['fids'])
    || !\Drupal::currentUser()->hasPermission('pin widgets on images')) {
    return;
  }

  \Drupal::service('module_handler')->loadInclude('imagepin', 'inc', 'imagepin.forms');
  imagepin_add_link_to_form_element($element, $form_state, $context);
}

/**
 * Implements template_preprocess_field().
 */
function imagepin_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#field_type'] == 'image') {
    \Drupal::service('module_handler')->loadInclude('imagepin', 'inc', 'imagepin.attach');
    imagepin_attach($variables['element'], $variables['items']);
  }
}
