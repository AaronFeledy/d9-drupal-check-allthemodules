<?php

/**
 * @file
 * The baidu_push module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AnonymousUserSession;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function baidu_push_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the keycloak module.
    case 'help.page.baidu_push':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Baidu Push module allows you to actively inform the Baidu search engine about your site's publicly accessible page URLs.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Baidu Auto Push') . '</dt>';
      $output .= '<dd>' . t("Includes a JavaScript to your public pages that automatically pushes it's URL to Baidu when a visitor opens the page in his web browser.") . '</dd>';
      $output .= '</dl>';
      return $output;

  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function baidu_push_page_attachments_alter(array &$build) {
  /* @var $baidu_push \Drupal\baidu_push\Service\BaiduPushServiceInterface */
  $baidu_push = \Drupal::service('baidu_push.baidu_push');

  // Whether Baidu Auto Push is enabled.
  if (!$baidu_push->isAutoPushEnabled()) {
    return;
  }

  // Get an instance of the anonymous user.
  $anonymous_user = new AnonymousUserSession();
  $current_url = Url::fromRoute('<current>')->toString();
  // Whether the anonymous user can not access to the current page.
  if (!Url::fromUserInput($current_url)->access($anonymous_user)) {
    return;
  }

  // Check auto push conditions.
  $conditions = $baidu_push->getAutoPushConditions();
  foreach ($conditions as $condition) {
    if (!$condition->evaluate()) {
      return;
    }
  }

  // Attach auto push library.
  $build['#attached']['library'][] = 'baidu_push/baidu_push.auto_push';
}
