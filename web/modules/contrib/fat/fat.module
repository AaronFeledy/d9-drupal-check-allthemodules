<?php

use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * Implements hook_menu().
 */
function fat_menu() {
  $items = array();

  $items['fat-test-radio'] = array(
    'title' => 'Test multiple radio',
    'description' => 'Test multiple radio.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fat_test_radio'),
    'access arguments' => array('access content'),
  );

  $items['fat-test-collapsible-fields'] = array(
    'title' => 'Test collapsible fields',
    'description' => 'Test collapsible fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fat_test_collapsible_fields'),
    'access arguments' => array('access content'),
  );

  $items['fat-test-autocomplete'] = array(
    'title' => 'Test autocomplete',
    'description' => 'Test autocomplete.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fat_test_autocomplete'),
    'access arguments' => array('access content'),
  );

  $items['fat-test-autocomplete-callback'] = array(
    'title' => 'Test autocomplete callback',
    'description' => 'Test autocomplete callback.',
    'type' => MENU_CALLBACK,
    'page callback' => 'fat_test_autocomplete_callback',
    'access arguments' => array('access content'),
  );

  $items['fat-test-machine-name'] = array(
    'title' => 'Test machine name',
    'description' => 'Test machine name.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fat_test_machine_name'),
    'access arguments' => array('access content'),
  );

  $items['fat-test-tableselect'] = array(
    'title' => 'Test tableselect',
    'description' => 'Test tableselect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fat_test_tableselect'),
    'access arguments' => array('access content'),
  );

  $items['fat-test-states'] = array(
    'title' => 'Test states',
    'description' => 'Test states',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fat_test_states'),
    'access arguments' => array('access content'),
  );

  $items['drupal-ajax-1473314'] = array(
    'title' => 'Drupal ajax example',
    'access callback' => TRUE,
    'page callback' => 'fat_drupal_ajax_page',
  );
  $items['drupal-ajax-1473314/%/%'] = array(
    'access callback' => TRUE,
    'page callback' => 'fat_drupal_ajax_responder',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function fat_test_radio($form_state) {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test multiple radio.') . '</strong></p>',
  );

  $form['radios_test'] = array(
    '#type' => 'radios',
    '#title' => 'test',
    '#options' => array(
      0 => 'cat',
      1 => 'dog',
      2 => 'turkey',
      3 => 'chicken',
    ),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#weight' => 100
  );

  return $form;
}

function fat_test_collapsible_fields() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test collapsible fields.') . '</strong></p>',
  );

  $form['details1'] = array(
    '#type' => 'details',
    '#title' => t('Details 1 - Collapsible and not collapsed'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['details1']['text1'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['details2'] = array(
    '#type' => 'details',
    '#title' => t('Details 2 - Collapsible and collapsed'),
    '#weight' => 10,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['details2']['text2'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['details3'] = array(
    '#type' => 'details',
    '#title' => t('Details 3 - Not collapsible and not collapsed'),
    '#weight' => 15,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['details3']['text3'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['details4'] = array(
    '#type' => 'details',
    '#title' => t('Details 4 - Not collapsible and collapsed'),
    '#weight' => 20,
    '#collapsible' => FALSE,
    '#collapsed' => TRUE,
  );
  $form['details4']['text4'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  return $form;
}

function fat_test_autocomplete() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test autocomplete.') . '</strong></p>',
  );

  $form['text1'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path' => 'fat-test-autocomplete-callback',
    '#required' => TRUE,
  );

  return $form;
}

function fat_test_autocomplete_callback() {
  static $possible_matches = array(
'aaa' => 'aaa',
 'aaabbb' => 'aaabbb',
 'bbb' => 'bbb',
 'ccc' => 'ccc',
  );
  $matches = array();
  if ($string = drupal_container()->get('request')->query->get('q')) {
    foreach ($possible_matches as $key => $value) {
      if (strpos($value, $string) !== FALSE) {
        $matches[$key] = $value;
      }
    }
  }

  return new JsonResponse($matches);
}

function fat_test_machine_name() {

  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test machine name.') . '</strong></p>',
  );

  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => '',
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => '',
    '#maxlength' => 10,
    '#machine_name' => array(
      'exists' => 'node_type_load',
      'source' => array('name'),
    ),
  );

  $form['second'] = array(
    '#title' => t('Second'),
    '#type' => 'textfield',
    '#default_value' => 'default',
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['second_machine'] = array(
    '#type' => 'machine_name',
    '#default_value' => '',
    '#maxlength' => 10,
    '#machine_name' => array(
      'exists' => 'node_type_load',
      'source' => array('second'),
    ),
  );

  return $form;
}

function fat_test_tableselect() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test tableselect.') . '</strong></p>',
  );

  $header = array(
    'title' => t('Title'),
    'description' => t('Description'),
  );
  for ($i = 0; $i < 10; $i++) {
    $options[$i] = array(
      'title' => t('Item !n', array('!n' => $i + 1)),
      'description' => t('Description for Item !n', array('!n' => $i + 1)),
    );
  }
  $form['tableselect'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
  );
  return $form;
}

function fat_test_states() {
  $form = array();
  $form['info'] = array(
    '#type' => 'markup',
    '#value' => '<p><strong>' . t('Test states.') . '</strong></p>',
    'states_tested' => array(
      '#theme' => 'item_list',
      '#title' => t('The following states are tested:'),
      '#items' => array(
        'enabled',
        'disabled',
        'required',
        'optional',
        'visible',
        'invisible',
        'checked',
        'unchecked',
        'expanded',
        'collapsed',
      ),
    ),
    'conditions_tested' => array(
      '#theme' => 'item_list',
      '#title' => t('The following conditions are tested:'),
      '#items' => array(
        'empty',
        'filled',
        'checked',
        'unchecked',
        'expanded',
        'collapsed',
        'value',
      ),
    ),
    'operators_tested' => array(
      '#theme' => 'item_list',
      '#title' => t('The following operators are tested:'),
      '#items' => array(
        'AND',
        'OR',
        'XOR',
      ),
    ),
  );
  $form['text1'] = array(
    '#type' => 'textfield',
    '#title' => t('Text1'),
    '#description' => t('Type something to change the text below.'),
    '#states' => array(
      'optional' => array(
        ':input[name="optionaltext1"]' => array('checked' => TRUE),
      ),
      'disabled' => array(
        ':input[name="disabletext1"]' => array('checked' => TRUE),
      ),
      'invisible' => array(
        ':input[name="hidetext1"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['item1'] = array(
    '#type' => 'item',
    '#markup' => t('Text1 is empty'),
    '#states' => array(
      'visible' => array(
        ':input[name="text1"]' => array('empty' => TRUE),
      ),
    ),
  );
  $form['item2'] = array(
    '#type' => 'item',
    '#markup' => t('Text1 is not empty'),
    '#states' => array(
      'visible' => array(
        ':input[name="text1"]' => array('filled' => TRUE),
      ),
    ),
  );
  $form['optionaltext1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make text1 optional'),
  );
  $form['disabletext1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable text1'),
  );
  $form['hidetext1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide text1'),
  );

  $form['text2'] = array(
    '#type' => 'textfield',
    '#title' => t('Text2'),
    '#states' => array(
      'visible' => array(
        ':input[name="showtext2"]' => array('checked' => TRUE),
      ),
      'enabled' => array(
        ':input[name="enabletext2"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="requiredtext2"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['showtext2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show text2'),
  );
  $form['enabletext2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable text2'),
  );
  $form['requiredtext2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make text2 required'),
  );
  $form['checkbox1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Checbox1'),
    '#states' => array(
      'checked' => array(
        ':input[name="checkcheckbox1"]' => array('filled' => TRUE),
      ),
    ),
  );
  $form['checkcheckbox1'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter something to check Checkbox1'),
  );
  $form['checkbox2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Checbox2'),
    '#states' => array(
      'unchecked' => array(
        ':input[name="uncheckcheckbox2"]' => array('empty' => TRUE),
      )
    )
  );
  $form['uncheckcheckbox2'] = array(
    '#type' => 'textfield',
    '#title' => t('Remove text to uncheck Checkbox2'),
    '#default_value' => t('Delete me')
  );
  $form['details1'] = array(
    '#type' => 'details',
    '#title' => t('Details1'),
    '#collapsible' => TRUE,
    '#states' => array(
      'collapsed' => array(
        ':input[name="collapsedetails1"]' => array('value' => 'collapse'),
      ),
    ),
  );
  $form['details1']['item'] = array(
    '#type' => 'item',
    '#title' => t('Do you seee me?'),
    '#markup' => t('If you can see me the details is not collapsed!'),
  );
  $form['details2'] = array(
    '#type' => 'details',
    '#title' => t('Details2'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'expanded' => array(
        ':input[name="expanddetails2"]' => array('value' => 'expand'),
      ),
    ),
  );
  $form['details2']['item'] = array(
    '#type' => 'item',
    '#title' => t('Do you seee me?'),
    '#markup' => t('If you can see me the details is not collapsed!'),
  );
  $form['collapsedetails1'] = array(
    '#type' => 'textfield',
    '#title' => t('Change details state'),
    '#description' => t("Type 'collapse' to collapse Details1"),
  );
  $form['expanddetails2'] = array(
    '#type' => 'textfield',
    '#title' => t('Change details state'),
    '#description' => t("Type 'expand' to expand Details2."),
  );

  $form['details_or'] = array(
    '#type' => 'details',
    '#title' => t('Test OR operator'),
    '#description' => t('Check one or both of the checkboxes to show the textfield'),
  );

  $form['details_or']['or_checkbox_1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check me'),
  );

  $form['details_or']['or_checkbox_2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Or me'),
  );

  $form['details_or']['or_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t('Or condition'),
    '#default_value' => t('The or condition is true!'),
    '#states' => array(
      'visible' => array(
        array(
          array(
            ':input[name="or_checkbox_1"]' => array('checked' => TRUE),
          ),
          array(
            ':input[name="or_checkbox_2"]' => array('checked' => TRUE),
          ),
        ),
      ),
    ),
  );
  $form['details_xor'] = array(
    '#type' => 'details',
    '#title' => t('Test XOR operator'),
    '#description' => t('Check one of the checkboxes to show the textfield'),
  );

  $form['details_xor']['xor_checkbox_1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check me'),
  );

  $form['details_xor']['xor_checkbox_2'] = array(
    '#type' => 'checkbox',
    '#title' => t('X-Or me'),
  );

  $form['details_xor']['xor_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t('X-Or condition'),
    '#default_value' => t('The x-or condition is true!'),
    '#states' => array(
      'visible' => array(
        array(
          array(
            ':input[name="xor_checkbox_1"]' => array('checked' => TRUE),
          ),
          'xor',
          array(
            ':input[name="xor_checkbox_2"]' => array('checked' => TRUE),
          ),
        ),
      ),
    ),
  );

  $form['details_and'] = array(
    '#type' => 'details',
    '#title' => t('Test AND operator'),
    '#description' => t('Check both of the checkboxes to show the textfield'),
  );

  $form['details_and']['and_checkbox_1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check me'),
  );

  $form['details_and']['and_checkbox_2'] = array(
    '#type' => 'checkbox',
    '#title' => t('And me'),
  );

  $form['details_and']['and_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t('And condition'),
    '#default_value' => t('The and condition is true!'),
    '#states' => array(
      'visible' => array(
        ':input[name="and_checkbox_1"]' => array('checked' => TRUE),
        ':input[name="and_checkbox_2"]' => array('checked' => TRUE),
      ),
    ),
  );

  return $form;
}

function fat_drupal_ajax_responder($js, $selector_index) {

  if ('ajax' == $js) {
    $selector_map = array(
      'base_unique' => '#base_unique',
      'base_multiple' => '#base_multiple',
      'selector_unique' => '.selector-unique',
      'selector_multiple' => '.selector-multiple',
    );
    $commands = array();
    $selector = $selector_map[$selector_index];
    $html = '<span class="' . $selector_index . '">Hello world from ajax for ' . $selector_index . '</span>';
    $commands[] = ajax_command_append($selector, $html);
    print ajax_render($commands);
    //ajax_footer();
    exit();
  }
  else {
    return $js;
  }
}

function fat_drupal_ajax_page() {
  drupal_add_library('system', 'drupal.ajax');

  $page = array();

  // base only: unique element
  $page['base_unique'] = array(
    '#prefix' => '<div id="base_unique">',
    '#markup' => '* Only base unique',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'base_unique' => array(
        'url' => 'drupal-ajax-1473314/nojs/base_unique',
        'event' => 'click',
      ),
    ),
      ), 'setting');

  // base only: multiple elements
  $page['base_multiple'][] = array(
    '#prefix' => '<div id="base_multiple">',
    '#markup' => '* First base multiple',
    '#suffix' => '</div>',
  );
  $page['base_multiple'][] = array(
    '#prefix' => '<div id="base_multiple">',
    '#markup' => '* Second base multiple',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'base_multiple' => array(
        'url' => 'drupal-ajax-1473314/nojs/base_multiple',
        'event' => 'click',
      ),
    ),
      ), 'setting');

  // selector only: unique element
  /**
   * This breaks existing Drupal.behaviors.AJAX.attach()
   * attach() relies on unique ID of the element to avoid
   * attaching ajax behavior more than once.
   * Because it is perfectly "legal" to provide custom selector
   * to an element without element ID ever existing, this means
   * the killswitch never breaks multiple re-attachments of the behavior.
   *
   * Solution:
   * Move this code outside of $(base + .ajax-processed) kill switch
   *       if (typeof element_settings.selector == 'undefined') {
   *         element_settings.selector = '#' + base;
   *       }
   *
   * Replace all occurenses of "base" with a different uniqueness-selector.
   * This means there needs to be "var new_base", that combines
   * both element_settings.selector (after it was potentialy initualized with #+base,
   * and a uniqueness resolver. similarly to how jquery.once.js handles uuid.
   *
   *
   */
  $page['selector_unique'] = array(
    '#prefix' => '<div class="selector-unique">',
    '#markup' => '* Only selector unique',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'selector_unique' => array(
        'selector' => '.selector-unique',
        'url' => 'drupal-ajax-1473314/nojs/selector_unique',
        'event' => 'click',
      ),
    ),
      ), 'setting');



  // selector only: multiple elements
  /*   *
   * This has the same problem as described in selector_unique above with aditional one.
   * Because selector is now not unique, all matched elements get to share
   * one Drupal.ajax instance/handler. More correctly...
   * 1) each matched DOM element gets is initialized and bound to trigger event.
   * 2) Drupal.ajax[base] is lost/overridden for all except final matched
   *    DOM element based on the element_settings.selector rules.
   *    because of this line: Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);
   *
   * Solution:
   *   Several things need to be discussed.
   *   1) Currently all ajax_command_* operate on $selector parameter. I think that is insufficient.
   *   2) I think we need to introduce a special $selector that refers to "this",
   *      where "this" is the element that triggered AJAX behavior. So for example
   *      i could write ajax_command_replace("this", "[new html]").
   *      This would in turn replace ONE element that was ajax-triggered from within
   *      multiple similar-based-on-selector elements, and leave the rest untouched.
   *   3) For the purpose of converting existing ajax.js to use .once() killswitch
   *      i think we dont need to worry about (2), but i strongly think that is the
   *      direction we need to take (ie, open new issue to solve this).
   *
   */
  $page['selector_multiple'][] = array(
    '#prefix' => '<div class="selector-multiple">',
    '#markup' => '* First selector multiple',
    '#suffix' => '</div>',
  );
  $page['selector_multiple'][] = array(
    '#prefix' => '<div class="selector-multiple">',
    '#markup' => '* Second selector multiple',
    '#suffix' => '</div>',
  );
  drupal_add_js(array(
    'ajax' => array(
      'selector_multiple' => array(
        'selector' => '.selector-multiple',
        'url' => 'drupal-ajax-1473314/nojs/selector_multiple',
        'event' => 'click',
      ),
    ),
      ), 'setting');

  return $page;
}

function fat_testswarm_tests() {

  $path = drupal_get_path('module', 'fat');

  return array(
    // Core misc scripts.
    'basictests' => array(
      'module' => 'core',
      'description' => 'Drupal.checkplain(), Drupal.t() and attachBehaviors. Should pass in all browsers.',
      'js' => array(
        $path . '/tests/drupal.tests.js' => array(),
      ),
      'path' => '',
    ),
    'announce' => array(
      'module' => 'core',
      'description' => 'Test the Drupal announce utility',
      'js' => array(
        $path . '/tests/drupal.announce.tests.js' => array(),
      ),
      'dependencies' => array(
        array('system', 'drupal.announce'),
      ),
      'path' => '',
    ),
    'displace' => array(
      'module' => 'core',
      'description' => 'Test the Drupal displace utility.',
      'js' => array(
        $path . '/tests/drupal.displace.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
        array('system', 'drupal.displace'),
      ),
      'path' => '<front>',
      'permissions' => array(),
    ),
    'tabbingmanager' => array(
      'module' => 'core',
      'description' => 'Exercise the Drupal.TabbingManager class',
      'js' => array(
        $path . '/tests/drupal.tabbingmanager.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
        array('system', 'drupal.tabbingmanager'),
      ),
      'path' => '<front>',
      'permissions' => array(),
    ),
    'tabledrag' => array(
      'module' => 'core',
      'description' => 'Test tabledrag (using the menu interface)',
      'js' => array(
        $path . '/tests/drupal.tabledrag.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
      ),
      'path' => 'admin/structure/menu/manage/tools',
      'permissions' => array('administer menu')
    ),
    // jQuery.
    'jqueryonce' => array(
      'module' => 'core',
      'description' => 'jQuery.once and jQuery.each. Should pass in all browsers.',
      'js' => array(
        $path . '/tests/jquery.once.tests.js' => array(),
      ),
      'path' => '',
    ),
    // Core modules.
    'contextuallinks' => array(
      'module' => 'core',
      'description' => 'Testing contextual links on homepage (fails in seven -> no blocks)',
      'js' => array(
        $path . '/tests/drupal.contextuallinks.tests.js' => array(),

      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
      ),
      'path' => '<front>',
      'permissions' => array('access contextual links'),
    ),
    /*'edit' => array(
      'module' => 'core',
      'description' => 'Tests the in-place editing capabilities of Edit module.',
      'js' => array(
        $path . '/tests/edit.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
        array('system', 'underscore'),
      ),
      'path' => '/node/1',
    ),*/
    'field_ui' => array(
      'module' => 'core',
      'description' => 'Test field_ui (using manage display interface), see http://drupal.org/node/1303412',
      'js' => array(
        $path . '/tests/drupal.field_ui.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
      ),
      'path' => 'admin/structure/types/manage/article/display/teaser',
      'permissions' => array('administer content types'),
    ),
    'overlay' => array(
      'module' => 'core',
      'description' => 'Exercise the Overlay module.',
      'js' => array(
        $path . '/tests/core/overlay.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
      ),
      'path' => '<front>',
      'permissions' => array('Access the administrative overlay'),
    ),
    'toolbar' => array(
      'module' => 'core',
      'description' => 'Exercise the Toolbar module.',
      'js' => array(
        $path . '/tests/core/toolbar.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
      ),
      'path' => '<front>',
      'permissions' => array('Use the administration toolbar'),
    ),
    'appearance' => array(
      'module' => 'core',
      'description' => 'Exercise the theme appearance settings.',
      'js' => array(
        $path . '/tests/core/appearance.tests.js' => array(),
      ),
      'path' => 'admin/appearance/settings/bartik',
      'permissions' => array('Administer themes'),
    ),
    'password' => array(
      'module' => 'core',
      'description' => 'Exercise the password indicator when creating users.',
      'js' => array(
        $path . '/tests/core/password.tests.js' => array(),
      ),
      'path' => 'admin/people/create',
      'permissions' => array('Administer users'),
    ),
    // Workflows.
    'createpagecontent' => array(
      'module' => 'core',
      'description' => 'Testing summary on vertical tabs, test needs some more attention.',
      'js' => array(
        $path . '/tests/drupal.createpage.tests.js' => array(),
      ),
      'path' => 'node/add/page',
      'permissions' => array('create page content'),
    ),
    'reorderblocks' => array(
      'module' => 'core',
      'description' => 'Testing drag and drop, test needs some more attention.',
      'js' => array(
        $path . '/tests/jquery.dragdrop.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
      ),
      'path' => 'admin/structure/block',
      'permissions' => array('administer blocks'),
    ),
    'form_radios' => array(
      'module' => 'core',
      'description' => 'Testing multiple radio buttons.',
      'js' => array(
        $path. '/tests/drupal.radios.tests.js' => array(),
      ),
      'path' => 'fat-test-radio',
      'permissions' => array(),
    ),
    'form_collapsible_fields' => array(
      'module' => 'core',
      'description' => 'Testing collapsible fields.',
      'js' => array(
        $path. '/tests/drupal.collapsiblefields.tests.js' => array(),
      ),
      'path' => 'fat-test-collapsible-fields',
      'permissions' => array(),
    ),
    'form_autocomplete' => array(
      'module' => 'core',
      'description' => 'Testing autocomplete.',
      'js' => array(
        $path. '/tests/drupal.autocomplete.tests.js' => array(),
      ),
      'dependencies' => array(
        array('testswarm', 'jquery.simulate'),
      ),
      'path' => 'fat-test-autocomplete',
      'permissions' => array(),
    ),
    'form_machinename' => array(
      'module' => 'core',
      'description' => 'Testing machine name.',
      'js' => array(
        $path. '/tests/drupal.machinename.tests.js' => array(),
      ),
      'path' => 'fat-test-machine-name',
      'permissions' => array(),
    ),
    'form_tableselect' => array(
      'module' => 'core',
      'description' => 'Testing tableselect.',
      'js' => array(
        $path. '/tests/drupal.tableselect.tests.js' => array(),
      ),
      'path' => 'fat-test-tableselect',
      'permissions' => array(),
    ),
    'form_states' => array(
      'module' => 'core',
      'description' => 'Testing states.',
      'js' => array(
        $path. '/tests/drupal.states.tests.js' => array(),
      ),
      'path' => 'fat-test-states',
      'permissions' => array(),
    ),
    'form_ajax' => array(
      'module' => 'core',
      'description' => 'Testing ajax.',
      'js' => array(
        $path. '/tests/drupal.ajax.tests.js' => array(),
      ),
      'path' => 'drupal-ajax-1473314',
      'permissions' => array(),
    ),
  );
}
