<?php

/**
 * @file
 * Installation file for the uc_gc_client module.
 */

/**
 * Implements hook_schema().
 */
function uc_gc_client_schema() {

  $schema['uc_gc_client'] = array(
    'description' => 'Stores data on GoCardless orders',
    'fields' => array(
      'ucid' => array(
        'description' => 'Ubercart order ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ucpid' => array(
        'description' => 'Ubercart product ID',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'gcid' => array(
        'description' => 'The GoCardless mandate ID',
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'gcrid' => array(
        'description' => 'The GoCardless Redirect flow ID associated with order',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'gccid' => array(
        'description' => 'The GoCardless Customer ID associated with order',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Customerâ€™s user ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'next_payment' => array(
        'description' => 'Timestamp for the next payment',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'Subscription or One-off payment',
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
        'default' => 'S',
      ),
      'status' => array(
        'description' => 'The GoCardless mandate status',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'Unix timestamp when the order was created',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start_date' => array(
        'description' => 'Unix timestamp when the first payment is charged',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'Unix timestamp when the Status was updated',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sandbox' => array(
        'description' => 'Whether or not it is a sandbox transaction',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'primary index' => array('gcid', 'ucpid')
    ),
  );

  $schema['uc_gc_client_products'] = array(
    'description' => 'GoCardless data for Ubercart products',
    'fields' => array(
      'nid' => array(
        'description' => 'The node ID for the product',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'gc_use' => array(
        'description' => 'If product uses GoCardless settings',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Subscription or pre-authorization',
        'type' => 'varchar',
        'length' => '1',
        'not null' => FALSE,
      ),
      'create_payment' => array(
        'description' => 'Create payment immediately upon completion of checkout',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'dom' => array(
        'description' => 'One or more days of month that payment is created on',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
      'start_date' => array(
        'description' => 'Optional start date for new mandate',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
      'interval_length' => array(
        'description' => 'The interval between scheduled payment creations',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'interval_unit' => array(
        'description' => 'The interval unit between scheduled payment creations',
        'type' => 'varchar',
        'length' => '32',
        'not null' => FALSE,
      ),
      'price_x' => array(
        'description' => 'Subscription multiplier',
        'type' => 'numeric',
        'not null' => FALSE,
        'default' => 1,
        'precision' => '6',
        'scale' => '3',
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['uc_gc_client_schedules'] = array(
    'description' => 'Schedules table',
    'fields' => array(
      'sid' => array(
        'description' => 'Schedule ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'ucid' => array(
        'description' => 'Order ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'ucpid' => array(
        'description' => 'Product ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of scheduled event',
        'type' => 'varchar',
        'length' => '16',
        'not null' => TRUE,
      ),
      'date' => array(
        'description' => 'A formatted date string for the scheduled event',
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'The timestamp for the scheduled event',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The status of the schedule',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Available for serialized data by other modules',
        'type' => 'blob',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'Timestamp when scheduled event was created',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('sid'),
    'indexes' => array(
      'timestamp' => array('timestamp'),
      'type' => array('type'),
      'ucid' => array('ucid', 'ucpid'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function uc_gc_client_install() {

  $site_email = \Drupal::config('system.site')->get('mail');
  $config = \Drupal::service('config.factory')->getEditable('uc_gc_client.settings');
  $config->set('warnings_email', $site_email)->save();

  $countries = uc_gc_client_countries_define();
  $config->set('countries', $countries)->save();

  //Provide 'Interval' attribute and set of options
  $check = db_select('uc_attributes', 'a')
    ->fields('a')
    ->condition('name', 'Interval', '=')
    ->execute()->fetch();

  if (empty($check)) {
    $insert_att = db_insert('uc_attributes')
      ->fields(array(
        'name' => 'Interval',
        'label' => 'Payment interval',
        'ordering' => 0,
        'required' => 1,
        'display' => 1,
        'description' => 'How often would you like to pay your direct debit?',
      ))
      ->execute();

    $options = array('Weekly', 'Fortnightly', 'Monthly', 'Yearly');
    foreach ($options as $option) {
      $insert_option = db_insert('uc_attribute_options')
        ->fields(array(
          'aid' => $insert_att,
          'name' => $option,
          'cost' => 0,
          'price' => 0,
          'weight' => 0,
          'ordering' => 0,
        ))
        ->execute();
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function uc_gc_client_uninstall() {
  foreach (['mandate_active', 'mandate_failed',] as $status) {
    $uc_orders = \Drupal\uc_order\Entity\OrderStatus::load($status);
    if (!is_null($uc_orders)) $uc_orders->setLocked(FALSE)->delete();
  }
  //foreach (['webhook_live', 'webhook_sandbox',] as $entity) {
  //  \Drupal::state()->delete('uc_gc_client_' . $entity);
  //}

  $datetime = \Drupal\Core\Datetime\Entity\DateFormat::load('gocardless');
  if (!is_null($datetime)) $datetime->delete();
}

/**
 * Add country definitions for Denmark, Australia and New Zealand.
 */
function uc_gc_client_update_8001() {

  $config = \Drupal::service('config.factory')->getEditable('uc_gc_client.settings');
  $countries = $config->get('countries');
  $countries_new = array(
    'AU' => array(
      'region' => 'becs',
      'currency' => 'AUD',
      'sign' => '$',
      'enabled' => '0',
    ),
    'DK' => array(
      'region' => 'betalingsservice',
      'currency' => 'DKK',
      'sign' => 'kr',
      'enabled' => '0',
    ),
    'NZ' => array(
      'region' => 'becs_nz',
      'currency' => 'NZD',
      'sign' => '$',
      'enabled' => '0',
    ),
  );
  $config->set('countries', array_merge($countries, $countries_new))->save();
}

