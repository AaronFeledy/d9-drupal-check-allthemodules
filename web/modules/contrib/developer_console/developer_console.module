<?php

/**
 * @file
 * Developer console - the only dev module you'll ever need.
 */

use Drupal\Core\Render\Markup;

/**
 * Helper function to initialise kint.
 */
function _developer_console_kint_output($variable, $type = 'S') {
  require_once drupal_get_path('module', 'developer_console') . '/kint/Kint.class.php';
  if ($type == 'F' || $type == 'G') {
    $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
    $wrappers = $stream_wrapper_manager->getWrappers();
    if (isset($wrappers['private'])) {
      $wrapper = 'private';
    }
    else {
      $wrapper = 'public';
    }

    $dump_path = $wrapper . '://kint_dump.dat';
  }

  switch ($type) {
    // Kint output to a string.
    case 'S':
      return @Kint::dump($variable);

    // Kint output to a file.
    case 'F':
      static $continued;
      if (empty($continued)) {
        $continued = TRUE;
        $fh = fopen($dump_path, 'w');
      }
      else {
        $fh = fopen($dump_path, 'a');
      }
      fwrite($fh, @Kint::dump($variable));
      fclose($fh);
      break;

    // Get output from file and pass it to a Drupal message.
    case 'G':
      $content = file_get_contents($dump_path);
      if (!empty($content)) {
        drupal_set_message(Markup::create($content));
      }
      break;

    // Display kint output in a Drupal message.
    case 'M':
      drupal_set_message(Markup::create(@Kint::dump($variable)));
      break;

    // Pass kint output directly to the browser with unlimited depth modifier.
    case 'L':
      +Kint::dump($variable);
      break;

    // Default: pass kint output directly to the browser.
    case 'P':
    default:
      \Kint::dump($variable);

  }
}

/**
 * Kint dpm function.
 *
 * Parameters (provide as string in $set_str, e.g. "PA"):
 *  - R - prevent repeating output in the same request,
 *  - F - save output to a file,
 *  - K - if variable is an object or an array, print only keys,
 *  - G - instead of displaying a variable get
 *        the last saved output from a file,
 *  - P - display output in the place where the code
 *        is executed (Usually page top).
 *  - A - display output for every user.
 *  - L - supress logger.
 */
function kdpm($variable = NULL, $set_str = '') {

  $settings = array();
  for ($i = 0; isset($set_str[$i]); $i++) {
    $settings[] = $set_str[$i];
  }

  if (!in_array('L', $settings)) {
    $backtrace_info = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
    \Drupal::logger('developer_console')->notice('kdpm function called in: @file, row: @row.', array(
      '@file' => $backtrace_info[0]['file'],
      '@row' => $backtrace_info[0]['line'],
    ));
  }

  if (!in_array('A', $settings)) {
    $user = \Drupal::currentUser();
    if (!$user->hasPermission('access debug info')) {
      return;
    }
  }

  static $already_displayed = FALSE;
  if ($already_displayed && in_array('R', $settings)) {
    return;
  }
  $already_displayed = TRUE;

  if (in_array('K', $settings) && (is_array($variable) || is_object($variable))) {
    $variable = (is_object($variable)) ? array_keys(get_object_vars($variable)) : array_keys($variable);
  }

  // Determine kint output type, the default is
  // M - Drupal message direct output.
  $kint_type = 'M';
  foreach (array('F', 'S', 'G', 'P', 'L') as $param) {
    if (in_array($param, $settings)) {
      $kint_type = $param;
      break;
    }
  }

  // Dump the variable.
  _developer_console_kint_output($variable, $kint_type);
}

/**
 * Display debug backtrace info.
 */
function debug_info($args = '') {
  $info = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
  unset($info[0]);
  kdpm($info, $args);
}

/**
 * Get length of a serialized variable.
 */
function var_size($id, $variable = NULL) {
  static $sizes;
  if (!isset($sizes[$id])) {
    $sizes[$id] = is_string($variable) ? strlen($variable) : strlen(serialize($variable));
  }

  return $sizes[$id];
}

/**
 * Execution time monitoring function.
 *
 * @param string $tag
 *   Unique identifier in case few different monitoring
 *   variants are required.
 * @param string $args
 *   Output type as in kdpm function.
 */
function time_monit($tag = 'default', $args = '') {
  $data = &drupal_static(__FUNCTION__);

  // Supress logger.
  $args .= 'L';
  if (!isset($data[$tag])) {
    $backtrace_info = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
    kdpm(sprintf('Time monitoring for "%s" tag initialized in %s, line %s', $tag, $backtrace_info[0]['file'], $backtrace_info[0]['line']), $args);
    $data[$tag] = microtime(TRUE);
  }
  else {
    $current_time = microtime(TRUE);
    kdpm(sprintf(
      'Time monitoring for %s tag: elapsed since last check: %d ms.',
      $tag,
      round(($current_time - $data[$tag]) * 1000, 3)
    ));
    $data[$tag] = $current_time;
  }
}
