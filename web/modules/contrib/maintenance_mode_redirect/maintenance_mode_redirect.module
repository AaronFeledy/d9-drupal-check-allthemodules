<?php

/**
 * @file
 * Module file for maintenance_mode_redirect.
 */

use \Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_help().
 */
function maintenance_mode_redirect_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    case 'help.page.maintenance_mode_redirect':
      $output = '<p>' . t('Redirect site visitors to another URL when Maintenance Mode is enabled.') . '</p>';
      $output .= '<p>' . t('The module adds two additional fields to the Maintenance Mode <a href=":maintenance">configuration page</a> (admin/config/development/maintenance).', array(':maintenance' => \Drupal::url('system.site_maintenance_mode'))) . '</p>';
      $output .= '<p>' . t('The checkbox is used to enable URL redirect when the site is in Maintenance Mode.') . '</p>';
      $output .= '<p>' . t('The Redirect URL field should contain a URL to go to when the URL redirect is enabled.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function maintenance_mode_redirect_form_system_site_maintenance_mode_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('maintenance_mode_redirect.settings');
  // Add checkbox on the maintenance mode form to enable or disable URL
  // redirects.
  $form['maintenance_mode_redirect_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable URL redirect'),
    '#description' => t('When enabled, anonymous users will be redirected to the Redirect URL when the site is in Maintenance Mode.'),
    '#default_value' => $config->get('maintenance_mode_redirect_active'),
  );
  // Add redirect URL to the maintenance mode form.
  $form['maintenance_mode_redirect_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect URL'),
    '#description' => t('URL that site visitors are redirected to if Maintenance Mode is enabled.'),
    '#default_value' => $config->get('maintenance_mode_redirect_url'),
    '#states' => array(
      'visible' => array(
        ':input[name="maintenance_mode_redirect_active"]' => array('checked' => TRUE),
      ),
    ),
  );

  array_unshift($form['#submit'], '_maintenance_mode_redirect_maintenance_mode_submit');
  $form['#validate'][] = '_maintenance_mode_redirect_maintenance_mode_validate';
}

/**
 * Maintenance Mode Redirect submit.
 *
 * @param array $form
 *   Form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function _maintenance_mode_redirect_maintenance_mode_submit(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::service('config.factory')
    ->getEditable('maintenance_mode_redirect.settings');
  if ($form_state->hasValue('maintenance_mode_redirect_active')) {
    $redirect_mode = $form_state->getValue('maintenance_mode_redirect_active');
    $config->set('maintenance_mode_redirect_active', $redirect_mode);
    $maintenance_enabled = \Drupal::state()->get('system.maintenance_mode');
    // If redirect mode is active and maintenance mode state changing -
    // cache will be flushed.
    if ($redirect_mode === 1 &&
      ($maintenance_enabled != $form_state->getValue('maintenance_mode'))) {
      drupal_flush_all_caches();
    }
  }
  if ($form_state->hasValue('maintenance_mode_redirect_url')) {
    $config->set('maintenance_mode_redirect_url',
      $form_state->getValue('maintenance_mode_redirect_url'));
  }
  $config->save();
}

/**
 * Maintenance Mode Redirect submit validate.
 *
 * @param array $form
 *   Form render array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function _maintenance_mode_redirect_maintenance_mode_validate(array &$form, FormStateInterface $form_state) {
  if ($form_state->hasValue('maintenance_mode_redirect_url')) {
    $is_valid = UrlHelper::isValid($form_state->getValue('maintenance_mode_redirect_url'), TRUE);
    if (!$is_valid) {
      $form_state->setErrorByName('maintenance_mode_redirect_url', t('URL is incorrect'));
    }
  }
}
