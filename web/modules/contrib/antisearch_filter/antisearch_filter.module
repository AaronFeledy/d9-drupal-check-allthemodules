<?php

/**
 * @file
 * The module makes marked words or phrases invisible for search enginges.
 */

/**
 * Antisearch Filter.
 *
 * @mainpage
 *
 * @section project_page Project page
 * - @link http://drupal.org/project/antisearch_filter Drupal project "Antisearch Filter" (antisearch_filter) @endlink
 *
 * @section git_repository Git repository
 * - @link http://drupalcode.org/project/antisearch_filter.git Drupal git repository @endlink
 */

/**
 * Makes a given string invisible.
 *
 * Makes the given string invisible for a search engine (like google)
 * by adding characters between each letter.
 *
 * @param string $text
 *   A string to pass through the dismemberer.
 *
 * @return string
 *   The dismembered string.
 */
function antisearch_filter($text) {
  // preg_replace_callback() calls antisearch_filter() by submitting an array.
  // Array
  // (
  // [0] => [foo bar] or <strike>foo bar</strike>
  // [1] => foo bar
  // ).
  if (is_array($text)) {
    $text = $text[1];
  }

  $dismembered_string = _antisearch_filter_dismemberer($text);

  $title = t('The text is hidden from search engines. Search engines only see this text:');

  return '<span class="antisearch-filter" title="' . $title . ' ' . strip_tags($dismembered_string) . '">'
    . $dismembered_string
    . '</span>';
}

/**
 * Dismember a string by adding random characters after each letter.
 *
 * @param string $text
 *   A string to pass through the dismemberer.
 * @param array $mixing_characters
 *   A collection of characters to add after the single letters.
 *
 * @return string
 *   The dismembered string.
 */
function _antisearch_filter_dismemberer($text, array $mixing_characters = []) {
  $text = html_entity_decode($text, ENT_NOQUOTES, 'utf-8');
  $text = strip_tags($text);

  $dismembered_string = '';

  if ($mixing_characters) {
    $characters = $mixing_characters;
  }
  else {
    $characters = [
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
      'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
    ];
  }

  for ($i = 0; $i < mb_strlen($text); $i++) {
    // The normal substr function can not handle strings in utf-8, so we use
    // mb_substr instead.
    $str = mb_substr($text, $i, 1, 'utf-8');
    $dismembered_string .= htmlentities($str, ENT_QUOTES, 'utf-8');
    $dismembered_string .= '<i>' . $characters[array_rand($characters)] . '</i>';
  }

  return $dismembered_string;
}
