<?php

/**
 * @file
 * Expands the node menu select field functionality.
 *
 * Adds filters and an expandable hierarchy.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_select\MenuSelect;

/**
 * Implements hook_module_implements_alter().
 */
function menu_select_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move menu_select_form_alter() to the end of the list.
    // \Drupal::moduleHandler()->getImplementations()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['menu_select'];
    unset($implementations['menu_select']);
    $implementations['menu_select'] = $group;
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function menu_select_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $bundle = $form_state->getFormObject()->getEntity()->getType();
  $config = \Drupal::config('menu_select.settings');
  $search_enabled = $config->get('menu_select.search_enabled');

  // Get menus available to this content type.
  $menu_options = MenuSelect::getAvailableMenus($bundle);
  
  // Leave if there are no menu options for this content type.
  if (empty($menu_options)) {
    return;
  }

  // Set the default menu.
  $default_menu['machine'] = key($menu_options);
  $default_menu['clean'] = $menu_options[$default_menu['machine']];

  $rendered_menus = [];
  foreach ($menu_options as $key => $menu) {
    $menu_tree = MenuSelect::menuTreeMachineNameLoad($key);
    $rendered_menus[] = MenuSelect::buildRenderedMenu($menu_tree, array('machine' => $key, 'clean' => $menu), $form_state);
  }

  // Attach supporting Javascript and stylesheets.
  $form['#attached']['library'][] = 'menu_select/menu_select';

  $form['menu']['link']['parent_menu_position_preview'] = array(
    '#type' => 'item',
    '#title' => t('Menu link position preview'),
    '#description' => t("Preview of the menu item's hierarchical position."),
  );

  $form['menu']['link']['parent_menu_position_preview']['children'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'menu-select-parent-position-preview',
        'js-menu-select-parent-position-preview',
      ),
    ),
  );

  if ($search_enabled) {
    $form['menu']['link']['parent_menu_item_search'] = array(
      '#type' => 'textfield',
      '#title' => t('Search'),
      '#autocomplete_route_name' => 'menu_select.menu_select_autocomplete',
      '#autocomplete_route_parameters' => array('type' => $bundle),
      '#description' => t("Alternatively, use this autocomplete search to find the menu item's parent and select it."),
      '#attributes' => array(
        'class' => array(
          'menu-select-parent-menu-item-search',
          'js-menu-select-parent-menu-item-search',
        ),
      ),
    );
  }

  $form['menu']['link']['parent_menu_item'] = $rendered_menus;

}

/**
 * Implements hook_form_alter().
 */
function menu_select_form_alter(&$form, FormStateInterface $form_state) {
  // As we are implementing one of the 'extra' hooks we need the
  // primary hook to exist so that we can invoke hook_module_implements_alter().
}
