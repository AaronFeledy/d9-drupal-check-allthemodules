<?php

/**
 * @file
 * Provides functionality for integrating Viral Loops to Drupal Commerce.
 */

use Drupal\commerce_promotion\Entity\Promotion;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_vl_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  switch ($entity_type->id()) {
    case 'user':
      $fields['vl_referral_code'] = BaseFieldDefinition::create('string')
        ->setLabel(t('Viral Loops Referral Code'))
        ->setCardinality(1)
        ->setDefaultValue('')
        ->setDisplayConfigurable('view', TRUE);
      break;

    case 'commerce_promotion_coupon':
      $fields['vl_marker'] = BaseFieldDefinition::create('boolean')
        ->setLabel(t('Viral Loops coupon'))
        ->setInitialValue(FALSE)
        ->setDefaultValue(FALSE)
        ->setRequired(FALSE)
        ->setSettings([
          'on_label' => t('Yes'),
          'off_label' => t('No'),
        ])
        ->setDisplayConfigurable('view', TRUE);

      $fields['vl_type'] = BaseFieldDefinition::create('string')
        ->setLabel(t('VL Type'))
        ->setCardinality(1)
        ->setDefaultValue('')
        ->setDisplayConfigurable('view', TRUE);
      $fields['vl_reward_id'] = BaseFieldDefinition::create('string')
        ->setLabel(t('VL Reward ID'))
        ->setCardinality(1)
        ->setDefaultValue('')
        ->setDisplayConfigurable('view', TRUE);
      $fields['vl_value'] = BaseFieldDefinition::create('string')
        ->setLabel(t('VL Discount Value'))
        ->setCardinality(1)
        ->setDefaultValue('')
        ->setDisplayConfigurable('view', TRUE);
      break;
  }
  return $fields;
}

/**
 * Implements hook_user_login().
 */
function commerce_vl_user_login($account) {
  /** @var \Drupal\commerce_vl\ViralLoopsIntegratorInterface $vl_integrator */
  $vl_integrator = \Drupal::service('commerce_vl.integrator');
  $vl_integrator->sendServerIdentifyUserRequest($account);
}

/**
 * Implements hook_user_logout().
 */
function commerce_vl_user_logout($account) {
  user_cookie_save(['vl_logout' => '1']);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function commerce_vl_form_commerce_promotion_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\commerce_promotion\Entity\PromotionInterface $promotion */
  $promotion = $form_state->getFormObject()->getEntity();
  $vl_promotion_id = \Drupal::keyValue('commerce_vl')->get('vl_promotion_id');
  if ($promotion->id() == $vl_promotion_id) {
    $form['name']['#disabled'] = TRUE;
    $form['offer']['#disabled'] = TRUE;
    $form['actions']['delete']['#access'] = FALSE;
  }
  else {
    $form['#validate'][] = 'commerce_vl_promotion_validate';
    unset($form['offer']['widget'][0]['target_plugin_id']['#options']['viral_loops_offer']);
  }
}

/**
 * Viral Loops promotion form validation.
 */
function commerce_vl_promotion_validate(&$form, FormStateInterface $form_state) {
  if ($form_state->getValue(['name', 0, 'value']) == 'Viral Loops') {
    $vl_promotion_id = \Drupal::keyValue('commerce_vl')->get('vl_promotion_id');
    if ($vl_promotion_id && Promotion::load($vl_promotion_id)) {
      $form_state->setErrorByName('name', t('There can be only one promotion with this name!'));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function commerce_vl_commerce_promotion_access(EntityInterface $entity, $operation, AccountInterface $account) {
  switch ($operation) {
    case 'delete':
      $vl_promotion_id = \Drupal::keyValue('commerce_vl')->get('vl_promotion_id');
      if ($entity->id() == $vl_promotion_id) {
        return AccessResult::forbidden('Default Viral Loops promotion can not be deleted.');
      }
      break;
  }

  // No opinion.
  return AccessResult::neutral();
}
