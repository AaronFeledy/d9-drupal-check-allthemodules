<?php

namespace Drupal\Tests\marketing_cloud_assets\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_address module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudAssetsTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_assets'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_assets.service');
    // Get marketing_cloud_assets config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_assets.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_address.
   */
  public function testDefinitions() {
    /*
     * Test simpleQuery
     */
    $this->validateDefinition('simple_query');
    // Validate service against expected inputs (all)
    $params = $this->simpleQueryParamsAll();
    $result = $this->service
      ->simpleQuery($params);
    $this->assertNotFalse($result, 'Unable to parse the input data in simpleQuery().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/assets?$page=2&$pagesize=4&$orderBy=name%20asc&$filter=Name%20like%20\'hello%20world\'&$fields=field1,field2,field3',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by simpleQuery()'
    );
    // Validate service against expected inputs (not all)
    $aparams = $this->simpleQueryParamsSome();
    $result = $this->service
      ->simpleQuery($aparams);
    $this->assertNotFalse($result, 'Unable to parse the input data in simpleQuery().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/assets?$page=2&$orderBy=name%20asc&$fields=field1,field2,field3',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by simpleQuery()'
    );

    /*
     * Test advancedQuery
     */
    $this->validateDefinition('advanced_query');
    // Validate service against expected inputs (not all)
    $json = $this->advancedQueryJson();
    $result = $this->service
      ->advancedQuery($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in advancedQuery().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/assets/query',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by advancedQuery()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->advancedQuery($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in advancedQuery()');
    unset($json['foo']);
    // Test against invalid type.
    $json['page'] = 'foobar';
    $result = $this->service
      ->advancedQuery($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in advancedQuery()');

    /*
     * Test createCategory
     */
    $this->validateDefinition('create_category');
    // Validate service against expected inputs (non-shared)
    $json = $this->createNonSharedCategoryJson();
    $result = $this->service
      ->createCategory($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createCategory().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/categories',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by createCategory()'
    );
    // Validate service against expected inputs (shared)
    $json = $this->createSharedCategoryJson();
    $result = $this->service
      ->createCategory($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createCategory().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/categories',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by createCategory()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createCategory($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createCategory()');
    unset($json['foo']);
    // Test against invalid type.
    $json['parentId'] = 'foobar';
    $result = $this->service
      ->createCategory($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createCategory()');

    /*
     * Test getCategories
     */
    $this->validateDefinition('get_categories');
    // Validate service against expected inputs.
    $params = $this->getCategoriesParams();
    $result = $this->service
      ->getCategories($params);
    $this->assertNotFalse($result, 'Unable to parse the input data in getCategories().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/categories?$pagesize=20&$filter=parentId%20eq%203916',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by getCategories()'
    );

    /*
     * Test getCategoryById
     */
    $this->validateDefinition('get_category_by_id');
    // Validate service against expected inputs.
    $result = $this->service
      ->getCategoryById(23765);
    $this->assertNotFalse($result, 'Unable to parse the input data in getCategoryById().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/categories/23765',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by getCategoryById()'
    );

    /*
     * Test updateCategoryById
     */
    $this->validateDefinition('update_category_by_id');
    // Validate service against expected inputs.
    $json = $this->updateCategoryByIdJson();
    $result = $this->service
      ->updateCategoryById(23765, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in updateCategoryById().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/categories/23765',
        'data' => json_encode($json),
        'method' => 'put',
      ],
      $result,
      'Unexpected request data generated by updateCategoryById()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->updateCategoryById(23765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateCategoryById()');
    unset($json['foo']);
    // Test against invalid type.
    $json['page'] = 'foobar';
    $result = $this->service
      ->updateCategoryById(23765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateCategoryById()');

    /*
     * Test deleteCategoryById
     */
    $this->validateDefinition('delete_category_by_id');
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteCategoryById(23765);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteCategoryById().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/asset/v1/content/categories/23765',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result,
      'Unexpected request data generated by deleteCategoryById()'
    );
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

  /**
   * Get JSON payload for testing simpleQueryParamsAll().
   *
   * @return array
   *   Data for the JSON payload.
   */
  private function simpleQueryParamsAll() {
    return [
      '$page' => 2,
      '$pagesize' => 4,
      '$orderBy' => 'name%20asc',
      '$filter' => "Name%20like%20'hello%20world'",
      '$fields' => 'field1,field2,field3',
    ];
  }

  /**
   * Get JSON payload for testing simpleQueryParamsSome().
   *
   * @return array
   *   Data for the JSON payload.
   */
  private function simpleQueryParamsSome() {
    return [
      '$page' => 2,
      '$orderBy' => 'name%20asc',
      '$fields' => 'field1,field2,field3',
    ];
  }

  /**
   * Get JSON payload for testing advancedQuery().
   *
   * @return array
   *   Data for the JSON payload.
   */
  private function advancedQueryJson() {
    return [
      "page" => [
        "page" => 1,
        "pageSize" => 50,
      ],
      "query" => [
        "leftOperand" => [
          "property" => "version",
          "simpleOperator" => "equal",
          "value" => 1,
        ],
        "logicalOperator" => "AND",
        "rightOperand" => [
          "property" => "assetType.name",
          "simpleOperator" => "equal",
          "value" => "Template",
        ],
      ],
      "sort" => [
        ["property" => "id", "direction" => "ASC"],
      ],
      "fields" => [
        "enterpriseId",
        "memberId",
        "thumbnail",
        "category",
        "content",
        "data",
      ],
    ];
  }

  /**
   * Get JSON payload for testing createNonSharedCategory().
   *
   * @return array
   *   Data for the JSON payload.
   */
  private function createNonSharedCategoryJson() {
    return [
      "name" => "My Pictures",
      "parentId" => 99,
    ];
  }

  /**
   * Get JSON payload for testing createSharedCategory().
   *
   * @return array
   *   Data for the JSON payload.
   */
  private function createSharedCategoryJson() {
    return [
      "name" => "Shared Pictures",
      "parentId" => 99,
      "sharingProperties" => [
        "sharedWith" => [1575],
        "sharingType" => "edit",
      ],
    ];
  }

  /**
   * Get JSON payload for testing getCategoriesParams().
   *
   * @return array
   *   Data for the JSON payload.
   */
  private function getCategoriesParams() {
    return [
      '$pagesize' => 20,
      '$filter' => "parentId%20eq%203916",
    ];
  }

  /**
   * Get JSON payload for testing updateCategoryById().
   *
   * @return array
   *   Data for the JSON payload.
   */
  private function updateCategoryByIdJson() {
    return [
      "id" => 3916,
      "name" => "Pictures",
      "parentId" => 99,
      "categoryType" => "asset",
      "memberId" => 20720,
      "enterpriseId" => 20720,
    ];
  }

}
