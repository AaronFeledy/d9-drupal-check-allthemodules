<?php

namespace Drupal\Tests\marketing_cloud_contacts\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_contacts module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudContactsTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_contacts'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_contacts.service');
    // Get marketing_cloud_assets config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_contacts.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_contacts.
   */
  public function testDefinitions() {
    /*
     * Test getSchemasCollection()
     */
    $this->validateDefinition('get_schemas_collection');
    // Validate service against expected inputs.
    $result = $this->service
      ->getSchemasCollection();
    $this->assertNotFalse($result, 'Unable to parse the input data in getSchemasCollection().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/schema',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by getSchemasCollection()'
    );

    /*
     * Test createContacts()
     */
    $this->validateDefinition('create_contacts');
    // Validate service against expected inputs.
    $json = $this->createContactsJson();
    $result = $this->service
      ->createContacts($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createContacts().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contacts',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by createContacts()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createContacts($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createContacts()');
    unset($json['foo']);
    // Test against invalid index type.
    $json['contactKey'] = 666;
    $result = $this->service
      ->createContacts($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createContacts()');
    $json['contactKey'] = "acruz@example.com";
    // Test against missing required index.
    unset($json['attributeSets']);
    $result = $this->service
      ->createContacts($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createContacts()');

    /*
     * Test updateContacts()
     */
    $this->validateDefinition('update_contacts');
    // Validate service against expected inputs.
    $json = $this->updateContactsJson();
    $result = $this->service
      ->updateContacts($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in updateContacts().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contacts',
        'data' => json_encode($json),
        'method' => 'patch',
      ],
      $result,
      'Unexpected request data generated by updateContacts()'
    );

    /*
     * Test createContactEvents()
     */
    $this->validateDefinition('create_contact_events');
    // Validate service against expected inputs.
    $json = $this->createContactEventsJson1();
    $result = $this->service
      ->createContactEvents($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createContactEvents().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contactEvents',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by createContactEvents()'
    );
    $json = $this->createContactEventsJson2();
    $result = $this->service
      ->createContactEvents($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createContactEvents().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contactEvents',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by createContactEvents()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createContactEvents($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createContactEvents()');
    unset($json['foo']);
    // Test against invalid index type.
    $json['contactKey'] = 666;
    $result = $this->service
      ->createContactEvents($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createContactEvents()');
    $json['contactKey'] = "myevent";
    // Test against missing required index.
    unset($json['eventDefinitionKey']);
    $result = $this->service
      ->createContactEvents($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createContactEvents()');

    /*
     * Test removeContactFromJourney()
     */
    $this->validateDefinition('remove_contact_from_journey');
    // Validate service against expected inputs.
    $json = $this->removeContactFromJourneyJson();
    $result = $this->service
      ->removeContactFromJourney($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in removeContactFromJourney().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/contactexit',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by removeContactFromJourney()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->removeContactFromJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in removeContactFromJourney()');
    unset($json['foo']);
    // Test against invalid index type.
    $json[0]['contactKey'] = 666;
    $result = $this->service
      ->removeContactFromJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in removeContactFromJourney()');
    $json[0]['contactKey'] = "CONTACTKEY 1";
    // Test against missing required index.
    unset($json[0]['contactKey']);
    $result = $this->service
      ->removeContactFromJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in removeContactFromJourney()');

    /*
     * Test getContactsExitStatusFromJourney()
     */
    $this->validateDefinition('get_contacts_exit_status_from_journey');
    // Validate service against expected inputs.
    $json = $this->removeContactFromJourneyJson();
    $result = $this->service
      ->getContactsExitStatusFromJourney($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in getContactsExitStatusFromJourney().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/contactexit/status',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by getContactsExitStatusFromJourney()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->removeContactFromJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in removeContactFromJourney()');
    unset($json['foo']);
    // Test against invalid index type.
    $json[0]['contactKey'] = 666;
    $result = $this->service
      ->removeContactFromJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in removeContactFromJourney()');
    $json[0]['contactKey'] = "CONTACTKEY 1";
    // Test against missing required index.
    unset($json[0]['contactKey']);
    $result = $this->service
      ->removeContactFromJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in removeContactFromJourney()');

    /*
     * Test searchContacts()
     */
    $this->validateDefinition('search_contacts');
    // Validate service against expected inputs.
    $json = $this->searchContactsJson();
    $result = $this->service
      ->searchContacts($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in searchContacts().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contacts/search',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by searchContacts()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->searchContacts($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchContacts()');
    unset($json['foo']);
    // Test against invalid index type.
    $conditionSet = $json['conditionSet'];
    $json['conditionSet'] = 666;
    $result = $this->service
      ->searchContacts($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchContacts()');
    $json['conditionSet'] = $conditionSet;
    // Test against missing required index.
    unset($json['conditionSet']['operator']);
    $result = $this->service
      ->searchContacts($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchContacts()');

    /*
     * Test searchAttributes()
     */
    $this->validateDefinition('search_attributes');
    // Validate service against expected inputs.
    $json = $this->searchAttributesJson();
    $result = $this->service
      ->searchAttributes($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in searchAttributes().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/attributes/search',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by searchAttributes()'
    );
    // Test against invalid extra index.
    $json['conditionSet']['foo'] = 'bar';
    $result = $this->service
      ->searchAttributes($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchAttributes()');
    unset($json['conditionSet']['foo']);
    // Test against invalid index type.
    $operator = $json['conditionSet']['operator'];
    $json['conditionSet']['operator'] = 666;
    $result = $this->service
      ->searchAttributes($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchAttributes()');
    $json['conditionSet']['operator'] = $operator;
    // Test against missing required index.
    unset($json['conditionSet']['operator']);
    $result = $this->service
      ->searchAttributes($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchAttributes()');

    /*
     * Test insertAttributeValuesById()
     */
    $this->validateDefinition('insert_attribute_values_by_id');
    // Validate service against expected inputs.
    $json = $this->insertAttributeValuesByIdJson();
    $result = $this->service
      ->insertAttributeValuesById(765, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in insertAttributeValuesById().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/attributeSets/765',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by insertAttributeValuesById()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->insertAttributeValuesById(765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertAttributeValuesById()');
    unset($json['foo']);
    // Test against invalid index type.
    $items = $json['items'];
    $json['items'] = 666;
    $result = $this->service
      ->insertAttributeValuesById(765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertAttributeValuesById()');
    $json['items'] = $items;
    // Test against missing required index.
    unset($json['items'][0]['values']);
    $result = $this->service
      ->insertAttributeValuesById(765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertAttributeValuesById()');

    /*
     * Test updateAttributeValuesById()
     */
    $this->validateDefinition('update_attribute_values_by_id');
    // Validate service against expected inputs.
    $json = $this->insertAttributeValuesByIdJson();
    $result = $this->service
      ->updateAttributeValuesById(765, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in updateAttributeValuesById().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/attributeSets/765',
        'data' => json_encode($json),
        'method' => 'patch',
      ],
      $result, 'Unexpected request data generated by updateAttributeValuesById()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->updateAttributeValuesById(765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateAttributeValuesById()');
    unset($json['foo']);
    // Test against invalid index type.
    $items = $json['items'];
    $json['items'] = 666;
    $result = $this->service
      ->updateAttributeValuesById(765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateAttributeValuesById()');
    $json['items'] = $items;
    // Test against missing required index.
    unset($json['items'][0]['values']);
    $result = $this->service
      ->updateAttributeValuesById(765, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateAttributeValuesById()');

    /*
     * Test getContactKeyForEmailAddresses()
     */
    $this->validateDefinition('get_contact_key_for_email_addresses');
    // Validate service against expected inputs.
    $json = $this->getContactKeyForEmailAddressesJson();
    $result = $this->service
      ->getContactKeyForEmailAddresses($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in getContactKeyForEmailAddresses().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/addresses/email/search',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by getContactKeyForEmailAddresses()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->getContactKeyForEmailAddresses($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in getContactKeyForEmailAddresses()');
    unset($json['foo']);
    // Test against invalid index type.
    $maximumCount = $json['maximumCount'];
    $json['items'] = "three";
    $result = $this->service
      ->getContactKeyForEmailAddresses($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in getContactKeyForEmailAddresses()');
    $json['maximumCount'] = $maximumCount;
    // Test against missing required index.
    unset($json['channelAddressList']);
    $result = $this->service
      ->getContactKeyForEmailAddresses($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in getContactKeyForEmailAddresses()');

    /*
     * Test searchAttributeSetsByName()
     */
    $this->validateDefinition('search_attribute_sets_by_name');
    // Validate service against expected inputs.
    $result = $this->service
      ->searchAttributeSetsByName('my_name');
    $this->assertNotFalse($result, 'Unable to parse the input data in searchAttributeSetsByName().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/attributeSets/my_name',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by searchAttributeSetsByName()'
    );

    /*
     * Test searchAttributeGroupsBySchema()
     */
    $this->validateDefinition('search_attribute_groups_by_schema');
    // Validate service against expected inputs.
    $result = $this->service
      ->searchAttributeGroupsBySchema('my_schema');
    $this->assertNotFalse($result, 'Unable to parse the input data in searchAttributeGroupsBySchema().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/schemas/my_schema/attributeGroups',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by searchAttributeGroupsBySchema()'
    );

    /*
     * Test searchAttributeGroupsBySchema()
     */
    $this->validateDefinition('get_custom_object_info');
    // Validate service against expected inputs.
    $result = $this->service
      ->getCustomObjectInfo('my_id');
    $this->assertNotFalse($result, 'Unable to parse the input data in getCustomObjectInfo().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/customObject/my_id/isUsedInContacts',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getCustomObjectInfo()'
    );

    /*
     * Test searchAttributeGroupIdBySchema()
     */
    $this->validateDefinition('search_attribute_group_id_by_schema');
    // Validate service against expected inputs.
    $result = $this->service
      ->searchAttributeGroupIdBySchema('schema_id', 'my_id');
    $this->assertNotFalse($result, 'Unable to parse the input data in searchAttributeGroupIdBySchema().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/schemas/schema_id/attributeGroups/my_id',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by searchAttributeGroupIdBySchema()'
    );

    /*
     * Test searchAttributeSetDefinitions()
     */
    $this->validateDefinition('search_attribute_set_definitions');
    // Validate service against expected inputs.
    $result = $this->service
      ->searchAttributeSetDefinitions('my_id');
    $this->assertNotFalse($result, 'Unable to parse the input data in searchAttributeSetDefinitions().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/attributeSetDefinitions/my_id',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by searchAttributeSetDefinitions()'
    );

    /*
     * Test searchAttributeSetNamesBySchema()
     */
    $this->validateDefinition('search_attribute_set_names_by_schema');
    // Validate service against expected inputs.
    $json = $this->searchAttributeSetNamesBySchemaJson();
    $result = $this->service
      ->searchAttributeSetNamesBySchema('my_schema', 'my_name', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in searchAttributeSetNamesBySchema().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/schemas/my_schema/attributeSets/my_name/search',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by searchAttributeSetDefinitionsIdBySchemaJson()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->searchAttributeSetNamesBySchema('my_schema', 'my_name', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchAttributeSetNamesBySchema()');
    unset($json['foo']);
    // Test against invalid index type.
    $operator = $json['conditionSet']['operator'];
    $json['conditionSet']['operator'] = 7645;
    $result = $this->service
      ->searchAttributeSetNamesBySchema('my_schema', 'my_name', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchAttributeSetNamesBySchema()');
    $json['conditionSet']['operator'] = $operator;
    // Test against missing required index.
    unset($json['conditionSet']['operator']);
    $result = $this->service
      ->searchAttributeSetNamesBySchema('my_schema', 'my_name', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in searchAttributeSetNamesBySchema()');

    /*
     * Test deleteContactsById()
     */
    $this->validateDefinition('delete_contacts_by_id');
    // Validate service against expected inputs.
    $json = $this->deleteContactsByIdJson();
    $result = $this->service
      ->deleteContactsById($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteContactsById().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contacts/actions/delete?type=ids',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by deleteContactsById()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->deleteContactsById($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsById()');
    unset($json['foo']);
    // Test against invalid index type.
    $deleteOperationType = $json['deleteOperationType'];
    $json['deleteOperationType'] = 7645;
    $result = $this->service
      ->deleteContactsById($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsById()');
    $json['deleteOperationType'] = $deleteOperationType;
    // Test against missing required index.
    unset($json['deleteOperationType']);
    $result = $this->service
      ->deleteContactsById($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsById()');

    /*
     * Test deleteContactsByKey()
     */
    $this->validateDefinition('delete_contacts_by_key');
    // Validate service against expected inputs.
    $json = $this->deleteContactsByKeyJson();
    $result = $this->service
      ->deleteContactsByKey($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteContactsByKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contacts/actions/delete?type=keys',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by deleteContactsByKey()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->deleteContactsByKey($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsByKey()');
    unset($json['foo']);
    // Test against invalid index type.
    $contactTypeId = $json['contactTypeId'];
    $json['contactTypeId'] = "one hundred";
    $result = $this->service
      ->deleteContactsByKey($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsByKey()');
    $json['contactTypeId'] = $contactTypeId;
    // Test against missing required index.
    unset($json['deleteOperationType']);
    $result = $this->service
      ->deleteContactsByKey($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsByKey()');

    /*
     * Test deleteContactsByListReference()
     */
    $this->validateDefinition('delete_contacts_by_list_reference');
    // Validate service against expected inputs.
    $json = $this->deleteContactsByListReferenceJson();
    $result = $this->service
      ->deleteContactsByListReference($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteContactsByListReference().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/contacts/v1/contacts/actions/delete?type=listReference',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by deleteContactsByListReference()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->deleteContactsByListReference($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsByListReference()');
    unset($json['foo']);
    // Test against invalid index type.
    $deleteOperationType = $json['deleteOperationType'];
    $json['deleteOperationType'] = 100;
    $result = $this->service
      ->deleteContactsByListReference($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsByListReference()');
    $json['deleteOperationType'] = $deleteOperationType;
    // Test against missing required index.
    unset($json['deleteOperationType']);
    $result = $this->service
      ->deleteContactsByListReference($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteContactsByListReference()');
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

  /**
   * Create a sample payload for testing createContacts().
   *
   * @return array
   *   Sample payload for the createContacts() Json.
   */
  private function createContactsJson() {
    return [
      "contactKey" => "acruz@example.com",
      "attributeSets" => [
        [
          "name" => "Email Addresses",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Email Address",
                  "value" => "acruz@example.com",
                ], [
                  "name" => "HTML Enabled",
                  "value" => TRUE,
                ],
              ],
            ],
          ],
        ], [
          "name" => "Email Demographics",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Last Name",
                  "value" => "Cruz",
                ], [
                  "name" => "First Name",
                  "value" => "Angela",
                ], [
                  "name" => "Text Profile Attribute",
                  "value" => "value 1",
                ], [
                  "name" => "Number Profile Attribute",
                  "value" => 12345,
                ],
              ],
            ],
          ],
        ], [
          "name" => "MobileConnect Demographics",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Mobile Number",
                  "value" => "317-531-5555",
                ], [
                  "name" => "Locale",
                  "value" => "US",
                ], [
                  "name" => "Status",
                  "value" => 1,
                ],
              ],
            ],
          ],
        ], [
          "name" => "MobilePush Demographics",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Device ID",
                  "value" => 958405948,
                ], [
                  "name" => "Application",
                  "value" => 958405948,
                ],
              ],
            ],
          ],
        ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing updateContacts().
   *
   * @return array
   *   Sample payload for the updateContacts() Json.
   */
  private function updateContactsJson() {
    return [
      "contactKey" => "acruz@example.com",
      "contactID" => "12345678",
      "attributeSets" => [
        [
          "name" => "Email Addresses",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Email Address",
                  "value" => "acruz@example.com",
                ], [
                  "name" => "HTML Enabled",
                  "value" => "true",
                ],
              ],
            ],
          ],
        ], [
          "name" => "Email Demographics",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Last Name",
                  "value" => "Cruz",
                ], [
                  "name" => "First Name",
                  "value" => "Angela",
                ], [
                  "name" => "Text Profile Attribute",
                  "value" => "value 1",
                ], [
                  "name" => "Number Profile Attribute",
                  "value" => 12345,
                ],
              ],
            ],
          ],
        ], [
          "name" => "MobileConnect Demographics",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Mobile Number",
                  "value" => "555-555-5555",
                ],
              ],
            ],
          ],
        ], [
          "name" => "MobilePush Demographics",
          "items" => [
            [
              "values" => [
                [
                  "name" => "Device ID",
                  "value" => 958405948,
                ], [
                  "name" => "Application",
                  "value" => 958405948,
                ],
              ],
            ],
          ],
        ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing createContactEvents().
   *
   * @return array
   *   Sample payload 1 for the createContactEvents() Json.
   */
  private function createContactEventsJson1() {
    return [
      "contactKey" => "sgest@example.com",
      "contactID" => "1234567",
      "eventDefinitionKey" => "myevent",
      "data" => [[
        "key" => "RetailOrderEvent",
        "name" => "Retail Order Event",
        "id" => "5CE001F0-6B8F-E311-A274-08EDB9DDEBF0",
        "items" => [[
          "values" => [[
            "name" => "Customer Key",
            "value" => "acruz@example.com",
          ],
              [
                "name" => "Order Number",
                "value" => "123456",
              ],
              [
                "name" => "Order Total",
                "value" => "177.99",
              ],
          ],
        ],
        ],
      ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing createContactEvents().
   *
   * @return array
   *   Sample payload 2 for the createContactEvents() Json.
   */
  private function createContactEventsJson2() {
    return [
      "eventDefinitionKey" => "myevent",
      "data" => [[
        "key" => "RetailOrderEvent",
        "name" => "Retail Order Event",
        "id" => "5CE001F0-6B8F-E311-A274-08EDB9DDEBF0",
        "items" => [[
          "values" => [[
            "name" => "Customer Key",
            "value" => "acruz@example.com",
          ],
              [
                "name" => "Order Number",
                "value" => "123456",
              ],
              [
                "name" => "Order Total",
                "value" => "177.99",
              ],
          ],
        ],
        ],
      ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing removeContactFromJourney().
   *
   * @return array
   *   Sample payload for the removeContactFromJourney() Json.
   */
  private function removeContactFromJourneyJson() {
    return [
      [
        "contactKey" => "CONTACTKEY 1",
        "definitionKey" => "DEFINITIONKEY",
      ], [
        "contactKey" => "CONTACTKEY 2",
        "definitionKey" => "INVALID DEFINITIONKEY",
        "versions"  => [1, 2],
      ],
    ];
  }

  /**
   * Create a sample payload for testing searchContacts().
   *
   * @return array
   *   Sample payload for the searchContacts() Json.
   */
  private function searchContactsJson() {
    return [
      "conditionSet" => [
        "operator" => "Or",
        "conditionSets" => [[
          "operator" => "And",
          "conditions" => [[
            "attribute" => [
              "key" => "Email Demographics.AttributeA",
              "id" => "",
              "isCustomerData" => FALSE,
            ],
            "operator" => "Equals",
            "value" => [
              "items" => ["Value1"],
            ],
          ], [
            "attribute" => [
              "key" => "Email Demographics.AttributeB",
              "id" => "",
              "isCustomerData" => FALSE,
            ],
            "operator" => "Equals",
            "value" => [
              "items" => ["Value2"],
            ],
          ],
          ],
        ], [
          "operator" => "And",
          "conditions" => [[
            "attribute" => [
              "key" => "Email Demographics.AttributeA",
              "id" => "",
              "isCustomerData" => FALSE,
            ],
            "operator" => "Equals",
            "value" => [
              "items" => ["Value3"],
            ],
          ], [
            "attribute" => [
              "key" => "Email Demographics.AttributeB",
              "id" => "",
              "isCustomerData" => FALSE,
            ],
            "operator" => "Equals",
            "value" => [
              "items" => ["Value4"],
            ],
          ],
          ],
        ],
        ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing searchAttributes().
   *
   * @return array
   *   Sample payload for the searchAttributes() Json.
   */
  private function searchAttributesJson() {
    return [
      "request" => [
        "attributes" => [
          [
            "key" => "MobileConnect Demographics.First Name",
          ], [
            "key" => "MobileConnect Demographics.Last Name",
          ], [
            "key" => "Retail Orders.Order Number",
          ], [
            "key" => "Retail Orders.Order Total",
          ],
        ],
      ],
      "conditionSet" => [
        "operator" => "And",
        "conditionSets" => [],
        "conditions" => [
          [
            "attribute" => [
              "key" => "Retail Orders.Order Total",
            ],
            "operator" => "GreaterThan",
            "value" => [
              "items" => ["1,000.00"],
            ],
          ],
        ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing insertAttributeValuesById().
   *
   * @return array
   *   Sample payload for the insertAttributeValuesById() Json.
   */
  private function insertAttributeValuesByIdJson() {
    return [
      "items" => [[
        "values" => [[
          "name" => "Customer Key",
          "value" => "sgest@example.com",
        ], [
          "name" => "Order Number",
          "value" => "123456",
        ], [
          "name" => "Order Total",
          "value" => "177.99",
        ],
        ],
      ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing getContactKeyForEmailAddresses().
   *
   * @return array
   *   Sample payload for the getContactKeyForEmailAddresses() Json.
   */
  private function getContactKeyForEmailAddressesJson() {
    return [
      "channelAddressList" => ["email@example.com"],
      "maximumCount" => 1,
    ];
  }

  /**
   * Create a sample payload for testing searchAttributeSetNamesBySchema().
   *
   * @return array
   *   Sample payload for the searchAttributeSetNamesBySchema() Json.
   */
  private function searchAttributeSetNamesBySchemaJson() {
    return [
      "conditionSet" => [
        "operator" => "And",
        "conditionSets" => [],
        "conditions" => [[
          "attribute" => [
            "key" => "MobileDemographics.MobileNumber",
            "id" => "",
            "isCustomerData" => FALSE,
          ],
          "operator" => "In",
          "values" => ["3171233456", ""],
        ],
        ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing deleteContactsByIdJson().
   *
   * @return array
   *   Sample payload for the deleteContactsById() Json.
   */
  private function deleteContactsByIdJson() {
    return [
      "values" => [
        "317-531-5555",
        "317-531-5556",
      ],
      "deleteOperationType" => "ContactAndAttributes",
    ];
  }

  /**
   * Create a sample payload for testing deleteContactsByKey().
   *
   * @return array
   *   Sample payload 2 for the deleteContactsByKey() Json.
   */
  private function deleteContactsByKeyJson() {
    return [
      "contactTypeId" => 0,
      "values" => [
        "TEST_317-531-5555", "TEST_317-531-5556",
      ],
      "deleteOperationType" => "ContactAndAttributes",
    ];
  }

  /**
   * Create a sample payload for testing deleteContactsByListReference().
   *
   * @return array
   *   Sample payload 2 for the deleteContactsByListReference() Json.
   */
  private function deleteContactsByListReferenceJson() {
    return [
      "deleteOperationType" => "ContactAndAttributes",
      "targetList" => [
        "listType" => [
          "listTypeID" => 3,
        ],
        "listKey" => "ContactListDeleteSource_as_DataExtension",
      ],
      "deleteListWhenCompleted" => FALSE,
      "deleteListContentsWhenCompleted" => FALSE,
    ];
  }

}
