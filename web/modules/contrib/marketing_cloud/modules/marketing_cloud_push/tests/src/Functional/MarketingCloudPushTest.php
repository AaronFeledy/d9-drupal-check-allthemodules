<?php

namespace Drupal\Tests\marketing_cloud_push\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_push module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudPushTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_push'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_push.service');
    // Get config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_push.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_push.
   */
  public function testDefinitions() {
    /*
     * Test createPushMessage
     */
    $this->validateDefinition('create_push_message');
    // Validate service against expected inputs.
    $json = $this->createPushMessageJson();
    $result = $this->service
      ->createPushMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createPushMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/message',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createPushMessage()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createPushMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createPushMessage()');
    unset($json['foo']);
    // Test against invalid type.
    $sound = $json['sound'];
    $json['sound'] = 34;
    $result = $this->service
      ->createPushMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createPushMessage()');
    $json['sound'] = $sound;
    // Test against missing required index.
    unset($json['application']);
    $result = $this->service
      ->createPushMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createPushMessage()');

    /*
     * Test getPushMessages
     */
    $this->validateDefinition('get_push_messages');
    // Validate service against expected inputs.
    $result = $this->service
      ->getPushMessages();
    $this->assertNotFalse($result, 'Unable to parse the input data in getPushMessages().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/message',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getPushMessages()'
    );

    /*
     * Test createLocation
     */
    $this->validateDefinition('create_location');
    // Validate service against expected inputs.
    $json = $this->createLocationJson();
    $result = $this->service
      ->createLocation($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createLocation().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/location',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createLocation()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createLocation($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createLocation()');
    unset($json['foo']);
    // Test against invalid type.
    $location = $json['location'];
    $json['sound'] = 34;
    $result = $this->service
      ->createLocation($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createLocation()');
    $json['location'] = $location;
    // Test against missing required index.
    unset($json['name']);
    $result = $this->service
      ->createLocation($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createLocation()');

    /*
     * Test getLocations
     */
    $this->validateDefinition('get_locations');
    // Validate service against expected inputs.
    $result = $this->service
      ->getLocations();
    $this->assertNotFalse($result, 'Unable to parse the input data in getLocations().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/location',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getLocations()'
    );

    /*
     * Test getAppInfo
     */
    $this->validateDefinition('get_app_info');
    // Validate service against expected inputs.
    $result = $this->service
      ->getAppInfo('my_app');
    $this->assertNotFalse($result, 'Unable to parse the input data in getAppInfo().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/application/my_app',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getAppInfo()'
    );

    /*
     * Test updatePushMessage
     */
    $this->validateDefinition('update_push_message');
    // Validate service against expected inputs.
    $json = $this->updatePushMessageJson();
    $result = $this->service
      ->updatePushMessage('my_message_id', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in updatePushMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/message/my_message_id',
        'data' => json_encode($json),
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by updatePushMessage()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->updatePushMessage('my_message_id', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updatePushMessage()');
    unset($json['foo']);
    // Test against invalid type.
    $sound = $json['sound'];
    $json['sound'] = 34;
    $result = $this->service
      ->updatePushMessage('my_message_id', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updatePushMessage()');
    $json['sound'] = $sound;

    /*
     * Test deletePushMessage
     */
    $this->validateDefinition('delete_push_message');
    // Validate service against expected inputs.
    $result = $this->service
      ->deletePushMessage('my_message_id');
    $this->assertNotFalse($result, 'Unable to parse the input data in deletePushMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/message/my_message_id',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deletePushMessage()'
    );

    /*
     * Test getPushMessage
     */
    $this->validateDefinition('get_push_message');
    // Validate service against expected inputs.
    $result = $this->service
      ->getPushMessage('my_message_id');
    $this->assertNotFalse($result, 'Unable to parse the input data in getPushMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/message/my_message_id',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getPushMessage()'
    );

    /*
     * Test getSpecificLocation
     */
    $this->validateDefinition('get_specific_location', 'get');
    // Validate service against expected inputs.
    $result = $this->service
      ->getSpecificLocation('my_message_id');
    $this->assertNotFalse($result, 'Unable to parse the input data in getSpecificLocation().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/location/my_message_id',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getSpecificLocation()'
    );

    /*
     * Test updateLocation
     */
    $this->validateDefinition('update_location');
    // Validate service against expected inputs.
    $json = $this->updateLocationJson();
    $result = $this->service
      ->updateLocation('my_location_id', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in updateLocation().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/location/my_location_id',
        'data' => json_encode($json),
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by updateLocation()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->updateLocation('my_location_id', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateLocation()');
    unset($json['foo']);
    // Test against invalid type.
    $location = $json['location'];
    $json['sound'] = 34;
    $result = $this->service
      ->updateLocation('my_location_id', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateLocation()');
    $json['location'] = $location;
    // Test against missing required index.
    unset($json['name']);
    $result = $this->service
      ->updateLocation('my_location_id', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateLocation()');

    /*
     * Test deleteLocation
     */
    $this->validateDefinition('delete_location');
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteLocation('my_location_id');
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteLocation().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/location/my_location_id',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deleteLocation()'
    );

    /*
     * Test getCustomKeys
     */
    $this->validateDefinition('get_custom_keys');
    // Validate service against expected inputs.
    $result = $this->service
      ->getCustomKeys('{B2E635FA-4894-4A4F-9125-5A88B27FCD04}');
    $this->assertNotFalse($result, 'Unable to parse the input data in getCustomKeys().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/application/{B2E635FA-4894-4A4F-9125-5A88B27FCD04}/key',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getCustomKeys()'
    );

    /*
     * Test updateCustomKeys
     */
    $this->validateDefinition('update_custom_keys');
    // Validate service against expected inputs.
    $json = $this->updateCustomKeysJson();
    $result = $this->service
      ->updateCustomKeys('B2E635FA-4894-4A4F-9125-5A88B27FCD04', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in updateCustomKeys().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/application/B2E635FA-4894-4A4F-9125-5A88B27FCD04/key',
        'data' => json_encode($json),
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by updateCustomKeys()'
    );
    // Test against invalid extra index.
    $json[0]['foo'] = 'bar';
    $result = $this->service
      ->updateCustomKeys('B2E635FA-4894-4A4F-9125-5A88B27FCD04', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateCustomKeys()');
    unset($json[0]['foo']);
    // Test against invalid type.
    $key = $json[0]['key'];
    $json[0]['key'] = 34;
    $result = $this->service
      ->updateCustomKeys('B2E635FA-4894-4A4F-9125-5A88B27FCD04', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateCustomKeys()');
    $json[0]['key'] = $key;
    // Test against missing required index.
    unset($json[0]['key']);
    $result = $this->service
      ->updateCustomKeys('B2E635FA-4894-4A4F-9125-5A88B27FCD04', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateCustomKeys()');

    /*
     * Test deleteCustomKeys
     */
    $this->validateDefinition('delete_custom_keys');
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteCustomKeys('{B2E635FA-4894-4A4F-9125-5A88B27FCD04}');
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteCustomKeys().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/application/{B2E635FA-4894-4A4F-9125-5A88B27FCD04}/key',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deleteCustomKeys()'
    );

    /*
     * Test refreshList
     */
    $this->validateDefinition('delete_custom_keys');
    // Validate service against expected inputs.
    $result = $this->service
      ->refreshList('bzZ0cENGam1FZUtNX0poTDRYZzhlQTo2Mzow');
    $this->assertNotFalse($result, 'Unable to parse the input data in refreshList().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/contacts/refreshList/bzZ0cENGam1FZUtNX0poTDRYZzhlQTo2Mzow',
        'data' => '{}',
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by refreshList()'
    );

    /*
     * Test sendMessageToAll
     */
    $this->validateDefinition('send_message_to_all');
    // Validate service against expected inputs.
    $json = $this->sendMessageToAllJson();
    $result = $this->service
      ->sendMessageToAll('OEl8ODow', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in sendMessageToAll().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageApp/OEl8ODow/send',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by sendMessageToAll()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->sendMessageToAll('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToAll()');
    unset($json['foo']);
    // Test against invalid type.
    $title = $json['title'];
    $json['title'] = 34;
    $result = $this->service
      ->sendMessageToAll('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToAll()');
    $json['title'] = $title;

    /*
     * Test sendMessageToTaggedUsers
     */
    $this->validateDefinition('send_message_to_tagged_users');
    // Validate service against expected inputs.
    $json = $this->sendMessageToTaggedUsersJson();
    $result = $this->service
      ->sendMessageToTaggedUsers('OEl8ODow', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in sendMessageToTaggedUsers().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageTag/OEl8ODow/send',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by sendMessageToTaggedUsers()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->sendMessageToTaggedUsers('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToTaggedUsers()');
    unset($json['foo']);
    // Test against invalid type.
    $exclusionTags = $json['exclusionTags'];
    $json['exclusionTags'] = 'array';
    $result = $this->service
      ->sendMessageToTaggedUsers('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToTaggedUsers()');
    $json['exclusionTags'] = $exclusionTags;
    // Test against missing required attribute.
    unset($json['inclusionTags']);
    $result = $this->service
      ->sendMessageToTaggedUsers('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToTaggedUsers()');
    $json['title'] = $title;

    /*
     * Test sendMessageToList
     */
    $this->validateDefinition('send_message_to_list');
    // Validate service against expected inputs.
    $json = $this->sendMessageToListJson();
    $result = $this->service
      ->sendMessageToList('OEl8ODow', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in sendMessageToList().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageList/OEl8ODow/send',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by sendMessageToList()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->sendMessageToList('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToList()');
    unset($json['foo']);
    // Test against invalid type.
    $exclusionListIds = $json['exclusionListIds'];
    $json['exclusionListIds'] = 'array';
    $result = $this->service
      ->sendMessageToList('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToList()');
    $json['exclusionListIds'] = $exclusionListIds;
    // Test against missing required attribute.
    unset($json['inclusionListIds']);
    $result = $this->service
      ->sendMessageToList('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToList()');
    $json['title'] = $title;

    /*
     * Test updateCustomKey
     */
    $this->validateDefinition('update_custom_key');
    // Validate service against expected inputs.
    $result = $this->service
      ->updateCustomKey('B2E635FA-4894-4A4F-9125-5A88B27FCD04', 'my_key');
    $this->assertNotFalse($result, 'Unable to parse the input data in updateCustomKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/application/B2E635FA-4894-4A4F-9125-5A88B27FCD04/key/my_key',
        'data' => '{}',
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by updateCustomKey()'
    );

    /*
     * Test deleteCustomKey
     */
    $this->validateDefinition('delete_custom_key');
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteCustomKey('B2E635FA-4894-4A4F-9125-5A88B27FCD04', 'key1');
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteCustomKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/application/B2E635FA-4894-4A4F-9125-5A88B27FCD04/key/key1',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deleteCustomKey()'
    );

    /*
     * Test sendMessageToMobileDevicesInBatch
     */
    $this->validateDefinition('send_messages_to_mobile_devices_in_batch');
    // Validate service against expected inputs.
    $json = $this->sendMessageToMobileDevicesInBatchJson();
    $result = $this->service
      ->sendMessageToMobileDevicesInBatch('MToxMTQ6MA', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in sendMessageToMobileDevicesInBatch().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageBatch/MToxMTQ6MA/send',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by sendMessageToMobileDevicesInBatch()'
    );
    // Test against invalid extra index.
    $json[0]['foo'] = 'bar';
    $result = $this->service
      ->sendMessageToMobileDevicesInBatch('MToxMTQ6MA', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToMobileDevicesInBatch()');
    unset($json[0]['foo']);
    // Test against invalid type.
    $inclusionTags = $json[0]['inclusionTags'];
    $json[0]['inclusionTags'] = 'array';
    $result = $this->service
      ->sendMessageToMobileDevicesInBatch('MToxMTQ6MA', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToMobileDevicesInBatch()');
    $json[0]['inclusionTags'] = $inclusionTags;
    // Test against missing required attribute.
    unset($json[0]['message']);
    $result = $this->service
      ->sendMessageToMobileDevicesInBatch('MToxMTQ6MA', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToMobileDevicesInBatch()');
    $json['title'] = $title;

    /*
     * Test sendMessageToMobileDevices
     */
    $this->validateDefinition('send_message_to_mobile_devices');
    // Validate service against expected inputs.
    $json = $this->sendMessageToMobileDevicesJson();
    $result = $this->service
      ->sendMessageToMobileDevices('OEl8ODow', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in sendMessageToMobileDevices().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageContact/OEl8ODow/send',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by sendMessageToMobileDevices()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->sendMessageToMobileDevices('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToMobileDevices()');
    unset($json['foo']);
    // Test against invalid type.
    $inclusionTags = $json['inclusionTags'];
    $json['inclusionTags'] = 'array';
    $result = $this->service
      ->sendMessageToMobileDevices('OEl8ODow', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in sendMessageToMobileDevices()');
    $json['inclusionTags'] = $inclusionTags;

    /*
     * Test getRefreshListStatus
     */
    $this->validateDefinition('get_refresh_list_status');
    // Validate service against expected inputs.
    $result = $this->service
      ->getRefreshListStatus('ENGam1FZUtNX0p', 'NDo8NDow');
    $this->assertNotFalse($result, 'Unable to parse the input data in getRefreshListStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/contacts/refreshList/ENGam1FZUtNX0p/status/NDo8NDow',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getRefreshListStatus()'
    );

    /*
     * Test getDeliveryStatusOfMessageApp
     */
    $this->validateDefinition('get_delivery_status_of_message_app');
    // Validate service against expected inputs.
    $result = $this->service
      ->getDeliveryStatusOfMessageApp('OEl8ODow', '98sdkj23');
    $this->assertNotFalse($result, 'Unable to parse the input data in getDeliveryStatusOfMessageApp().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageApp/OEl8ODow/deliveries/98sdkj23',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getDeliveryStatusOfMessageApp()'
    );

    /*
     * Test getDeliveryStatusOfMessageTag
     */
    $this->validateDefinition('get_delivery_status_of_message_tag');
    // Validate service against expected inputs.
    $result = $this->service
      ->getDeliveryStatusOfMessageTag('OEl8ODow', '98sdkj23');
    $this->assertNotFalse($result, 'Unable to parse the input data in getDeliveryStatusOfMessageApp().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageTag/OEl8ODow/deliveries/98sdkj23',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getDeliveryStatusOfMessageTag()'
    );

    /*
     * Test getDeliveryStatusOfMessageList
     */
    $this->validateDefinition('get_delivery_status_of_message_list');
    // Validate service against expected inputs.
    $result = $this->service
      ->getDeliveryStatusOfMessageList('ODg5MzoxMMM1MM', 'aa11bb2c-1a03-4b50-9f97-81c88e233274');
    $this->assertNotFalse($result, 'Unable to parse the input data in getDeliveryStatusOfMessageList().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageList/ODg5MzoxMMM1MM/deliveries/aa11bb2c-1a03-4b50-9f97-81c88e233274',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getDeliveryStatusOfMessageList()'
    );

    /*
     * Test getDeliveryStatusOfMessageContact
     */
    $this->validateDefinition('get_delivery_status_of_message_contact');
    // Validate service against expected inputs.
    $result = $this->service
      ->getDeliveryStatusOfMessageContact('OEl8ODow', '1b1a8ca8-ee31-4f50-9ab3-efb30efef72d');
    $this->assertNotFalse($result, 'Unable to parse the input data in getDeliveryStatusOfMessageContact().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/push/v1/messageContact/OEl8ODow/deliveries/1b1a8ca8-ee31-4f50-9ab3-efb30efef72d',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getDeliveryStatusOfMessageContact()'
    );
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

  /**
   * Get test data for createPushMessage().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function createPushMessageJson() {
    return [
      "messageType" => 1,
      "contentType" => 1,
      "name" => "My Message Name",
      "application" => [
        "id" => "237690ac-41ff-4d3f-82f2-9c7efd89185f",
        "name" => "MyApplication",
      ],
      "alert" => "Alert message to show on device",
      "sound" => "Sound to play, or 'default'",
      "badge" => "+1",
      "content-available" => 1,
      "openDirect" => "OD001",
      "keys" => [
        ["key" => "key01", "value" => "value01"],
        ["key" => "key02", "value" => "value02"],
        ["key" => "key03", "value" => "value03"],
      ],
      "custom" => [
        "customA" => 1,
        "customB" => "custom text b",
        "customC" => [
          "cC" => "custom text c",
        ],
      ],
      "sendInitiator" => 0,
      "startDate" => "2014-04-30T14 =>50 =>00Z",
      "endDate" => "2014-04-30T14 =>55 =>00Z",
      "messagesPerPeriod" => 1000,
      "minutesPerPeriod" => 60,
      "numberOfPeriods" => 24,
      "periodType" => 5,
      "isRollingPeriod" => FALSE,
      "messageLimit" => 1,
      "tzBased" => TRUE,
      "tzPastSendAction" => 0,
      "scheduledTzOffset" => -4.0,
      "scheduledTzSupportsDst" => TRUE,
      "inclusionLists" => [
        ["id" => "listID01"],
        ["id" => "listID02"],
        ["id" => "listID03"],
      ],
      "exclusionLists" => [
        ["id" => "listID04"],
        ["id" => "listID05"],
        ["id" => "listID06"],
      ],
      "status" => 2,
      "pageId" => 456,
      "url" => "http =>//www.example.com",
      "subject" => "My inbox subject line",
      "media" => [
        "iosUrl" => "https =>//example.com",
        "androidUrl" => "https =>//example.com",
        "alt" => "Example ALT Text",
      ],
      "geofences" => [
        ["id" => "MTIzOjEyODow"],
        ["id" => "MzIxOjEyODow"],
      ],
    ];
  }

  /**
   * Get test data for createLocation().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function createLocationJson() {
    return [
      "name" => "Location A",
      "location" => "Main Location on Elm Street",
      "description" => "Location at 123 Elm St, Nowhere, CA 00000",
      "center" => [
        "latitude" => 30.750362,
        "longitude" => -95.374712,
      ],
      "radius" => 50,
      "attributes" => [
        [
          "attribute" => "Address 1",
          "value" => "123 Elm St",
        ], [
          "attribute" => "City",
          "value" => "Nowhere",
        ], [
          "attribute" => "State",
          "value" => "CA",
        ], [
          "attribute" => "Zip",
          "value" => "00000",
        ],
      ],
    ];
  }

  /**
   * Get test data for updatePushMessage().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function updatePushMessageJson() {
    return [
      "messageType" => 1,
      "contentType" => 1,
      "name" => "My Message Name",
      "application" => [
        "id" => "237690ac-41ff-4d3f-82f2-9c7efd89185f",
        "name" => "MyApplication",
      ],
      "alert" => "Alert message to show on device",
      "sound" => "Sound to play, or 'default'",
      "badge" => "+1",
      "content-available" => 1,
      "openDirect" => "OD001",
      "keys" => [
        ["key" => "key01", "value" => "value01"],
        ["key" => "key02", "value" => "value02"],
        ["key" => "key03", "value" => "value03"],
      ],
      "custom" => [
        "customA" => 1,
        "customB" => "custom text b",
        "customC" => [
          "cC" => "custom text c",
        ],
      ],
      "sendInitiator" => 0,
      "startDate" => "2014-04-30T14 =>50 =>00Z",
      "messagesPerPeriod" => 1000,
      "minutesPerPeriod" => 60,
      "numberOfPeriods" => 24,
      "periodType" => 5,
      "isRollingPeriod" => FALSE,
      "messageLimit" => 1,
      "tzBased" => TRUE,
      "tzPastSendAction" => 0,
      "scheduledTzOffset" => -4.0,
      "scheduledTzSupportsDst" => TRUE,
      "inclusionLists" => [
        ["id" => "listID01"],
        ["id" => "listID02"],
        ["id" => "listID03"],
      ],
      "exclusionLists" => [
        ["id" => "listID04"],
        ["id" => "listID05"],
        ["id" => "listID06"],
      ],
      "status" => 2,
      "pageId" => 456,
      "url" => "http =>//www.example.com",
      "subject" => "My inbox subject line",
      "geofences" => [
        ["id" => "MTIzOjEyODow"],
        ["id" => "MzIxOjEyODow"],
      ],
    ];
  }

  /**
   * Get test data for updateLocation().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function updateLocationJson() {
    return [
      "name" => "Location A",
      "location" => "Main Location on Elm Street",
      "description" => "Location at 123 Elm St, Nowhere, CA 00000",
      "center" => [
        "latitude" => 30.750362,
        "longitude" => -95.374712,
      ],
      "radius" => 50,
      "attributes" => [
        [
          "attribute" => "Address 1",
          "value" => "123 Elm St",
        ], [
          "attribute" => "City",
          "value" => "Nowhere",
        ], [
          "attribute" => "State",
          "value" => "CA",
        ], [
          "attribute" => "Zip",
          "value" => "00000",
        ],
      ],
    ];
  }

  /**
   * Get test data for updateCustomKeys().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function updateCustomKeysJson() {
    return [
      [
        "key" => "key1",
        "description" => "description1",
      ], [
        "key" => "key2",
        "description" => "description2",
      ], [
        "key" => "key3",
        "description" => "description3",
      ],
    ];
  }

  /**
   * Get test data for sendMessageToAll().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function sendMessageToAllJson() {
    return [
      "override" => TRUE,
      "messageText" => "New information available!",
      "title" => "Boost your winnings!",
      "subtitle" => "Check your app to see what else is in store.",
      "mutable-content" => TRUE,
      "sendTime" => "2012-10-31 09 =>00",
      "sound" => "MyFile.caf",
      "badge" => "+1",
      "openDirect" => "OD01",
      "customKeys" => [
        "keyA" => "keyA_value",
        "keyB" => "keyB_value",
      ],
      "customPayload" => ["customA" => "customA_value"],
    ];
  }

  /**
   * Get test data for sendMessageToTaggedUsers().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function sendMessageToTaggedUsersJson() {
    return [
      "inclusionTags" => ["Midwest"],
      "exclusionTags" => ["Indiana, Ohio"],
      "override" => TRUE,
      "messageText" => "New information available!",
      "title" => "Boost your winnings!",
      "subtitle" => "Check your app to see what else is in store.",
      "mutable-content" => TRUE,
      "sendTime" => "2012-10-31 09 =>00",
      "sound" => "MyFile.caf",
      "badge" => "+1",
      "openDirect" => "OD01",
      "customKeys" => [
        "keyA" => "keyA_value",
        "keyB" => "keyB_value",
      ],
      "customPayload" => ["customA" => "customA_value"],
    ];
  }

  /**
   * Get test data for sendMessageToList().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function sendMessageToListJson() {
    return [
      "inclusionListIds" => [
        "UTZ6QTh4MVRmMC1XZlN5QUtnS3hWdzo2NTow",
      ],
      "exclusionListIds" => [
        "VWRoY1IzcWh2RXVvc3FDYTRfcGtvQTo2NTow",
      ],
      "override" => TRUE,
      "messageText" => "New information available!",
      "title" => "Boost your winnings!",
      "subtitle" => "Check your app to see what else is in store.",
      "mutable-content" => TRUE,
      "sendTime" => "2012-10-31 09 =>00",
      "sound" => "MyFile.caf",
      "badge" => "+1",
      "openDirect" => "OD01",
      "customKeys" => [
        "keyA" => "keyA_value",
        "keyB" => "keyB_value",
      ],
      "customPayload" => ["customA" => "customA_value"],
    ];
  }

  /**
   * Get test data for sendMessageToMobileDevicesInBatch().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function sendMessageToMobileDevicesInBatchJson() {
    return [
      [
        "deviceTokens" => [
          "DeviceToken1",
          "DeviceToken2",
        ],
        "inclusionTags" => [
          "footballTeam",
        ],
        "message" => [
          "alert" => "Your team WINS!",
          "badge" => "+1",
          "sound" => "default",
          "custom" => [
            "6" => "20",
          ],
        ],
      ],
      [
        "subscriberKeys" => [
          "SubscriberKey1",
        ],
        "inclusionTags" => [
          "baseballTeam",
        ],
        "message" => [
          "alert" => "Good game team!",
          "badge" => "+1",
          "sound" => "default",
          "custom" => [
            "6" => "20",
          ],
        ],
      ],
    ];
  }

  /**
   * Get test data for sendMessageToMobileDevices().
   *
   * @return array
   *   Sample JSON payload for testing.
   */
  private function sendMessageToMobileDevicesJson() {
    return [
      "deviceTokens" => [
        "DeviceToken1",
        "DeviceToken2",
        "DeviceToken3",
      ],
      "inclusionTags" => [
        "Midwest",
      ],
      "exclusionTags" => [
        "Indiana",
        "Ohio",
      ],
      "override" => TRUE,
      "messageText" => "New information available!",
      "title" => "Boost your winnings!",
      "subtitle" => "Check your app to see what else is in store.",
      "mutable-content" => TRUE,
      "sendTime" => "2012-10-31 09 =>00",
      "messageCategory" => [
        "name" => "ETubeDemo",
      ],
      "sound" => "MyFile.caf",
      "badge" => "+1",
      "openDirect" => "OD01",
      "customKeys" => [
        "keyA" => "keyA_value",
        "keyB" => "keyB_value",
      ],
      "customPayload" => [
        "customA" => "customA_value",
      ],
    ];
  }

}
