<?php

namespace Drupal\Tests\marketing_cloud_interaction\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_interaction module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudInteractionTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_interaction'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_interaction.service');
    // Get marketing_cloud_assets config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_interaction.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_address.
   */
  public function testDefinitions() {
    /*
     * Test retrieveRestDiscoveryDocument
     */
    $this->validateDefinition('retrieve_rest_discovery_document');
    // Validate service against expected inputs.
    $result = $this->service
      ->retrieveRestDiscoveryDocument();
    $this->assertNotFalse($result, 'Unable to parse the input data in retrieveRestDiscoveryDocument().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/rest',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by retrieveRestDiscoveryDocument()'
    );

    /*
     * Test insertJourney
     */
    $this->validateDefinition('insert_journey');
    // Validate service against expected inputs.
    $json = $this->insertJourneyJson();
    $result = $this->service
      ->insertJourney($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in insertJourney().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by insertJourney()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->insertJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertJourney()');
    unset($json['foo']);
    // Test against invalid type.
    $workflowApiVersion = $json['workflowApiVersion'];
    $json['workflowApiVersion'] = 'three';
    $result = $this->service
      ->insertJourney($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertJourney()');
    $json['workflowApiVersion'] = $workflowApiVersion;
    // Test against missing required property.
    unset($json['key']);
    $result = $this->service
      ->insertJourney($json);
    $this->assertFalse($result, 'Failed to detect missing json against the schema in insertJourney()');

    /*
     * Test searchJourneys
     */
    $this->validateDefinition('search_journeys');
    // Validate service against expected inputs.
    $params = $this->searchJourneysParams();
    $result = $this->service
      ->searchJourneys($params);
    $this->assertNotFalse($result, 'Unable to parse the input data in searchJourneys().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions?$page=2&$pageSize=2&extras=activities',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by searchJourneys()'
    );
    // Validate service against expected inputs without params.
    $result = $this->service
      ->searchJourneys();
    $this->assertNotFalse($result, 'Unable to parse the input data in searchJourneys().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by searchJourneys()'
    );

    /*
     * Test updateJourneyVersion
     */
    $this->validateDefinition('update_journey_version');
    // Validate service against expected inputs.
    $json = $this->updateJourneyVersionJson();
    $result = $this->service
      ->updateJourneyVersion($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in updateJourneyVersion().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions',
        'data' => json_encode($json),
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by updateJourneyVersion()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->updateJourneyVersion($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateJourneyVersion()');
    unset($json['foo']);
    // Test against invalid type.
    $version = $json['version'];
    $json['version'] = 'two';
    $result = $this->service
      ->updateJourneyVersion($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in updateJourneyVersion()');
    $json['version'] = $version;
    // Test against missing required property.
    unset($json['name']);
    $result = $this->service
      ->updateJourneyVersion($json);
    $this->assertFalse($result, 'Failed to detect missing json against the schema in updateJourneyVersion()');

    /*
     * Test createEventDefinition
     */
    $this->validateDefinition('create_event_definition');
    // Validate service against expected inputs.
    $json = $this->createEventDefinitionJson();
    $result = $this->service
      ->createEventDefinition($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createEventDefinition().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/eventDefinitions',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createEventDefinition()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createEventDefinition($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createEventDefinition()');
    unset($json['foo']);
    // Test against invalid type.
    $type = $json['type'];
    $json['version'] = 'two';
    $result = $this->service
      ->createEventDefinition($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createEventDefinition()');
    $json['type'] = $type;
    // Test against missing required property.
    unset($json['type']);
    $result = $this->service
      ->createEventDefinition($json);
    $this->assertFalse($result, 'Failed to detect missing json against the schema in createEventDefinition()');

    /*
     * Test fireEvent
     */
    $this->validateDefinition('fire_event');
    // Validate service against expected inputs.
    $json = $this->fireEventJson();
    $result = $this->service
      ->fireEvent($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in fireEvent().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/events',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by fireEvent()'
    );

    /*
     * Test getJourney
     */
    $this->validateDefinition('get_journey');
    // Validate service against expected inputs.
    $result = $this->service
      ->getJourney('my_uuid');
    $this->assertNotFalse($result, 'Unable to parse the input data in getJourney().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/my_uuid',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getJourney()'
    );
    // Validate service against expected inputs with params.
    $result = $this->service
      ->getJourney('my_uuid', ['extras' => 'all', 'versionNumber' => 2]);
    $this->assertNotFalse($result, 'Unable to parse the input data in getJourney().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/my_uuid?extras=all&versionNumber=2',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getJourney()'
    );

    /*
     * Test deleteJourney
     */
    $this->validateDefinition('delete_journey');
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteJourney('my_uuid', 75438765);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteJourney().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/my_uuid?versionNumber=75438765',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deleteJourney()'
    );

    /*
     * Test getJourneyAuditLog
     */
    $this->validateDefinition('get_journey_audit_log');
    // Validate service against expected inputs.
    $result = $this->service
      ->getJourneyAuditLog('unique-UUID-provided-by-SFMC', 'all', 2);
    $this->assertNotFalse($result, 'Unable to parse the input data in getJourneyAuditLog().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/unique-UUID-provided-by-SFMC/audit/all?versionNumber=2',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getJourneyAuditLog()'
    );

    /*
     * Test getPublishStatus
     */
    $this->validateDefinition('get_publish_status');
    // Validate service against expected inputs.
    $result = $this->service
      ->getPublishStatus('bd93502a-773c-4588-81d9-d3c7ca0cc10a');
    $this->assertNotFalse($result, 'Unable to parse the input data in getPublishStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/publishStatus/bd93502a-773c-4588-81d9-d3c7ca0cc10a',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getPublishStatus()'
    );

    /*
     * Test stopJourney
     */
    $this->validateDefinition('stop_journey');
    // Validate service against expected inputs.
    $result = $this->service
      ->stopJourney('bd93502a-773c-4588-81d9-d3c7ca0cc10a', 4);
    $this->assertNotFalse($result, 'Unable to parse the input data in getPublishStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/stop/bd93502a-773c-4588-81d9-d3c7ca0cc10a?versionNumber=4',
        'data' => '{}',
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by stopJourney()'
    );

    /*
     * Test publishJourneyVersion
     */
    $this->validateDefinition('publish_journey_version');
    // Validate service against expected inputs.
    $result = $this->service
      ->publishJourneyVersion('bd93502a-773c-4588-81d9-d3c7ca0cc10a', 4);
    $this->assertNotFalse($result, 'Unable to parse the input data in publishJourneyVersion().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/interaction/v1/interactions/publishAsync/bd93502a-773c-4588-81d9-d3c7ca0cc10a?versionNumber=4',
        'data' => '{}',
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by publishJourneyVersion()'
    );
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

  /**
   * Get JSON body payload for testing insertJourney().
   *
   * @return array
   *   Sample JSON body payload for testing.
   */
  private function insertJourneyJson() {
    return [
      "key" => "ixn-created-via-the-api",
      "name" => "API-Created journey",
      "workflowApiVersion" => 1.0 ,
      "triggers" => [],
      "goals" => [],
      "activities" => [],
    ];
  }

  /**
   * Get params for testing searchJourneys().
   *
   * @return array
   *   Sample JSON body payload for testing.
   */
  private function searchJourneysParams() {
    return [
      '$page' => 2,
      '$pageSize' => 2,
      'extras' => 'activities',
    ];
  }

  /**
   * Get JSON body payload for testing updateJourneyVersion().
   *
   * @return array
   *   Sample JSON body payload for testing.
   */
  private function updateJourneyVersionJson() {
    return [
      "key" => "ixn-created-via-the-api",
      "modifiedDate" => "2014-08-06T08 =>11 =>12",
      "name" => "API-Created journey updated",
      "version" => 2,
      "description" => "This is a journey created via the API created in this account",
      "workflowApiVersion" => 1.0,
    ];
  }

  /**
   * Get JSON body payload for testing createEventDefinition().
   *
   * @return array
   *   Sample JSON body payload for testing.
   */
  private function createEventDefinitionJson() {
    return [
      "type" => "Event",
      "name" => "New event definition via API",
      "description" => "",
      "mode" => "Production",
      "eventDefinitionKey" => "NeweventviaAPI",
      "dataExtensionId" => "####-####-####-####-####",
      "dataExtensionName" => "some data extension",
      "sourceApplicationExtensionId" => "####-####-####-####-####",
      "filterDefinitionTemplate" => "FilterDefinition/FilterDefinition",
      "iconUrl" => "/events/images/customer.png",
      "arguments" => [
        "criteria" => "null",
      ],
      "isVisibleInPicker" => TRUE,
      "category" => "Event",
    ];
  }

  /**
   * Get JSON body payload for testing fireEvent().
   *
   * @return array
   *   Sample JSON body payload for testing.
   */
  private function fireEventJson() {
    return [
      "contactKey"  => "ID601",
      "eventDefinitionKey" => "AcmeBank-AccountAccessed",
      "establishContactKey" => TRUE,
      "data" => [
        "accountNumber" => "123456",
        "patronName" => "John Smith",
      ],
    ];
  }

}
