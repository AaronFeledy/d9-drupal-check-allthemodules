<?php

namespace Drupal\Tests\marketing_cloud_platform\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_platform module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudPlatformTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_platform'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_platform.service');
    // Get config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_platform.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_platform.
   */
  public function testDefinitions() {
    /*
     * Test getEndpoints
     */
    $this->validateDefinition('get_endpoints');
    // Validate service against expected inputs.
    $result = $this->service
      ->getEndpoints();
    $this->assertNotFalse($result, 'Unable to parse the input data in getEndpoints().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/platform/v1/endpoints',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getEndpoints()'
    );

    /*
     * Test getTokenContext
     */
    $this->validateDefinition('get_token_context');
    // Validate service against expected inputs.
    $result = $this->service
      ->getTokenContext();
    $this->assertNotFalse($result, 'Unable to parse the input data in getTokenContext().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/platform/v1/tokenContext',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getTokenContext()'
    );

    /*
     * Test getEndpoint
     */
    $this->validateDefinition('get_endpoint');
    // Validate service against expected inputs.
    $result = $this->service
      ->getEndpoint('soap');
    $this->assertNotFalse($result, 'Unable to parse the input data in getEndpoint().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/platform/v1/endpoints/soap',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getEndpoint()'
    );
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

}
