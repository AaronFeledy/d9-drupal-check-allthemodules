<?php

namespace Drupal\Tests\marketing_cloud_sms\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_sms module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudSMSTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_sms'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_sms.service');
    // Get config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_sms.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_sms.
   */
  public function testDefinitions() {

    /*
     * Test createKeyword
     */
    $this->validateDefinition('create_keyword');
    $json = $this->getCreateKeywordJson();
    // Test against invalid type.
    $shortCode = $json['shortCode'];
    $json['shortCode'] = 86547465;
    $result = $this->service
      ->createKeyword($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createKeyword()');
    $json['shortCode'] = $shortCode;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createKeyword($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createKeyword()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->createKeyword($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createKeyword().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/keyword',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createKeyword()'
    );

    /*
     * Test queueMoMessage
     */
    $this->validateDefinition('queue_mo_message');
    $json = $this->getQueueMoMessageJson1();
    // Test against invalid type.
    $shortCode = $json['shortCode'];
    $json['shortCode'] = 86547465;
    $result = $this->service
      ->queueMoMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in queueMoMessage()');
    $json['shortCode'] = $shortCode;
    // Test against required attribute.
    unset($json['shortCode']);
    $result = $this->service
      ->queueMoMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in queueMoMessage()');
    $json['shortCode'] = $shortCode;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->queueMoMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in queueMoMessage()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->queueMoMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in queueMoMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/queueMO',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by queueMoMessage()'
    );
    $json = $this->getQueueMoMessageJson2();
    $result = $this->service
      ->queueMoMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in queueMoMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/queueMO',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by queueMoMessage()'
    );

    /*
     * Test createOptinMessage
     */
    $this->validateDefinition('create_optin_message');
    $json = $this->getCreateOptinMessageJson1();
    // Test against invalid type.
    $messageName = $json['messageName'];
    $json['messageName'] = 86547465;
    $result = $this->service
      ->createOptinMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createOptinMessage()');
    $json['messageName'] = $messageName;
    // Test against required attribute.
    unset($json['messageName']);
    $result = $this->service
      ->createOptinMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createOptinMessage()');
    $json['messageName'] = $messageName;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createOptinMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createOptinMessage()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->createOptinMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createOptinMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/message/optin',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createOptinMessage()'
    );
    $json = $this->getCreateOptinMessageJson2();
    $result = $this->service
      ->createOptinMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createOptinMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/message/optin',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createOptinMessage()'
    );
    $json = $this->getCreateOptinMessageJson3();
    $result = $this->service
      ->createOptinMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createOptinMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/message/optin',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createOptinMessage()'
    );

    /*
     * Test deleteKeywordById
     */
    $this->validateDefinition('delete_keyword_by_id');
    $json = $this->getDeleteKeywordByIdJson();
    // Test against invalid type.
    $keywordId = $json['keywordId'];
    $json['keywordId'] = 86547465;
    $result = $this->service
      ->deleteKeywordById($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteKeywordById()');
    $json['keywordId'] = $keywordId;
    // Test against required attribute.
    unset($json['keywordId']);
    $result = $this->service
      ->deleteKeywordById($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteKeywordById()');
    $json['keywordId'] = $keywordId;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->deleteKeywordById($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteKeywordById()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteKeywordById($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteKeywordById().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/keyword',
        'data' => json_encode($json),
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deleteKeywordById()'
    );

    /*
     * Test postMessageToList
     */
    $this->validateDefinition('post_message_to_list');
    $json = $this->getPostMessageToListJson();
    $messageId = 'MzA6Nzg6MA';
    // Test against invalid type.
    $targetListIds = $json['targetListIds'];
    $json['targetListIds'] = 86547465;
    $result = $this->service
      ->postMessageToList($messageId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in postMessageToList()');
    $json['targetListIds'] = $targetListIds;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->postMessageToList($messageId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in postMessageToList()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->postMessageToList($messageId, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in postMessageToList().');
    $this->assertEquals(
      [
        'url' => "https://www.exacttargetapis.com/sms/v1/messageList/$messageId/send",
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by postMessageToList()'
    );

    /*
     * Test importAndSendMessage
     */
    $this->validateDefinition('import_and_send_message');
    $json = $this->getImportAndSendMessageJson1();
    // Test against invalid type.
    $messageId = $json['messageId'];
    $json['messageId'] = 86547465;
    $result = $this->service
      ->importAndSendMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in importAndSendMessage()');
    $json['messageId'] = $messageId;
    // Test against required attribute.
    unset($json['messageId']);
    $result = $this->service
      ->importAndSendMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in importAndSendMessage()');
    $json['messageId'] = $messageId;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->importAndSendMessage($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in importAndSendMessage()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->importAndSendMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in importAndSendMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/automation/importSend',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by importAndSendMessage()'
    );
    $json = $this->getImportAndSendMessageJson2();
    $result = $this->service
      ->importAndSendMessage($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in importAndSendMessage().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/automation/importSend',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by importAndSendMessage()'
    );

    /*
     * Test getSubscriptionStatus
     */
    $this->validateDefinition('get_subscription_status');
    $json = $this->getSubscriptionStatusJson();
    // Test against invalid type.
    $mobileNumber = $json['mobileNumber'];
    $json['mobileNumber'] = 86547465;
    $result = $this->service
      ->getSubscriptionStatus($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in getSubscriptionStatus()');
    $json['mobileNumber'] = $mobileNumber;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->getSubscriptionStatus($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in getSubscriptionStatus()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->getSubscriptionStatus($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in getSubscriptionStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/contacts/subscriptions',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by getSubscriptionStatus()'
    );

    /*
     * Test postMessageToNumber
     */
    $this->validateDefinition('post_message_to_number');
    $messageId = 'MzA6Nzg6MA';
    $json = $this->getPostMessageToNumberJson1();
    // Test against invalid type.
    $mobileNumbers = $json['mobileNumbers'];
    $json['mobileNumbers'] = 86547465;
    $result = $this->service
      ->postMessageToNumber($messageId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in postMessageToNumber()');
    $json['mobileNumbers'] = $mobileNumbers;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->postMessageToNumber($messageId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in postMessageToNumber()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->postMessageToNumber($messageId, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in postMessageToNumber().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/messageContact/MzA6Nzg6MA/send',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by postMessageToNumber()'
    );
    $json = $this->getPostMessageToNumberJson2();
    $result = $this->service
      ->postMessageToNumber($messageId, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in postMessageToNumber().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/messageContact/MzA6Nzg6MA/send',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by postMessageToNumber()'
    );

    /*
     * Test getTrackingHistoryOfQueuedMo
     */
    $this->validateDefinition('get_tracking_history_of_queued_mo');
    $tokenId = 'OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow';
    // Validate service against expected inputs.
    $result = $this->service
      ->getTrackingHistoryOfQueuedMo($tokenId);
    $this->assertNotFalse($result, 'Unable to parse the input data in getTrackingHistoryOfQueuedMo().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/queueMO/history/OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getTrackingHistoryOfQueuedMo()'
    );

    /*
     * Test queueContactImport
     */
    $this->validateDefinition('queue_contact_import');
    $listId = 'UEhwdktFWXpFZUs3Z3hRUW45R2dBQTo2Mzow';
    $json = $this->getQueueContactImportJson();
    // Test against invalid type.
    $shortCode = $json['shortCode'];
    $json['shortCode'] = 86547465;
    $result = $this->service
      ->queueContactImport($listId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in queueContactImport()');
    $json['shortCode'] = $shortCode;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->queueContactImport($listId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in queueContactImport()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->queueContactImport($listId, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in queueContactImport().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/contacts/queueImport/UEhwdktFWXpFZUs3Z3hRUW45R2dBQTo2Mzow',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by queueContactImport()'
    );

    /*
     * Test refreshList
     */
    $this->validateDefinition('refresh_list');
    $listId = 'bzZ0cENGam1FZUtNX0poTDRYZzhlQTo2Mzow';
    // Validate service against expected inputs.
    $result = $this->service
      ->refreshList($listId);
    $this->assertNotFalse($result, 'Unable to parse the input data in refreshList().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/contacts/refreshList/bzZ0cENGam1FZUtNX0poTDRYZzhlQTo2Mzow',
        'data' => '{}',
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by refreshList()'
    );

    /*
     * Test deleteKeywordByLongCode
     */
    $this->validateDefinition('delete_keyword_by_long_code');
    $json = $this->getDeleteKeywordByLongCodeJson();
    // Test against invalid type.
    $keyword = $json['keyword'];
    $json['keyword'] = 86547465;
    $result = $this->service
      ->deleteKeywordByLongCode($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteKeywordByLongCode()');
    $json['keyword'] = $keyword;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->deleteKeywordByLongCode($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteKeywordByLongCode()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteKeywordByLongCode($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteKeywordByLongCode().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/keyword',
        'data' => json_encode($json),
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deleteKeywordByLongCode()'
    );

    /*
     * Test getDeliveryStatusOfQueuedMo
     */
    $this->validateDefinition('get_delivery_status_of_queued_mo');
    $tokenId = 'OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow';
    // Validate service against expected inputs.
    $result = $this->service
      ->getDeliveryStatusOfQueuedMo($tokenId);
    $this->assertNotFalse($result, 'Unable to parse the input data in getDeliveryStatusOfQueuedMo().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/queueMO/deliveries/OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getDeliveryStatusOfQueuedMo()'
    );

    /*
     * Test getMessageListStatus
     */
    $this->validateDefinition('get_message_list_status');
    $tokenId = 'c21NCNSDN2sMMWM2miosdjEHH';
    $messageId = 'MzA6Nzg6MA';
    // Validate service against expected inputs.
    $result = $this->service
      ->getMessageListStatus($messageId, $tokenId);
    $this->assertNotFalse($result, 'Unable to parse the input data in getMessageListStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/messageList/MzA6Nzg6MA/deliveries/c21NCNSDN2sMMWM2miosdjEHH',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getMessageListStatus()'
    );

    /*
     * Test getImportSendStatus
     */
    $this->validateDefinition('get_import_send_status');
    $tokenId = 'bzZ0cENGam1FZUtNX0poTDRYZzhlQTo2Mzow';
    // Validate service against expected inputs.
    $result = $this->service
      ->getImportSendStatus($tokenId);
    $this->assertNotFalse($result, 'Unable to parse the input data in getImportSendStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/automation/importSend/bzZ0cENGam1FZUtNX0poTDRYZzhlQTo2Mzow/status',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getImportSendStatus()'
    );

    /*
     * Test createImportSendDeliveryReport
     */
    $this->validateDefinition('create_import_send_delivery_report');
    $json = $this->getCreateImportSendDeliveryReportJson();
    $tokenId = 'OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow';
    // Test against invalid type.
    $filename = $json['filename'];
    $json['filename'] = 86547465;
    $result = $this->service
      ->createImportSendDeliveryReport($tokenId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createImportSendDeliveryReport()');
    $json['filename'] = $filename;
    // Test against required attribute.
    unset($json['filename']);
    $result = $this->service
      ->createImportSendDeliveryReport($tokenId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createImportSendDeliveryReport()');
    $json['filename'] = $filename;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createImportSendDeliveryReport($tokenId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createImportSendDeliveryReport()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->createImportSendDeliveryReport($tokenId, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createImportSendDeliveryReport().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/automation/importSend/OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow/deliveryReport',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createImportSendDeliveryReport()'
    );

    /*
     * Test createMessageListDeliveryReport
     */
    $this->validateDefinition('create_message_list_delivery_report');
    $json = $this->getCreateMessageListDeliveryReportJson();
    $messageId = 'MzA6Nzg6MA';
    $tokenId = 'OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow';
    // Test against invalid type.
    $filename = $json['filename'];
    $json['filename'] = 86547465;
    $result = $this->service
      ->createMessageListDeliveryReport($tokenId, $messageId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createMessageListDeliveryReport()');
    $json['filename'] = $filename;
    // Test against required attribute.
    unset($json['filename']);
    $result = $this->service
      ->createMessageListDeliveryReport($tokenId, $messageId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createMessageListDeliveryReport()');
    $json['filename'] = $filename;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createMessageListDeliveryReport($tokenId, $messageId, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createMessageListDeliveryReport()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->createMessageListDeliveryReport($tokenId, $messageId, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createMessageListDeliveryReport().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/messageList/MzA6Nzg6MA/deliveryReport/OXFoN2ZtT2xWazJLSFZkOVY3MGNZQTo3Njow',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by createMessageListDeliveryReport()'
    );

    /*
     * Test getRefreshListStatus
     */
    $this->validateDefinition('get_refresh_list_status');
    $listId = 'ENGam1FZUtNX0p';
    $tokenId = 'NDo8NDow';
    // Validate service against expected inputs.
    $result = $this->service
      ->getRefreshListStatus($listId, $tokenId);
    $this->assertNotFalse($result, 'Unable to parse the input data in getRefreshListStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/contacts/refreshList/ENGam1FZUtNX0p/status/NDo8NDow',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getRefreshListStatus()'
    );

    /*
     * Test getImportStatus
     */
    $this->validateDefinition('get_import_status');
    $listId = 'UEhwdktFWXpFZUs3Z3hRUW45R2dBQTo2Mzow';
    $tokenId = 'NzY2MTU6NDI6MA';
    // Validate service against expected inputs.
    $result = $this->service
      ->getImportStatus($listId, $tokenId);
    $this->assertNotFalse($result, 'Unable to parse the input data in getImportStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/contacts/queueImport/UEhwdktFWXpFZUs3Z3hRUW45R2dBQTo2Mzow/status/NzY2MTU6NDI6MA',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getImportStatus()'
    );

    /*
     * Test deleteKeywordByShortCode
     */
    $this->validateDefinition('delete_keyword_by_short_code');
    $json = $this->getDeleteKeywordByShortCodeJson();
    // Test against invalid type.
    $keyword = $json['keyword'];
    $json['keyword'] = 86547465;
    $result = $this->service
      ->deleteKeywordByShortCode($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteKeywordByShortCode()');
    $json['keyword'] = $keyword;
    // Test against unexpected attribute.
    $json['foo'] = 'bar';
    $result = $this->service
      ->deleteKeywordByShortCode($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in deleteKeywordByShortCode()');
    unset($json['foo']);
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteKeywordByShortCode($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteKeywordByShortCode().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/keyword',
        'data' => json_encode($json),
        'method' => 'delete',
      ],
      $result, 'Unexpected request data generated by deleteKeywordByShortCode()'
    );

    /*
     * Test getMessageContactStatus
     */
    $this->validateDefinition('get_message_contact_status');
    $messageId = 'MzA6Nzg6MA';
    $tokenId = 'c21NCNSDN2sMMWM2miosdjEHH';
    // Validate service against expected inputs.
    $result = $this->service
      ->getMessageContactStatus($messageId, $tokenId);
    $this->assertNotFalse($result, 'Unable to parse the input data in getMessageContactStatus().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/messageContact/MzA6Nzg6MA/deliveries/c21NCNSDN2sMMWM2miosdjEHH',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getMessageContactStatus()'
    );

    /*
     * Test getMessageContactHistory
     */
    $this->validateDefinition('get_message_contact_history');
    $messageId = 'MzA6Nzg6MA';
    $tokenId = 'c21NCNSDN2sMMWM2miosdjEHH';
    $mobileNumber = '1120816001';
    // Validate service against expected inputs.
    $result = $this->service
      ->getMessageContactHistory($messageId, $tokenId, $mobileNumber);
    $this->assertNotFalse($result, 'Unable to parse the input data in getMessageContactHistory().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/sms/v1/messageContact/MzA6Nzg6MA/history/c21NCNSDN2sMMWM2miosdjEHH/mobileNumber/1120816001',
        'data' => '{}',
        'method' => 'get',
      ],
      $result, 'Unexpected request data generated by getMessageContactHistory()'
    );
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

  /**
   * Create a sample payload for testing getCreateKeyword().
   *
   * @return array
   *   Sample payload for the getCreateKeyword() Json.
   */
  private function getCreateKeywordJson() {
    return [
      "shortCode" => "88976",
      "countryCode" => "US",
      "keyword" => "EXAMPLEONE",
    ];
  }

  /**
   * Create a sample payload 1 for testing getQueueMoMessage().
   *
   * @return array
   *   Sample payload 1 for the getQueueMoMessage() Json.
   */
  private function getQueueMoMessageJson1() {
    return [
      "mobileNumbers" => [
        "15555551212",
      ],
      "shortCode" => "86288",
      "messageText" => "CODETEST",
    ];
  }

  /**
   * Create a sample payload 2 for testing getQueueMoMessage().
   *
   * @return array
   *   Sample payload 2 for the getQueueMoMessage() Json.
   */
  private function getQueueMoMessageJson2() {
    return [
      "subscribers" => [
        [
          "mobilenumber" => "15555551212",
          "subscriberkey" => "0_MC1652",
        ], [
          "mobilenumber" => "15555551213",
          "subscriberkey" => "0_MC1652",
        ],
      ],
      "shortCode"  => "86288",
      "messageText"  => "CODETEST",
    ];
  }

  /**
   * Create a sample payload 1 for testing getCreateOptinMessage().
   *
   * @return array
   *   Sample payload 1 for the getCreateOptinMessage() Json.
   */
  private function getCreateOptinMessageJson1() {
    return [
      "messageName" => "Your Message Name",
      "messageText" => "Thanks for reading!",
      "shortCode" => "123456",
      "countryCode" => "US",
      "keyword" => "KEYWORD",
      "messageOptInType" => "Double",
      "doubleOptInValidResponses" => "y",
      "doubleOptInInitialMessage" => "Thanks for your interest! Please respond with Y or YES to confirm your subscription.",
      "doubleOptInConfirmationMessage" => "Thanks for subscribing! You will receive approx. 4 messages per month.",
      "duplicateOptInMessage" => "You already subscribed to receive our messages",
      "optInErrorMessage" => "An error occurred. Please try again.",
      "startDate" => "1/1/2015",
      "endDate" => "1/1/2017",
    ];
  }

  /**
   * Create a sample payload 2 for testing getCreateOptinMessage().
   *
   * @return array
   *   Sample payload 2 for the getCreateOptinMessage() Json.
   */
  private function getCreateOptinMessageJson2() {
    return [
      "messageName" => "Your Message Name",
      "shortCode" => "123456",
      "countryCode" => "US",
      "keyword" => "KEYWORD",
      "messageOptInType" => "Age",
      "doubleOptInInitialMessage" => "Thanks for subscribing! Please respond with your age to confirm your subscription.",
      "doubleOptInConfirmationMessage" => "Thanks for subscribing! You will receive approx. 4 messages per month.",
      "optInInvalidAgeMessage" => "Sorry, but you're not old enough to subscribe to these messages.",
      "MinimumAge" => 13,
      "duplicateOptInMessage" => "You already subscribed to receive our messages",
      "optInErrorMessage" => "An error occurred. Please try again.",
      "startDate" => "1/1/2015",
      "endDate" => "1/1/2017",
    ];
  }

  /**
   * Create a sample payload 3 for testing getCreateOptinMessage().
   *
   * @return array
   *   Sample payload 3 for the getCreateOptinMessage() Json.
   */
  private function getCreateOptinMessageJson3() {
    return [
      "messageName" => "TESTMESSAGE1234",
      "shortCode" => "12345678",
      "countryCode" => "US",
      "keyword" => "MYKEYWORD",
      "messageOptInType" => "Single",
      "responseMessage" => "Hey, thanks for subscribing!",
      "allowSingleOptIn" => TRUE,
      "duplicateOptInMessage" => "You already subscribed to receive our messages",
      "optInErrorMessage" => "An error occurred. Please try again.",
    ];
  }

  /**
   * Create a sample payload for testing getDeleteKeywordById().
   *
   * @return array
   *   Sample payload for the getDeleteKeywordById() Json.
   */
  private function getDeleteKeywordByIdJson() {
    return [
      "keywordId" => "alm5LXNSSktGMGluRznRb1Rb1R5MDZFQTo4Njow",
    ];
  }

  /**
   * Create a sample payload for testing getPostMessageToList().
   *
   * @return array
   *   Sample payload for the getPostMessageToList() Json.
   */
  private function getPostMessageToListJson() {
    return [
      "targetListIds" => [
        "bzZ0cENGam1FZUtNX0poTDRYZzhlQTo2Mzow",
      ],
      "overrideTemplateTargetLists" => TRUE,
      "overrideTemplateExclusionLists" => FALSE,
      "ignoreExclusionLists" => TRUE,
      "overrideMessageText" => FALSE,
      "contentURL"  => "http =>//image.exct.net/lib/fe6d15707662057c7411/m/1/dj_CC_AUS.jpg",
      "blackoutWindow" => [
        "utcOffset" => "-0500",
        "windowStart" => "1500",
        "windowEnd" => "2200",
      ],
      "allowDuplication" => FALSE,
    ];
  }

  /**
   * Create a sample payload 1 for testing getImportAndSendMessage().
   *
   * @return array
   *   Sample payload 1 for the getImportAndSendMessage() Json.
   */
  private function getImportAndSendMessageJson1() {
    return [
      "messageId" => "MessageId",
      "keyword" => "Test_Keyword",
      "notificationEmail" => "myEmail@example.com",
      "isDuplicationAllowed"  => TRUE,
      "importDefinition" => [
        [
          "fileName" => "MyTestList.csv",
          "importType" => "FILE",
          "importMappingType" => "ManualMap",
          "fieldMaps" => [
            [
              "destination" => "_FirstName",
              "source" => "First Name",
            ], [
              "destination" => "_Subscriberkey",
              "source" => "Subscriber Key",
            ], [
              "destination" => "_LastName",
              "source" => "Last Name",
            ], [
              "destination" => "_MobileNumber",
              "source" => "Mobile",
            ], [
              "destination" => "_CountryCode",
              "source" => "Country",
            ],
          ],
        ],
      ],
    ];
  }

  /**
   * Create a sample payload 2 for testing getImportAndSendMessage().
   *
   * @return array
   *   Sample payload 2 for the getImportAndSendMessage() Json.
   */
  private function getImportAndSendMessageJson2() {
    return [
      "messageId" => "MessageId",
      "keyword" => "Test_Keyword",
      "notificationEmail" => "myEmail@example.com",
      "override" => TRUE,
      "overrideText" => "Override Text for Demo!",
      "isDuplicationAllowed"  => TRUE,
      "importDefinition" => [
        [
          "importType" => "DATA_EXTENSION",
          "importMappingType" => "InferFromColumnHeadings",
          "dataExtensionName" => "MyDataExtension",
          "isFirstRowHeader" => TRUE,
        ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing getSubscriptionStatus().
   *
   * @return array
   *   Sample payload for the getSubscriptionStatus() Json.
   */
  private function getSubscriptionStatusJson() {
    return [
      "mobileNumber" => ["15555555555"],
    ];
  }

  /**
   * Create a sample payload 1 for testing getPostMessageToNumber().
   *
   * @return array
   *   Sample payload 1 for the getPostMessageToNumber() Json.
   */
  private function getPostMessageToNumberJson1() {
    return [
      "mobileNumbers" => ["13175551212"],
      "subscribe" => TRUE,
      "resubscribe" => TRUE,
      "keyword" => "JOINSMS",
      "override" => TRUE,
      "messageText" => "Welcome to Code@",
      "contentURL"  => "http =>//image.exct.net/lib/fe6d15707662057c7411/m/1/dj_CC_AUS.jpg",
      "sendTime" => "2012-10-05 20 =>01",
    ];
  }

  /**
   * Create a sample payload 2 for testing getPostMessageToNumber().
   *
   * @return array
   *   Sample payload 2 for the getPostMessageToNumber() Json.
   */
  private function getPostMessageToNumberJson2() {
    return [
      "subscribers" => [
        [
          "mobileNumber" => "15555554410",
          "subscriberKey" => "ExampleSubKey1",
          "attributes" => [
            "firstName" => "Michael",
          ],
        ], [
          "mobileNumber" => "15555552254",
          "subscriberKey" => "ExampleSubKey2",
          "attributes" => [
            "f,irstName" => "Kristen",
          ],
        ],
      ],
      "subscribe" => TRUE,
      "resubscribe" => TRUE,
      "keyword" => "JOINSMS",
      "override" => FALSE,
      "sendTime" => "2012-10-05 20 =>01",
    ];
  }

  /**
   * Create a sample payload for testing getQueueContactImport().
   *
   * @return array
   *   Sample payload for the getQueueContactImport() Json.
   */
  private function getQueueContactImportJson() {
    return [
      "shortCode" => "90913",
      "keyword" => "WELCOME",
      "sendEmailNotification" => TRUE,
      "emailAddress" => "example@example.com",
      "importMappingType" => "MapByOrdinal",
      "fileName" => "testdata.csv",
      "fileType" => "csv",
      "isFirstRowHeader" => TRUE,
      "fieldMaps" => [
        [
          "destination" => "_MobileNumber",
          "ordinal" => 2,
          "source" => "mobile number",
        ], [
          "destination" => "_CountryCode",
          "ordinal" => 3,
          "source" => "locale",
        ], [
          "destination" => "_SubscriberKey",
          "ordinal" => 1,
          "source" => "subscriber key",
        ],
      ],
    ];
  }

  /**
   * Create a sample payload for testing getDeleteKeywordByLongCode().
   *
   * @return array
   *   Sample payload for the getDeleteKeywordByLongCode() Json.
   */
  private function getDeleteKeywordByLongCodeJson() {
    return [
      "longCode" => "5550003232",
      "keyword" => "TEST",
    ];
  }

  /**
   * Create a sample payload for testing getCreateImportSendDeliveryReport().
   *
   * @return array
   *   Sample payload for the getCreateImportSendDeliveryReport() Json.
   */
  private function getCreateImportSendDeliveryReportJson() {
    return [
      "filename" => "DeliveryReportFileName",
    ];
  }

  /**
   * Create a sample payload for testing getCreateMessageListDeliveryReport().
   *
   * @return array
   *   Sample payload for the getCreateMessageListDeliveryReport() Json.
   */
  private function getCreateMessageListDeliveryReportJson() {
    return [
      "filename" => "DeliveryReportFileName",
    ];
  }

  /**
   * Create a sample payload for testing getDeleteKeywordByShortCode().
   *
   * @return array
   *   Sample payload for getDeleteKeywordByShortCode() test.
   */
  private function getDeleteKeywordByShortCodeJson() {
    return [
      "shortCode" => "89239",
      "keyword" => "TEST",
      "countryCode" => "US",
    ];
  }

}
