<?php

namespace Drupal\Tests\marketing_cloud_data_events\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_data_events module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudDataEventsTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_data_events'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_data_events.service');
    // Get marketing_cloud_data_events config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_data_events.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_data_events.
   */
  public function testDefinitions() {
    /*
     * Test insertDataExtensionRowsByKey()
     */
    $this->validateDefinition('insert_data_extension_rows_by_key');
    // Validate service against expected inputs.
    $result = $this->service
      ->insertDataExtensionRowsByKey('key:SomeKey');
    $this->assertNotFalse($result, 'Unable to parse the input data in insertDataExtensionRowsByKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/dataevents/key:SomeKey/rowset',
        'data' => '[]',
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by insertDataExtensionRowsByKey()'
    );
    $json = $this->insertDataExtensionRowsByKeyJson();
    $result = $this->service
      ->insertDataExtensionRowsByKey('11954DDF-28A3-4FE8-BF77-646C37506621', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in insertDataExtensionRowsByKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/dataevents/11954DDF-28A3-4FE8-BF77-646C37506621/rowset',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result, 'Unexpected request data generated by insertDataExtensionRowsByKey()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->insertDataExtensionRowsByKey('11954DDF-28A3-4FE8-BF77-646C37506621', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertDataExtensionRowsByKey()');
    unset($json['foo']);
    // Test against invalid index type.
    $json[0]['keys'] = "hello";
    $result = $this->service
      ->insertDataExtensionRowsByKey('11954DDF-28A3-4FE8-BF77-646C37506621', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertDataExtensionRowsByKey()');

    /*
     * Test insertDataExtensionRowByKey().
     */
    $this->validateDefinition('insert_data_extension_row_by_key');
    // Validate service against expected inputs.
    $result = $this->service
      ->insertDataExtensionRowByKey('key:SomeKey', 'Email:someone@exacttarget.com');
    $this->assertNotFalse($result, 'Unable to parse the input data in insertDataExtensionRowByKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/dataevents/key:SomeKey/rows/Email:someone@exacttarget.com',
        'data' => '{}',
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by insertDataExtensionRowsByKey()'
    );
    $json = $this->insertDataExtensionRowByKeyJson();
    $result = $this->service
      ->insertDataExtensionRowByKey('11954DDF-28A3-4FE8-BF77-646C37506621', 'Email:someone@exacttarget.com', $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in insertDataExtensionRowByKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/dataevents/11954DDF-28A3-4FE8-BF77-646C37506621/rows/Email:someone@exacttarget.com',
        'data' => json_encode($json),
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by insertDataExtensionRowByKey()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->insertDataExtensionRowByKey('11954DDF-28A3-4FE8-BF77-646C37506621', 'Email:someone@exacttarget.com', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertDataExtensionRowByKey()');
    unset($json['foo']);
    // Test against invalid index type.
    $json['values'] = "hello";
    $result = $this->service
      ->insertDataExtensionRowByKey('11954DDF-28A3-4FE8-BF77-646C37506621', 'Email:someone@exacttarget.com', $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in insertDataExtensionRowByKey()');

    /*
     * Test incrementColumnValueByDataExtensionKey().
     */
    $this->validateDefinition('increment_column_value_by_data_extension_key');
    // Validate service against expected inputs.
    $result = $this->service
      ->incrementColumnValueByDataExtensionKey('key:mydataextension', 'Email:someone@exacttarget.com', 'FollowerCount');
    $this->assertNotFalse($result, 'Unable to parse the input data in incrementColumnValueByDataExtensionKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/dataevents/key:mydataextension/rows/Email:someone@exacttarget.com/column/FollowerCount/increment',
        'data' => '{}',
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by incrementColumnValueByDataExtensionKey()'
    );
    $result = $this->service
      ->incrementColumnValueByDataExtensionKey('key:mydataextension', 'Email:someone@exacttarget.com', 'FollowerCount', 10);
    $this->assertNotFalse($result, 'Unable to parse the input data in incrementColumnValueByDataExtensionKey().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/dataevents/key:mydataextension/rows/Email:someone@exacttarget.com/column/FollowerCount/increment?step=10',
        'data' => '{}',
        'method' => 'put',
      ],
      $result, 'Unexpected request data generated by incrementColumnValueByDataExtensionKey()'
    );
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

  /**
   * Sample payload for an insertDataExtensionRowsByKey API call.
   *
   * @return array
   *   Test array for json test.
   */
  private function insertDataExtensionRowsByKeyJson() {
    return [
      [
        "keys" => [
          "Email" => "someone@example.com",
        ],
        "values" => [
          "LastLogin" => "2013-05-23T14 =>32 =>00Z",
          "IsActive" => TRUE,
          "FirstName" => "John",
          "FollowerCount" => 2,
          "LastName" => "Smith",
        ],
      ], [
        "keys" => [
          "Email" => "someone2@example.com",
        ],
        "values" => [
          "LastLogin" => "2013-05-23T14 =>32 =>00Z",
          "IsActive" => TRUE,
          "FirstName" => "Jane",
          "FollowerCount" => 2,
          "LastName" => "Smith",
        ],
      ],
    ];
  }

  /**
   * Sample payload for an insertDataExtensionRowByKey API call.
   *
   * @return array
   *   Test array for json test.
   */
  private function insertDataExtensionRowByKeyJson() {
    return [
      "values" => [
        "LastLogin" => "2013-05-23T14:32:00Z",
        "IsActive" => TRUE,
        "FirstName" => "John",
        "FollowerCount" => 2,
        "LastName" => "Smith",
      ],
    ];
  }

}
