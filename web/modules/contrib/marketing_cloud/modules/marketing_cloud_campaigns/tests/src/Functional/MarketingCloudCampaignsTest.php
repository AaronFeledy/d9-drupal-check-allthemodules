<?php

namespace Drupal\Tests\marketing_cloud_campaigns\Functional;

use Drupal\Tests\BrowserTestBase;

/**
 * Tests the base marketing_cloud_campaigns module.
 *
 * @group marketing_cloud
 * @runTestsInSeparateProcesses
 * @preserveGlobalState disabled
 */
class MarketingCloudCampaignsTest extends BrowserTestBase {

  /**
   * Modules to install.
   *
   * @var array
   */
  public static $modules = ['marketing_cloud', 'marketing_cloud_campaigns'];

  protected $adminUser;
  protected $service;
  protected $moduleConfig;

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    // Create user.
    $this->adminUser = $this->drupalCreateUser(['administer_marketing_cloud']);
    $this->drupalLogin($this->adminUser);
    // Set module config.
    $this->config('marketing_cloud.settings')
      ->set('client_id', 'testingid')
      ->set('client_secret', 'testingsecret')
      ->set('validate_json', TRUE)
      ->set('do_not_send', TRUE)
      ->save();
    // Create service.
    $this->service = \Drupal::service('marketing_cloud_campaigns.service');
    // Get marketing_cloud_assets config object.
    $this->moduleConfig = \Drupal::config('marketing_cloud_campaigns.settings');
  }

  /**
   * Tests the services and schemas for marketing_cloud_campaigns.
   */
  public function testDefinitions() {
    /*
     * Test createCampaign()
     */
    $this->validateDefinition('create_campaign');
    // Validate service against expected inputs.
    $json = $this->createCampaignJson();
    $result = $this->service
      ->createCampaign($json);
    $this->assertNotFalse($result, 'Unable to parse the input data in createCampaign().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by createCampaign()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->createCampaign($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createCampaign()');
    unset($json['foo']);
    // Test against missing required index.
    unset($json['favorite']);
    $result = $this->service
      ->createCampaign($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createCampaign()');
    // Test against invalid type.
    $json['favorite'] = 'true';
    $result = $this->service
      ->createCampaign($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createCampaign()');
    // Test against invalid type.
    $json['favorite'] = 'foobar';
    $result = $this->service
      ->createCampaign($json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in createCampaign()');

    /*
     * Test getCampaignCollection()
     */
    $this->validateDefinition('get_campaign_collection');
    // Validate service against expected inputs.
    $params = $this->getCampaignCollectionParams();
    $result = $this->service
      ->getCampaignCollection($params);
    $this->assertNotFalse($result, 'Unable to parse the input data in getCampaignCollection().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns?$page=1&$pageSize=2&$orderBy=Name%20ASC',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by getCampaignCollection()'
    );

    /*
     * Test getCampaign()
     */
    $this->validateDefinition('get_campaign');
    // Validate service against expected inputs.
    $result = $this->service
      ->getCampaign(73654);
    $this->assertNotFalse($result, 'Unable to parse the input data in getCampaign().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns/73654',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by getCampaign()'
    );

    /*
     * Test deleteCampaign()
     */
    $this->validateDefinition('delete_campaign');
    // Validate service against expected inputs.
    $result = $this->service
      ->deleteCampaign(73654);
    $this->assertNotFalse($result, 'Unable to parse the input data in deleteCampaign().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns/73654',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result,
      'Unexpected request data generated by deleteCampaign()'
    );

    /*
     * Test associateAssetToCampaign()
     */
    $this->validateDefinition('associate_asset_to_campaign');
    // Validate service against expected inputs.
    $json = $this->associateAssetToCampaignJson();
    $result = $this->service
      ->associateAssetToCampaign(73654, $json);
    $this->assertNotFalse($result, 'Unable to parse the input data in associateAssetToCampaign().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns/73654/assets',
        'data' => json_encode($json),
        'method' => 'post',
      ],
      $result,
      'Unexpected request data generated by associateAssetToCampaign()'
    );
    // Test against invalid extra index.
    $json['foo'] = 'bar';
    $result = $this->service
      ->associateAssetToCampaign(123456, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in associateAssetToCampaign()');
    unset($json['foo']);
    // Test against missing required index.
    unset($json['ids']);
    $result = $this->service
      ->associateAssetToCampaign(3456, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in associateAssetToCampaign()');
    // Test against invalid index type.
    $json['ids'] = 'foobar';
    $result = $this->service
      ->associateAssetToCampaign(3456, $json);
    $this->assertFalse($result, 'Failed to detect invalid json against the schema in associateAssetToCampaign()');

    /*
     * Test getCollectionOfCampaignAssets()
     */
    $this->validateDefinition('get_collection_of_campaign_assets');
    // Validate service against expected inputs.
    $result = $this->service
      ->getCollectionOfCampaignAssets(73654);
    $this->assertNotFalse($result, 'Unable to parse the input data in getCollectionOfCampaignAssets().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns/73654/assets',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by getCollectionOfCampaignAssets()'
    );

    /*
     * Test getCampaignAsset()
     */
    $this->validateDefinition('get_campaign_asset');
    // Validate service against expected inputs.
    $result = $this->service
      ->getCampaignAsset(123, 456);
    $this->assertNotFalse($result, 'Unable to parse the input data in getCampaignAsset().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns/123/assets/456',
        'data' => '{}',
        'method' => 'get',
      ],
      $result,
      'Unexpected request data generated by getCampaignAsset()'
    );

    /*
     * Test unassociateAssetFromCampaign()
     */
    $this->validateDefinition('unassociate_asset_from_campaign');
    // Validate service against expected inputs.
    $result = $this->service
      ->unassociateAssetFromCampaign(123, 456);
    $this->assertNotFalse($result, 'Unable to parse the input data in unassociateAssetFromCampaign().');
    $this->assertEquals(
      [
        'url' => 'https://www.exacttargetapis.com/hub/v1/campaigns/123/assets/456',
        'data' => '{}',
        'method' => 'delete',
      ],
      $result,
      'Unexpected request data generated by unassociateAssetFromCampaign()'
    );
  }

  /**
   * Test that the Json-Schema is valid, and that the API method id correct.
   *
   * @param string $machineName
   *   The machine name for the api call definition.
   */
  protected function validateDefinition($machineName) {
    // Validate schema.
    $schema = $this->moduleConfig->get("definitions.$machineName.schema");
    $this->assertNotEmpty($schema, "json schema for $machineName definition is empty.");
    $schema = json_decode($schema);
    $this->assertNotEmpty($schema, "json schema for $machineName definition is invalid json.");
  }

  /**
   * Sample data for testing createCampaign().
   *
   * @return array
   *   Test data for json body.
   */
  private function createCampaignJson() {
    return [
      "name" => "Annual Sale 2012",
      "description" => "Yearly sale",
      "campaignCode" => "annual2012",
      "color" => "0000ff",
      "favorite" => FALSE,
    ];
  }

  /**
   * Sample data for testing getCampaignCollectionParams().
   *
   * @return array
   *   Test data for json body.
   */
  private function getCampaignCollectionParams() {
    return [
      '$page' => 1,
      '$pageSize' => 2,
      '$orderBy' => 'Name%20ASC',
    ];
  }

  /**
   * Sample data for testing associateAssetToCampaign().
   *
   * @return array
   *   Test data for json body.
   */
  private function associateAssetToCampaignJson() {
    return [
      "ids" => [
        "7897",
        "7888",
      ],
      "type" => "EMAIL",
    ];
  }

}
