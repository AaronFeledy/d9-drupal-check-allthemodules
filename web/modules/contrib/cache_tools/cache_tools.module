<?php

/**
 * @file
 * Provides various caching enhancements.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_type_alter().
 */
function cache_tools_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $block */
  $block = $entity_types['block'];
  $block->setViewBuilderClass('Drupal\cache_tools\CachewiseBlockViewBuilder');
}

/**
 * Implements hook_entity_insert().
 *
 * Invalidates `entitytype_entitybundle_pub` and
 * `entitytype_entitybundle_pub:field_name:value` if entity is going to be
 * published. Entity type or a field needs to be allowed for invalidation.
 *
 * @todo
 *   Use a PublishedEntityCacheTag event subscriber instead of hooks after:
 *   https://www.drupal.org/project/drupal/issues/2551893 .
 */
function cache_tools_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
  $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
  $cache_invalidator->invalidatePublishedEntity($entity);
  $cache_invalidator->invalidatePublishedEntityFields($entity);
}

/**
 * Implements hook_entity_update().
 *
 * Invalidates `entitytype_entitybundle_pub` if entity is going from unpublished
 * state to published and `entitytype_entitybundle_pub:field_name:value` if
 * a published state and/or a configured field value is changed. Entity type or
 * a field needs to be allowed for invalidation.
 */
function cache_tools_entity_update(EntityInterface $entity) {
  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
  $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
  $cache_invalidator->invalidatePublishedEntity($entity);
  $cache_invalidator->invalidatePublishedEntityFields($entity);
}

/**
 * Implements hook_entity_delete().
 *
 * Invalidates `entitytype_entitybundle_pub:field_name:value` if deleting
 * published entity.
 * Entity type or a field needs to be allowed for invalidation.
 * Note: Deleted entities are invalidated via entity_type:id (eg node:123).
 */
function cache_tools_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\cache_tools\Service\CacheInvalidator $cache_invalidator */
  $cache_invalidator = \Drupal::service('cache_tools.cache.invalidator');
  $cache_invalidator->invalidatePublishedEntityFields($entity);
}
