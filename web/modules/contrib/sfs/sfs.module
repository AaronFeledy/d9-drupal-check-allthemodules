<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;

/**
 * Add validation to form submissions of user registration, node, comment and 
 * contact when the configuration settings allow it.
 * 
 * Implements hook_form_alter().
 */
function sfs_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('sfs.settings');
  if ($config->get('sfs_check_user_registration') && $form_id == 'user_register_form') {
    $form['#validate'][] = 'sfs_user_registration_form_validate';
  }
  if ($config->get('sfs_check_node')) {
    if (stripos($form_id, 'node_') === 0 && stripos($form_id, '_form') !== FALSE) {
      $form['#validate'][] = 'sfs_node_form_validate';
    }
  }
  if ($config->get('sfs_check_comment')) {
    if (stripos($form_id, 'comment_') === 0 && stripos($form_id, '_form') !== FALSE) {
      $form['#validate'][] = 'sfs_comment_form_validate';
    }
  }
  if ($config->get('sfs_check_contact')) {
    if (stripos($form_id, 'contact_message_') === 0 && stripos($form_id, '_form') !== FALSE) {
      $form['#validate'][] = 'sfs_contact_form_validate';
    }
  }
}

/**
 * Validate callback for user registration form.
 */
function sfs_user_registration_form_validate(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('sfs.settings');
  
  if ($config->get('sfs_check_user_registration')) {
    $form_errors = $form_state->getErrors();
    if (!$form_errors) {
      $sfs = \Drupal::service('sfs.detect.spam');
      $ip = \Drupal::request()->getClientIp();
      $values = $form_state->getValues();
      if ($sfs->isSpammer($values['name'], $values['mail'], $ip)) {
        $form_state->setErrorByName('', $config->get('sfs_blocked_message'));
        if ($config->get('sfs_log_blocked_spam')) {
          \Drupal::logger('sfs')->notice('Blocked spam account: name:@name  e-mail:@mail  IP:@ip',
            ['@name' => $values['name'], '@mail' => $values['mail'], '@ip' => $ip]);
        }
        $delay = $config->get('sfs_flood_delay');
        if ($delay) {
          sleep($delay);
        }
      }
    }
  }
}

/**
 * Validate callback for node form.
 */
function sfs_node_form_validate(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('sfs.settings');
  
  if ($config->get('sfs_check_node')) {
    $form_errors = $form_state->getErrors();
    if (!$form_errors) {
      $sfs = \Drupal::service('sfs.detect.spam');
      $ip = \Drupal::request()->getClientIp();
      if ($sfs->isSpammer(NULL, NULL, $ip)) {
        $form_state->setErrorByName('', $config->get('sfs_blocked_message'));
        if ($config->get('sfs_log_blocked_spam')) {
          \Drupal::logger('sfs')->notice('Blocked spam content: name:@name  e-mail:@mail  IP:@ip',
            ['@name' => $values['name'], '@mail' => NULL, '@ip' => $ip]);
        }
        $delay = $config->get('sfs_flood_delay');
        if ($delay) {
          sleep($delay);
        }
      }
    }
  }
}

/**
 * Validate callback for comment form.
 */
function sfs_comment_form_validate(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('sfs.settings');
  
  if ($config->get('sfs_check_comment')) {
    $form_errors = $form_state->getErrors();
    if (!$form_errors) {
      $sfs = \Drupal::service('sfs.detect.spam');
      $ip = \Drupal::request()->getClientIp();
      $values = $form_state->getValues();
      if ($sfs->isSpammer($values['name'], NULL, $ip)) {
        $form_state->setErrorByName('', $config->get('sfs_blocked_message'));
        if ($config->get('sfs_log_blocked_spam')) {
          \Drupal::logger('sfs')->notice('Blocked spam comment: name:@name  e-mail:@mail  IP:@ip',
            ['@name' => $values['name'], '@mail' => NULL, '@ip' => $ip]);
        }
        $delay = $config->get('sfs_flood_delay');
        if ($delay) {
          sleep($delay);
        }
      }
    }
  }
}

/**
 * Validate callback for contact feedback form.
 */
function sfs_contact_form_validate(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('sfs.settings');
  
  if ($config->get('sfs_check_contact')) {
    $form_errors = $form_state->getErrors();
    if (!$form_errors) {
      $sfs = \Drupal::service('sfs.detect.spam');
      $ip = \Drupal::request()->getClientIp();
      $values = $form_state->getValues();
      if ($sfs->isSpammer($values['name'], $values['mail'], $ip)) {
        $form_state->setErrorByName('', $config->get('sfs_blocked_message'));
        if ($config->get('sfs_log_blocked_spam')) {
          \Drupal::logger('sfs')->notice('Blocked spam contact: name:@name  e-mail:@mail  IP:@ip',
            ['@name' => $values['name'], '@mail' => $values['mail'], '@ip' => $ip]);
        }
        $delay = $config->get('sfs_flood_delay');
        if ($delay) {
          sleep($delay);
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function sfs_node_insert($node) {
  db_insert('sfs_hostname')
    ->fields(array(
      'uuid' => \Drupal::service('uuid')->generate(),
      'entity_id' => $node->id(),
      'entity_type' => 'node',
      'uid' => $node->getOwnerId(),
      'hostname' => \Drupal::request()->getClientIp(),
    ))
    ->execute();
}

/**
 * Implements hook_node_delete().
 */
function sfs_node_delete($node) {
  db_delete('sfs_hostname')
  ->condition('entity_id', $node->id())
  ->condition('entity_type', 'node')
  ->execute();
}

/**
 * Adds Spam Report operation to the administration lists of content, comment
 * and user.
 * 
 * Implements hook_entity_operation_alter().
 */
function sfs_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (!(\Drupal::currentUser()->hasPermission('administer sfs'))) {
    return;
  }
  
  $entityTypeId = $entity->getEntityTypeId();
  if ($entityTypeId === 'comment') {
    $operations['report_comment'] = [
      'title' => 'Report Spam',
      'url' => Url::fromRoute('sfs.comment.report_form', ['comment' => $entity->id()]),
      'weight' => 50,
    ];
  }
  if ($entityTypeId === 'node') {
    $operations['report_node'] = [
      'title' => 'Report Spam',
      'url' => Url::fromRoute('sfs.node.report_form', ['node' => $entity->id()]),
      'weight' => 50,
    ];
  }
  if ($entityTypeId === 'user') {
    $operations['report_user'] = [
      'title' => 'Report Spammer',
      'url' => Url::fromRoute('sfs.user.report_form', ['user' => $entity->id()]),
      'weight' => 50,
    ];
  }
}

/**
 * Add Report Spam link to the links of the display of comment.
 * 
 * Implements hook_preprocess_links__comment().
 */
function sfs_preprocess_links__comment(&$variables) {
  // No links are available without permission or in pre-view mode.
  if (!isset($variables['links']['comment-edit'])) {
    return;
  }
  
  $checkCommentSpam = \Drupal::config('sfs.settings')->get('sfs_check_comment');
  $user = \Drupal::currentUser();
  $reportCommentPermission = $user->hasPermission('report sfs comment');
  $adminCommentPermission = $user->hasPermission('administer comments');
  
  if ($checkCommentSpam && $adminCommentPermission && $reportCommentPermission) {
    /** @var \Drupal\Core\Url $url */
    $url = $variables['links']['comment-edit']['link']['#url'];
    $routeParameters = $url->getRouteParameters();
    $variables['links']['comment_report'] = [
      'link' => [
        '#type' => 'link',
        '#title' => t('Report Spam'),
        '#options' => ['ajax' => NULL],
        '#url' => new Url('sfs.comment.report_form', ['comment' => $routeParameters['comment']]),
        '#ajax' => NULL,
      ],
      'text' => t('Report Spam'),
    ];
  }
}

/**
 * Implements hook_cron().
 */
function sfs_cron() {
  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  
  /** @var \Drupal\Core\Queue\QueueInterface $queue */
  $queue = $queue_factory->get('sfs_queue_worker');
  
  $queue->createItem(NULL);
}
