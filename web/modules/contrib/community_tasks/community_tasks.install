<?php

/**
 * @file
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Implements hook_install().
 *
 * Check if there is a node comments field, and if not, create one
 */
function community_tasks_install() {
  //for better compatibility with the distribution profile Hamlets http://drupal.org/project/cforge
  //these fields are added by code, checking to see if they exist already
  community_tasks_reuse_comments_field();
  community_tasks_reuse_body_field();
  community_tasks_reuse_date_field();
  //having added these late, we need to manually enable these fields in the entity_view_displays
  $body_options = [
    'type' => 'text_default',
    'weight' => 0,
    'label' => 'hidden'
  ];
  $comments_options = [
    'type' => 'comment_default',
    'weight' => 4,
    'label' => 'hidden',
    'settings' => ['pager_id' => 0]
  ];
  EntityViewDisplay::load('node.community_task.teaser')
    ->setComponent('body', $body_options)
    ->save();

  EntityViewDisplay::load('node.community_task.default')
    ->setComponent('body', $body_options)
    ->setComponent('node_comments', $comments_options)
    ->save();
}


function community_tasks_reuse_comments_field() {
  $field_name = 'node_comments';
  $storage_ids = \Drupal::entityQuery('field_storage_config')
    ->condition('field_name', $field_name)
    ->condition('entity_type', 'node')
    ->execute();
  $storage_id = reset($storage_ids);
  if (!$storage_id) {
    $field = FieldStorageConfig::Create([
      'id' => 'node.comment',
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => 'comment',
      'cardinality' => 1,
      'settings' => [
        'comment_type' => 'node'
      ],
      'provider' => 'community_tasks'
    ]);
    $field->save();
  }
  else {
    $field = FieldStorageConfig::load($storage_id);
  }
  //now make the field
  FieldConfig::Create([
    'field_name' => $field_name,
    'entity_type' => 'node',
    'field_type' => 'comment',
    'bundle' => 'community_task',
    'label' => t('Comments'),
    'provider' => 'community_tasks'
  ])->save();
}

function community_tasks_reuse_body_field() {
  $field_name = 'body';
  $storage_ids = \Drupal::entityQuery('field_storage_config')
    ->condition('field_name', $field_name)
    ->condition('entity_type', 'node')
    ->execute();
  $storage_id = reset($storage_ids);
  if (empty($storage_id)) {
    $field = FieldStorageConfig::Create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => 'text_with_summary',
      'cardinality' => 1,
      'settings' => [
        'datetime_type' =>  'datetime'
      ],
      'provider' => 'community_tasks'
    ]);
    $field->save();
  }
  else {
    $field = FieldStorageConfig::load($storage_id);
  }
  //now make the field
  FieldConfig::Create([
    'field_name' => $field_name,
    'entity_type' => 'node',
    'field_type' => 'text_with_summary',
    'bundle' => 'community_task',
    'label' => t('Details'),
    'provider' => 'community_tasks'
  ])
      ->save();
}


function community_tasks_reuse_date_field() {
  $field_name = 'date';
  $storage_ids = \Drupal::entityQuery('field_storage_config')
    ->condition('field_name', $field_name)
    ->condition('entity_type', 'node')
    ->execute();
  $storage_id = reset($storage_ids);
  if (empty($storage_id)) {
    $field = FieldStorageConfig::Create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => 'datetime',
      'cardinality' => 1,
      'provider' => 'community_tasks'
    ]);
    $field->save();
  }
  else {
    $field = FieldStorageConfig::load($storage_id);
  }
  //now make the field
  FieldConfig::Create([
    'field_name' => $field_name,
    'entity_type' => 'node',
    'field_type' => 'datetime',
    'bundle' => 'community_task',
    'label' => t('Date or deadline'),
    'provider' => 'community_tasks'
  ])->save();
}

/*
DELETE from config where name in (
 'core.entity_view_display.node.community_task.teaser',
 'core.entity_view_display.node.community_task.default',
 'core.entity_form_display.node.community_task.default',
 'field.field.node.community_task.ctask_state',
 'field.storage.node.ctask_state',
 'views.view.community_tasks',
 'node.type.community_task',
 'field.field.node.community_task.node_comments',
 'field.field.node.community_task.body',
 'field.field.node.community_task.date'
 )
 */
