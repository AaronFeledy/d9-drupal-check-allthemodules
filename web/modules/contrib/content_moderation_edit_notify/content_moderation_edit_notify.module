<?php

/**
 * @file
 * Contains content_moderation_edit_notify.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function content_moderation_edit_notify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_moderation_edit_notify module.
    case 'help.page.content_moderation_edit_notify':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Notify users if a new revision is saved when editing a moderated node.') . '</p>';
      $output .= '<h3>' . t('Implementation') . '</h3>';
      $output .= '<p>' . t('At interval an ajax request is made while editing a moderated node to check if the current revision is outdated. If so, a message is printed before the form and the save button so the editor can take any action before saving and overriding any change.') . '</p>';
      $output .= '<p>' . t('If the concurrent revision is saved in a published state, a Drupal constraint will bring an error when saving the form, this module just alert before saving for this.<br>If the concurrent revision is not moved in a published state, the current revision will replace any changes made on the concurrent one. This is where this module bring a message to alert the editor for this use case.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node entities.
 */
function content_moderation_edit_notify_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Alter only node edit forms.
  if (strpos($form_id, '_edit_form') !== FALSE) {
    $node = $form_state->getFormObject()->getEntity();
    if ($node instanceof NodeInterface) {
      // Check if we are on a moderated content.
      $moderation_info = Drupal::service('content_moderation.moderation_information');
      if ($moderation_info->isModeratedEntity($node)) {
        // When coming back from preview, getRevisionId is empty.
        $vid = $node->getRevisionId();
        if ($vid == NULL) {
          $vid = $node->getLoadedRevisionId();
        }
        // Log in case of error.
        if ($vid == NULL) {
          $message = 'Missing version for node: @nid';
          \Drupal::logger('content_moderation_edit_notify')->error($message, ['@nid' => $node->id()]);
        }
        else {
          // Add our scripts for ajax request on revision based on current version.
          $config = \Drupal::config('content_moderation_edit_notify.settings');
          $form['#attached']['library'][] = 'content_moderation_edit_notify/content-moderation-edit-notify';
          $uid = \Drupal::currentUser()->id();
          $form['#attached']['drupalSettings']['content_moderation_edit_notify'] = [
            'interval' => $config->get('interval') * 1000,
            $uid => [
              'node' => [
                'nid' => $node->id(),
                'vid' => $vid,
              ],
            ],
          ];
      }
      }
    }

  }

}
