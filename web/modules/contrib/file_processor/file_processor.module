<?php

/**
 * @file
 * Contains file_compress.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_cron().
 */
function file_processor_cron() {
  $config = \Drupal::config('file_processor.FileProcessorAdmin');
  $config_bin = \Drupal::configFactory()->getEditable('file_processor.FileProcessorBinariesAdmin');

  $manager = \Drupal::service('plugin.manager.file_processor');
  $plugin_definitions = $manager->getDefinitions();

  $files = file_processor_get_files_to_process();
  $types = file_processor_get_types();

  foreach ($files as $file) {
    $file = file_load($file->fid);
    $mime_type = $file->getMimeType();

    $machine_name = str_replace('/', '_', $mime_type);
    $current_config = $config->get($machine_name);

    // Ignore if don't exists processor for this mime type.
    if (empty($current_config)) {
      $file->set('process', FALSE);
      $file->save();
      continue;
    }

    $processors = $current_config['processor'];

    foreach ($processors as $processor) {
      if (isset($plugin_definitions[$processor])) {
        $definition = $plugin_definitions[$processor];
        // New processor class.
        $processor = new $definition['class']($definition, $definition['id'], $definition);

        // Process file.
        $processor->process($file, $config_bin);
      }
    }
  }
}

/**
 * Get the types of image compressor.
 *
 * @return array
 *   Types of image compressor that exists.
 */
function file_processor_get_types() {
  $manager = \Drupal::service('plugin.manager.file_processor');
  $plugin_definitions = $manager->getDefinitions();

  $types = array();
  foreach ($plugin_definitions as $plugin_id => $definition) {
    $types[$definition['mime_type']] = $definition['mime_type'];
  }

  return $types;
}

/**
 * Implements hook_entity_base_field_info().
 */
function file_processor_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'file') {
    $fields['process'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Process'))
      ->setDescription(t('If the file is Processed or not.'));

    return $fields;
  }
}

/**
 * Get files that need to be processed.
 *
 * @return array
 *   Items that need to be processed.
 */
function file_processor_get_files_to_process() {
  $config = \Drupal::config('file_processor.FileProcessorAdmin');
  $limit = $config->get('batch_limit');
  if (empty($limit)) {
    $limit = 100;
  }
  
  $query = db_query_range('SELECT * FROM {file_managed} WHERE process IS NULL', 0, $limit);
  $result = $query->fetchAll();

  return $result;
}

/**
 * Verify requirements.
 *
 * @return bool
 *   Return true if everthing is ok.
 */
function file_processor_verify_requirements() {
  $config = \Drupal::config('file_processor.FileProcessorBinariesAdmin');
  $manager = \Drupal::service('plugin.manager.file_processor');
  $plugin_definitions = $manager->getDefinitions();
  foreach ($plugin_definitions as $plugin_id => $plugin_value) {
    if (empty($config->get($plugin_id))) {
      return FALSE;
    }
  }

  return TRUE;
}