<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Config\Entity\ConfigEntityInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function entity_collector_downloader_form_entity_collection_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\entity_collector\Entity\EntityCollectionTypeInterface $entityCollectionType */
  $entityCollectionType = $form_state->getFormObject()->getEntity();

  /** @var \Drupal\entity_collector_downloader\Service\EntityCollectionDownloadManagerInterface $entityCollectionDownloadManager */
  $entityCollectionDownloadManager = \Drupal::service('entity_collection_download.manager');
  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
  $fields = $entityCollectionDownloadManager->getAllPossibleDownloadFields($entityCollectionType);

  $fieldOptions = [];
  foreach ($fields as $field_name => $field) {
    $fieldOptions[$field_name] = $field->getLabel();
  }

  /** @var \Drupal\Core\Entity\EntityStorageInterface $downloadOptionConfigStorage */
  $downloadOptionConfigStorage = \Drupal::service('entity_type.manager')
    ->getStorage('download_option_config');
  $downloadOptionConfigEntities = $downloadOptionConfigStorage->loadMultiple();

  $downloadOptions = [];
  foreach ($downloadOptionConfigEntities as $downloadOptionConfigEntity) {
    $downloadOptions[$downloadOptionConfigEntity->id()] = $downloadOptionConfigEntity->label();
  }

  $viewModes = \Drupal::entityQuery('entity_view_mode')
    ->condition('targetEntityType', $entityCollectionType->getSource())
    ->execute();

  foreach ($viewModes as $viewMode) {
    /** @var \Drupal\Core\Entity\EntityViewModeInterface $mode */
    $mode = \Drupal\Core\Entity\Entity\EntityViewMode::load($viewMode);
    $label = $mode->label();
    $key = substr($mode->id(), strpos($mode->id(), ".") + 1);
    $entityCollectionViewModeOptions[$key] = $label;
  }

  $form['#entity_builders'][] = 'entity_collector_downloader_form_builder';
  $form['entity_collection_downloader_fields'] = [
    '#type' => 'checkboxes',
    '#title' => t('Enabled Download Fields'),
    '#description' => t('The fields that will be used to offer download links on the download page.'),
    '#options' => $fieldOptions,
    '#default_value' => $entityCollectionDownloadManager->getActiveDownloadFieldNames($entityCollectionType),
  ];
  $form['entity_collection_downloader_options'] = [
    '#type' => 'checkboxes',
    '#title' => t('Enabled Download Fields'),
    '#description' => t('The download options for the files to offer to the user on the download page.'),
    '#options' => $downloadOptions,
    '#default_value' => $entityCollectionDownloadManager->getActiveDownloadOptionIds($entityCollectionType),
  ];
  $form['entity_collection_downloader_view_mode'] = [
    '#type' => 'select',
    '#title' => t('View Mode'),
    '#description' => t('The view mode to render the entities on the download page.'),
    '#options' => $entityCollectionViewModeOptions,
  ];

}

/**
 * Entity form builder to add the entity collector downloader to the collection type.
 *
 * @param string $entity_type
 * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function entity_collector_downloader_form_builder($entity_type, ConfigEntityInterface $bundle, &$form, FormStateInterface $form_state) {
  $downloadFields = $form_state->getValue('entity_collection_downloader_fields');
  $downloadOptions = $form_state->getValue('entity_collection_downloader_options');
  $viewMode = $form_state->getValue('entity_collection_downloader_view_mode');
  $bundle->setThirdPartySetting('entity_collector_downloader', 'entity_collection_downloader_fields', $downloadFields);
  $bundle->setThirdPartySetting('entity_collector_downloader', 'entity_collection_downloader_options', $downloadOptions);
  $bundle->setThirdPartySetting('entity_collector_downloader', 'entity_collection_downloader_view_mode', $viewMode);
}

/**
 * Implements hook_theme().
 */
function entity_collector_downloader_theme() {
  $theme = [];
  $theme['entity_collection_download_section'] = [
    'render element' => 'elements',
  ];
  $theme['entity_collection_download_row'] = [
    'render element' => 'elements',
  ];
  $theme['entity_collection_download_options'] = [
    'render element' => 'elements',
  ];
  return $theme;
}

/**
 * Preprocess handler for the entity_collection_download_section field type.
 *
 * @param array $variables
 */
function template_preprocess_entity_collection_download_section(&$variables) {
  $variables['title'] = $variables['elements']['#title'];
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Preprocess handler for the entity_collection_download_item field type.
 *
 * @param array $variables
 */
function template_preprocess_entity_collection_download_row(&$variables) {
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Preprocess handler for the entity_collection_download_options field type.
 *
 * @param array $variables
 */
function template_preprocess_entity_collection_download_options(&$variables) {
  /** @var \Drupal\file\FileInterface $download */
  $download = $variables['elements']['#download'];
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    $variables['options'][$key] = $variables['elements'][$key];
  }
  $variables['file_name'] = $download->getFilename();
  $variables['file_uri'] = $download->getFileUri();
  $variables['mime_type'] = $download->getMimeType();
  $variables['size'] = $download->getSize();
  $variables['label'] = $variables['file_name'];
}
