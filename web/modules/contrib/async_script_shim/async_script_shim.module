<?php

/**
 * @file
 * Rewrite async script tags to inline async scripts.
 *
 * Rewrites all scripts in the page with an async attribute to an inline
 * JavaScript loading the script asynchronously in an old browser compatible
 * way.
 *
 * This could be easier done with hook_js_alter() but that would only rewrite
 * non-aggregated scripts. This approach will also rewrite aggregated scripts.
 *
 * This module is mostly a proof of concept.
 *
 * @see hook_js_alter()
 */

/**
 * Rewrite async script tags to inline async scripts.
 */
function async_script_shim_js_pre_render($scripts) {
  foreach ($scripts as &$script) {
    if (isset($script['#attributes']) && isset($script['#attributes']['async']) && $script['#attributes']['async'] == 'async') {
      $source = url($script['#attributes']['src']);
      $script['#value'] = <<<SCRIPT
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '$source';
  var d = document.getElementsByTagName('script')[0];
  d.parentNode.insertBefore(s, d);
})();
SCRIPT;
      unset($script['#attributes']['async']);
      unset($script['#attributes']['src']);
    }
  }
  return $scripts;
}

/**
 * Implements hook_element_info_alter().
 *
 * Add our async_script_shim_js_pre_render() as a pre_render function.
 *
 * @see async_script_shim_js_pre_render()
 */
function async_script_shim_element_info_alter(&$type) {
  $type['scripts']['#pre_render'][] = 'async_script_shim_js_pre_render';
}
