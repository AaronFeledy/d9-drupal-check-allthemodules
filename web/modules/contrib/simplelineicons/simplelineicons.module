<?php

/**
 * @file
 * Contains simplelineicons.module.
 */

define('SIMPLELINEICONS_LIBRARY', 'simple-line-icons');
define('SIMPLELINEICONS_NAME', 'Simple Line Icons');
define('SIMPLELINEICONS_URL', 'http://simplelineicons.com/');
define('SIMPLELINEICONS_CDN_URL', '//cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.4.1/css/simple-line-icons.min.css');
define('SIMPLELINEICONS_DOWNLOAD_URL', 'https://github.com/thesabbir/simple-line-icons/archive/2.4.1.zip');
define('SIMPLELINEICONS_PREFIX', 'icon');

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function simplelineicons_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.simplelineicons':
      return '<p><i class="icon-flag icon-large"></i>' . t('<a href=":simplelineicons_url">@simplelineicons</a> is an iconic font.', [
        '@simplelineicons'     => SIMPLELINEICONS_NAME,
        ':simplelineicons_url' => SIMPLELINEICONS_URL,
      ]) . '</p>';
  }
}

/**
 * Implements hook_libraries_info().
 */
function simplelineicons_libraries_info() {
  $libraries[SIMPLELINEICONS_LIBRARY] = [
    'name'              => SIMPLELINEICONS_NAME,
    'vendor url'        => SIMPLELINEICONS_URL,
    'download url'      => SIMPLELINEICONS_DOWNLOAD_URL,
    'version arguments' => [
      'file'    => 'package.json',
      'pattern' => '/(\d\.\d+\.\d+)/',
      'lines'   => 3,
    ],
    'files'             => [
      'css' => [
        'css/simple-line-icons.css',
      ],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook__page_attachments().
 *
 * Purposefully only load on page requests and not hook_init(). This is
 * required so it does not increase the bootstrap time of Drupal when it isn't
 * necessary.
 */
function simplelineicons_page_attachments(array &$page) {
  if (\Drupal::config('simplelineicons.settings')
    ->get('simplelineicons_use_cdn')
  ) {
    $page['#attached']['library'][] = 'simplelineicons/' . SIMPLELINEICONS_LIBRARY . '.cdn';
  }
  else {
    $library = libraries_detect(SIMPLELINEICONS_LIBRARY);

    if (!$library['installed']) {
      drupal_set_message($library['error message'] . ' ' . t('Please make sure that '
          . SIMPLELINEICONS_NAME . ' was download & extracted at /libraries/' . SIMPLELINEICONS_LIBRARY . ' directory. '
          . 'Please check README.txt for more details.'),
        'warning');
    }
    else {
      $page['#attached']['library'][] = 'simplelineicons/' . SIMPLELINEICONS_LIBRARY;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkbox to Drupal Bandwidth optimization settings in performance page
 * to provide an option to load CDN version of simplelineicons.
 */
function simplelineicons_form_system_performance_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['bandwidth_optimization']['simplelineicons_use_cdn'] = [
    '#type'          => 'checkbox',
    '#title'         => t('Use CDN version of Simple Line Icons.'),
    '#default_value' => \Drupal::config('simplelineicons.settings')
      ->get('simplelineicons_use_cdn'),
  ];

  $form['#submit'][] = 'simplelineicons_form_system_performance_settings_alter_submit';
}

/**
 * Save configurations.
 */
function simplelineicons_form_system_performance_settings_alter_submit($form, $form_state) {
  \Drupal::configFactory()->getEditable('simplelineicons.settings')
    ->set('simplelineicons_use_cdn', $form_state->getValue('simplelineicons_use_cdn'))
    ->save();
}

/**
 * Implements hook_icon_providers().
 */
function simplelineicons_icon_providers() {
  $providers[SIMPLELINEICONS_LIBRARY] = [
    'title' => SIMPLELINEICONS_NAME,
    'url'   => SIMPLELINEICONS_URL,
  ];

  return $providers;
}

/**
 * Implements hook_icon_bundle_configure().
 */
function simplelineicons_icon_bundle_configure(&$settings, &$form_state, &$complete_form) {
  $bundle = $form_state['bundle'];

  if ($bundle['provider'] === SIMPLELINEICONS_LIBRARY) {
    $settings['tag'] = [
      '#type'          => 'select',
      '#title'         => t('HTML Markup'),
      '#description'   => t('Choose the HTML markup tag that @simplelineicons icons should be created with. Typically, this is a %tag tag, however it can be changed to suite the theme requirements.', [
        '@simplelineicons' => SIMPLELINEICONS_NAME,
        '%tag'             => '<' . $bundle['settings']['tag'] . '>',
      ]),
      '#options'       => array_combine(['i', 'span', 'div'], [
        'i',
        'span',
        'div'
      ]),
      '#default_value' => $bundle['settings']['tag'],
    ];
  }
}

/**
 * Implements hook_preprocess_icon_RENDER_HOOK().
 */
function simplelineicons_preprocess_icon_sprite(&$variables) {
  $bundle = &$variables['bundle'];

  if ($bundle['provider'] === SIMPLELINEICONS_LIBRARY) {
    // Remove the default "icon" class.
    $key = array_search('icon', $variables['attributes']['class']);

    if ($key !== FALSE) {
      unset($variables['attributes']['class'][$key]);
    }

    // Add prefix as an identifier class.
    $variables['attributes']['class'][] = SIMPLELINEICONS_PREFIX;

    // Prepend the icon with the prefix (which will be used as the class).
    $variables['icon'] = SIMPLELINEICONS_PREFIX . '-' . $variables['icon'];
  }
}

/**
 * Implements hook_icon_bundles().
 */
function simplelineicons_icon_bundles() {
  $bundles[SIMPLELINEICONS_LIBRARY] = [
    'title'    => SIMPLELINEICONS_NAME,
    'provider' => SIMPLELINEICONS_LIBRARY,
    'render'   => 'sprite',
    'settings' => [
      'tag' => 'i',
    ],
    'icons'    => simplelineicons_extract_icons(),
  ];

  return $bundles;
}

/**
 * Extracts all icons from the CSS file.
 *
 * @return array
 */
function simplelineicons_extract_icons() {
  // If CDN is enabled, get CSS content from the CDN URL.
  if (\Drupal::config('simplelineicons.settings')
    ->get('simplelineicons_use_cdn')
  ) {
    $url = SIMPLELINEICONS_CDN_URL;

    // The URL needs to have a schema to work with drupal_http_request.
    if (strpos($url, '//') === 0) {
      $url = 'http:' . $url;
    }

    $response = \Drupal::httpClient()->get($url, [
      'headers' => [
        'Accept' => 'text/plain',
      ]
    ]);

    $content = (string) $response->getBody();
  }
  // Otherwise get CSS content from the local library.
  else {
    if (\Drupal::moduleHandler()->moduleExists('libraries')) {
      $library = libraries_load(SIMPLELINEICONS_LIBRARY);
      $filepath = DRUPAL_ROOT . '/' . $library['library path'] . '/css/simple-line-icons.css';
      $content = file_exists($filepath) ? file_get_contents($filepath) : '';
    }
  }

  // Parse the CSS content
  if (preg_match_all('@\.icon-(.*?):before@m', $content, $matches)) {
    $icons = $matches[1];
    asort($icons);

    return array_combine($icons, $icons);
  }

  return [];
}
