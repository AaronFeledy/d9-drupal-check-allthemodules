<?php

/**
 * @file
 * Implements hooks for node_view_language_permissions.
 *
 * @see \Drupal\node\Tests\NodeQueryAlterTest
 * @see \Drupal\node\Tests\NodeAccessBaseTableTest
 */

use Drupal\Core\Language\Language;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;

/**
 * Implements hook_node_access_records().
 */
function node_view_language_permissions_node_access_records(NodeInterface $node) {
  $grants = [];
  if ($node->language()->getId() === Language::LANGCODE_NOT_APPLICABLE) {
    $languages = \Drupal::languageManager()->getLanguages(LanguageInterface::STATE_ALL);
  }
  else {
    $languages = $node->getTranslationLanguages(TRUE);
  }

  foreach ($languages as $langcode => $language) {
    // For nodes without applicable language use main node.
    if ($node->language()->getId() === Language::LANGCODE_NOT_APPLICABLE) {
      $node_language = $node;
    }
    else {
      $node_language = $node->getTranslation($langcode);
    }
    // We only care about the node if it's published.
    // We don't want to override view published permissions.
    if ($node_language->isPublished()) {
      $grants[] = [
        'realm' => "view_any_{$node->getType()}_{$langcode}_content",
        'gid' => 1,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
        'langcode' => $langcode,
      ];
      $grants[] = [
        'realm' => "view_own_{$node->getType()}_{$langcode}_content",
        'gid' => $node->getOwnerId(),
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
        'langcode' => $langcode,
      ];
    }
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function node_view_language_permissions_node_grants(AccountInterface $account, $op) {
  $grants = [];
  if ($op == 'view') {
    foreach (NodeType::loadMultiple() as $type) {
      $type_id = $type->id();
      foreach (\Drupal::languageManager()->getLanguages(LanguageInterface::STATE_ALL) as $lang) {
        $lang_id = $lang->getId();

        if ($account->hasPermission("view any $type_id $lang_id content")) {
          $grants["view_any_{$type_id}_{$lang_id}_content"] = [1];
        }
        if ($account->hasPermission("view own $type_id $lang_id content")) {
          $grants["view_own_{$type_id}_{$lang_id}_content"] = [$account->id()];
        }
      }
    }
  }
  return $grants;
}

/**
 * Implements hook_help().
 */
function node_view_language_permissions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.node_view_language_permissions':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}
