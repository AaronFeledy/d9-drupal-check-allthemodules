<?php
/**
 * Token Variable Configuration Form.
 */

namespace Drupal\token_var\Form;


use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Config\ConfigManagerInterface;
use Drupal\Core\Config\StorageInterface;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
use Drupal\Core\Diff\DiffFormatter;
use Drupal\system\FileDownloadController;
use Symfony\Component\DependencyInjection\ContainerInterface;

class TokenVarConfig extends ConfigFormBase implements ContainerInjectionInterface {

  /**
   * The target storage.
   *
   * @var \Drupal\Core\Config\StorageInterface
   */
  protected $targetStorage;

  /**
   * The source storage.
   *
   * @var \Drupal\Core\Config\StorageInterface
   */
  protected $sourceStorage;

  /**
   * The configuration manager.
   *
   * @var \Drupal\Core\Config\ConfigManagerInterface
   */
  protected $configManager;

  /**
   * The file download controller.
   *
   * @var \Drupal\system\FileDownloadController
   */
  protected $fileDownloadController;

  /**
   * The diff formatter.
   *
   * @var \Drupal\Core\Diff\DiffFormatter
   */
  protected $diffFormatter;

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'token_var_config_form';
  }

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames() {
    return [
      'token_var.settings',
    ];
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('config.storage'),
      $container->get('config.storage.sync'),
      $container->get('config.manager'),
      new FileDownloadController(),
      $container->get('diff.formatter')
    );
  }

  /**
   * Constructs a ConfigController object.
   *
   * @param \Drupal\Core\Config\StorageInterface $target_storage
   *   The target storage.
   * @param \Drupal\Core\Config\StorageInterface $source_storage
   *   The source storage
   * @param \Drupal\system\FileDownloadController $file_download_controller
   *   The file download controller.
   */
  public function __construct(StorageInterface $target_storage, StorageInterface $source_storage, ConfigManagerInterface $config_manager, FileDownloadController $file_download_controller, DiffFormatter $diff_formatter) {
    $this->targetStorage = $target_storage;
    $this->sourceStorage = $source_storage;
    $this->configManager = $config_manager;
    $this->fileDownloadController = $file_download_controller;
    $this->diffFormatter = $diff_formatter;
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $config = \Drupal::config('token_var.settings')->get('token_var_replacements');
    $form = parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
    $form['#tree'] = TRUE;
    foreach ($this->configManager->getConfigFactory()->listAll() as $name) {
      $form['token_var'][$name] = array(
        '#type' => 'details',
        '#title' => $name,
      );
      foreach ($this->configManager->getConfigFactory()->get($name)->getRawData() as $key => $value) {
        if (!is_array($value) && !is_object($value)) {
          $default_value = isset($config[str_replace('.', '|', $name)][$key]) ? 1 : 0;
          $form['token_var'][$name][$key] = array(
            '#type' => 'checkbox',
            '#title' => $key,
            '#default_value' => $default_value,
          );
        }
      }
    }
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $values = $form_state->getValues()['token_var'];
    $config = $this->config('token_var.settings');
    $enabled_vars = array();
    foreach ($values as $name => $data) {
      $name = str_replace('.', '|', $name);
      foreach ($data as $key => $value) {
        if ($value) {
          $enabled_vars[$name][$key] = $value;
        }
      }
    }
    $config->set('token_var_replacements', $enabled_vars)->save();
    token_clear_cache();
    parent::submitForm($form, $form_state); // TODO: Change the autogenerated stub
  }
}
