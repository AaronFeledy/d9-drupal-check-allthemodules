<?php

/**
 * @file
 * Contains widencollective hooks.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\widencollective\WidencollectiveAuthService;

/**
 * Implements hook_form_alter().
 *
 * Adds Widencollective authorization field on user profile form. A link will be provided
 * if user has not authenticated yet. On the other hand if the current user
 * account has already been associated with a widen username and token, an
 * option (a checkbox) to remove such credentials is given.
 */
function widencollective_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  global $base_url;

  if ($form_id == 'user_form') {
    // Get the editing user.
    $user = \Drupal::routeMatch()->getParameter('user');

    $widen_account = \Drupal::service('user.data')
      ->get('widencollective', $user->id(), 'account');

    $form['widen'] = [
      '#type' => 'details',
      '#title' => t('Widen Collective Authorization'),
      '#weight' => 7,
      '#open' => TRUE,
    ];

    $collective_domain = \Drupal::config('widencollective.settings')->get('collective_domain');

    if (!empty($collective_domain)) {
      if (isset($widen_account['widen_token'])) {
        $widen_username = $widen_account['widen_username'];

        $form['widen']['widen_remove_auth'] = [
          '#type' => 'checkbox',
          '#title' => t('Remove Widen Collective authorization'),
          '#prefix' => t('Currently authorized with Widen Collective as "@username".', array('@username' => $widen_username)) . '<br />',
        ];

        $form['actions']['submit']['#submit'][] = 'widencollective_unathorize';
      }
      else {
        $return_link = $base_url . Url::fromRoute('widencollective.user_auth')->toString() . '?uid=' . $user->id();
        $form['widen']['widen_auth_link'] = [
          '#markup' => '<a href="' . WidencollectiveAuthService::generateAuthUrl($return_link) . '">' . t('Authorize with Widen Collective.') . '</a>',
        ];
      }
    }
    else {
      $form['widen']['setup_message'] = [
        '#markup' => t('You must configure your winden collective domain first. @link', array('@link' => Link::createFromRoute(t('Click here to configure.'), 'widencollective.admin')->toString())),
      ];
    }
  }
}

/**
 * Custom user form submit handler.
 */
function widencollective_unathorize($form, FormStateInterface $form_state) {
  if ($form_state->getValue('widen_remove_auth')) {
    // Get the editing user.
    $user = \Drupal::routeMatch()->getParameter('user');

    $widen_account = \Drupal::service('user.data')
      ->get('widencollective', $user->id(), 'account');

    $cancelled = WidencollectiveAuthService::cancel($widen_account['widen_token']);

    // Unset widen account data.
    if ($cancelled) {
      \Drupal::service('user.data')
        ->set('widencollective', $user->id(), 'account', []);
    }
  }
}
