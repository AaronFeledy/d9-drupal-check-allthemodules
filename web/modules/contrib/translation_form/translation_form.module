<?php

/**
 * @file
 * Contains translation_form.module.
 */

use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function translation_form_form_alter(&$form, FormStateInterface $form_state) {
  // Prevent any processing if site is not multilingual.
  if (!\Drupal::languageManager()->isMultilingual()) {
    return;
  }
  // Fetch entity form object from the form's build info data.
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['callback_object'])) {
    $entity_form = $build_info['callback_object'];

    if (!($entity_form instanceof ContentEntityFormInterface)) {
      return;
    }

    $op = $entity_form->getOperation();
    // Ensure we are operating on content entity
    // and not for default translation.
    if (in_array($op, ['edit', 'add', 'default'], TRUE)
      && !$entity_form->isDefaultFormLangcode($form_state)
      && \Drupal::hasService('translation_form.fields_previews')
    ) {
      /** @var \Drupal\translation_form\Service\TranslationFormFieldsPreviews $service */
      $service = \Drupal::service('translation_form.fields_previews');
      $entity = $entity_form->getEntity();
      if ($entity instanceof ContentEntityInterface) {
        // Set entity object to operate on.
        $service->setEntity($entity);
        $preview_languages = $service->getPreviewLanguages();
        $translations_previews = [];
        foreach ($preview_languages as $langcode => $language) {
          $translation = $service->getTranslation($langcode);
          if ($translation instanceof ContentEntityInterface) {
            $fields = $service->getFieldNames($form_state->get('form_display'));
            $translations_previews[$language->getName()] = $service
              ->getFieldsTranslations($fields, $translation);
          }
        }

        if (!empty($translations_previews)) {
          $service->prepareTables($translations_previews);
          $form['#attached']['drupalSettings']['translationFormFieldsTranslationsPreview'] = $translations_previews;
          $form['#attached']['drupalSettings']['translationFormCurrentLanguageName'] = $service->getCurrentLanguageName();
        }
        $form['#attached']['library'][] = 'translation_form/translation_form';

        // Display source language selector there are at least two translations
        // available and permission to change source language is enabled.
        $translations = $service->getTranslationLanguages();
        $source_langcode = $service->getSourceLanguage()->getId();
        $has_translations = count($translations) > 1;
        $config = \Drupal::config('translation_form.settings');
        $new_translation = empty($source_langcode) || $source_langcode == 'und';
        if ($has_translations
          && !$new_translation
          && (!empty($config->get('allow_to_change_source_language')))) {
          $languages = \Drupal::languageManager()->getLanguages();
          $form['source_langcode'] = [
            '#type' => 'details',
            '#title' => t('Source language: @language', ['@language' => $languages[$source_langcode]->getName()]),
            '#tree' => TRUE,
            '#weight' => -100,
            '#multilingual' => TRUE,
            'source' => [
              '#title' => t('Select source language'),
              '#title_display' => 'invisible',
              '#type' => 'select',
              '#default_value' => $source_langcode,
              '#options' => [],
            ],
            'submit' => [
              '#type' => 'submit',
              '#value' => t('Change'),
              '#submit' => [[$service, 'entityFormSourceChange']],
            ],
          ];
          foreach ($languages as $language) {
            if (isset($translations[$language->getId()])) {
              $form['source_langcode']['source']['#options'][$language->getId()] = $language->getName();
            }
          }
        }
      }

      // Process the submitted values before they are stored.
      $form['#entity_builders'][] = [$service, 'entityFormEntityBuild'];
    }
  }
}

/**
 * Implements hook_theme().
 */
function translation_form_theme() {
  return [
    'translation_form_alt_text_preview' => [
      'template'  => 'translation_form_alt_text_preview',
      'variables' => ['alt' => NULL],
    ],
    'translation_form_title_text_preview' => [
      'template'  => 'translation_form_title_text_preview',
      'variables' => ['title' => NULL],
    ],
  ];
}
