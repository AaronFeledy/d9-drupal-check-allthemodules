<?php

/**
 * @file
 * System which include Jquery IME library.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function ime_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case 'help.page.ime':
      $output = '';
      $output .= '<h3>' . t('Introduction') . '</h3>';
      $output .= '<p>' . t('jQuery.IME is a jQuery based input method editor library supporting more than 135 input methods across more than 62 languages.These input methods are well tested. Initially the input methods were contributed by the Wikimedia community. By now many input methods have also been contributed by Red Hat.This project is a Wikimedia foundation initiative to provide language technology tools to a wider audience outside the Wikimedia universe.This input tool is widely deployed in all Wikimedia projects (eg: wikipedia) <a href="https://github.com/wikimedia/jquery.ime" target= "_blank"> https://github.com/wikimedia/jquery.ime</a>') . '</p>';
      $output .= '<h3>' . t('Requirements') . '</h3>';
      $output .= '<h4>' . t('jquery.ime library') . '</h4>';
      $output .= t('You will need to download jquery.ime from the site <a href="https://github.com/wikimedia/jquery.ime" target= "_blank"> https://github.com/wikimedia/jquery.ime</a>. Extract the jquery.ime files to the "<root>/libraries/" directory(If libraries directory not exist on root, then create the directory) and rename to jquery.ime (e.g:<root>/libraries/jquery.ime/).');
      $output .= t('You can download this module using drush command "drush dl ime" after that do "drush en ime" it will download the jQuery.ime library as well automatically.');
      $output .= '<h3>' . t('Installation / Configuration') . '</h4>';
      $output .= '1. Extract the module files to the "<root>/modules" directory. It should now
        contain a "ime" directory.<br/>';
      $output .= '2. Enable the module in the "Administration panel > Modules > Multilingual - Internationalization" section.<br/>';
      $output .= '3. "Enable jquery.ime" from admin/config/regional/ime config page.<br/>';
      $output .= '<h3>' . t('IME administration pages') . '</h3>';
      $output .= t('<a href="!ime_config">IME</a>', array('!ime_config' => \Drupal::url('ime.config')));
      return $output;
  }
}


/**
 * Implements hook_libraries_info().
 */
function ime_libraries_info() {
  $libraries['jquery.ime'] = array(
    'name' => 'jquery.ime',
    'vendor url' => 'https://github.com/wikimedia/jquery.ime',
    'download url' => 'https://github.com/wikimedia/jquery.ime',
    'version' => '1.0',
    'files' => array(
      'js' => array(
        'src/jquery.ime.selector.js',
        'src/jquery.ime.js',
        'src/jquery.ime.preferences.js',
        'src/jquery.ime.inputmethods.js',
      ),
      'css' => array(
        'css/jquery.ime.css',
      ),
    ),
    'integration files' => array(
      'ime' => array(
        'js' => array(
          'js/ime_script.js',
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Get a pattern of pages.
 *
 * @param bool $ime_enable
 *   TRUE if Jquery IME is enable, FALSE otherwise.
 *
 * @return array $patterns
 *   An array of selected pages.
 */
function ime_paths_patterns($ime_enable) {
  $patterns = array();
  $pages = \Drupal::config('ime.settings')->get('ime_pages');
  if (isset($ime_enable) && !empty($pages)) {
    foreach (explode("\n", $pages) as $line) {
      $line = trim($line);
      if (!empty($line)) {
        $patterns[] = $line;
      }
    }
  }
  return $patterns;
}

/**
 * Implements hook_page_attachments().
 */
function ime_page_attachments(array &$attachments) {
  // Get current url to match with url menstion in ime config page.
  $current_path = \Drupal::service('path.current')->getPath();
  $current_path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  // Get the html tag attributes from ime config page.
  $jquery_ime_ids = \Drupal::config('ime.settings')->get('ime_ids');
  $jquery_ime_enable = \Drupal::config('ime.settings')->get('ime_enable');
  $library = libraries_detect('jquery.ime');
  if ($library['installed'] && $jquery_ime_enable) {
    $ime_enable = TRUE;
    $paths = ime_paths_patterns($ime_enable);
    if (isset($paths) && !empty($paths)) {
      foreach ($paths as $page) {
        if (\Drupal::service('path.matcher')->matchPath(trim($current_path, '/'), $page) || \Drupal::service('path.matcher')->matchPath($current_path_alias, $page)) {
          $field_ids = $jquery_ime_ids;
          $jquery_ime_lib_path = libraries_get_path('jquery.ime', TRUE);
          $attachments['#attached']['library'][] = 'ime/jquery.ime';
          $attachments['#attached']['library'][] = 'ime/imescript';
          $attachments['#attached']['drupalSettings']['jqueryImePath'] = $jquery_ime_lib_path;
          $attachments['#attached']['drupalSettings']['field_ids'] = $field_ids;
          break;
        }
      }
    }
  }
}
