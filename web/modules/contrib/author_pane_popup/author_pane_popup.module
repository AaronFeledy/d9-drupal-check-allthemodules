<?php

/**
 * @file
 * Author Pane Popup module.
 */

/**
 * Define Use PHP for tracking constant.
 */
define("AUTHOR_PANE_POPUP_USE_PHP_FOR_TRACKING", 2);

use Drupal\author_pane_popup\Form\AuthorPanePopupAdminSettingsQtipForm;
use Drupal\author_pane_popup\Form\AuthorPanePopupSettingsForm;
use Drupal\Core\Url;

/**
 * Implements hook_page_attachments().
 *
 * Insert JavaScript to the appropriate scope/region of the page.
 */
function author_pane_popup_page_attachments(array &$page) {
  $library = libraries_detect('jquery.qtip');
  $error_message = isset($library['error message']) ? $library['error message'] : '';
  $library_download_url = Url::fromUri($library['download url']);
  $library_download_link = \Drupal::l(t('qTip jQuery Plugin'), $library_download_url);
  if (!$library['installed']) {
    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
    if ($is_admin) {
      $message = t('@error You need to download @jquery.qtip and extract the 
      jquery.qtip folder in to the libraries folder.', array(
        '@error' => $error_message,
        '@jquery.qtip' => $library_download_link,
      )
      );
      drupal_set_message($message, 'warning');
    }
  }
  else {
    $qtip_instances = AuthorPanePopupAdminSettingsQtipForm::authorPanePopupQtipLoadMultiple();
    $qtip_instances = author_pane_popup_qtip_clean_settings_multiple($qtip_instances);
    $config = \Drupal::config('author_pane_popup.admin_settings');
    $jquery_selectors = AuthorPanePopupSettingsForm::authorPanePopupGetTriggers();
    $loading_text = $config->get('author_pane_popup.loading_text');
    $qtip_instance = $config->get('author_pane_popup.qtip_instance');
    $use_loading_image = $config->get('author_pane_popup.use_loading_image');
    if ($use_loading_image) {
      $fid = $config->get('author_pane_popup.loading_image');
      if ($fid != '') {
        $author_pane_popup_file = file_load($fid);
        $author_pane_popup_file_uri = $author_pane_popup_file->getFileUri();
        $author_pane_popup_image_variables = array(
          '#theme' => 'image_style',
          '#uri' => $author_pane_popup_file_uri,
          '#alt' => 'Loading...',
          '#title' => 'Loading...',
          '#style_name' => 'thumbnail',
          '#width' => '20',
          '#height' => '20',
        );
        $loading_text = \Drupal::service('renderer')->renderRoot($author_pane_popup_image_variables);
      }
    }
    $page['#attached']['drupalSettings']['data']['author_pane_popup'] = array(
      'qtip_instances'     => $qtip_instances,
      'qtip_instance' => $qtip_instance,
      'loading_text' => $loading_text,
      'jquery_selectors' => $jquery_selectors,
    );
    $page['#attached']['library'][] = 'author_pane_popup/jquery.qtip';
    $page['#attached']['library'][] = 'author_pane_popup/author_pane_popup';
  }
}

/**
 * Implements hook_libraries_info().
 */
function author_pane_popup_libraries_info() {
  $libraries['jquery.qtip'] = array(
    'name' => 'qTip jQuery Plugin',
    'vendor url' => 'http://qtip2.com',
    'download url' => 'http://qtip2.com/download',
    'version' => TRUE,
    'files' => array(
      'js' => array(
        'jquery.qtip.min.js',
      ),
      'css' => array(
        'jquery.qtip.min.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Make the qtip settings clean to make it readable by qTip js.
 *
 * @param object $instance
 *   Qtip instance object.
 * @param bool $encode
 *   Encode in to json format.
 */
function author_pane_popup_qtip_clean_settings($instance, $encode = TRUE) {
  if (isset($instance->settings)) {
    $settings = $instance->settings;
  }
  else {
    $settings = $instance;
  }

  if (empty($settings)) {
    return NULL;
  }

  // Items to handle individually before being processed in bulk.
  // NONE SO FAR!
  foreach ($settings as $key => $setting) {
    // Remove all empty values from the setting section so that qTip will
    // use it's default setting.
    if (isset($settings[$key])) {
      $settings[$key] = array_filter($settings[$key]);
    }

    $events = '';
    // Convert 'event' arrays into strings since that is what qTip is expecting.
    if (isset($setting['event'])) {
      foreach ($setting['event'] as $event_key => $value) {
        if ($value) {
          $events .= $event_key . ' ';
        }
      }
      $settings[$key]['event'] = $events;
    }
  }

  // If the tooltip position is not set (because it was removed before),
  // set it to the most logical place.
  if (!isset($settings['position']['my'])) {
    $qtip_position_map = array(
      'top left'      => 'bottom right',
      'top center'    => 'bottom center',
      'top right'     => 'bottom left',
      'right top'     => 'left bottom',
      'right center'  => 'left center',
      'right bottom'  => 'left top',
      'bottom right'  => 'top left',
      'bottom center' => 'top center',
      'bottom left'   => 'top right',
      'left bottom'   => 'right top',
      'left center'   => 'right center',
      'left top'      => 'right bottom',
      'center'        => 'bottom center',
    );

    $settings['position']['my'] = '';
    if (isset($settings['position']['at'])) {
      $settings['position']['my'] = $qtip_position_map[$settings['position']['at']];
    }
  }

  // Need to convert the checkbox value (0 or 1) to boolean equivalent.
  isset($settings['position']['viewport']) ? $settings['position']['viewport'] = (bool) $settings['position']['viewport'] : $settings['position']['viewport'] = FALSE;

  // Items to handle individually before being processed in bulk.
  // We need to set an empty content.text container so that
  // the qtip will be generated properly.
  if (!isset($settings['content']['text'])) {
    $settings['content']['text'] = '';
  }
  // Set the value of the tip to FALSE if it was removed in the
  // bulk operations above.
  // qTip needs style.tip = false if it is supposed to hide the
  // tip because by default.
  // it will display the tip. We don't want to set a checkbox for
  // 'Hide tip' in the administrative form because all of
  // the other options are 'show'.
  if (isset($settings['style']['tip']) && !$settings['style']['tip']['corner']) {
    $settings['style']['tip'] = FALSE;
  }
  else {
    $settings['style']['tip']['corner'] = TRUE;
  }

  // Set the tooltip value properly if it is explicitly set to a position.
  if (isset($settings['style']['tip']['corner_position']) &&
    !empty($settings['style']['tip']['corner_position'])) {
    $settings['style']['tip']['corner'] = $settings['style']['tip']['corner_position'];
  }

  // We need to remove the mimic setting if it is empty to
  // avoid a jQuery error being thrown.
  if (isset($settings['style']['tip']['mimic']) &&
    empty($settings['style']['tip']['mimic'])) {
    unset($settings['style']['tip']['mimic']);
  }

  // Set an empty class variable if it's not already set.
  if (!isset($settings['style']['classes'])) {
    $settings['style']['classes'] = '';
  }

  // If we are using a custom color scheme we need to push that
  // class to the classes array.
  if ($settings['style']['classes'] == 'qtip-custom' &&
    isset($settings['style']['classes_custom'])) {
    $settings['style']['classes'] .= ' ' . $settings['style']['classes_custom'];
  }

  // We need to push the shadow and rounded corners classes to the
  // classes array, if they exist.
  isset($settings['style']['shadow']) && $settings['style']['shadow'] != FALSE
    ? $settings['style']['classes'] .= ' qtip-shadow' : '';
  isset($settings['style']['rounded_corners']) && $settings['style']['rounded_corners'] != FALSE
    ? $settings['style']['classes'] .= ' qtip-rounded' : '';

  // Handle the close button.
  if (isset($settings['content']['button']) &&
    isset($settings['miscellaneous']['button_title_text']) &&
    !empty($settings['miscellaneous']['button_title_text'])) {
    $settings['content']['button'] = $settings['miscellaneous']['button_title_text'];
  }

  // Convert necessary values to integer equivalent.
  isset($settings['style']['tip']['width']) ? $settings['style']['tip']['width'] = (int) $settings['style']['tip']['width'] : NULL;
  isset($settings['style']['tip']['height']) ? $settings['style']['tip']['height'] = (int) $settings['style']['tip']['height'] : NULL;
  isset($settings['style']['tip']['border']) ? $settings['style']['tip']['border'] = (int) $settings['style']['tip']['border'] : NULL;
  isset($settings['style']['tip']['offset']) ? $settings['style']['tip']['offset'] = (int) $settings['style']['tip']['offset'] : NULL;
  isset($settings['hide']['inactive']) ? $settings['hide']['inactive'] = (int) $settings['hide']['inactive'] : NULL;

  // 'solo' needs to be TRUE, not 1.
  if (!empty($settings['show']['solo'])) {
    $settings['show']['solo'] = TRUE;
  }

  // Set the position target to follow mouse, if set.
  if (!empty($settings['position']['target'])) {
    $settings['position']['target'] = 'mouse';
  }

  // Cleanup settings that do not need to be passed to js.
  unset($settings['style']['tip']['corner_position']);
  unset($settings['style']['rounded_corners']);
  unset($settings['style']['shadow']);
  unset($settings['miscellaneous']);

  if ($encode) {
    return drupal_json_encode($settings);
  }

  return $settings;
}

/**
 * Fetch qtip instance settings.
 */
function author_pane_popup_qtip_clean_settings_multiple($instances, $encode = TRUE) {
  $settings = array();

  if (!empty($instances)) {
    foreach ($instances as $machine_name => $instance) {
      $settings[$machine_name] = author_pane_popup_qtip_clean_settings($instance, FALSE);
    }

    if ($encode) {
      return json_encode($settings);
    }
  }
  return $settings;
}
