<?php

/**
 * @file
 * Contains ipfs_backend.module.
 */

use Drupal\views\ViewExecutable;
use Drupal\ipfs_backend\Entity\IPFSHash;
use Cloutier\PhpIpfsApi\IPFS;

/**
 *
 */
function ipfs_backend_node_insert($node) {
  $fid = ($node->field_image)->target_id;
  if (!empty($fid)) {
    $file = file_load($fid);
    $uri = $file->getFileUri();
    $file_name = substr($uri, 17);
    $url = file_create_url($uri);
    $ipfs = new IPFS("localhost", "8080", "5001");
    $hash = $ipfs->add(file_get_contents($url));
    $hash = explode('}', $hash);
    $hash = json_decode($hash[0] . '}', TRUE);
    $entity = IPFSHash::create([
      'field_nid' => $fid,
      'name' => $file_name,
      'field_hash_id' => $hash['Hash'],
    ]);
    $entity->save();
  }
  if (!empty($node->id())) {
    $serializer = \Drupal::service('serializer');
    $data = $serializer->serialize($node, 'json', ['plugin_id' => 'entity']);
    $ipfs = new IPFS("localhost", "8080", "5001");
    $hash = $ipfs->add($data);
    $hash = explode('}', $hash);
    $hash = json_decode($hash[0] . '}', TRUE);
    $data = json_decode($data, TRUE);
    $nid = $data['nid'][0]['value'];
    $node_tile = $data['title'][0]['value'];
    $entity = IPFSHash::create([
      'field_nid' => $nid,
      'name' => $node_tile,
      'field_hash_id' => $hash['Hash'],
    ]);
    $entity->save();
  }
}

/**
 *
 */
function ipfs_backend_node_update($node) {
  $fid = ($node->field_image)->target_id;
  if (!empty($fid)) {
    $file = file_load($fid);
    $uri = $file->getFileUri();
    $file_name = substr($uri, 17);
    $url = file_create_url($uri);
    $ipfs = new IPFS("localhost", "8080", "5001");
    $hash = $ipfs->add(file_get_contents($url));
    $hash = explode('}', $hash);
    $hash = json_decode($hash[0] . '}', TRUE);
    $entity = IPFSHash::create([
      'field_nid' => $fid,
      'name' => $file_name,
      'field_hash_id' => $hash['Hash'],
    ]);
    $entity->save();
  }
  if (!empty($node->id())) {
    $serializer = \Drupal::service('serializer');
    $data = $serializer->serialize($node, 'json', ['plugin_id' => 'entity']);
    $ipfs = new IPFS("localhost", "8080", "5001");
    $hash = $ipfs->add($data);
    $hash = explode('}', $hash);
    $hash = json_decode($hash[0] . '}', TRUE);
    $data = json_decode($data, TRUE);
    $nid = $data['nid'][0]['value'];
    $node_tile = $data['title'][0]['value'];
    $entity = IPFSHash::create([
      'field_nid' => $nid,
      'name' => $node_tile,
      'field_hash_id' => $hash['Hash'],
    ]);
    $entity->save();
  }
}

/**
 *
 */
function ipfs_backend_views_pre_render(ViewExecutable $view) {
  if ($view->id() == "ipfs") {
    $results = $view->result;
    foreach ($results as $key => $value) {
      $output = "";
      $hash = $value->_entity->get('field_hash_id')->value;
      if (!empty($hash)) {
        $address_web = "https://ipfs.io/ipfs/" . $hash;
        $client = \Drupal::httpClient();
        $request = $client->get($address_web);
        $output = json_decode($request->getBody(), TRUE);
        if (!$output) {
          // $output = "<img src='".$address_web."'></img>";
          // header("Content-Type: image/jpeg");
          // $curl = curl_init($address_web);
          // curl_setopt($curl, CURLOPT_FAILONERROR, true);
          // curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
          // curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
          // curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
          // curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
          // $output = curl_exec($curl);
          // $rescode = curl_getinfo($curl, CURLINFO_HTTP_CODE);.
          $output = "File Node";
          $value->_entity->get('name')->value = $output;
        }
        else {
          $output = json_encode($output);
          $value->_entity->get('name')->value = substr($output, 0, 100);
        }
      }
    }
  }
}
