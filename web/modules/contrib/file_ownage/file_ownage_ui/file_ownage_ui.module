<?php

/**
 * @file
 * Expose file_ownage functionality directly in the UI.
 *
 * Additions to place buttons and tabs in the UI to make individual ownage
 * actions easier to find.
 */

/**
 * @FIXME
 * This implementation of hook_menu() cannot be automatically converted because
 * it contains logic (i.e., branching statements, function calls, object
 * instantiation, etc.) You will need to convert it manually. Sorry!
 *
 * For more information on how to convert hook_menu() to Drupal 8's new routing
 * and linking systems, see https://api.drupal.org/api/drupal/core%21includes%21menu.inc/group/menu/8
 */
function file_ownage_menu() {
  return;

  $items = [];

  // @FIXME
  // Could not extract the default value because it is either indeterminate, or
  // not scalar. You'll need to provide a default value in
  // config/install/file_ownage.settings.yml and config/schema/file_ownage.schema.yml.
  $settings = \Drupal::config('file_ownage.settings')->get('file_ownage_settings');
  if (!empty($settings['show_tab'])) {
    $items['node/%node/scan_files'] = [
      'title' => 'File Ownage',
      'description' => 'Scan for embedded files in the source of this page, and repair any links.',
      'page callback' => 'file_ownage_scan_embeds_tab',
      'page arguments' => [1],
      'access arguments' => ['show file ownage tab'],
      'type' => MENU_LOCAL_TASK,
    ];
  }

  if (!empty($settings['show_repair_file_tab'])) {
    $items['file/%file/repair'] = [
      'title' => 'Repair',
      'description' => 'Scan for other places this file may be found.',
      'page callback' => 'file_ownage_repair_file_tab',
      'page arguments' => [1],
      'access arguments' => ['show file ownage tab'],
      'type' => MENU_LOCAL_TASK,
    ];
  }

  if (!empty($settings['show_check_file_tab'])) {
    $items['file/%file/check'] = [
      'title' => 'Check',
      'description' => 'Check the status of this file. (debug only)',
      'page callback' => 'file_ownage_check_file_tab',
      'page arguments' => [1],
      'access arguments' => ['show file check tab'],
      'type' => MENU_LOCAL_TASK,
    ];
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function file_ownage_permission() {
  return [
    'show file ownage tab' => [
      'title' => t('Show file ownage tab'),
      'description' => t('Whether the user sees the "file ownage" utility tab when editing nodes'),
    ],
  ];
}

/**
 * Run the scan action and return the node view.
 *
 * Menu action callback.
 *
 * @param object $entity
 *   Entity to work on.
 * @param array $settings
 *   Context configs, if any.
 *
 * @return array
 *   Renderable result.
 */
function file_ownage_scan_embeds_tab($entity, $settings = []) {
  $modified = file_ownage_scan_embeds_action($entity, $settings);
  $message = $modified ? 'Found some embedded resources and re-saved page' : 'No new embedded images or resources processed on this page (or maybe an error, see logs)';
  drupal_set_message($message);
  return node_show($entity, NULL);
}

/**
 * Run the repair (seek_file) action and bounces to an updated file view.
 *
 * Menu action callback.
 *
 * @param object $entity
 *   Entity to work on.
 * @param array $settings
 *   Context configs, if any.
 */
function file_ownage_repair_file_tab($entity, $settings = []) {
  // @FIXME
  // Could not extract the default value because it is either indeterminate, or
  // not scalar. You'll need to provide a default value in
  // config/install/file_ownage.settings.yml and config/schema/file_ownage.schema.yml.
  $settings = \Drupal::config('file_ownage.settings')->get('file_ownage_settings');
  global $_file_ownage_log_to_screen;
  $_file_ownage_log_to_screen = TRUE;
  drupal_set_message("Running integrity check on file...");

  $modified = file_ownage_seek_file_action($entity, $settings);
  $message = $modified ? 'Repaired file' : 'No repairs were possible';
  drupal_set_message($message);
  $file_page_url = entity_uri('file', $entity);
  drupal_goto($file_page_url['path']);
}

/**
 * Run the 'check' action and return an updated file view.
 *
 * Checking a file will update its status and verify the usage count.
 *
 * This is only here for diagnostics, probably not useful most of the time.
 *
 * Menu action callback.
 *
 * @param object $entity
 *   Entity to work on.
 * @param array $settings
 *   Context configs, if any.
 */
function file_ownage_check_file_tab($entity, $settings = []) {
  // @FIXME
  // Could not extract the default value because it is either indeterminate, or
  // not scalar. You'll need to provide a default value in
  // config/install/file_ownage.settings.yml and config/schema/file_ownage.schema.yml.
  $settings = \Drupal::config('file_ownage.settings')->get('file_ownage_settings');
  global $_file_ownage_log_to_screen;
  $_file_ownage_log_to_screen = TRUE;
  drupal_set_message("Checking file status...");

  $status = file_ownage_check_file_action($entity, $settings);
  drupal_set_message(t('File status is %status', ['%status' => $status]));
  $file_page_url = entity_uri('file', $entity);
  drupal_goto($file_page_url['path']);
}
