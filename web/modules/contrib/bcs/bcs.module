<?php

/**
 * @file
 * Contains bcs.module.
 */

use Drupal\bcs\BCSBase;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Block\BlockPluginInterface;

/**
 * Implements hook_help().
 */
function bcs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the BCS module.
    case 'help.page.bcs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('BCS Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_block_form_alter().
 */
function bcs_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $content_types = BCSBase::loadContentTypesList();
  $view_modes = BCSBase::bcsLoadViewModes();
  $id_block = $form['id']['#default_value'];

  // Items.
  $items = [];

  // Load data content if already stored.
  $block_data = BCSBase::bcsLoadDataBlock($id_block);
  if ($block_data) {
    $data = @unserialize($block_data->data);
    foreach ($data as $key => $value) {
      $nid = $data[$key]['node'];
      $mode_display = $data[$key]['mode_display'];
      $items[] = ['node' => $nid, 'mode_display' => $mode_display];
    }
  }

  if (!$form_state->has('num_items')) {
    if (count($items) > 0) {
      $data = $form_state->get('num_items') + count($items);
    }
    else {
      $data = $form_state->has('num_items');
    }

    $form_state->set('num_items', $data);
  }

  $num_items = $form_state->get('num_items');

  // Add submit function.
  $form['actions']['submit']['#submit'][] = '_bcs_block_content_selected_submit';

  // Attach library to form.
  $form['#attached']['library'][] = 'bcs/bcs_block_form_config';

  $form['#tree'] = TRUE;

  $form['bcs_wrapper'] = [
    '#type' => 'details',
    '#title' => t('Content Selected'),
    '#open' => TRUE,
    '#prefix' => '<div id="items-fieldset-wrapper">',
    '#suffix' => '</div>',
  ];

  $form['bcs_wrapper']['items_fieldset'] = [
    '#type' => 'fieldset',
    '#title' => t('List nodes'),
    '#prefix' => '<div id="items-fieldset-wrapper">',
    '#suffix' => '</div>',
  ];

  for ($i = 0; $i < $num_items; $i++) {
    $form['bcs_wrapper']['items_fieldset']['items'][$i]['node'] = [
      '#type' => 'entity_autocomplete',
      '#target_type' => 'node',
      '#title' => t('Item'),
      '#description' => t('Use autocomplete to find it'),
      '#selection_handler' => 'default',
      '#selection_settings' => [
        'target_bundles' => array_keys($content_types),
      ],
      '#default_value' => Node::load($items[$i]['node']),
    ];

    $form['bcs_wrapper']['items_fieldset']['items'][$i]['mode_display'] = [
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $view_modes,
      '#default_value' => isset($items[$i]['mode_display']) ? $items[$i]['mode_display'] : 'teaser',
    ];
  }

  $form['bcs_wrapper']['items_fieldset']['add_item'] = [
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => ['_bcs_add_one'],
    '#ajax' => [
      'callback' => '_bcs_addmore_callback',
      'wrapper' => 'items-fieldset-wrapper',
    ],
  ];

  if ($num_items > 0) {
    $form['bcs_wrapper']['items_fieldset']['remove_item'] = [
      '#type' => 'submit',
      '#value' => t('Remove one'),
      '#submit' => ['_bcs_remove_callback'],
      '#ajax' => [
        'callback' => '_bcs_addmore_callback',
        'wrapper' => 'items-fieldset-wrapper',
      ],
    ];
  }
}

/**
 * Function to add more items.
 */
function _bcs_add_one(array &$form, FormStateInterface $form_state) {
  $num_items = $form_state->get('num_items');
  $add_button = $num_items + 1;
  $form_state->set('num_items', $add_button);
  $form_state->setRebuild(TRUE);
}

/**
 * Callback funtion for addmore button click.
 */
function _bcs_addmore_callback(array &$form, FormStateInterface $form_state) {
  return $form['bcs_wrapper'];
}

/**
 * Function to remove item.
 */
function _bcs_remove_callback(array &$form, FormStateInterface $form_state) {
  $num_items = $form_state->get('num_items');
  if ($num_items > 0) {
    $remove_button = $num_items - 1;
    $form_state->set('num_items', $remove_button);
  }
  $form_state->setRebuild(TRUE);
}

/**
 * Custom submit handler for block form.
 *
 * @throws Exception
 */
function _bcs_block_content_selected_submit(array &$form, FormStateInterface $form_state) {
  $id_block = $form_state->getValue('id');

  if (isset($form_state->getValue('bcs_wrapper')['items_fieldset']['items'])) {
    $items = $form_state->getValue('bcs_wrapper')['items_fieldset']['items'];
    BCSBase::bcsSaveDataBlock($id_block, $items);
  }
}

/**
 * Implements hook_block_view_alter().
 */
function bcs_block_view_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = '_bcs_block_prerender';
}

/**
 * Function for rendering the block.
 *
 * @param array $build
 *   The data from block view alter.
 *
 * @return array
 *   The build after processing.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function _bcs_block_prerender(array $build) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  if (isset($build['#id'])) {
    if (!$is_admin) {
      $block_data = BCSBase::bcsLoadDataBlock($build['#id']);
      if ($block_data) {
        $data = @unserialize($block_data->data);
        $bcs_items = [];

        foreach ($data as $key => $value) {
          $nid = $data[$key]['node'];
          $mode_display = $data[$key]['mode_display'];
          $node_view = BCSBase::bcsLoadNodeView($nid, $mode_display);
          $build['content'][] = $node_view;
          $bcs_items[] = Node::Load($nid);
        }

        // Store list nodes in items array
        $build['content']['#bcs_items'] = $bcs_items;
      }
    }
  }

  return $build;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bcs_form_block_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $id_block = $form['actions']['submit']['#submit'][0][0]->getEntity()->id();
  if (isset($id_block)) {
    $data_block = BCSBase::bcsLoadDataBlock($id_block);
    if ($data_block) {
      $form['actions']['submit']['#submit'][] = '_bcs_form_block_delete_form_submit';
    }
  }
}

/**
 * Submit block delete form.
 */
function _bcs_form_block_delete_form_submit(&$form, FormStateInterface $form_stat) {
  $id_block = $form['actions']['submit']['#submit'][0][0]->getEntity()->id();
  BCSBase::bcsDeleteDataBlock($id_block);
}
