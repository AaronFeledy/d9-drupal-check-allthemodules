<?php

/**
 * @file
 * The main Konamicode module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\konamicode\Form\KonamicodeMainConfiguration;

/**
 * Implements hook_help().
 */
function konamicode_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.konamicode':
      return t('
        <h2>Konami Code module for Drupal.</h2>
        <h3>Instructions</h3>
        <p>Install the module like any other module in the <em>modules/contrib</em> folder and enable in <strong>/admin/modules</strong>.</p>
        <p>Then, visit <strong>/admin/config/user-interface/konamicode</strong> to configure the different <em>actions</em> and options for each of the actions.</p>
        <p>Last, visit any page and enter the configured Konami code.</p>      
        <h3>Documentation</h3>
        <p>The complete documentation guide can be found at the dedicated <a href="https://www.drupal.org/docs/8/modules/konami-code">documentation</a> page.</p>  
      ');
  }
}

/**
 * Implements hook_form_alter().
 */
function konamicode_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'konamicode_configuration') {
    $form['#attached']['library'][] = 'konamicode/konamicode_vertical_tabs';
  }
}

/**
 * Implements hook_page_attachments().
 */
function konamicode_page_attachments(array &$page) {
  // Fetch the Konami Code configuration.
  $config = \Drupal::config('konamicode.configuration');
  // Fetch the general enabled setting, no need to default since it doesn't make
  // sense since there won't be actions enabled by default.
  $konamicode_enabled = $config->get('konamicode_enabled');

  // Only execute any of the Konami Code config when the general toggle is on.
  if (!$konamicode_enabled) {
    return;
  }

  // Create a configuration array that we can later attach to the
  // DrupalSettings when it's completed with all the required data.
  $computed_konamicode_settings = [];
  $computed_konamicode_settings['main'] = [];
  $computed_konamicode_settings['actions'] = [];

  // Attach the main konamicode configuration JavaScript.
  $page['#attached']['library'][] = 'konamicode/konamicode';

  // Fetch the raw Konami Code configuration (basically all available fields).
  $raw_configuration = $config->getRawData();

  // Fetch the Konami Code settings.
  $main_configuration_class = new KonamicodeMainConfiguration(\Drupal::configFactory());
  $actions = $main_configuration_class->getAllActions();

  // Loop over all the actions.
  foreach ($actions as $action) {
    $machine_name = $action->getMachineName();
    $field_base_name = 'konamicode_' . $machine_name . '_';

    // If the action is enabled, we add the library.
    if ($config->get($field_base_name . 'enabled')) {
      // Generate the library name/JavaScript callback name.
      $action_callback_name = 'konamicode_action_' . $machine_name;
      // Attach the library itself based on the machine name.
      $page['#attached']['library'][] = 'konamicode/' . $action_callback_name;
      // Fetch the general configuration settings and add them to the computed
      // settings array.
      $keycode_sequence = $config->get($field_base_name . 'keycode_sequence');
      $computed_konamicode_settings['main'][] = [
        'action' => $machine_name,
        'keycode_sequence' => $keycode_sequence,
        'callback' => $action_callback_name,
      ];

      // Add the specific action settings to the action settings array.
      $action_field_keys = _konamicode_get_action_specific_configuration($machine_name, $raw_configuration);
      $action_config_values = [];
      $action_config_values['machine_name'] = $machine_name;
      foreach ($action_field_keys as $key) {
        $lower_camel_case_key = lcfirst(str_replace('_', '', ucwords($key, '_')));
        $value = $config->get($key);
        $action_config_values[$lower_camel_case_key] = $value;
      }

      $computed_konamicode_settings['actions'][] = $action_config_values;
    }
  }

  // Attach the drupal settings array to the page.
  $page['#attached']['drupalSettings']['konamicode'] = $computed_konamicode_settings;
}

/**
 * Function to get all the configuration setting keys.
 *
 * Will only return the values which are set in the Action class itself.
 * Settings from the Main and Action Base class are not returned.
 *
 * @param string $action_machine_name
 *   The machine name of the action. E.g. 'redirect'.
 * @param array $raw_configuration
 *   The raw configuration of the whole module.
 *
 * @return array
 *   Returns an array of keys to load the data from with '$config->get()'.
 */
function _konamicode_get_action_specific_configuration($action_machine_name, array $raw_configuration) {
  // Some fields that we can exclude from the resulting array since they are not
  // needed in the action JS and are already processed before.
  $exclude = [
    'konamicode_enabled',
    'konamicode_' . $action_machine_name . '_enabled',
    'konamicode_' . $action_machine_name . '_keycode_sequence',
  ];

  $result = [];
  // Loop over all the configuration fields.
  foreach ($raw_configuration as $config_field_machine_name => $value) {
    if (array_search($config_field_machine_name, $exclude) === FALSE && strpos($config_field_machine_name, '_' . $action_machine_name . '_') !== FALSE) {
      $result[] = $config_field_machine_name;
    }
  }

  return $result;
}
