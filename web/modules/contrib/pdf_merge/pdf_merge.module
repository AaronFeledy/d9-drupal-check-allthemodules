<?php

/**
 * @file
 * Contains pdf_merge.module.
 */

use Drupal\file\Entity\File;

/**
 * Defines result file name prefix
 */
const RESULT_FILE_NAME = 'merged';

/**
 * Merges given PDF files into single one.
 *
 * @param array $fids
 *   An array ID's that are suitable for 
 *   \Drupal\Core\Entity\EntityStorageInterface::loadMultiple 
 *   entity can be any subclass of FileInterface as long as 
 *   $file_type is changed
 * @param string|NULL $output_filename
 *   (Optional) The prefered output filename
 * @param string|NULL $file_type
 *   (Optional) The file entity type to use to load $fids
 *
 * @return
 *   Returns FALSE of empty list of files to merge was given.
 *   Otherwise return File ID (fid) of result file.
 */
function pdf_merge_multiple(array $fids, $output_filename = NULL, $file_type = 'file') {
  // check file_type
  $file_type = \Drupal::entityTypeManager()->getDefinition($file_type, FALSE);
  if(!isset($file_type)){
    return;
  }
  if(!$file_type->isSubclassOf('Drupal\file\FileInterface')){
    return;
  }

  $allowed_mimes = array(
      'application/pdf',
      'application/x-pdf'
  );
  $file_system = \Drupal::service('file_system');
  if (!count($fids)) {
    return FALSE;
  }
  
  $result_file_name = (!$output_filename ? RESULT_FILE_NAME : $output_filename);
  $files = \Drupal::entityTypeManager()->getStorage($file_type->id())->loadMultiple($fids);
  foreach($files as $fid => $file) {
    if ( in_array($file->getMimeType(), $allowed_mimes) ) {
      $pdf[] = '"' . $file_system->realpath( $file->getFileUri() ) . '"';
      // @todo Find a better way to name result files. It could be a dialog at 2nd step.
      if (!$output_filename) {
       $result_file_name .=  '_' . $file->getFilename();
      }
    }
  }

  $destination = file_default_scheme() . '://';

  $result_file_name = mb_ereg_replace("([^\w\s\d\-_~,;\[\]\(\).])", '', $result_file_name);
  $result_file_name  = mb_ereg_replace("([\.]{2,})", '', $result_file_name);

  $uri = file_create_filename(substr($result_file_name, 0, 100) . '.pdf', $destination);

  // Check if we have enough PDF files to merge.
  if (empty($pdf)) {
    return FALSE;
  }
  // Merge them.
  $shell_command = escapeshellcmd('pdftk ' . implode($pdf, ' ') . ' cat output "' . $file_system->realpath( $uri ) . '"');
  exec(escapeshellcmd($shell_command));
  // @todo check status of 'exec' command.
  if ($uri && is_file( $file_system->realpath( $uri ) )) {
    // Add file to Drupal's database.
    $file = File::create(array(
        'uri' => $uri,
        'uid' => \Drupal::currentUser()->id(),
    ));
    $file->setPermanent();
    $file->save();
    return $file;
  } else {
    \Drupal::logger('pdf_merge')->error('File %file was not created.', array('%file' => $uri));
    return FALSE;
  }
}