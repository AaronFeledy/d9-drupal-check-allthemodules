<?php

/**
 * @file
 *   TestSwarm module.
 *   @TODO: move pages to testswarm.pages.inc.
 */

use Drupal\Component\Utility\NestedArray;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\testswarm\TestswarmStorageController;

module_load_include('inc', 'testswarm', 'testswarm.xmlrpc');

/**
 * Implements hook_permission().
 */
function testswarm_permission() {
  return array(
    'administer testswarm tests' => array(
      'title' => t('administer testswarm tests'),
      'description' => t('Manage and run automated testing.'),
      'restrict access' => TRUE,
    ),
    'run testswarm tests' => array(
      'title' => t('run testswarm tests'),
      'description' => t('Run automated testing.'),
      'restrict access' => TRUE,
    ),
    'administer testswarm settings' => array(
      'title' => t('administer testswarm settings'),
      'description' => t('Administer TestSwarm settings'),
      'restrict access' => TRUE,
    ),
    'is allowed to submit forms' => array(
      'title' => t('is allowed to submit forms'),
      'description' => t('Is allowed to submit forms, if not granted all submit handlers are disabled.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function testswarm_menu() {
  $items['testswarm-tests'] = array(
    'title' => 'Overview of all tests',
    'description' => 'All tests and results',
    'route_name' => 'testswarm_tests',
  );
  $items['testswarm-tests/%'] = array(
    'title' => 'Overview of all tests',
    'description' => 'All tests and results',
    'route_name' => 'testswarm_test',
  );
  $items['testswarm-tests/clear/%'] = array(
    'title' => 'Clear TestSwarm tests details',
    'description' => 'Clear TestSwarm tests details',
    'route_name' => 'testswarm_test_clear',
  );
  $items['testswarm-tests/detail/%'] = array(
    'title' => 'TestSwarm tests details',
    'description' => 'TestSwarm tests details',
    'route_name' => 'testswarm_test_detail',
  );
  $items['testswarm-tests/detail/%/%'] = array(
    'title' => 'TestSwarm tests details',
    'description' => 'TestSwarm tests details',
    'route_name' => 'testswarm_tests_detail_githash',
  );
  $items['testswarm-tests/detail/%/tests/%'] = array(
    'title' => 'TestSwarm tests details',
    'description' => 'TestSwarm tests details',
    'route_name' => 'testswarm_tests_detail_tests',
  );
  $items['testswarm-tests/detail/%/hash'] = array(
    'title' => 'TestSwarm tests details',
    'description' => 'TestSwarm tests details',
    'route_name' => 'testswarm_tests_detail_hash',
  );
  $items['testswarm-tests/detail/%/hash/%'] = array(
    'title' => 'TestSwarm tests details',
    'description' => 'TestSwarm tests details',
    'route_name' => 'testswarm_tests_detail_hash_githash',
  );
  $items['testswarm-browser-tests'] = array(
    'title' => 'TestSwarm tests for the current browser',
    'description' => 'All tests for the current browser',
    'page callback' => 'testswarm_browser_tests',
    'access arguments' => array('run testswarm tests'),
  );

  $items['testswarm-run-all-tests'] = array(
    'title' => 'Run all TestSwarm tests',
    'description' => 'Run all TestSwarm tests.',
    'route_name' => 'testswarm_tests_run_all_tests',
  );
  $items['testswarm-run-a-test/%'] = array(
    'title' => 'Run a TestSwarm test',
    'description' => 'Run a test.',
    'route_name' => 'testswarm_tests_run_a_test',
  );
  $items['testswarm-test-done'] = array(
    'title' => 'TestSwarm javaScript post back',
    'route_name' => 'testswarm_tests_test_done',
  );

  $items['testswarm-karma'] = array(
    'title' => 'Set karma cookie',
    'route_name' => 'testswarm_set_karma_cookie',
  );

  $items['testswarm-set-karma/%'] = array(
    'title' => 'Set karma cookie',
    'page callback' => 'testswarm_set_karma',
    'page arguments' => array(1),
    'access arguments' => array('run testswarm tests'),
  );

  $items['browserstack-status'] = array(
    'title' => 'Browserstack status',
    'description' => 'Overview of all workers on browserstack.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_browserstack_status'),
    'access arguments' => array('administer testswarm settings'),
    'file' => 'testswarm.pages.inc',
  );

  $items['admin/config/development/testswarm'] = array(
    'title' => 'TestSwarm',
    'description' => 'Administer TestSwarm settings.',
    'route_name' => 'testswarm_admin',
  );

  $items['testswarm-framed/%/%'] = array(
    'title' => 'Run a framed test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testswarm_framed_form', 1, 2),
    'access arguments' => array('run testswarm tests'),
    'file' => 'testswarm.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_xmlrpc().
 */
function testswarm_xmlrpc() {
  return array(
    array(
      'testswarm.test.save',
      'testswarm_test_save_xmlrpc',
      array(
        // return type
        'boolean',
        // param $testswarm_test
        'struct',
        // param $tests
        'struct',
        // param $logs
        'struct',
        // param $time
        'int',
        // param $hash
        'string',
      ),
      t('Save test results after they have run.'),
    ),
    array(
      'testswarm.test.delete',
      'testswarm_test_delete_xmlrpc',
      array(
        // return type
        'boolean',
        // param $caller
        'string',
        // param $time
        'int',
        // param $hash
        'string',
      ),
      t('Delete tests based on the caller'),
    ),
  );
}

/**
 * Get a list of all defined tests.
 * @TODO: Add php callback for setup and teardown
 * @TODO: Tests should be defined in configuration and pulled up with the config
 * manager.
 */
function testswarm_defined_tests($module = '', $reporting = FALSE) {
  $defaults = array(
    'query' => array(),
    'permissions' => array('run testswarm tests'),
    'js' => array(),
    'css' => array(),
    'dependencies' => array(
      array('testswarm', 'testswarm'),
    ),
    'enabled' => 1,
  );

  $tests = \Drupal::moduleHandler()->invokeAll('testswarm_tests');

  if ($reporting) {
    $q = db_select('testswarm_info', 'ti')->fields('ti', array('caller', 'description', 'module'));
    $q->addExpression(0, 'enabled');
    $result = $q->groupBy('caller')->execute()->fetchAllAssoc('caller', \PDO::FETCH_ASSOC);
    if ($result) {
      $tests += $result;
    }
  }
  foreach ($tests as $caller => &$test) {
    $test['caller'] = $caller;
    $test = NestedArray::mergeDeep($defaults, $test);
  }
  return $tests;
}

/**
 * Implements hook_library_info().
 */
function testswarm_library_info() {
  $libraries['testswarm'] = array(
    'title' => t('TestSwarm'),
    'website' => 'http://drupal.org/project/testswarm',
    'version' => '1.0',
    'js' => array(
      drupal_get_path('module', 'testswarm') . '/qunit/qunit.js' => array('group' => JS_LIBRARY),
      drupal_get_path('module', 'testswarm') . '/testswarm.admin.js' => array('group' => JS_LIBRARY),
      drupal_get_path('module', 'testswarm') . '/testswarm.js' => array('group' => JS_LIBRARY),
    ),
    'css' => array(
      drupal_get_path('module', 'testswarm') . '/qunit/qunit.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'drupal'),
      array('system', 'drupalSettings'),
    )
  );
  $libraries['jquery.simulate'] = array(
    'title' => t('jQuery Simulate'),
    'website' => 'https://github.com/eduardolundgren/jquery-simulate',
    'version' => '1.0',
    'js' => array(
      drupal_get_path('module', 'testswarm') . '/libs/jquery.simulate.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );
  foreach (testswarm_defined_tests() as $test) {
    $libraries[$test['module'] . '.' . $test['caller']] = array(
      'title' => t($test['module'] . '::' . $test['caller']),
      'website' => 'http://drupal.org/project/testswarm',
      'version' => '1.0',
      'js' => $test['js'],
      'css' => $test['css'],
      'dependencies' => $test['dependencies'],
    );
  }
  return $libraries;
}

/**
 * Alter the page output if a test is requested.
 */
function testswarm_page_alter(&$page) {
  global $theme_key;
  $test = '';
  if (isset($_GET['testswarm-test'])) {
    $caller = $_GET['testswarm-test'];
    $tests = testswarm_defined_tests();
    if (array_key_exists($caller, $tests)) {
      $test = $tests[$caller];
    }
  }

  if ($test) {
    $karma = '';
    if (isset($_COOKIE['karma']) && !empty($_COOKIE['karma'])) {
      $karma = $_COOKIE['karma'];
    }

    $page['content']['system_main']['#prefix'] = '<h1 id="qunit-header">QUnit Tests</h1>
      <h2 id="qunit-banner"></h2>
      <div id="qunit-testrunner-toolbar"></div>
      <h2 id="qunit-userAgent"></h2>
      <ol id="qunit-tests"></ol>
      <div id="xtestswarm-fixture">';
    $page['content']['system_main']['#suffix'] = '</div>';

    // Attach the test's files and dependencies.
    $name = $test['module'] . '.' . $test['caller'];
    if (!isset($page['content']['system_main']['#attached']['library'])) {
      $page['content']['system_main']['#attached']['library'] = array();
    }
    if (!in_array(array('testswarm', $name), $page['content']['system_main']['#attached']['library'])) {
      $page['content']['system_main']['#attached']['library'][] = array('testswarm', $name);
    }

    // Attach the test's javascript settings.
    if (!isset($page['content']['system_main']['#attached']['js'])) {
      $page['content']['system_main']['#attached']['js'] = array();
    }
    $page['content']['system_main']['#attached']['js'][] = array(
      'data' => array(
        'testswarm' => array(
          'caller' => $test['caller'],
          'theme' => isset($_GET['testswarm-theme']) ? check_plain($_GET['testswarm-theme']) : $theme_key,
          'karma' => $karma,
          'token' => drupal_get_token($test['caller'], TRUE),
          'debug' => (isset($_GET['debug']) ? 'on' : 'off'),
          'destination' => (isset($_GET['testswarm-destination']) ? base_path() . $_GET['testswarm-destination'] : base_path() . 'testswarm-browser-tests'),
          'description' => isset($test['description']) ? $test['description'] : '',
          'module' => $test['module'],
        ),
      ),
      'type' => 'setting',
    );
  }
}

/**
 * Alter all forms to disable submit and validate handlers.
 * @TODO: add permission so more people can still use submit.
 */
function testswarm_form_alter(&$form, &$form_state, $form_id) {
  $account = Drupal::request()->attributes->get('_account');
  if ((!$account || $account->id() != 1) && !in_array($form_id, array('user_login_form', 'testswarm_set_karma_form'))) {
    if (!user_access('is allowed to submit forms')) {
      _testswarm_disable_submit($form);
    }
  }
}

/**
 * Disable all submit and validate handlers of a form.
 */
function _testswarm_disable_submit(&$form) {
  if (is_array($form)) {
    foreach ($form as $key => &$part) {
      if ($key === '#type' && $part === 'submit' && !isset($form['#submit'])) {
        $form['#submit'] = array('testswarm_empty_submit');
      }
      if ($key === '#type' && $part === 'submit' && !isset($form['#validate'])) {
        $form['#validate'] = array('testswarm_empty_submit');
      }

      if ($key === '#submit' || $key === '#validate') {
        if (is_array($part)) {
          $part = array('testswarm_empty_submit');
        }
        else {
          $part = 'testswarm_empty_submit';
        }
      }
      elseif (is_array($part)) {
        _testswarm_disable_submit($part);
      }
    }
  }
}

/**
 * Empty handler for submit and validate.
 */
function testswarm_empty_submit() {
}

