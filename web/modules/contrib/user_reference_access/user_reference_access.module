<?php

/**
 * @file
 * Contains user_reference_access.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function user_reference_access_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_reference_access module.
    case 'help.page.user_reference_access':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Add an ability to limit the set of users that can be referenced to only those that can perform selected actions.') . '</p>';
      return $output;

    default:
  }
}

// All that have been moved to the SelectionHandler but let's leave it here for a while just in case that didn't work out.

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
//function user_reference_access_field_widget_third_party_settings_form(\Drupal\Core\Field\WidgetInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $form_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {
//  if (user_reference_access_widget_is_supported($plugin, $field_definition)) {
//    $options = [
//      '' => t('None'),
//    ];
//    foreach (\Drupal::service('user.permissions')->getPermissions() as $id => $info) {
//      $options[$info['provider']][$id] = $info['title'];
//    }
//    $form['new_entities_permission'] = [
//      '#type' => 'select',
//      '#title' => t('Permission to use for new entities'),
//      '#default_value' => $plugin->getThirdPartySetting('user_reference_access', 'new_entities_permission'),
//      '#options' => $options,
//      '#description' => t('Leave empty to allow all users. This setting only has effect when creating a new entity.'),
//    ];
//    $form['existing_entities_access_operations'] = [
//      '#type' => 'checkboxes',
//      '#title' => t('Limit selection to users that can perform the selected actions'),
//      '#default_value' => $plugin->getThirdPartySetting('user_reference_access', 'existing_entities_access_operations'),
//      '#options' => [
//        'view' => t('View'),
//        'update' => t('Update'),
//        'delete' => t('Delete'),
//      ],
//      '#description' => t('Leave empty to allow all users. This setting only has effect when editing an existing entity.'),
//    ];
//    return $form;
//  }
//}
//
///**
// * Implements hook_field_widget_settings_summary_alter().
// */
//function user_reference_access_field_widget_settings_summary_alter(&$summary, $context) {
//  /** @var WidgetInterface $widget */
//  $widget = $context['widget'];
//  /** @var FieldDefinitionInterface $fieldDefinition */
//  $fieldDefinition = $context['field_definition'];
//  if (user_reference_access_widget_is_supported($widget, $fieldDefinition)) {
//    $settings = $widget->getThirdPartySettings('user_reference_access');
//    if (!empty($settings['new_entities_permission'])) {
//      $summary[] = t('Permission for new entities: @permission', [
//        '@permission' => $settings['new_entities_permission']
//      ]);
//    }
//    if (isset($settings['existing_entities_access_operations'])) {
//      $ops = array_filter($settings['existing_entities_access_operations']);
//      if (!empty($ops)) {
//        $summary[] = t('Operations for existing entities: @ops', [
//          '@ops' => implode(', ', $ops),
//        ]);
//      }
//    }
//  }
//}
//
///**
// * Tells if given widget is supported by the module.
// *
// * @param \Drupal\Core\Field\WidgetInterface $widget
// *   The widget plugin.
// * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
// *   The field definition object.
// *
// * @return bool
// */
//function user_reference_access_widget_is_supported(WidgetInterface $widget, FieldDefinitionInterface $fieldDefinition) {
//  if ($widget instanceof EntityReferenceAutocompleteWidget && $fieldDefinition->getSetting('target_type') == 'user') {
//    // User reference field.
//    return TRUE;
//  }
//
//  $isDerExtraWidget = class_exists('Drupal\der_extra\Plugin\Field\FieldWidget\DynamicEntityReferenceOptionsSelectWidget')
//    && $widget instanceof Drupal\der_extra\Plugin\Field\FieldWidget\DynamicEntityReferenceOptionsSelectWidget;
//
//  if ($isDerExtraWidget) {
//    // It's a dynamic entity reference extra widget. Return true if it can reference users.
//    $entityTypes = Drupal\dynamic_entity_reference\Plugin\Field\FieldType\DynamicEntityReferenceItem::getTargetTypes($fieldDefinition->getSettings());
//    return in_array('user', $entityTypes);
//  }
//
//  return FALSE;
//}
//
///**
// * Implements hook_field_widget_form_alter().
// */
//function user_reference_access_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
//  /** @var \Drupal\Core\Field\WidgetInterface $widget */
//  $widget = $context['widget'];
//  $newEntitiesPermission = $widget->getThirdPartySetting('user_reference_access', 'new_entities_permission');
//  $existingEntitiesAccessOperation = $widget->getThirdPartySetting('user_reference_access', 'existing_entities_access_operations');
//  if (empty($newEntitiesPermission) && empty($existingEntitiesAccessOperation)) {
//    // It's not a plugin we handle.
//    return;
//  }
//
//  $element['target_id']['#selection_handler'] = 'user_reference_access';
//  $element['target_id']['#selection_settings']['entity'] = $context['items']->getParent()->getValue();
//  $element['target_id']['#selection_settings']['new_entities_permission'] = $newEntitiesPermission;
//  $element['target_id']['#selection_settings']['existing_entities_access_operations'] = $existingEntitiesAccessOperation;
//}
