<?php

/**
 * @file
 * Contains micro_taxonomy.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\micro_site\Entity\SiteInterface;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\VocabularyInterface;

/**
 * Implements hook_help().
 */
function micro_taxonomy_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the micro_taxonomy module.
    case 'help.page.micro_taxonomy':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Manage taxonomy per site') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function micro_taxonomy_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['taxonomy_term']->setAccessClass('Drupal\micro_taxonomy\SiteTermAccessControlHandler');
  $entity_types['taxonomy_vocabulary']->setFormClass('default', 'Drupal\micro_taxonomy\Form\SiteVocabularyForm');
  $entity_types['taxonomy_vocabulary']->setAccessClass('Drupal\micro_taxonomy\SiteVocabularyAccessControlHandler');
}

/**
 * Implements hook_entity_base_field_info().
 */
function micro_taxonomy_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ($entity_type->id() === 'taxonomy_term') {
    $fields['site_id'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Site'))
      ->setDescription(t('The site on which the term is created.'))
      ->setRevisionable(TRUE)
      ->setSetting('target_type', 'site')
      ->setSetting('handler', 'default')
      ->setSetting('handler_settings', [
        'target_bundles' => NULL,
        'auto_create' => FALSE,
      ])
      ->setDefaultValueCallback('Drupal\micro_taxonomy\MicroTaxonomyManager::getCurrentSiteId')
      ->setTranslatable(TRUE)
//      ->setDisplayOptions('view', [
//        'label' => 'hidden',
//        'type' => 'entity_reference_label',
//        'weight' => 0,
//      ])
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => 5,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    $fields['site_all'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('All sites'))
      ->setDescription(t('Term available on all micro sites (and not on the master host).'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDefaultValue(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 119,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function micro_taxonomy_site_insert(EntityInterface $entity) {
  /** @var \Drupal\micro_taxonomy\MicroTaxonomyManagerInterface $micro_taxonomy_manager */
  $micro_taxonomy_manager = \Drupal::service('micro_taxonomy.manager');
  if ($entity instanceof SiteInterface) {
    $micro_taxonomy_manager->checkCreateSiteVocabulary($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function micro_taxonomy_site_update(EntityInterface $entity) {
  /** @var \Drupal\micro_taxonomy\MicroTaxonomyManagerInterface $micro_taxonomy_manager */
  $micro_taxonomy_manager = \Drupal::service('micro_taxonomy.manager');
  if ($entity instanceof SiteInterface) {
    $micro_taxonomy_manager->checkCreateSiteVocabulary($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function micro_taxonomy_site_delete(EntityInterface $entity) {
  $query = \Drupal::entityQuery('taxonomy_term')
    ->condition('site_id', $entity->id());
  $result = $query->execute();
  if ($result) {
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadMultiple($result);
    foreach ($terms as $term) {
      $term->delete();
    }
  }

  $vocabulary_id = 'site_' . $entity->id();
  $vocabulary = Vocabulary::load($vocabulary_id);
  if ($vocabulary instanceof VocabularyInterface) {
    $vocabulary->delete();
  }
}

/**
 * Implements hook_form_alter().
 */
function micro_taxonomy_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\micro_taxonomy\MicroTaxonomyManagerInterface $micro_taxonomy_manager */
  $micro_taxonomy_manager = \Drupal::service('micro_taxonomy.manager');
  $micro_taxonomy_manager->alterForm($form, $form_state, $form_id);
}

function micro_taxonomy_entity_reference_selection_alter(array &$definitions) {
  // Replace the default taxonomy term plugin EntityReferenceSelection by our own
  // to handle query made on the autocomplete widget.
  $definitions['default:taxonomy_term']['class'] = 'Drupal\micro_taxonomy\Plugin\EntityReferenceSelection\SiteTermSelection';
}

/**
 * Implements hook_entity_access().
 */
function micro_taxonomy_view_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Prevent user to delete the view site taxonomy term which provide the local
  // task on site entities.
  if ($entity->id() == 'site_taxonomy_term' && $operation == 'delete') {
    return AccessResult::forbidden('This view can not be deleted because we add custom access on its route.');
  }
}
