<?php

/**
 * @file
 * OpenID URL module.
 *
 * Module based on this document:
 *   http://www.openidenabled.com/openid/use-your-own-url-as-an-openid/
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function openidurl_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.openidurl':
      $user = User::load(\Drupal::currentUser()->id());
      $output = '<p>' . t('Allows using your own website as an identifier for third-party OpenID providers.') . '</p>';
      $output .= '<ol><li>' . t('Set the <a href=":openidurlsettings">global OpenID URL</a> to change the OpenID provider that appears on the <a href=":front">front page</a>.', [
        ':openidurlsettings' => Url::fromRoute('openidurl.settings.form')->toString(),
        ':front' => Url::fromRoute('<front>')->toString(),
      ]) . '</li>';
      $output .= '<li>' . t('Configure the <a href=":userpermissions">user permission</a> to allow users to set their own personal OpenID provider that appears in their <a href=":user">user profile</a>. Make sure anonymous users have access to view the user profile in order to make this work.', [
        ':user' => $user->toUrl()->toString(),
        ':userpermissions' => Url::fromRoute('user.admin_permissions', [], ['fragment' => 'module-openidurl'])->toString(),
      ]) . '</li></ol>';
      return $output;

    case 'openidurl.settings.form':
      return '<p>' . t('The following allows you to modify the global OpenID provider that appears on the <a href=":front">front page</a>.', [
        ':front' => Url::fromRoute('<front>')->toString(),
      ]) . '</p>';
  }
}

/**
 * Implements hook_page_attachments().
 */
function openidurl_page_attachments(array &$attachments) {
  // Only use the global settings on the front page.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $config = \Drupal::config('openidurl.settings');
    $server = $config->get('server');
    $delegate = $config->get('delegate');
    $xrds = $config->get('xrds');
    $head_attachments = _openidurl_get_html_head_attachments($server, $delegate, $xrds);
    foreach ($head_attachments as $value) {
      $attachments['#attached']['html_head'][] = $value;
    }
  }
}

/**
 * Create the required HTML headers to delegate the OpenID authentication.
 */
function _openidurl_get_html_head_attachments($server = NULL, $delegate = NULL, $xrds = NULL) {
  $attachments = [];

  if (!empty($server) || !empty($delegate)) {
    $config = \Drupal::config('openidurl.settings');
    $versions = $config->get('version');

    if (in_array(11, $versions)) {
      $openidurl11server = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'openid.server',
          'href' => UrlHelper::filterBadProtocol($server),
        ],
      ];
      $attachments[] = [$openidurl11server, 'openidurl11server'];

      $openidurl11delegate = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'openid.delegate',
          'href' => UrlHelper::filterBadProtocol($delegate),
        ],
      ];
      $attachments[] = [$openidurl11delegate, 'openidurl11delegate'];

    }

    if (in_array(20, $versions)) {
      $openidurl20provider = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'openid2.provider',
          'href' => UrlHelper::filterBadProtocol($server),
        ],
      ];
      $attachments[] = [$openidurl20provider, 'openidurl20provider'];

      $openidurl20local_id = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'openid2.local_id',
          'href' => UrlHelper::filterBadProtocol($delegate),
        ],
      ];
      $attachments[] = [$openidurl20local_id, 'openidurl20local_id'];
    }
  }

  if (!empty($xrds)) {
    $openidurlmeta = [
      '#tag' => 'meta',
      '#attributes' => [
        'http-equiv' => 'X-XRDS-Location',
        'content' => UrlHelper::filterBadProtocol($xrds),
      ],
    ];
    $attachments[] = [$openidurlmeta, 'openidurlmeta'];
  }

  return $attachments;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openidurl_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $user = $form_state->getFormObject()->getEntity();
  $access = $user->hasPermission('administer openid url') || $user->hasPermission('set personal openid url');

  $form['openidurl'] = [
    '#type' => 'details',
    '#title' => 'OpenID URL',
    '#description' => t('Delegate your user profile as an <a href=":openid">OpenID</a>.', [':openid' => 'http://openid.net']),
    '#open' => TRUE,
    '#access' => $access,
    '#weight' => 10,
  ];

  if (!\Drupal::currentUser()->isAnonymous() && $user->id()) {
    $server = \Drupal::service('user.data')->get('openidurl', $user->id(), 'server');
    $delegate = \Drupal::service('user.data')->get('openidurl', $user->id(), 'delegate');
    $xrds = \Drupal::service('user.data')->get('openidurl', $user->id(), 'xrds');
  }

  $form['openidurl']['openidurl_server'] = [
    '#type' => 'textfield',
    '#title' => 'Server',
    '#description' => t('Your personal OpenID server URL (e.g. http://www.myopenid.com/server).'),
    '#default_value' => isset($server) ? UrlHelper::filterBadProtocol($server) : '',
  ];
  $form['openidurl']['openidurl_delegate'] = [
    '#type' => 'textfield',
    '#title' => 'Delegate',
    '#description' => t('This is your personal OpenID delegate (e.g. http://yourname.myopenid.com/).'),
    '#default_value' => isset($delegate) ? UrlHelper::filterBadProtocol($delegate) : '',
  ];
  $form['openidurl']['openidurl_xrds'] = [
    '#type' => 'textfield',
    '#title' => 'XRDS Location',
    '#description' => t('This is your personal OpenID XRDS location (e.g. http://yourname.myopenid.com/xrds).'),
    '#default_value' => isset($xrds) ? UrlHelper::filterBadProtocol($xrds) : '',
  ];
  // Set the callback.
  if ($access) {
    $form['actions']['submit']['#submit'][] = 'openidurl_user_profile_form_submit';
  }
}

/**
 * Submit handler; When the user form is submitted.
 */
function openidurl_user_profile_form_submit($form, FormStateInterface $form_state) {
  $user = $form_state->getFormObject()->getEntity();

  if ($user->id() && $form_state->hasValue('openidurl_server') && $form_state->hasValue('openidurl_delegate') && $form_state->hasValue('openidurl_xrds')) {
    $server = $form_state->getValue(['openidurl_server']);
    if (!empty($server)) {
      \Drupal::service('user.data')->set('openidurl', $user->id(), 'server', $server);
    }

    $delegate = $form_state->getValue('openidurl_delegate');
    if (!empty($delegate)) {
      \Drupal::service('user.data')->set('openidurl', $user->id(), 'delegate', $delegate);
    }

    $xrds = $form_state->getValue('openidurl_xrds');
    if (!empty($xrds)) {
      \Drupal::service('user.data')->set('openidurl', $user->id(), 'xrds', $xrds);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function openidurl_user_view(array &$build, UserInterface $user, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'full') {
    $server = \Drupal::service('user.data')->get('openidurl', $user->id(), 'server');
    $delegate = \Drupal::service('user.data')->get('openidurl', $user->id(), 'delegate');
    $xrds = \Drupal::service('user.data')->get('openidurl', $user->id(), 'xrds');
    $attachments = _openidurl_get_html_head_attachments(
      isset($server) ? $server : '',
      isset($delegate) ? $delegate : '',
      isset($xrds) ? $xrds : ''
    );
    foreach ($attachments as $value) {
      $build['#attached']['html_head'][] = $value;
    }
  }
}
