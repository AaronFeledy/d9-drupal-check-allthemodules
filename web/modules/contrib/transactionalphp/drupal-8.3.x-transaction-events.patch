diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 791bf7a..18969f5 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -1,6 +1,7 @@
 <?php

 namespace Drupal\Core\Database;
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;

 /**
  * Base Database API class.
@@ -42,6 +43,13 @@
   protected $logger = NULL;

   /**
+   * The current event dispatcher for this connection.
+   *
+   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher|null
+   */
+  protected $eventDispatcher = NULL;
+
+  /**
    * Tracks the number of "layers" of transactions currently active.
    *
    * On many databases transactions cannot nest.  Instead, we track
@@ -460,6 +468,48 @@ public function getLogger() {
   }

   /**
+   * Associates an event dispatcher object with this connection.
+   *
+   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   *   The event dispatcher object we want to use.
+   */
+  public function setEventDispatcher(ContainerAwareEventDispatcher $event_dispatcher) {
+    $this->eventDispatcher = $event_dispatcher;
+  }
+
+  /**
+   * Gets the current event dispatcher object for this connection.
+   *
+   * @return \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher|null
+   *   The current event dispatcher object for this connection. If there isn't
+   *   one, NULL is returned.
+   */
+  public function getEventDispatcher() {
+    return $this->eventDispatcher;
+  }
+
+  /**
+   * Dispatch a DatabaseEvent if an event dispatcher is available.
+   *
+   * We lazy check this because the event_dispatcher service might not be
+   * available at construction time for the Connection object, since the
+   * container may not have been initialized yet.
+   *
+   * @param $event_name
+   *   The name of the event.
+   * @param \Drupal\Core\Database\DatabaseEvent $event
+   *   The event object to dispatch.
+   */
+  public function dispatch($event_name, DatabaseEvent $event) {
+    if (!$this->eventDispatcher && \Drupal::hasService('event_dispatcher')) {
+      $this->setEventDispatcher(\Drupal::service('event_dispatcher'));
+    }
+    if ($this->eventDispatcher) {
+      $this->eventDispatcher->dispatch($event_name, $event);
+    }
+  }
+
+  /**
    * Creates the appropriate sequence name for a given table and serial field.
    *
    * This information is exposed to all database drivers, although it is only
@@ -1089,6 +1139,10 @@ public function rollback($savepoint_name = 'drupal_transaction') {
         if ($rolled_back_other_active_savepoints) {
           throw new TransactionOutOfOrderException();
         }
+
+        // Dispatch event for transaction rollback.
+        $event = new TransactionEvent($savepoint, $this);
+        $this->dispatch(DatabaseEvents::ROLLBACK, $event);
         return;
       }
       else {
@@ -1099,6 +1153,11 @@ public function rollback($savepoint_name = 'drupal_transaction') {
     if ($rolled_back_other_active_savepoints) {
       throw new TransactionOutOfOrderException();
     }
+    else {
+      // Dispatch event for transaction rollback.
+      $event = new TransactionEvent($savepoint, $this);
+      $this->dispatch(DatabaseEvents::ROLLBACK, $event);
+    }
   }

   /**
@@ -1129,6 +1188,10 @@ public function pushTransaction($name) {
       $this->connection->beginTransaction();
     }
     $this->transactionLayers[$name] = $name;
+
+    // Dispatch event for transaction begin.
+    $event = new TransactionEvent($name, $this);
+    $this->dispatch(DatabaseEvents::START_TRANSACTION, $event);
   }

   /**
@@ -1184,6 +1247,10 @@ protected function popCommittableTransactions() {
       else {
         $this->query('RELEASE SAVEPOINT ' . $name);
       }
+
+      // Dispatch event for transaction commit.
+      $event = new TransactionEvent($name, $this);
+      $this->dispatch(DatabaseEvents::COMMIT, $event);
     }
   }

diff --git a/core/lib/Drupal/Core/Database/DatabaseEvent.php b/core/lib/Drupal/Core/Database/DatabaseEvent.php
new file mode 100644
index 0000000..a0c3391
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/DatabaseEvent.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\Core\Database\DatabaseEvent.
+ */
+
+namespace Drupal\Core\Database;
+
+use Symfony\Component\EventDispatcher\Event;
+use Drupal\Core\Database\Connection as DatabaseConnection;
+
+/**
+ * Defines a base class for all database events.
+ */
+class DatabaseEvent extends Event {
+
+  /**
+   * The connection the event occurred on.
+   *
+   * @var int
+   */
+  protected $databaseConnection;
+
+  /**
+   * Constructs a new DatabaseEvent.
+   *
+   * @param DatabaseConnection $database_connection
+   *   The depth of the transaction started/ended.
+   */
+  public function __construct(DatabaseConnection $database_connection) {
+    $this->databaseConnection = $database_connection;
+  }
+
+  /**
+   * The database connection the event occurred on.
+   *
+   * @return \Drupal\Core\Database\Connection
+   *   The database connection object.
+   */
+  public function getDatabaseConnection() {
+    return $this->databaseConnection;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/DatabaseEvents.php b/core/lib/Drupal/Core/Database/DatabaseEvents.php
new file mode 100644
index 0000000..91c06ce
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/DatabaseEvents.php
@@ -0,0 +1,60 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\Core\Database\DatabaseEvents.
+ */
+
+namespace Drupal\Core\Database;
+
+/**
+ * Contains all events thrown while performing database actions.
+ */
+final class DatabaseEvents {
+
+  /**
+   * The name of the event triggered when a transaction is started.
+   *
+   * This event allows modules to react to a transaction being started. The
+   * event listener method receives a \Drupal\Core\Database\TransactionEvent
+   * instance.
+   *
+   * @Event
+   *
+   * @see \Drupal\Core\Database\TransactionEvent
+   *
+   * @var string
+   */
+  const START_TRANSACTION = 'database.transaction.start';
+
+  /**
+   * The name of the event triggered when a transaction is committed.
+   *
+   * This event allows modules to react to a transaction being committed. The
+   * event listener method receives a \Drupal\Core\Database\TransactionEvent
+   * instance.
+   *
+   * @Event
+   *
+   * @see \Drupal\Core\Database\TransactionEvent
+   *
+   * @var string
+   */
+  const COMMIT = 'database.transaction.commit';
+
+  /**
+   * The name of the event triggered when a transaction is rolled back.
+   *
+   * This event allows modules to react to a transaction being rolled back. The
+   * event listener method receives a \Drupal\Core\Database\TransactionEvent
+   * instance.
+   *
+   * @Event
+   *
+   * @see \Drupal\Core\Database\TransactionEvent
+   *
+   * @var string
+   */
+  const ROLLBACK = 'database.transaction.rollback';
+
+}
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
index df51067..e43588c 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
@@ -5,8 +5,10 @@
 use Drupal\Core\Database\DatabaseExceptionWrapper;

 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\DatabaseEvents;
 use Drupal\Core\Database\DatabaseNotFoundException;
 use Drupal\Core\Database\TransactionCommitFailedException;
+use Drupal\Core\Database\TransactionEvent;
 use Drupal\Core\Database\DatabaseException;
 use Drupal\Core\Database\Connection as DatabaseConnection;
 use Drupal\Component\Utility\Unicode;
@@ -326,6 +328,10 @@ protected function popCommittableTransactions() {
           }
         }
       }
+
+      // Dispatch event for transaction commit.
+      $event = new TransactionEvent($name, $this);
+      $this->dispatch(DatabaseEvents::COMMIT, $event);
     }
   }

diff --git a/core/lib/Drupal/Core/Database/TransactionEvent.php b/core/lib/Drupal/Core/Database/TransactionEvent.php
new file mode 100644
index 0000000..2091264
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/TransactionEvent.php
@@ -0,0 +1,47 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\Core\Database\TransactionEvent.
+ */
+
+namespace Drupal\Core\Database;
+
+use Drupal\Core\Database\Connection as DatabaseConnection;
+
+/**
+ * Defines a base class for all database transaction events.
+ */
+class TransactionEvent extends DatabaseEvent {
+
+  /**
+   * The name of the transaction started/ended.
+   *
+   * @var int
+   */
+  protected $transactionName;
+
+  /**
+   * Constructs a new TransactionEvent.
+   *
+   * @param string $transaction_name
+   *   The name of the transaction started/ended.
+   * @param DatabaseConnection $database_connection
+   *   The depth of the transaction started/ended.
+   */
+  public function __construct($transaction_name, DatabaseConnection $database_connection) {
+    parent::__construct($database_connection);
+    $this->transactionName = $transaction_name;
+  }
+
+  /**
+   * The name of the transaction started/ended.
+   *
+   * @return int
+   *   The name of the transaction started/ended.
+   */
+  public function getTransactionName() {
+    return $this->transactionName;
+  }
+
+}
diff --git a/core/tests/Drupal/KernelTests/Core/Database/EventTest.php b/core/tests/Drupal/KernelTests/Core/Database/EventTest.php
new file mode 100644
index 0000000..aa3f3a6
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Database/EventTest.php
@@ -0,0 +1,113 @@
+<?php
+
+namespace Drupal\KernelTests\Core\Database;
+
+use Drupal\Core\Database\Database;
+use Drupal\Core\Database\DatabaseEvents;
+
+/**
+ * Tests the database event system.
+ *
+ * @group Database
+ */
+class EventTest extends DatabaseTestBase {
+
+  protected $eventTriggered = NULL;
+
+  /**
+   * Setup event dispatcher and listeners in addition to the usual setup.
+   */
+  public function setUp() {
+    parent::setUp();
+    // Setup event dispatcher for the database connection.
+    $event_dispatcher = \Drupal::service('event_dispatcher');
+    Database::getConnection()->setEventDispatcher($event_dispatcher);
+
+    // Setup event listeners for database events.
+    $event_dispatcher->addListener(
+      DatabaseEvents::START_TRANSACTION, [$this, 'databaseEvent']
+    );
+    $event_dispatcher->addListener(
+      DatabaseEvents::COMMIT, [$this, 'databaseEvent']
+    );
+    $event_dispatcher->addListener(
+      DatabaseEvents::ROLLBACK, [$this, 'databaseEvent']
+    );
+  }
+
+  /**
+   * Database event callback.
+   */
+  public function databaseEvent($event, $event_name, $dispatcher) {
+    $this->eventTriggered = $event_name;
+  }
+
+  /**
+   * Tests database event: start transaction.
+   *
+   * If the active connection does not support transactions, this test does
+   * nothing.
+   */
+  public function testDatabaseEventStartTransaction() {
+    // This test won't work right if transactions are not supported.
+    if (!Database::getConnection()->supportsTransactions()) {
+      return;
+    }
+    try {
+      // Prepare event listener and start a transaction.
+      $this->eventTriggered = NULL;
+      $tx = db_transaction();
+      $this->assertEqual(DatabaseEvents::START_TRANSACTION, $this->eventTriggered, 'Start transaction event was not triggered');
+    }
+    catch (\Exception $e) {
+      $this->fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Tests database event: commit transaction.
+   *
+   * If the active connection does not support transactions, this test does
+   * nothing.
+   */
+  public function testDatabaseEventCommit() {
+    // This test won't work right if transactions are not supported.
+    if (!Database::getConnection()->supportsTransactions()) {
+      return;
+    }
+    try {
+      // Prepare event listener and start a transaction.
+      $this->eventTriggered = NULL;
+      $tx = db_transaction();
+      unset($tx);
+      $this->assertEqual(DatabaseEvents::COMMIT, $this->eventTriggered, 'Commit transaction event was not triggered');
+    }
+    catch (\Exception $e) {
+      $this->fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Tests database event: rollback transaction.
+   *
+   * If the active connection does not support transactions, this test does
+   * nothing.
+   */
+  public function testDatabaseEventRollback() {
+    // This test won't work right if transactions are not supported.
+    if (!Database::getConnection()->supportsTransactions()) {
+      return;
+    }
+    try {
+      // Prepare event listener and start a transaction.
+      $this->eventTriggered = NULL;
+      $tx = db_transaction();
+      $tx->rollback();
+      $this->assertEqual(DatabaseEvents::ROLLBACK, $this->eventTriggered, 'Rollback transaction event was not triggered');
+    }
+    catch (\Exception $e) {
+      $this->fail($e->getMessage());
+    }
+  }
+
+}
