<?php
/**
 * @file
 * Basic module file.
 */
use Drupal\Core\Render\Element;

define('IMAGE_PERMISSIONS_SERVICE', 'image_field_permissions.permissions_service');

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function image_field_permissions_form_node_form_alter(&$form, $form_state) {
  $node = $form_state->getFormObject()->getEntity();

  $bundle_fields = \Drupal::entityManager()->getFieldDefinitions(
    $node->getEntityTypeId(),
    $node->getType()
  );

  $subfields = ['alt', 'title'];
  $allow_view_value = FALSE;

  foreach ($bundle_fields as $field_definition) {
    if ($field_definition->getType() == 'image') {
      $field_name = $field_definition->getFieldStorageDefinition()->getName();

      if (is_array($form[$field_name])) {
        $field =& $form[$field_name];
        $empty = empty(array_filter($node->get($field_name)->getValue()));

        // Don't process, just hide image.
        if (!$field['#access'] && $empty) {
          return FALSE;
        }
        // Allow rendering widget but remove edit buttons in callback.
        elseif (!$field['#access']) {
          $allow_view_value = TRUE;
          $field['#access'] = TRUE;
        }

        if (isset($field['widget']['#theme'])
          && $field['widget']['#theme'] == 'file_widget_multiple'
          && $allow_view_value
        ) {
          // Hide upload description.
          $field['widget']['#file_upload_title'] = '';
          $field['widget']['#file_upload_description'] = '';
        }

        $restricted = _image_field_permissions_get_restricted($subfields, $node, $field_definition);

        foreach (Element::children($field['widget']) as $id) {
          $element =& $field['widget'][$id];

          if ($allow_view_value) {
            // Hide upload buttons.
            $element['#process'][] = '_image_field_permissions_disallow_edit_value';
          }

          if (!empty($restricted)) {
            foreach ($restricted as $subfield) {
              if ($element['#' . $subfield . '_field']) {
                $element['#disallow'][] = $subfield;
              }
            }

            if (!empty($element['#disallow'])) {
              $element['#process'][] = '_image_field_permissions_disallow_subfields';
            }
          }
        }
      }
    }
  }
}

function _image_field_permissions_disallow_edit_value($element) {
  $element['upload_button']['#access'] = FALSE;
  $element['remove_button']['#access'] = FALSE;
  $element['upload']['#access'] = FALSE;
  return $element;
}

function _image_field_permissions_disallow_subfields($element) {
  if (!empty($element['#disallow'])) {
    foreach ($element['#disallow'] as $id) {
      $element[$id]['#access'] = FALSE;
    }
  }

  return $element;
}

function _image_field_permissions_get_restricted($subfields = [], $node, $field_definition, $op = 'edit') {
  $account = \Drupal::currentUser();
  $restricted = [];

  foreach ($subfields as $subfield_key) {
    $access = \Drupal::service(IMAGE_PERMISSIONS_SERVICE)->getPseudoFieldAccess(
      $op,
      $node,
      $account,
      $field_definition,
      $subfield_key
    );
    if (!$access) {
      $restricted[] = $subfield_key;

    }
  }
  return $restricted;
}
