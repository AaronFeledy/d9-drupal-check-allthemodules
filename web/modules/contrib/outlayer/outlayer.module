<?php

/**
 * @file
 * Provides Outlayer integration.
 */

use Drupal\blazy\Blazy;
use Drupal\outlayer\OutlayerDefault;

/**
 * Provides a convenient shortcut for procedural hooks.
 *
 * @return class
 *   The Outlayer class instances.
 */
function outlayer($key = 'manager') {
  static $manager;
  static $hook;

  if (!isset($manager)) {
    $manager = \Drupal::service('outlayer.manager');
  }

  switch ($key) {
    case 'hook':
      if (!isset($hook)) {
        $hook = \Drupal::service('outlayer.hook');
      }
      return $hook;

    default:
      return $manager;
  }
}

/**
 * Implements hook_theme().
 */
function outlayer_theme() {
  return [
    'gridstack__outlayer' => [
      'render element' => 'element',
      'base hook' => 'gridstack',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function outlayer_theme_suggestions_gridstack_alter(array &$suggestions, array $variables, $hook) {
  $settings = $variables['element']['#settings'];

  if (!empty($settings['outlayer'])) {
    $suggestions[] = 'gridstack__outlayer';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function outlayer_library_info_alter(&$libraries, $extension) {
  outlayer('hook')->libraryInfoAlter($libraries, $extension);
}

/**
 * Implements hook_library_info_build().
 */
function outlayer_library_info_build() {
  return outlayer('hook')->libraryInfoBuild();
}

/**
 * Implements hook_config_schema_info_alter().
 */
function outlayer_config_schema_info_alter(array &$definitions) {
  Blazy::configSchemaInfoAlter($definitions, 'outlayer_base', OutlayerDefault::extendedSettings());
}
