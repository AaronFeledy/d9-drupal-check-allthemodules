<?php

/**
 * @file
 * Contains esm.module.
 */

/**
 * Implements hook_theme().
 */
function esm_theme($existing, $type, $theme, $path) {
  return [
    'esm_toc' => [
      'variables' => [
        'items' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_module_implements_alter().
 */
function esm_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move our hook to the very end because we need
    // field group to run before our hook.
    if (isset($implementations['esm'])) {
      $group = $implementations['esm'];
      unset($implementations['esm']);
      $implementations['esm'] = $group;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function esm_form_node_form_alter(&$form, &$form_state, $form_id) {
  $toc = [];

  // Sort all fieldgroups by weight to maintain order.
  uasort($form['#fieldgroups'], function ($item1, $item2) {
    return $item1->weight <=> $item2->weight;
  });

  // Loop through all field groups and act on every field group that is
  // of our type "area" and has toc entry set to true.
  foreach ($form['#fieldgroups'] as &$fieldgroup) {
    if ($fieldgroup->format_type === 'area'
      && $fieldgroup->format_settings['toc_entry']
      && isset($fieldgroup->format_settings['id'])) {
      esm_build_toc($fieldgroup, $form, $toc, $fieldgroup);
    }
  }

  if (count($toc)) {
    $form['sidebar'] = [
      '#theme' => 'esm_toc',
      '#title' => t('Table of contents'),
      '#items' => $toc,
      '#weight' => -999,
    ];

    // Add style files and js behaviour.
    $form['#attached']['library'][] = 'esm/styling';
    $form['#attached']['library'][] = 'esm/waypoints';
    $form['#attached']['library'][] = 'esm/behaviour';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function esm_form_taxonomy_term_form_alter(&$form, &$form_state, $form_id) {
  // Also call form_alter we used for node_forms to build toc.
  esm_form_node_form_alter($form, $form_state, $form_id);
}

/**
 * Helper function to build a toc.
 *
 * @param object $form_element
 *   Drupal form_element.
 * @param array $form
 *   Drupal form.
 * @param array $toc
 *   Drupal render element. (This is what gets passed to esm_toc theme function
 *   at the end.)
 * @param string $area
 *   ID of a area.
 * @param array $children
 *   Children array that will be a part of toc render element.
 */
function esm_build_toc($form_element, array $form, array &$toc = [], $area = '', array &$children = []) {
  foreach ($form_element->children as $child) {
    // This form element is a field group so
    // we dive deeper to get to actual fields.
    if (isset($form['#fieldgroups'][$child])) {
      // We pass toc object by reference so we can stack up. Since we want this
      // cascaded fields to appear under the correct toc item
      // we pass current fieldgroup id (area).
      esm_build_toc($form['#fieldgroups'][$child], $form, $toc, $form_element, $children);
    }

    // This field does not have a class and title so we skip it because theses
    // are required for link build.
    if (!isset($form[$child]['#attributes']['class'])
      || !isset($form[$child]['widget']['#title'])) {
      continue;
    }

    // Glue classes together so we can used it as a selector in our js code.
    $class_query = '.' . implode('.', $form[$child]['#attributes']['class']);

    // Build child item.
    $children[$child] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => 'esm-toc__link',
        'data-area' => $area->format_settings['id'],
        'data-field' => $class_query,
      ],
      '#value' => $form[$child]['widget']['#title'],
    ];
  }

  // Build parent item.
  $toc[$area->format_settings['id']]['item'] = [
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#attributes' => [
      'class' => ['esm-toc__link'],
      'data-area' => $area->format_settings['id'],
    ],
    [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => ['esm-toc__icon-wrapper'],
      ],
      [
        '#type' => 'html_tag',
        '#tag' => 'i',
        '#attributes' => [
          'class' => [$area->format_settings['classes'], 'esm-toc__icon'],
        ],
      ],
    ],
    [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => 'esm-toc__link_text',
      ],
      '#value' => $form_element->label,
    ],

  ];
  $toc[$area->format_settings['id']]['children'] = $children;
}
