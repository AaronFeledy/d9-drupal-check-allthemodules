<?php

/**
 * @file
 * Contains reference_access.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function reference_access_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the reference_access module.
    case 'help.page.reference_access':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows restricting access to content unless a user references that content.') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_form_alter().
 */
function reference_access_form_alter(
  &$form,
  \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // kint($form, '$form');
  // kint($form_state, '$form_state');
  // kint($form_id, '$form_id');

  $user = \Drupal::currentUser();

  if ($form_id === 'user_form') {
    if ($user->hasPermission('bypass all checks')) {
      return null;
    }

    $user = $form_state->getStorage()['user'];
    // kint($user, '$user');

    $reference_fields = get_entity_ref_fields($user);
    // kint($reference_fields, '$reference_fields');

    foreach ($reference_fields as $field_name) {
      // $form[$field_name]['#access'] = FALSE;
    }
  }
}


/**
 * Implements hook_node_access().
 */
function reference_access_node_access(
  \Drupal\node\NodeInterface $node,
  $op,
  \Drupal\Core\Session\AccountInterface $account) {
  // kint($node, '$node');
  // kint($op, '$op');
  // kint($account, '$account');

  if ($op === 'view') {
    $match = FALSE;

    $user = \Drupal\user\Entity\User::load($account->id());
    // kint($user, '$user');

    if ($user->hasPermission('bypass all checks')) {
      return AccessResult::allowed();
    }

    $config = \Drupal::config('reference_access.config');

    $check_content_types = array_values($config->get('check_content_types'));
    // kint($check_content_types, '$check_content_types');
    // kint($node->getType(), '$node->getType()');
    if (! in_array($node->getType(), $check_content_types, TRUE)) {
      return AccessResult::allowed();
    }

    $check_direct_ref_nodes = $config->get('check_direct_ref_nodes');
    // kint($check_direct_ref_nodes, '$check_direct_ref_nodes');

    $check_indirect_ref_nodes = $config->get('check_indirect_ref_nodes');
    // kint($check_indirect_ref_nodes, '$check_indirect_ref_nodes');

    $reference_fields = get_entity_ref_fields($user);

    foreach ($reference_fields as $field_name) {

      // Check nodes directly referenced by users
      if ($check_direct_ref_nodes) {
        $nodes = $user->get($field_name)->getValue();
        // kint($nodes, '$nodes');
        // kint(var_export($nodes, TRUE));

        $allow_access = FALSE;
        foreach ($nodes as $nid_array) {
          // kint($nid_array['target_id'], "nid_array['target_id']");
          if ($nid_array['target_id'] === $node->id()) {
            $allow_access = TRUE;
            // return AccessResult::allowed();
          }
        }
        if (!$allow_access) {
          return AccessResult::forbidden();
        }
      }

      // Check nodes referenced by nodes that are referenced by users
      if ($check_indirect_ref_nodes) {
        // Get (loaded) nodes referenced by user
        $nodes = $user->get($field_name)->referencedEntities();
        // kint($nodes, '$nodes');

        $allow_access = FALSE;
        foreach ($nodes as $node_refed) {
          // kint($node_refed, '$node_refed');
          $reference_fields = get_entity_ref_fields($node_refed);
          // kint($reference_fields, '$reference_fields');

          foreach ($reference_fields as $field_name) {
            // Get nodes referenced by the referenced node
            $nodes = $node_refed->get($field_name)->getValue();
            foreach ($nodes as $nid_array) {
              // kint($nid_array['target_id'], "nid_array['target_id']");
              if ($nid_array['target_id'] === $node->id()) {
                $allow_access = TRUE;
                // return AccessResult::allowed();
              }
            }
          }
        }
        if (!$allow_access) {
          return AccessResult::forbidden();
        }
      }
    }
    // kint($match, '$match');
    // return AccessResult::forbidden();
  }
}


function get_entity_ref_fields($entity) {
  $reference_fields = [];
  $fieldDefinitions = $entity->getFieldDefinitions();
  // kint($fieldDefinitions, '$fieldDefinitions');

  $ignored_fields = [
    'roles',
    'type',
    'uid',
    'revision_uid',
    'menu_link',
  ];

  foreach ($fieldDefinitions as $field_name => $field_info) {
    // kint($field_info, 'field_name: ' . $field_name);
    if ($field_info->getType() !== 'entity_reference'
      || (in_array($field_name, $ignored_fields))) {
      continue;
    }
    // kint($field_info, 'field_name: ' . $field_name);
    $reference_fields[] = $field_name;
  }
  // kint($reference_fields, '$reference_fields');
  return $reference_fields;
}