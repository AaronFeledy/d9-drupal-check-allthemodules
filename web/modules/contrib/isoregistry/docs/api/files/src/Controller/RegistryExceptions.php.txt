<?php
namespace Drupal\isoregistry\Controller;

/**
  * Klasse über die Fehlermeldungen produziert werden können, die über Drupal hinaus gehen.
  *
  * 
  *
  * @author AndyLicht
  */

use Symfony\Component\HttpFoundation\RedirectResponse;

class RegistryExceptions {
  
  
  private $exception;
  
  
  /**
   * Constructor um eine Exception-Objekt zu erzeugen.
   * 
   * @param string $exception übergibt eine Zeichenkette an das Objekt und setzt das Attribut $exception.
   * 
   * @return void
   */
  function __construct($exception) {
    $this->exception = $exception;
  }
  
  /**
   * Fehlermeldung als XML ausgeben.
   * 
   * Greift auf das Objektattribut $exception zu.
   * 
   * @return string $exception
   */
  public function getXMLException() {
    $xml_data = new \SimpleXMLElement('<?xml version="1.0"?><data></data>');
    $error['error'] = $this->exception;
    return $this->array_to_xml($error,$xml_data)->__String();
  }
  
  public function getDefaultException() {
    global $base_url;
    drupal_set_message($this->exception, 'error');
    return new RedirectResponse($base_url);
  }

  public function array_to_xml( $data, &$xml_data ) {
    foreach( $data as $key => $value ) {
        if( is_numeric($key) ){
            $key = 'item'.$key; //dealing with <0/>..<n/> issues
        }
        if( is_array($value) ) {
            $subnode = $xml_data->addChild($key);
            array_to_xml($value, $subnode);
        } else {
            $xml_data->addChild("$key",htmlspecialchars("$value"));
        }
     }
    return $xml_data;
  }
}

