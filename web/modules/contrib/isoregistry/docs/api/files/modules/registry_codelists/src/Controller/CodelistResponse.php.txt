<?php

namespace Drupal\registry_codelists\Controller;

use Drupal\isoregistry\Controller\RegistryExceptions;
use Symfony\Component\HttpFoundation\RedirectResponse;


class CodelistResponse {
  
  private $node = null;
  private $codelist = null;
  private $code = null;
  private $format = null;
  private $language = null;
  private $version = null;
  private $bundle = null;
  private $response = null;
  private $responseError = null;
  private $code_node = null;
  private $code_nid = null;
  private $code_bundle = null;
  private $codelist_nid = null;
  private $codelist_node = null;
  private $codelist_bundle = null;
  
  
  public function __construct($codelist, $code = null, $format = null, $language = null, $version = null) {
    
    $this->codelist = $codelist;
    $this->code = $code;
    $this->format = $format;
    $this->language = $language; 
    $this->version = $version;
    
    $this->setNodesandBundles();
  }
  
  
  /**
   * Funktion die initial überprüft ob alle Parameter in der Kombination übereinstimmen.
   * 
   * 1) gibt es den Code 
   * 2) gibt es die Codeliste
   * 3) gehört der Code zu der Codeliste
   * 4) gibt es die entsprechende Sprache
   * 5) gibt es die entsprechende Version
   * 
   * Wenn keine Version oder Sprach angegeben ist, wird die aktuelle Version in der Basissprache gewählt.
   * 
   */
  private function setNodesandBundles() {
    
    /*
     * Code auf Existens überprüfen und entsprechand abspeichern.
     */
    if($this->code != null) {
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('title', $this->code);
      $this->code_nid = $this->setID($query->execute());
      dsm("Code ID:");
      dsm($this->code_nid);
      if ($this->code_nid != null) {
        $this->code_node = \Drupal\node\Entity\Node::load($this->code_nid);
        $this->code_bundle = $this->code_node->bundle();
      }
    };
    dsm($this->code_node);
    
    /*
     * Codeliste auf Existens überprüfen und entsprechand abspeichern.
     */
    if($this->codelist != null) {
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('title', $this->codelist);
      $this->codelist_nid = $this->setID($query->execute());
      if ($this->codelist_nid != null) {
        $this->codelist_node = \Drupal\node\Entity\Node::load($this->codelist_nid);
        $this->codelist_bundle = $this->codelist_node->bundle();
      }
    };
    dsm('in der richtigen Funktion');
    dsm('Code');
    dsm($this->code_nid);
    dsm('Codelist');
    dsm($this->codelist_nid);
    dsm('Sprache:');
    dsm($this->language);
    /*
     * Definierte Abgleiche durchführen und entsprechende Konsequenzen starten (Fehlerresponse bzw. echten Response).
     */
    /*
     * Wenn es den Code nicht gibt, überprüfen ob es sich um eine Codeliste vom Type CodelistFile handelt und erzeuge den Response für die Codeliste
     * Die Überprüfung ob der Code in der Datei ist findet in der Class CodeListXML statt.
     */
    if(($this->code_node == null) && ($this->codelist_bundle == 'registry_codelists')) {
      dsm('Es handelt sich um eine Codeliste bzw. einen Code aus einer Datei');
      $this->node = $this->codelist_node;
      $this->bundle = $this->codelist_bundle;
    } 
    /*
     *  Die Codelist (Code ist null) wurde angefragt existiert und gehört nicht zur File Codelist
     */
    else if($this->code_node != null && $this->codelist_node != null && $this->codelist_bundle != 'registry_codelists') {
      $this->node = $this->codelist_node;
      $this->bundle = $this->codelist_bundle;
    }
    /*
     * Code und Codeliste gehören zusammen, der Code wurde angefragt und es handelt sich nicht um eine FilteTyp.
     */
    else if (($this->codelist_bundle == $this->code_bundle)&& $this->codelist_bundle != 'registry_codelists' && $this->checkRelation()) {
      $this->node = $this->code_node;
      $this->bundle = $this->code_bundle;
    } 
    /*
     * Fehler setzen
     */
    else {
      $this->responseError = t('Codelist und Code passen nicht zusammen');
    }
    if($this->language != null && $this->node != null) {
      $this->checkLanguage();
    }
    
    $this->buildResponse();
  }
  
  /**
   *  Prüft ob der Code auch tatsächlich in der Codeliste vorkommt
   */
  private function checkRelation() {
    /*
     * field_inspireccodes ist ein Array aus Array aus dem die referenziert nids genommen werden.
     */
    $nids = [];
    foreach ($this->codelist_node->field_inspireccodes->getValue() as $value) {
      array_push($nids,$value['target_id']);
    }
    /*
     * die Funktion in_array gibt TRUE (der Code ist referenziert) oder FALSE (Code ist nicht referenziert und daher nicht in der Codeliste enthalten) zurück. 
     */
    return in_array($this->code_nid,$nids);
  }
  /**
   * In der folgenden Funktion wird überprüft ob die die angegebene Sprache unterstützt wird.
   * Wenn die Sprache unterstützt wird, wird der Node angepasst andernfalls wird die default Sprache ausgegeben, bei Formats anforderungen wird ein Error geschmissen!
   * @return void
   */
  private function checkLanguage() {
    dsm('Sprache checken');
    if(array_key_exists($this->language, $this->node->getTranslationLanguages())) {
      dsm('Sprache unterstützt');
      $this->node = $this->node->getTranslation($this->language);
    } else {
      $this->responseError = t('Sprache nicht unterstützt');
    };
  }
  /**
   * die NIDs werden alls Array ausgegeben, daher wird die ID aus dem Array über ein foreach ausgelesen
   * 
   * @param array $ids Array mit den IDs
   * 
   * @return integer ID of the node
    */
  private function setID ($ids) {
    $id = null;
    if(sizeof($ids) > 0) {
      foreach ($ids as $_id) {
        $id = $_id;
      }
    }
    return $id;
  }
  
  private function switchErrorResponse() {
    $_response = new RegistryExceptions($this->responseError);
    switch ($this->format) {
      case NULL:
        dsm('Error ohne Format');
        $response = $_response->getDefaultException();
        dsm($response);
        break;
      case 'xml':
        dsm('XML');
        $response = $_response->getXMLException();
        break;
    }
    return $response;
  }
  
  private function switchResponse() {
    global $base_url;
    $response = null;
    switch ($this->format) {
        case NULL:
          //only a redirect, the URL is changing.
          $response = new RedirectResponse($base_url.'/node/'.$this->node->id());
          break;
        case 'xml':
          $xml = new CodelistXML($this->node, $this->codelist, $this->code, $this->language, $this->bundle);
          $response = $xml->getXMLData();
          break;
        case 'test':
          $response = new RedirectResponse($base_url.'/node/'.$this->node->id());
          break;
      }
    return $response;
  }
  
  
  private function buildResponse() {
    if ($this->node == null || $this->responseError != null) {
      $this->response = $this->switchErrorResponse();
      dsm($this->response);
    } else {
      $this->response = $this->switchResponse();
    }
  }
  
  public function getResponse() {
    return $this->response;
  }
  public function getNode() {
    return $this->node;
  }
  
  public function getCodelist() {
    return $this->codelist;
  }
  
  public function getCode() {
    return $this->code;
  }
  
  public function getFormat() {
    return $this->format;
  }
  
  public function getLanguage() {
    return $this->language;
  }
  
  public function getBundle() {
    return $this->bundle;
  }
}

