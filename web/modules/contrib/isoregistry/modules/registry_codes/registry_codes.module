<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Ajax\CommandInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity;
use Drupal\node\Entity\Node;


function registry_codes_form_node_form_alter (&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $config = \Drupal::config('registry_codes.settings');
  if(in_array($node->getType(), $config->get('enabled_content_types')) && $form_state->getFormObject()->getEntity()->get('default_langcode')->value) {       // muss umgewandelt werden in in_array, sobald es eine Konfiguration gibt
    //wird ausgeführt nachdem Änderungen am Formular durchgeführt wurden
    if(isset($form_state->getValue('field_codes_parent')[0]['target_id']) || isset($form_state->getValue('title')[0]['value']) ) {
      $valueParent = null;
      $valueName = null;
      $tmp = null;
      if(isset($form_state->getValue('field_codes_parent')[0]['target_id'])) {
        $nid = $form_state->getValue('field_codes_parent')[0]['target_id']; 
        $parent = node_load($nid);
        $valueParent = $parent->field_codes_code->value;
        $valueParent = explode(".", $valueParent);
        $count = count($valueParent);
        if ($count > 1) {
          $valueParent = $valueParent[1];
        } else {
          $valueParent = $valueParent[0];
        }
      }
      
      if ($form_state->getValue('title')[0]['value'] !== null) {
        $valueName = $form_state->getValue('title')[0]['value'];
        $valueName = str_replace(".", "", $valueName);
        $valueName = str_replace(" ", "", $valueName);
      }
      
      if($valueParent !== null && $valueName !== null)  {
        $tmp = $valueParent . '.' . $valueName;
      } elseif ($valueParent !== null && $valueName === null){
        $tmp = $valueParent;
      } elseif($valueParent === null && $valueName !== null) {
        $tmp = $valueName;
      }
      $form['field_codes_code']['widget'][0]['value']['#default_value'] = $tmp;
    }
    
    $form['title']['widget'][0]['value']['#ajax'] = array(
      'event' => 'change',
      'callback' => 'buildCode',
      'wrapper' => 'edit-code-value-wrapper',
    );
    
    $form['field_codes_parent']['widget'][0]['target_id']['#ajax'] = array(
      'event' => 'change',
      'callback' => 'buildCode',
      'wrapper' => 'edit-code-value-wrapper',
    );
    
    $form['field_codes_code']['#disabled'] = TRUE;
    $form['field_codes_code']['#prefix'] = '<div id="edit-code-value-wrapper">';
    $form['field_codes_code']['#suffix'] = '</div>';
    
    $form['#validate'][] = 'checkCodeValidation';
    
    return $form;
  };
}

function checkCodeValidation(array &$form, FormStateInterface $form_state){
  
  $node = $form_state->getFormObject()->getEntity();
  $nid = $node->id();
  $tid = $form_state->getValue('field_namespace')[0]['target_id'];
  $code = $form_state->getValue('field_codes_code')[0]['value'];
  
  $nids = \Drupal::entityQuery('node')
      ->condition('type', $form_state->getFormObject()->getEntity()->getType())
      ->condition('field_codes_code',$code)
      ->condition('field_namespace', $tid)
      ->execute();
  
  //Auswertung
  if(count($nids) > 0) {
    if(count($nids) === 1){
      $existingId = null;
      foreach($nids as $tempId) {
        $existingId = $tempId;
      }
      if($existingId === $nid){
        //Nothing happens
      } else {
        return $form_state->setErrorByName('field_codes_code', t('This code combination aready exist in this namespace.'));
      }
    } else {
      return $form_state->setErrorByName('field_codes_code', t('This code combination aready exist in this namespace.'));
    }
  }else{
    //nothing happens
  };
  
}
function buildCode(array &$form, FormStateInterface $form_state) {
  $form['field_codes_code']['#prefix'] = '<div id="edit-code-value-wrapper">';
  $form['field_codes_code']['#suffix'] = '</div>';
  return $form['field_codes_code'];
}
