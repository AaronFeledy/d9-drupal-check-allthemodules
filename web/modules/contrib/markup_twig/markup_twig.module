<?php

/**
 * @file
 * Defines a field type for displaying markup on the node/edit form.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\Core\Messenger\MessengerInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function markup_twig_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\field_ui\Form\FieldStorageConfigEditForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
  $entity = $form_object->getEntity();
  if ($entity->get('module') == 'markup_twig') {
    // Remove cardinality selection. We always want cardinality to be '1'.
    unset($form['cardinality_container']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function markup_twig_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\field_ui\Form\FieldStorageConfigEditForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
  $entity = $form_object->getEntity();
  if ($entity->get('field_type') == 'markup') {
    // Add twig variable information:
    $additionalDescription = "\nIf you enable the 'Markup Twig' widget or formatter, you can use twig syntax.";
    $form['settings']['instructions']['#markup'] .= $additionalDescription;
    $form['settings']['markup']['#description'] .= $additionalDescription;

    // Disable the markup field if the user has no permission and add an information to the field description:
    if(!\Drupal::currentUser()->hasPermission('administer markup fields')){
      \Drupal::messenger()->addMessage(t("You are not allowed to administer markup fields. You don't have the required permission 'Administer markup fields'."), \Drupal::messenger()::TYPE_WARNING);
      $form['settings']['markup']['#disabled'] = TRUE;
    }

    // Remove default value, otherwise this may lead to uneditable fields if something is broken because you can't reach the form anymore.
    unset($form['default_value']);
  }
}

/**
 * Returns the render array for inline_template.
 * See https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!Element!InlineTemplate.php/class/InlineTemplate
 *
 * @param string $value The text value / template.
 * @param string $format The input format selected.
 * @param string $langcode The langcode.
 * @param array $context The twig context array.
 * @return array
 */
function _markup_twig_build_element_inline_template($value, $format, $langcode = '', array $context = array()) {
  // Ron value through selected filter type before rendering it:
  $value = check_markup($value, $format, $langcode);
  return [
    // See https://api.drupal.org/api/drupal/core!lib!Drupal!Core!Render!Element!InlineTemplate.php/class/InlineTemplate/
    '#type' => 'inline_template',
    '#template' => $value,
    '#context' => $context,
  ];
}

/**
 * Returns global twig variables (context).
 *
 * @return array Global twig context
 */
function _markup_twig_get_twig_global_context() {
  global $base_url;

  $context = [];

  $theme = \Drupal::theme()->getActiveTheme();
  $context['theme'] = $theme->getName();
  $context['theme_directory'] = $theme->getPath();

  $context['base_path'] = base_path();
  $context['base_root'] = $base_url;
  $context['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  $context['language'] = \Drupal::languageManager()->getCurrentLanguage();

  $user = \Drupal::currentUser();
  $context['is_admin'] = $user->hasPermission('access administration pages');
  $context['logged_in'] = $user->isAuthenticated();

  $site_config = \Drupal::config('system.site');
  $context['site_name'] = strip_tags($site_config->get('name'));
  $context['site_slogan'] = strip_tags($site_config->get('slogan'));

  return $context;
}
