<?php

/**
 * @file
 * There are only two hard things in Computer Science: cache invalidation and naming things.
 *
 * -- Phil Karlton,
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\naming\Entity\NamingCategory;
use Drupal\naming\Entity\NamingConvention;

/**
 * Implements hook_help().
 */
function naming_help($route_name, RouteMatchInterface $route_match) {

  // Build naming convention help overview page.
  if ($route_name == 'help.page.naming') {
    $naming_categories = NamingCategory::loadMultiple();
    uasort($naming_categories, ['Drupal\naming\Entity\NamingCategory', 'sort']);

    $naming_conventions = NamingConvention::loadMultiple();
    uasort($naming_conventions, ['Drupal\naming\Entity\NamingConvention', 'sort']);

    // Table of contents.
    $build = [
      'toc' => [
        '#theme' => 'naming_toc',
        '#naming_categories' => $naming_categories,
        '#naming_conventions' => $naming_conventions,
      ],
    ];

    // Naming categories.
    foreach ($naming_categories as $naming_category) {
      $build[$naming_category->id()] = [
        '#theme' => 'naming_category',
        '#naming_category' => $naming_category,
        '#naming_conventions' => [],
        '#contextual_links' => [
          'naming_category' => [
            'route_parameters' => ['naming_category' => $naming_category->id()],
          ],
        ],
      ];
    }

    // Naming conventions.
    foreach ($naming_conventions as $naming_convention) {
      $category = $naming_convention->getCategory();
      if (isset($build[$category])) {
        $build_category =& $build[$category]['#naming_conventions'];
      }
      else {
        $build_category =& $build;
      }
      $build_category[$naming_convention->id()] = [
        '#theme' => 'naming_convention',
        '#naming_convention' => $naming_convention,
        '#contextual_links' => [
          'naming_convention' => [
            'route_parameters' => ['naming_convention' => $naming_convention->id()],
          ],
        ],
      ];
    }

    return \Drupal::service('renderer')->render($build);
  }

  $naming_convention = NamingConvention::loadFromRouteMatch($route_match);
  if (!$naming_convention) {
    return NULL;
  }

  $build = [
    '#theme' => 'naming_help',
    '#naming_convention' => $naming_convention,
    '#contextual_links' => [
      'naming_convention' => [
        'route_parameters' => ['naming_convention' => $naming_convention->id()],
      ],
    ],
  ];

  $renderer = \Drupal::service('renderer');
  $renderer->addCacheableDependency($build, $naming_convention);
  return $renderer->render($build);
}

/**
 * Implements hook_library_info_alter().
 */
function naming_library_info_alter(&$libraries, $extension) {
  if ($extension == 'core' && isset($libraries['drupal.machine-name']) && \Drupal::config('naming.settings')->get('disable_machine_name')) {
    unset($libraries['drupal.machine-name']);
  }
}

/**
 * Implements hook_theme().
 */
function naming_theme() {
  return [
    'naming_toc' => [
      'render element' => 'elements',
    ],
    'naming_category' => [
      'render element' => 'elements',
    ],
    'naming_convention' => [
      'render element' => 'elements',
    ],
    'naming_help' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for naming table of contents templates.
 *
 * Default template: naming-toc.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the naming category.
 *     Properties used:
 *     - #naming_categories: Array of \Drupal\naming\Entity\NamingCategory[]
 *       objects.
 *     - #naming_conventions: Array of \Drupal\naming\Entity\NamingConvention[]
 *       objects.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_naming_toc(&$variables) {
  /** @var \Drupal\naming\NamingCategoryInterface[] $naming_categories */
  $naming_categories = $variables['elements']['#naming_categories'];

  /** @var \Drupal\naming\NamingCategoryInterface[] $naming_conventions */
  $naming_conventions = $variables['elements']['#naming_conventions'];

  // Initialize table of contents.
  $toc = [
    '#theme' => 'item_list',
    '#items' => [],
  ];

  // Naming categories.
  foreach ($naming_categories as $naming_category) {
    $toc['#items'][$naming_category->id()] = [
      'link' => [
        '#type' => 'link',
        '#title' => $naming_category->label(),
        '#url' => Url::fromRoute('<none>', [], ['fragment' => $naming_category->id()]),
      ],
      'children' => [],
    ];
  }

  // Naming conventions.
  foreach ($naming_conventions as $naming_convention) {
    if ($category = $naming_convention->getCategory()) {
      $toc['#items'][$category]['children'][$naming_convention->id()] = [
        '#type' => 'link',
        '#title' => $naming_convention->label(),
        '#url' => Url::fromRoute('<none>', [], ['fragment' => $naming_convention->id()]),
        '#weight' => $naming_convention->getWeight(),
      ];
    }
  }
  $variables['toc'] = $toc;

  $variables['attributes']['class'] = 'naming-table-of-contents';
}

/**
 * Prepares variables for naming category templates.
 *
 * Default template: naming-category.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the naming category.
 *     Properties used:
 *     - #naming_category: A \Drupal\naming\Entity\NamingCategory object.
 *       The naming category being viewed.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_naming_category(&$variables) {
  /** @var \Drupal\naming\NamingCategoryInterface $naming_category */
  $naming_category = $variables['elements']['#naming_category'];
  $variables['naming_category'] = $variables['elements']['#naming_category'];
  $variables['naming_conventions'] = $variables['elements']['#naming_conventions'];
  $variables['label'] = $naming_category->label();

  $variables['content'] = [
    '#type' => 'processed_text',
    '#text' => $naming_category->getContent()['value'],
    '#format' => $naming_category->getContent()['format'] ?: filter_default_format(),
  ];

  $variables['attributes']['id'] = $naming_category->id();
}

/**
 * Prepares variables for naming convention templates.
 *
 * Default template: naming-convention.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the naming convention.
 *     Properties used:
 *     - #naming_convention: A \Drupal\naming\Entity\NamingConvention object.
 *       The naming convention being viewed.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_naming_convention(&$variables) {
  /** @var \Drupal\naming\NamingConventionInterface $naming_convention */
  $naming_convention = $variables['elements']['#naming_convention'];
  $variables['naming_convention'] = $variables['elements']['#naming_convention'];

  $variables['label'] = $naming_convention->label();

  $variables['content'] = [
    '#type' => 'processed_text',
    '#text' => $naming_convention->getContent()['value'],
    '#format' => $naming_convention->getContent()['format'] ?: filter_default_format(),
  ];

  if ($path = $naming_convention->getPath()) {
    if ($url = $naming_convention->getPathUrl()) {
      $variables['applies_to'] = [
        '#type' => 'link',
        '#title' => $path,
        '#url' => $url,
      ];
    }
    else {
      $variables['applies_to'] = $path;
    }

  }

  $variables['attributes']['id'] = $naming_convention->id();
}

/**
 * Prepares variables for naming help templates.
 *
 * Default template: naming-help.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the naming convention.
 *     Properties used:
 *     - #naming_convention: A \Drupal\naming\Entity\NamingConvention object.
 *       The naming convention being viewed.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_naming_help(&$variables) {
  /** @var \Drupal\naming\NamingConventionInterface $naming_convention */
  $naming_convention = $variables['elements']['#naming_convention'];
  $variables['naming_convention'] = $variables['elements']['#naming_convention'];

  $variables['content'] = [
    '#type' => 'details',
    '#title' => t('@label naming conventions', ['@label' => $naming_convention->label()]),
    'content' => [
      '#type' => 'processed_text',
      '#text' => $naming_convention->getContent()['value'],
      '#format' => $naming_convention->getContent()['format'] ?: filter_default_format(),
    ],
  ];

  $variables['attributes']['id'] = 'naming-help-' . $naming_convention->id();
}
