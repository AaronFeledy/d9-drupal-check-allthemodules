<?php

/**
 * @file
 * Contains webform_cart.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\entity\BundleFieldDefinition;
use Drupal\webform_cart\Entity\WebformCartOrderTypeInterface;

/**
 * Implements hook_help().
 */
function webform_cart_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the webform_cart module.
    case 'help.page.webform_cart':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows you to add products to a webform submission.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function webform_cart_theme() {
  $theme = [];
  $theme['webform_cart'] = [
    'render element' => 'children',
  ];
  $theme['webform_cart_order'] = [
    'render element' => 'elements',
    'file' => 'webform_cart_order.page.inc',
    'template' => 'webform-cart-order',
  ];
  $theme['webform_cart_order_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'webform_cart_order.page.inc',
  ];
  $theme['webform_cart_item'] = [
    'render element' => 'elements',
    'file' => 'webform_cart_item.page.inc',
    'template' => 'webform-cart-item',
  ];
  $theme['webform_cart_item_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'webform_cart_item.page.inc',
  ];
  $theme['webform_cart_block'] = [
    'variables' => ['count' => NULL, 'var1' => NULL, 'description' => NULL],
    'template' => 'block--webform-cart-block',
  ];
  $theme['webform_cart_checkout'] = [
    'variables' => ['order' => NULL, 'webform' => NULL],
    'template' => 'webform-cart-checkout',
  ];
  return $theme;
}


///**
//* Implements hook_theme_suggestions_HOOK().
//*/
//function webform_cart_theme_suggestions_webform_cart_order(array $variables) {
//  $suggestions = [];
//  $entity = $variables['elements']['#webform_cart_order'];
//  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
//
//  $suggestions[] = 'webform_cart_order__' . $sanitized_view_mode;
//  $suggestions[] = 'webform_cart_order__' . $entity->bundle();
//  $suggestions[] = 'webform_cart_order__' . $entity->bundle() . '__' . $sanitized_view_mode;
//  $suggestions[] = 'webform_cart_order__' . $entity->id();
//  $suggestions[] = 'webform_cart_order__' . $entity->id() . '__' . $sanitized_view_mode;
//  return $suggestions;
//}
//
///**
//* Implements hook_theme_suggestions_HOOK().
//*/
//function webform_cart_theme_suggestions_webform_cart_item(array $variables) {
//  $suggestions = [];
//  $entity = $variables['elements']['#webform_cart_item'];
//  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
//
//  $suggestions[] = 'webform_cart_item__' . $sanitized_view_mode;
//  $suggestions[] = 'webform_cart_item__' . $entity->bundle();
//  $suggestions[] = 'webform_cart_item__' . $entity->bundle() . '__' . $sanitized_view_mode;
//  $suggestions[] = 'webform_cart_item__' . $entity->id();
//  $suggestions[] = 'webform_cart_item__' . $entity->id() . '__' . $sanitized_view_mode;
//  return $suggestions;
//}


// TODO: Automatically create entity reference fields programatically when creating a order entity type.
/**
 * Adds the default order_items field to an order type.
 *
 * Order items can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_order\Entity\WebformCartOrderTypeInterface $order_type
 *   The order type.
 */
//function webform_cart_add_order_items_field(WebformCartOrderTypeInterface $order_type) {
//  $field_definition = BundleFieldDefinition::create('entity_reference')
//    ->setTargetEntityTypeId('webform_cart_order')
//    ->setTargetBundle($order_type->id())
//    ->setName('order_items')
//    ->setLabel('Order items')
//    ->setCardinality(BundleFieldDefinition::CARDINALITY_UNLIMITED)
//    ->setRequired(TRUE)
//    ->setSetting('target_type', 'webform_cart_item')
//    ->setSetting('handler', 'default')
//    ->setDisplayOptions('form', [
//      'type' => 'inline_entity_form_complex',
//      'weight' => 0,
//      'settings' => [
//        'override_labels' => TRUE,
//        'label_singular' => 'order item',
//        'label_plural' => 'order items',
//      ],
//    ])
//    ->setDisplayOptions('view', [
//      'type' => 'webform_cart_item_table',
//      'weight' => 0,
//    ]);
//
//  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
//  $configurable_field_manager->createField($field_definition);
//}

//function hook_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
//
//  // Add a property only to nodes of the 'article' bundle.
//  if ($entity_type
//      ->id() == 'node' && $bundle == 'article') {
//    $fields = [];
//    $fields['mymodule_text_more'] = BaseFieldDefinition::create('string')
//      ->setLabel(t('More text'))
//      ->setComputed(TRUE)
//      ->setClass('\\Drupal\\mymodule\\EntityComputedMoreText');
//    return $fields;
//  }
//}
//
//function hook_entity_field_storage_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
//  if (\Drupal::entityManager()
//      ->getStorage($entity_type
//        ->id()) instanceof DynamicallyFieldableEntityStorageInterface) {
//
//    // Query by filtering on the ID as this is more efficient than filtering
//    // on the entity_type property directly.
//    $ids = \Drupal::entityQuery('field_storage_config')
//      ->condition('id', $entity_type
//          ->id() . '.', 'STARTS_WITH')
//      ->execute();
//
//    // Fetch all fields and key them by field name.
//    $field_storages = FieldStorageConfig::loadMultiple($ids);
//    $result = [];
//    foreach ($field_storages as $field_storage) {
//      $result[$field_storage
//        ->getName()] = $field_storage;
//    }
//    return $result;
//  }
//}