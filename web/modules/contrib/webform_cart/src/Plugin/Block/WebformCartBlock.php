<?php

namespace Drupal\webform_cart\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform_cart\WebformCartInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Provides a 'WebformCartBlock' block.
 *
 * @Block(
 *  id = "webform_cart_block",
 *  admin_label = @Translation("Webform Cart Icon Block"),
 * )
 */
class WebformCartBlock extends BlockBase implements ContainerFactoryPluginInterface {

  /**
   * Drupal\webprofiler\Entity\EntityManagerWrapper definition.
   *
   * @var \Drupal\webprofiler\Entity\EntityManagerWrapper
   */
  protected $webformCart;

  /**
   * Constructs a new WebformCartCheckoutBlock object.
   *
   * @param array $configuration
   *   A configuration array containing information about the plugin instance.
   * @param string $plugin_id
   *   The plugin_id for the plugin instance.
   * @param string $plugin_definition
   *   The plugin implementation definition.
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   * @param \Drupal\webform_cart\WebformCartSessionInterface $webform_cart_session
   */
  public function __construct(array $configuration,
                              $plugin_id,
                              $plugin_definition,
                              WebformCartInterface $webform_cart) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->webformCart = $webform_cart;
  }
  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container,
                                array $configuration,
                                $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('webform_cart.webformcart')
    );
  }

  /**
   * @inheritDoc
   */
  public function defaultConfiguration() {
    return parent::defaultConfiguration(); // TODO: Change the autogenerated stub
  }


  /**
   * {@inheritdoc}
   */
  public function blockForm($form, FormStateInterface $form_state) {
    $form = parent::blockForm($form, $form_state);

    $config = $this->getConfiguration();

    $form['checkout_page'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Checkout Page'),
      '#default_value' => $config['checkout_page'],
      '#description' => $this->t('by default this is set to "/webform_cart/confirmOrder"'),
      '#weight' => '5',
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function blockSubmit($form, FormStateInterface $form_state) {
    $this->configuration['checkout_page'] = $form_state->getValue('checkout_page');
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    $cartCount = $this->webformCart->getCount();

    if (isset($this->configuration['checkout_page'])) {
      $checkoutPage = $this->configuration['checkout_page'];
    }
    else {
      $checkoutPage = '/webform_cart/confirmOrder';
    }

    return [
      '#theme' => 'webform_cart_block',
      '#ordersCount' => $cartCount,
      '#checkoutPage' => $checkoutPage,
      '#attached' => array(
        'library' => array(
          'webform_cart/webform_cart',
        ),
      ),
    ];
  }

}
