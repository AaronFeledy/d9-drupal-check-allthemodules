<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\block\BlockInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\widget_block\Entity\WidgetBlockConfigInterface;

/*
 * Module hook implementations.
 */

/**
 * Implements hook_cron().
 */
function widget_block_cron() {
  // Get the Widget Block backend service.
  $backend = \Drupal::service('widget_block.backend');

  // Load all the Widget Block configuration entities.
  $configs = \Drupal::entityTypeManager()->getStorage('widget_block_config')->loadMultiple();
  // Get all the available languages.
  $languages = \Drupal::languageManager()->getLanguages();

  // Iterate through the Widget Block configurations.
  foreach ($configs as $config) {
    // Iterate through the available languages.
    foreach ($languages as $language) {
      // Refresh the Widget Block markup for given configuration and language.
      $backend->refresh($config, $language);
    }
  }
}

/**
 * Implements hook_entity_operation().
 */
function widget_block_entity_operation(EntityInterface $entity) {
  // Initialize $operations variable to an empty array.
  $operations = [];
  // Check whether $entity is a block.
  if ($entity instanceof BlockInterface) {
    // Extract the plugin and derivative ID. We merge in an empty array to ensure
    // that the list operation will always be performed on an array containing
    // two elements.
    list($plugin_id, $derivative_id) = explode(':', $entity->getPluginId()) + [NULL, NULL];

    // Check whether the current block is for a widget block plugin.
    if ($plugin_id === 'widget_block') {
      // Build the route parameters.
      $route_params = ['widget_block_config' => $derivative_id];
      // Build the URL operations.
      $options = ['query' => ['destination' => \Drupal::service('path.current')->getPath()]];
      // Build the configure operation definition.
      $operations['configure-widget-block'] = [
        'title' => Drupal::translation()->translate('Configure Widget Block'),
        'url' => Url::fromRoute('entity.widget_block_config.edit_form', $route_params, $options),
        'weight' => 50,
      ];
      // Build the refresh operation definition.
      $operations['refresh-widget-block'] = [
        'title' => Drupal::translation()->translate('Refresh Widget Block'),
        'url' => Url::fromRoute('entity.widget_block_config.refresh_form', $route_params, $options),
        'weight' => 51,
      ];
      // Build the invalidate operation definition.
      $operations['invalidate-widget-block'] = [
        'title' => Drupal::translation()->translate('Invalidate Widget Block'),
        'url' => Url::fromRoute('entity.widget_block_config.invalidate_form', $route_params, $options),
        'weight' => 52,
      ];
    }
  }

  return $operations;
}

/*
 * Batch related helper functions.
 */

/**
 * Batch API related callback which is invoked when operation should be performed.
 *
 * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
 *   An instance of WidgetBlockConfigInterface.
 * @param \Drupal\Core\Language\LanguageInterface $language
 *   An instance of LanguageInterface.
 * @param bool $forced
 *   Flag which indicates whether refresh should be forced.
 * @param array $context
 *   An associative array which contains the Batch related context.
 */
function _widget_block_batch_refresh_operation(WidgetBlockConfigInterface $config, LanguageInterface $language, $forced, array &$context) {
  // Allow the backend to refresh the widget block using given configuration and language.
  $result = \Drupal::service('widget_block.backend')->refresh($config, $language, $forced);
  // Save the result in the batch context.
  $context['results'][] = [ 
    'config' => $config,
    'language' => $language,
    'result' => $result,
  ];
  // Notify user about the progress.
  $context['message'] = Drupal::translation()->translate('Refreshed Widget Block "@id" for language "@language".', [
    '@id' => $config->id(),
    '@language' => $language->getName(),
  ]);
}

/**
 * Batch API related callback which is invoked when refresh operations have been performed.
 *
 * @param bool $success
 *   Flag which indicates whether no fatal PHP errors have been encountered.
 * @param array $results
 *   An associative array which contains the batch operation results.
 * @param array $operations
 *   An array which contains the executed batch operations.
 */
function _widget_block_batch_refresh_finished($success, $results, $operations) {
  // Filter the results for only refreshed widget block configurations.
  $successful_results = array_filter($results, function ($item) {
    return $item['result'];
  });
  // Translate the batch summary.
  $message = Drupal::translation()->translate('Widget Blocks refreshed: @count of @total', [
    '@count' => count($successful_results),
    '@total' => count($results),
  ]);
  // Show summary of the batch operations.
  drupal_set_message($message);
}

/**
 * Batch API related callback which is invoked when operation should be performed.
 *
 * @param \Drupal\widget_block\Entity\WidgetBlockConfigInterface $config
 *   An instance of WidgetBlockConfigInterface.
 * @param \Drupal\Core\Language\LanguageInterface $language
 *   An instance of LanguageInterface.
 * @param bool $forced
 *   Flag which indicates whether refresh should be forced.
 * @param array $context
 *   An associative array which contains the Batch related context.
 */
function _widget_block_batch_invalidate_operation(WidgetBlockConfigInterface $config, LanguageInterface $language, array &$context) {
  // Allow the backend to refresh the widget block using given configuration and language.
  $result = \Drupal::service('widget_block.backend')->invalidate($config, $language);
  // Save the result in the batch context.
  $context['results'][] = [ 
    'config' => $config,
    'language' => $language,
    'result' => $result,
  ];
  // Notify user about the progress.
  $context['message'] = Drupal::translation()->translate('Invalidated Widget Block "@id" for language "@language".', [
    '@id' => $config->id(),
    '@language' => $language->getName(),
  ]);
}

/**
 * Batch API related callback which is invoked when invalidate operations have been performed.
 *
 * @param bool $success
 *   Flag which indicates whether no fatal PHP errors have been encountered.
 * @param array $results
 *   An associative array which contains the batch operation results.
 * @param array $operations
 *   An array which contains the executed batch operations.
 */
function _widget_block_batch_invalidate_finished($success, $results, $operations) {
  // Filter the results for only refreshed widget block configurations.
  $successful_results = array_filter($results, function ($item) {
    return $item['result'];
  });
  // Translate the batch summary.
  $message = Drupal::translation()->translate('Widget Blocks invalidated: @count of @total', [
    '@count' => count($successful_results),
    '@total' => count($results),
  ]);
  // Show summary of the batch operations.
  drupal_set_message($message);
}

