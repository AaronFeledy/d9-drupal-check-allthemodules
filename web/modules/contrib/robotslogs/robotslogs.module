<?php

/**
 * @file
 * Description.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\robotslogs\Controller\RobotslogsController;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_form_alter().
 *
 * Load the current module by default or restore the asked version.
 */
function robotslogs_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'robotstxt_admin_settings') {
    $restore_id = '';
    $form['#submit'][''] = '_robotslogs_settings_submit';
    $view = _robotslogs_view();

    $form['fieldset']['cancel'] = [
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#executes_submit_callback' => TRUE,
      '#submit' => ['my_custom_cancel'],
      '#weight' => 1000,
    ];
    $form['robots_logs']['#markup'] = '<div class="robots-logs">' . $view . '</div>';
    if (isset($_GET['restore_id'])) {
      $restore_id = Xss::filter($_GET['restore_id']);
      $form['robotstxt_content']['#default_value'] = RobotslogsController::robotslogsFileRestore($restore_id);
    }
  }
}

/**
 * Submit action when robots admin settings form is saved.
 *
 * @param object $form
 *   The $form to check.
 * @param object $form_state
 *   The $form_state to check.
 */
function _robotslogs_settings_submit($form, FormStateInterface $form_state) {
  $db = \Drupal::database();
  drupal_get_messages('warning');
  $user = \Drupal::currentUser();
  $uid = $user->id();
  $modified_on = time();
  $robotstxt = $form_state->getValue('robotstxt_content');
  $restore_id = Xss::filter($_GET['restore_id']);
  if (empty($restore_id)) {
    $status = $db->insert('robotslogs')
      ->fields([
        'uid' => $uid,
        'modified_on' => $modified_on,
        'content' => $robotstxt,
        'comment' => '-',
      ]
     )
      ->execute();
  }
  else {
    $message = 'Copy of Entry Id ' . $restore_id;
    $status = $db->insert('robotslogs')
      ->fields([
        'uid' => $uid,
        'modified_on' => $modified_on,
        'content' => $robotstxt,
        'comment' => $message,
      ]
     )
      ->execute();
  }
  if ($status < 0) {
    drupal_set_message(t('Error while saving robots.txt log'), 'error');
  }
  else {
    drupal_set_message(t('Successfully saved'), 'status');
  }
  $response = new RedirectResponse('/admin/config/search/robotstxt');
  $response->send();
}

/**
 * On Cancel Action.
 */
function my_custom_cancel() {
  $response = new RedirectResponse('/admin/config/search/robotstxt');
  $response->send();
}

/**
 * Displays recent logs of users who accessed the robots.txt.
 */
function _robotslogs_view() {
  $db = \Drupal::database();
  $default_count = 10;
  $output = '';
  $headers = [
    [
      'data' => "Id",
      'field' => "rl.id",
      'style' => ['font-weight:bold;'],
    ],
    [
      'data' => "User name",
      'style' => ['font-weight:bold;'],
      'field' => 'ufd.name',
    ],
    [
      'data' => "Modified On",
      'style' => ['font-weight:bold;'],
      'field' => 'rl.modified_on',
      'sort' => 'desc',
    ],
    [
      'data' => "Download",
      'style' => ['font-weight:bold;'],
    ],
    [
      'data' => "Restore View",
      'style' => ['font-weight:bold;'],
    ],
    [
      'data' => "Comment",
      'style' => ['font-weight:bold;'],
    ],
  ];

  $query = $db->select('robotslogs', 'rl');
  $query->fields('rl');
  $query->leftJoin('users_field_data', 'ufd', 'rl.uid = ufd.uid');
  $query->fields('ufd', ['name']);
  $table_sort = $query->extend('Drupal\Core\Database\Query\TableSortExtender')->orderByHeader($headers);
  $pager = $table_sort->extend('Drupal\Core\Database\Query\PagerSelectExtender')->limit($default_count);
  $result = $pager->execute();
  $result = $query->execute()
    ->fetchAll();

  $rows = [];
  if (is_array($result) && count($result) > 0) {
    foreach ($result as $value) {
      $rows[] = [
        $value->id,
        $value->name,
        date('l, Y-m-d g:i a', $value->modified_on),
        Link::fromTextAndUrl(t('Downlaod'), Url::fromRoute('robotslogs.robots-file-revision', ['id' => $value->id], ['attributes' => ['class' => 'download-icon', 'title' => 'Click to Downlaod this version']]))->toString(),
        Link::fromTextAndUrl(t('Restore'), Url::fromRoute('robotstxt.admin_settings_form',
          [], [
          'attributes' => [
          'class' => 'restore-icon',
          'title' => 'Click to view version and Save Configuration to restore'
          ],
          'query' => [
          'restore_id' => $value->id
          ]
          ]
          )
        )->toString(),
        $value->comment,
      ];
    }
  }
  $output .= '<div class = "module-title"><h1>Log Entries</h1></div>';
  $output .= Link::fromTextAndUrl(t('Restore Current Version'), Url::fromRoute('robotstxt.admin_settings_form', [], ['attributes' => ['class' => 'restore-current-version']]))->toString();

  $build['view_table'] = [
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  ];
  $build['pager'] = [
    '#type' => 'pager',
  ];

  $output .= \Drupal::service('renderer')->render($build, FALSE);
  return $output;
}

/**
 * Implements robotslogs_page_attachments().
 */
function robotslogs_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'robotslogs/robotslogs.image';
}
