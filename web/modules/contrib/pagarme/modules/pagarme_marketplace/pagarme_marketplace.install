<?php

/**
 * @file
 * Install, update, and uninstall functions for the pagarme_marketplace module.
 */

/**
 * Implements hook_uninstall().
 *
 * It's good to clean up after ourselves.
 *
 * @ingroup pagarme_marketplace
 */
function pagarme_marketplace_uninstall() {
  db_drop_table('pagarme_recipients');
  db_drop_table('pagarme_splits');
  db_drop_table('pagarme_split_rules');
}

/**
 * Implements hook_schema().
 *
 * @ingroup pagarme_marketplace
 */
function pagarme_marketplace_schema() {
  $schema['pagarme_recipients'] = array(
    'description' => 'Pagar.me recipients.',
    'fields' => array(
      'recipient_id' => array(
        'description' => 'Serial numeric ID the local database.',
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'pagarme_id' => array(
        'description' => 'The Pagar.me recipient unique id.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'company' => array(
        'description' => 'The Pagar.me company.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'transfer_enabled' => array(
        'description' => 'Flag indicating whether the recipient can receive payments automatically.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'transfer_interval' => array(
        'description' => 'Frequency at which the recipient will be paid.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'transfer_day' => array(
        'description' => 'Day on which the recipient will be paid.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'bank_id' => array(
        'description' => 'Identifier of a previously created bank account.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'bank_code' => array(
        'description' => 'Recipient Bank Code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Bank account type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'legal_name' => array(
        'description' => 'Full name or business name of recipient.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'document_number' => array(
        'description' => 'CPF or CNPJ of the recipient.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'agencia' => array(
        'description' => "Recipient's account agency.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'agencia_dv' => array(
        'description' => 'Recipient agency verifier digit.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'conta' => array(
        'description' => "Recipient's bank account number.",
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'conta_dv' => array(
        'description' => 'Recipient account verifier digit.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the POSTback was received.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the POSTback was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'archived' => array(
        'description' => 'Boolean indicating whether the record has been archived.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('recipient_id'),
    'indexes' => array(
      'company' => array('company'),
    ),
  );

  $schema['pagarme_splits'] = array(
    'description' => 'The base table for split.',
    'fields' => array(
      'split_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'The internal identifier for any split.',
      ),
      'product_variation_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'company' => array(
        'description' => 'The Pagar.me company.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'split_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'amount' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'liable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ),
      'charge_processing_fee' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the POSTback was received.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the POSTback was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Whether the split is enabled.',
      ),
    ),
    'primary key' => array('split_id'),
    'indexes' => array(
      'product_variation_id' => array('product_variation_id'),
      'company' => array('company'),
    ),
    'foreign keys' => array(
      'product_variation_id' => array(
        'table' => 'commerce_product_variation',
        'columns' => array('variation_id' => 'product_variation_id'),
      ),
    ),
  );

  $schema['pagarme_split_rules'] = array(
    'description' => 'The base table for split rules.',
    'fields' => array(
      'split_rule_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'The internal identifier for any split rules.',
      ),
      'split_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'recipient_id' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'liable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ),
      'charge_processing_fee' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      ),
    ),
    'primary key' => array('split_rule_id'),
    'indexes' => array(
      'split_id' => array('split_id'),
      'recipient_id' => array('recipient_id'),
    ),
    'foreign keys' => array(
      'split_id' => array(
        'table' => 'pagarme_splits',
        'columns' => array('split_id' => 'split_id'),
      ),
      'recipient_id' => array(
        'table' => 'pagarme_recipients',
        'columns' => array('recipient_id' => 'recipient_id'),
      ),
    ),
  );

  return $schema;
}