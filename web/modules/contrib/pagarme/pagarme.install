<?php

/**
 * @file
 * Install and uninstall functions for the pagarme module.
 *
 * This file contains the functions required to perform install and
 * uninstall operations.
 */

/**
 * Implements hook_uninstall().
 *
 * It's good to clean up after ourselves.
 *
 * @ingroup pagarme
 */
function pagarme_uninstall() {
  db_drop_table('pagarme_postback');
}

/**
 * Implements hook_schema().
 *
 * @ingroup pagarme
 */
function pagarme_schema() {
  $schema = array();

  $schema['pagarme_postback'] = array(
    'description' => 'Stores processed POSTback.',
    'fields' => array(
      'ppid' => array(
        'description' => 'Serial numeric ID the local database.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'postback_id' => array(
        'description' => 'The POSTback transaction ID.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'amount' => array(
        'description' => 'The gross payment amount.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pagarme_id' => array(
        'description' => 'The Pagar.me transaction unique id.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'payment_status' => array(
        'description' => 'The Pagar.me payment status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'payment_method' => array(
        'description' => 'The Pagar.me payment method.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'consumer_email' => array(
        'description' => 'The e-mail of the payer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'order_id' => array(
        'description' => 'The order ID the payment belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'payment_id' => array(
        'description' => 'The payment ID the payment belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the POSTback was received.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the POSTback was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'test_postback' => array(
        'description' => 'Boolean indicating whether or not this was a test POSTback sent by the TEST.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('ppid'),
    'foreign keys' => array(
      'order_id' => array(
        'table' => 'commerce_order',
        'columns' => array('order_id' => 'order_id'),
      ),
      'payment_id' => array(
        'table' => 'commerce_payment_transaction',
        'columns' => array('payment_id' => 'payment_id'),
      ),
    ),
    'indexes' => array(
      'postback_id' => array('postback_id'),
    ),
    'indexes' => array(
      'pagarme_id' => array('pagarme_id'),
    ),
  );

  return $schema;
}
