<?php

use Drupal\jvector\Jvector;

/**
 *  Implements hook_element_info_alter().
 */
function jvector_element_info_alter(&$type) {
  $type['select']['#process'][] = 'jvector_element_process_callback';
}

/**
 * Callback for Jvector form element.
 * Prepares the form element for display.
 */
function jvector_element_process_callback($element, $form_state, &$form) {
  if (isset($element['#jvector']) && $element['#type'] == 'select') {

    // Check if entity, or a pair of settings.
    if ($element['#jvector'] instanceof Drupal\jvector\Entity\Jvector) {
      $entity = $element['#jvector'];
    }
    elseif (isset($element['#jvector']['id'])) {
      $entity = entity_load('jvector', $element['#jvector']['id']);
    }
    else {
      return $element;
    };

    // Set config ID.
    if (isset($element['#jvector_config']) && !empty($element['#jvector_config'])) {
      $config_id = $element['#jvector_config'];
    }
    else {
      $config_id = 'default';
    };

    //Instance ID & Entity ID.
    $instance_id = $element['#id'];
    $entity_id = $entity->id;

    // Generic trigger
    $element['#attributes']['class'][] = 'jvector-process jvector-process-' . $instance_id;

    // Jvector-map: Identifies map to use
    $element['#attributes']['class'][] = 'jvector-maptype-' . $entity->id;

    // Settings: defines reusable per-map settings
    $element['#attributes']['class'][] = 'jvector-settings-' . $config_id;

    $element['#attached']['library'][] = 'jvector/jvector.admin';

    $settings = array();
    if (isset($entity->customconfig[$config_id])) {
      $settings[$config_id] = $entity->customconfig[$config_id];
    }
    else {
      $settings = $entity->custom_defaults();
    }
    $element['#attached']['drupalSettings']['jvectorSettings'][$entity_id] = $settings;
    $element['#attached']['drupalSettings']['jvectors'][$entity_id] = jvector_rawmap($entity);
  }
  return $element;
}



/**
 *  Create a raw map for the jvectors.
 *  These are usually output as JS files, we want Drupal to create them.
 *  @todo Retrieve from yaml settings instead.
 */
function jvector_rawmap($jvector) {
  $config = $jvector->getJvectorConfigSet('default');
  $height = $config['behavior']['height'];
  $width = $config['behavior']['width'];
  // Set up the array needed.
  $id = $jvector->id;
  $return = (object) array(
    'insets' => array(
      (object) array(
//        'width' => $jvector->display['width'] - 100,
        'top' => 0,
        //'height' => $jvector->display['height'] - 100,
        'bbox' => array(
          (object) array(
            'y' => -12639051.77829853,
            'x' => -19971805.562327016,
          ),
          (object) array(
            'y' => 6891176.947713086,
            'x' => -19971805.562327016
          ),
        ),
        'left' => 0,
      ),
    ),
    'paths' => $jvector->paths,
    'projection' => (object) array(
      'type' => 'miller',
      'centralMeridian' => 11.5,
    ),
    // @todo Do we need these params?
    'width' => $width / 1.5,
    'height' => $height / 1.5
  );
  return $return;
}

/**
 * Implements hook_field_widget_third_party_settings_form
 */
function jvector_field_widget_third_party_settings_form($plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $form_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $element = array();
  $allowed = array('options_select');
  if (in_array($plugin->getPluginId(), $allowed)) {
    $entity_type = 'jvector';
    $options = array();
    $jvectors = entity_load_multiple($entity_type);
    foreach ($jvectors AS $jvector_id => $jvector) {
      if (is_array($jvector->colorconfig)) {
        $colorconfigs = $jvector->colorconfig;
        if (!empty($colorconfigs)) {
          foreach ($jvector->colorconfig AS $colorconfig_id => $colorconfig) {
            //@todo Color config goes in here!
          }
        };
      }
      $options[$jvector_id] = $jvector->label . " -> " . t('Default');
    }

    $element['jvector'] = array(
      '#type' => 'select',
      '#title' => t('Jvector settings'),
      '#default_value' => $plugin->getThirdPartySetting('jvector', 'jvector'),
      '#options' => $options,
      '#empty_option' => t('- None -'),
      '#description' => t('Optionally choose a Jvector and a color scheme to replace the original select field'),
    );

  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function jvector_field_widget_settings_summary_alter(&$summary, $context) {
  // Append a message to the summary when an instance of foo_widget has
  // mysetting set to TRUE for the current view mode.
  $allowed = array('options_select');
  if (in_array($context['widget']->getPluginId(), $allowed)) {
    $settings = $context['widget']->getThirdPartySetting('jvector', 'jvector');
    if ($context['widget']->getThirdPartySetting('jvector', 'jvector')) {
      $summary[] = t('Jvector enabled: @jvector', array(
        '@jvector' => $settings,
      ));
    }
    //@todo Check here that key mappings between field & jvector corresponds.
  }
}


/**
 * Implements hook_field_widget_form_alter().
 */
function jvector_field_widget_form_alter(&$element, $form_state, $context) {
  $allowed = array('options_select');
  if (in_array($context['widget']->getPluginId(), $allowed)) {
    $jvector_id = $context['widget']->getThirdPartySetting('jvector', 'jvector');
    if ($jvector = entity_load('jvector', $jvector_id)) {
      $element['#jvector'] = $jvector;
    }
  }
}
