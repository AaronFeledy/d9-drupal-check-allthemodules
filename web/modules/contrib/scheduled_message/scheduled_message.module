<?php

/**
 * @file
 * Contains scheduled_message.module.
 */

use Drupal\Core\Config\Entity\ConfigEntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function scheduled_message_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the scheduled_message module.
    case 'help.page.scheduled_message':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Schedules messages for delivery, providing a plugin for specifying these.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function scheduled_message_cron() {
  $last_run = \Drupal::state()->get('scheduled_message_cron_last', strtotime('yesterday'));
  if ($last_run + 7200 < time()) {
    \Drupal::service('scheduled_message.queue_manager')->queueMessages();
    \Drupal::state()->set('scheduled_message_cron_last', time());
  }
}

/**
 * Implements hook_entity_update().
 */
function scheduled_message_entity_update(EntityInterface $entity) {
  // Check to see if entity has an entityType, and if it does, whether it has a
  // scheduled message plugin.
  $entity_type = $entity->getEntityTypeId();
  if ($entity instanceof ContentEntityInterface) {
    $bundle = $entity->bundle();
    if ($config_type = \Drupal::config('scheduled_message.entity_type')->get('entity_type.' . $entity_type . '.' . $bundle)) {
      // Find the actual type...
      foreach ($entity->referencedEntities() as $candidate) {
        if ($candidate->getEntityTypeId() == $config_type) {
          // We found it...
          \Drupal::service('scheduled_message.queue_manager')
            ->queueEntity($entity, $candidate);
          break;
        }
      }
    }
  }
  elseif ($entity instanceof ConfigEntityInterface) {
    $bundle = $entity->id();
    if ($config_type = \Drupal::config('scheduled_message.entity_type')->get('entity_type.' . $entity_type . '.' . $bundle)) {
      /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
      $entityTypeManager = \Drupal::service('entity_type.manager');
      $storage = $entityTypeManager->getStorage($config_type);
      $entities = $storage->loadMultiple();
      \Drupal::service('scheduled_message.queue_manager')
        ->queueEntities($entities, $config_type, $entity);
    }
  }
}
