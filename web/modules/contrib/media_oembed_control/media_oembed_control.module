<?php

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\media\IFrameMarkup;

/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * @param $summary
 * @param $context
 */
function media_oembed_control_field_formatter_settings_summary_alter(&$summary, $context) {
  $settings = $context['formatter']->getThirdPartySettings('media_oembed_control');

  // Bail if no modal field formatter settings found.
  if (!$settings) {
    return;
  }

  $options = implode(', ', array_map(function($value, $key) {
    return $key . ': ' . $value;
  }, $settings, array_keys($settings)));
  $summary[] = [
    '#markup' => t('Oembed control: @options', ['@options' => $options])
  ];
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * @param \Drupal\Core\Field\FormatterInterface $plugin
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 * @param $view_mode
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function media_oembed_control_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element = [];

  if ($plugin->getPluginId() == 'oembed') {
    // We initialize default settings.
    if (!$settings = $plugin->getThirdPartySettings('media_oembed_control')) {
      $settings = [
        'video_autoplay' => FALSE,
      ];
    }

    $element['video_autoplay'] = [
      '#type' => 'checkbox',
      '#title' => t('Autoplay video'),
      '#default_value' => $settings['video_autoplay'],
      '#description' => t('Attempts to autoplay embedded videos.'),
    ];

    // We clean up empty field values (courtesy of linked_field module).
    $element['#element_validate'][] = 'media_oembed_control_form_element_validate';
  }

  return $element;
}

/**
 * We misuse the validation handler to clear out disabled values to keep
 * the third party settings array clean.
 *
 * @param $element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function media_oembed_control_form_element_validate($element, FormStateInterface $form_state) {
  $parents = $form_state->getTriggeringElement()['#parents'];
  $parents = array_slice($parents, 0, 3);
  $settings = \Drupal\Component\Utility\NestedArray::getValue(
    $form_state->getValues(),
    $parents
  );

  if (!isset($settings['third_party_settings']['media_oembed_control'])) {
    return;
  }
  // Remove third party settings if not activated.
  $active_settings = array_filter($settings['third_party_settings']['media_oembed_control'], function($value) {
    return $value == TRUE;
  });
  if (empty($active_settings)) {
    unset($settings['third_party_settings']['media_oembed_control']);
    // Set adjusted settings back into form state.
    $form_state->setValue($parents, $settings);
  }
}

/**
 * @param $variables
 */
function media_oembed_control_oembed_formatter_context_alter(array &$context, \Drupal\Core\Field\FormatterInterface $plugin, \Drupal\media\OEmbed\Resource $resource) {
  $settings = $plugin->getThirdPartySettings('media_oembed_control');
  $context['provider_name'] = $resource->getProvider()->getName();
  if (isset($settings['video_autoplay']) && $settings['video_autoplay']) {
    $context['video_autoplay'] = $settings['video_autoplay'];
  }
}

/**
 * @param $variables
 */
function media_oembed_control_preprocess_media_oembed_iframe(&$variables) {
  if (isset($variables['context']) && $variables['context']['provider_name'] == 'YouTube') {
    /** @var \Drupal\media\IFrameMarkup $media */
    $media = $variables['media'];
    $markup = $media->__toString();
    // We enable the Javascript API for YouTube.
    $markup = preg_replace('#\<iframe(.*?)\ssrc\=\"(.*?)\"(.*?)\>#i', '<iframe$1 src="$2&enablejsapi=1"$3>', $markup);

    // We add a classid to the element.
    if (isset($variables['context']['video_autoplay'])) {
      // We add the autoplay parameter.
      $markup = preg_replace('#\<iframe(.*?)\ssrc\=\"(.*?)\"(.*?)\>#i', '<iframe$1 src="$2&autoplay=1"$3>', $markup);
    }

    $variables['media'] = IFrameMarkup::create($markup);
  }
}
