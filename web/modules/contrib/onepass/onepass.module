<?php

/**
 * @file
 * Provide integration with OnePass service.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function onepass_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'onepass.admin_settings':
      $output = '<p>' . t('Please enter API information from Your @host account:', array('@host' => 'https://1pass.me'));
      $output .= '<ul>';
      $output .= '<li>' . t('One Pass host: Host of API js file (dev: @dev, live: @live)', array('@dev' => 'https://demo.1pass.me', '@live' => 'https://1pass.me')) . '</li>';
      $output .= '<li>' . t('One Pass publishable key: copy/paste it from Your @host account', array('@host' => 'https://1pass.me')) . '</li>';
      $output .= '<li>' . t('One Pass secret key: copy/paste it from Your @host account', array('@host' => 'https://1pass.me')) . '</li>';
      $output .= '<li>' . t('One Pass paywall: Enabled (checked) Disabled (not checked) OnePass button display and content truncation') . '</li>';
      $output .= '</ul>';
      $output .= '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function onepass_theme($existing, $type, $theme, $path) {
  return array(
    'onepass_shortcode_placeholder' => array(
      'variables' => array(
        'url' => '',
        'title' => '',
        'unique_identifier' => '',
        'ts' => '',
        'publisher_id' => '',
        'publishable_key' => '',
        'hash' => '',
        'author_name' => '',
        'host' => '',
      ),
    ),
    'views_view_onepassatoms' => array(
      'variables' => array(
        'view' => NULL,
        'options' => array(),
        'rows' => array(),
      ),
    ),
    'onepassatoms_pager' => array(
      'variables' => array(
        'pager' => array(),
      ),
    ),
    'onepassatoms_node' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function onepass_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();

  if ($user->hasPermission('setup onepass content type')) {
    $onepass = \Drupal::service('onepass.service');

    $form['onepass'] = array(
      '#title' => t('OnePass'),
      '#type' => 'details',
      '#group' => 'additional_settings',
      '#weight' => 100,
      '#attached' => array(
        'library' => array(
          'onepass/onepass.nodeform',
        ),
      ),
    );
    $form['onepass']['onepass_node'] = array(
      '#type' => 'radios',
      '#title' => t('OnePass integration'),
      '#default_value' => $onepass->bundleIntegrationEnabled($form_state->getFormObject()->getEntity()->Id()),
      '#options' => array(
        0 => t('Disabled'),
        1 => t('Enabled'),
      ),
    );
    $form['actions']['submit']['#submit'][] = 'onepass_form_node_type_form_submit';
  }
}

/**
 * Form submission handler for node type Enable OnePass integration.
 */
function onepass_form_node_type_form_submit($form, FormStateInterface $form_state) {

  \Drupal::service('onepass.service')->manageBundleIntegration(
    $form_state->getFormObject()->getEntity()->get('type'),
    $form_state->getValue('onepass_node')
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function onepass_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $onepass = \Drupal::service('onepass.service');

  if ($onepass->bundleIntegrationEnabled($form_state->getFormObject()->getEntity()->bundle())) {
    $relation_exists = $onepass->relationExists($form_state->getFormObject()->getEntity());

    $form['onepass'] = array(
      '#title' => t('OnePass'),
      '#description' => t(
        'When "Enabled" selected: @code placeholder can be used for any text field this node.',
        array('@code' => $onepass->getShortCode())
      ),
      '#type' => 'details',
      '#group' => 'advanced',
      '#weight' => 100,
    );
    $form['onepass']['onepass_node'] = array(
      '#type' => 'radios',
      '#title' => t('OnePass integration'),
      '#default_value' => $relation_exists,
      '#options' => array(
        0 => t('Disabled'),
        1 => t('Enabled'),
      ),
    );
    $form['actions']['publish']['#submit'][] = 'onepass_form_node_form_submit';
    $form['actions']['unpublish']['#submit'][] = 'onepass_form_node_form_submit';
  }
}

/**
 * Form submission handler for Enable OnePass integration for specific node.
 */
function onepass_form_node_form_submit($form, FormStateInterface $form_state) {

  \Drupal::service('onepass.service')->manageRelation(
    $form_state->getFormObject()->getEntity(),
    $form_state->getValue('onepass_node')
  );
}

/**
 * Implements hook_entity_extra_field_info().
 */
function onepass_entity_extra_field_info() {

  $extra = array();
  $onepass = \Drupal::service('onepass.service');

  foreach (NodeType::loadMultiple() as $bundle) {
    if ($onepass->bundleIntegrationEnabled($bundle->Id())) {
      $extra['node'][$bundle->Id()]['display'][$onepass->getFieldName()] = array(
        'label' => t('OnePass button'),
        'description' => t(
          'All content located below this button will be hidden.'
        ),
        'weight' => 1000,
        'visible' => TRUE,
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function onepass_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  $onepass = \Drupal::service('onepass.service');

  if ($onepass->processingNeeded($node, $display->getOriginalMode())) {
    $build[$onepass->getFieldName()] = $onepass->getShortCodeReplacement($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function onepass_node_view_alter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
  $onepass = \Drupal::service('onepass.service');

  if ($onepass->processingNeeded($node, $display->getOriginalMode()) || $onepass->trimNeeded($node)) {
    $onepass->prepareDisplay($build);
    $onepass->cleanupTrimMark($node);
  }
  else {
    $onepass->removeShortCode($build);
  }
}

/**
 * Prepares variables for onepassatoms_node template.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - node: The node object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_onepassatoms_node(&$variables) {
  unset(
    $variables['elements']['created'],
    $variables['elements']['uid'],
    $variables['elements']['title'],
    $variables['elements']['links']
  );
  $variables += array('content' => array());
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
