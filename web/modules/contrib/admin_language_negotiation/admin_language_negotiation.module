<?php

/**
 * @file
 * Contains admin_language_negotiation.module.
 */

use \Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\language\ConfigurableLanguageManagerInterface;

/**
 * Implements hook_help().
 */
function admin_language_negotiation_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'help.page.admin_language_negotiation') {
    // Main module help for the admin_language_negotiation module.
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' .
               t('Gives an administration language selection based on a user role and provides a new administration language detection mode based on a permission') .
               '</p>';
    return $output;
  }
}

/**
 * Shows the 'Administration pages language' dropdown for users
 * that have the permission provided by this module.
 *
 * Implements hook_form_alter().
 */
function admin_language_negotiation_form_user_form_alter(&$form, FormStateInterface $form_state) {
  //  $user = \Drupal::routeMatch()->getParameter('user');
  /** @var $user \Drupal\user\Entity\User */
  $user = $form_state->getFormObject()->getEntity();
  if ($user instanceof User && isset($form['language']['preferred_admin_langcode'])
      && $form['language']['preferred_admin_langcode']['#access'] === FALSE
  ) {
    $language_manager = \Drupal::languageManager();
    $language_interface = $language_manager->getCurrentLanguage();
    $register = $user->isAnonymous();

    $show_admin_language = FALSE;
    if ($language_manager instanceof ConfigurableLanguageManagerInterface
        && $user->hasPermission('admin_language_negotiation detection')
    ) {
      // $negotiator = $language_manager->getNegotiator();
      // $show_admin_language = $negotiator->isNegotiationMethodEnabled(AdminLanguageNegotiationUserPermission::METHOD_ID);
      $show_admin_language = TRUE;
    }
    $user_preferred_admin_langcode = $register ? $language_interface->getId() : $user->getPreferredAdminLangcode();

    $form['language']['preferred_admin_langcode'] = [
      '#type'          => 'language_select',
      '#title'         => t('Administration pages language'),
      '#languages'     => LanguageInterface::STATE_CONFIGURABLE,
      '#default_value' => $user_preferred_admin_langcode,
      '#access'        => $show_admin_language,
      '#empty_option'  => t('- No preference -'),
      '#empty_value'   => '',
    ];
  }
}
