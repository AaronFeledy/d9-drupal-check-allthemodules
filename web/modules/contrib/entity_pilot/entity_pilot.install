<?php

/**
 * @file
 * Contains install and update hooks.
 */

use Defuse\Crypto\Encoding;
use Defuse\Crypto\Crypto;
use Defuse\Crypto\Key;
use Drupal\Core\Url;

/**
 * Implements hook_requirements().
 */
function entity_pilot_requirements($phase) {
  // Test for PHP extensions.
  $requirements['openssl_extension'] = [
    'title' => t('Open SSL extension'),
  ];
  if (!extension_loaded('openssl')) {
    $requirements['openssl_extension']['value'] = t('Disabled');
    $requirements['openssl_extension']['severity'] = REQUIREMENT_ERROR;
    $requirements['openssl_extension']['description'] = t('Entity Pilot requires the <a href="http://php.net/manual/en/openssl.setup.php">openssl extension</a>.');
  }
  else {
    $requirements['openssl_extension']['value'] = t('Enabled, required by Entity Pilot module.');
  }
  if (!class_exists(Crypto::class)) {
    $requirements['crypto_library'] = [
      'title' => t('defuse/php-encryption library'),
      'description' => t('Entity Pilot requires the defuse/php-encryption library. Please use <a href="https://www.drupal.org/node/2405811">composer_manager</a> or another composer strategy to install it.'),
      'severity' => REQUIREMENT_ERROR,
    ];
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function entity_pilot_install() {
  // We use base:/ for URL instead of a route because at time of install, the
  // router has not been rebuild and entity_pilot routes don't exist.
  drupal_set_message(t('Thank you for installing Entity Pilot. <a href=":url">Get started sending and receiving content with Entity Pilot</a>', [
    ':url' => Url::fromUri('base:/admin/structure/entity-pilot', ['query' => ['tour' => 1]])->toString(),
  ]));
}

/**
 * Updates field definitions to add the link_departure field.
 */
function entity_pilot_update_8001() {
  $field_definition = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('ep_arrival')['linked_departure'];
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('linked_departure', 'ep_arrival', 'entity_pilot', $field_definition);
}

/**
 * Updates field definitions to add the field_map field.
 */
function entity_pilot_update_8002() {
  $field_definition = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('ep_arrival')['field_map'];
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('field_map', 'ep_arrival', 'entity_pilot', $field_definition);
}

/**
 * Updates format of encryption key for 2.0.
 */
function entity_pilot_update_8003() {
  $config_factory = \Drupal::configFactory();
  $keys = [];
  foreach ($config_factory->listAll('entity_pilot.account') as $account_config_name) {
    $account = $config_factory->getEditable($account_config_name);

    // Update the key.
    $key = Key::createNewRandomKey();
    $keys[$account->get('id')] = $key->saveToAsciiSafeString();
    $account->set('legacySecret', Encoding::binToHex($account->get('secret')));
    $account->set('secret', $key->saveToAsciiSafeString());
    $account->save(TRUE);
  }

  return t('All of your accounts have had new secrets generated for the new encryption library. Please update you accounts on any additional servers: @keys', [
    '@keys' => array_reduce(array_keys($keys), function ($carry, $key) use ($keys) {
      return $carry . PHP_EOL . sprintf('[%s]: %s', $key, $keys[$key]);
    }, ''),
  ]);
}
