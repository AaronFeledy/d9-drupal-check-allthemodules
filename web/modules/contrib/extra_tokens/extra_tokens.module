<?php

/**
 * @file
 * Contains extra_tokens.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\file\FileInterface;

/**
 * Implements hook_help().
 */
function extra_tokens_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.extra_tokens':
      $text = file_get_contents(dirname(__FILE__) . "/README.txt");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
    default:
  }
}

function extra_tokens_preprocess_commerce_order_receipt(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];
  $user = $order->getBillingProfile()->getOwner();
  $next = '/user/'.$user->id().'/orders';
  $account = new stdClass();
  $account->id = $user->id();
  $account->password = $user->getPassword();
  $account->last_login = '';
  $token = \Drupal\extra_tokens\ZinaDesign\PasswordResetTokenGenerator::make_token($account);
  $uuid = \Drupal\extra_tokens\ZinaDesign\PasswordResetTokenGenerator::urlsafe_b64encode($account->id);
  $next = urlencode($next);
  $link_to_orders = \Drupal::request()->getSchemeAndHttpHost()."/one-time-login/{$uuid}/{$token}?next={$next}";
  $variables['link_to_orders'] = $link_to_orders;
  $order_payment_gateway = $order->get('payment_gateway');
  if (!$order->get('payment_method')->isEmpty()) {
    $variables['payment_method'] = [
      '#markup' => $order_payment_gateway->first()->entity->label(),
    ];
  }
}