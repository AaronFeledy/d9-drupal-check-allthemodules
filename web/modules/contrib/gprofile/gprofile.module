<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\GroupContentType;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\user\Entity\User;

/**
 * Implements hook_ENTITY_TYPE_access() for entity type "user".
 */
function gprofile_user_access(User $entity, $operation, AccountInterface $account) {
  return gprofile_evaluate_access($entity, $operation, $account);
}

/**
 * Implements hook_ENTITY_TYPE_access() for entity type "profile".
 */
function gprofile_profile_access(Profile $entity, $operation, AccountInterface $account) {
  return gprofile_evaluate_access($entity->getOwner(), $operation, $account, $entity->bundle());
}

/**
 * Determines whether a user has view access to another user's profile.
 *
 * @param \Drupal\user\Entity\User $profile_account
 *   The user being accessed.
 * @param string $operation
 *   The operation that is to be performed on $entity.
 * @param \Drupal\user\Entity\User $account
 *   The account trying to access the user.
 * @param string $profile_type
 *   (optional) The profile type being accessed.

 * @return \Drupal\Core\Access\AccessResultInterface
 *  The access result.
 */
function gprofile_evaluate_access(User $profile_account, $operation, AccountInterface $account, $profile_type = NULL) {
  /** @var \Drupal\group\GroupMembershipLoaderInterface $group_membership_loader */
  $group_membership_loader = \Drupal::service('group.membership_loader');

  // Group membership applies only if both users are authenticated.
  if (($operation == 'view') &&
    $account->isAuthenticated() &&
    $profile_account->isAuthenticated() &&
    ($account_memberships = $group_membership_loader->loadByUser($profile_account)) &&
    ($profile_memberships = $group_membership_loader->loadByUser($account))) {
    foreach ($profile_memberships as $profile_membership) {
      // Determine if the currently logged in user is a member of the group.
      foreach ($account_memberships as $account_membership) {
        if ($profile_membership->getGroup()->id() == $account_membership->getGroup()->id() &&
          $account_membership->hasPermission('access member profiles')) {
          $group = $profile_membership->getGroup();
          // If the group has the profile_type field, test its values.
          if ($profile_type && $group->hasField('profile_type')) {
            $profile_match = FALSE;
            foreach ($group->profile_type->getValue() as $item) {
              // Determine whether the field value matches the profile type.
              if ($item['target_id'] === $profile_type) {
                $profile_match = TRUE;
              }
            }
            // If no matching profile type was found, no opinion.
            if (!$profile_match) {
              return AccessResult::neutral();
            }
          }
          return AccessResult::allowed();
        }
      }
    }
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for group_content.
 */
function gprofile_group_content_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $bundle = $entity->bundle();
  // Group membership bundles are named in the form grouptype-group_membership
  // where grouptype is the name of a group type.
  if (strpos($bundle, '-group_membership') > 0) {
    $account = $entity->getEntity();
    profile_user_view($build, $account, $display, $build['#view_mode']);
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function gprofile_entity_extra_field_info() {
  $extra = [];

  // Add each profile type as an extra field for display. Enabled by default.
  foreach (GroupContentType::loadMultiple() as $group_bundle) {
    foreach (ProfileType::loadMultiple() as $profile_bundle) {
      $extra['group_content'][$group_bundle->id()]['display']['profile_' . $profile_bundle->id()] = array(
        'label' => $profile_bundle->label(),
        'description' => t('Display @type profiles', ['@type' => $profile_bundle->label()]),
        'weight' => 10,
        'visible' => TRUE,
      );
    }
  }
  return $extra;
}
