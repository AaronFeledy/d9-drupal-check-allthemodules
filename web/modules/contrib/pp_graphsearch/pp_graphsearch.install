<?php

/**
 * @file
 * Install, update and uninstall functions for the PoolParty GraphSearch module.
 */

/**
 * Implements of hook_schema().
 */
function pp_graphsearch_schema() {
  $schema['pp_graphsearch_rss_shorturls'] = array(
    'description' => 'Table that stores the short URL key and the corresponding search filter for an PP GraphSearch RSS feed.',
    'fields' => array(
      'rsssuid' => array(
        'description' => 'The ID of the RSS short URL.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'short_url' => array(
        'description' => 'The short URL key itself.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'pp_graphsearch_id' => array(
        'description' => 'The ID of the PP GraphSearch configuration entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'filter_string' => array(
        'description' => 'The string of filter parameters.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('rsssuid'),
    'indexes' => array(
      'short_url' => array('short_url'),
    ),
  );

  $schema['pp_graphsearch_search_filters'] = array(
    'description' => 'Table that stores the PP GraphSearch search filters for users',
    'fields' => array(
      'sfid' => array(
        'description' => 'The ID of the search filter.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The ID of a user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pp_graphsearch_id' => array(
        'description' => 'The ID of the PP GraphSearch configuration entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'filter_string' => array(
        'description' => 'The string of filter parameters.',
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ),
      'title' => array(
        'description' => 'The title of the search filter.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'time_interval' => array(
        'description' => 'The interval of the email alert.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'last_email_sent' => array(
        'description' => 'The timestamp of the last sent email alert.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'timestamp' => array(
        'description' => 'The last save timestamp.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('sfid'),
    'indexes' => array(
      'filters' => array('uid', 'pp_graphsearch_id', array('filter_string', 255)),
    ),
  );

  return $schema;
}

/**
 * Adapts the "Facet mode" property for each GraphSearch configuration.
 */
function pp_graphsearch_update_8101() {
  $configs = \Drupal\pp_graphsearch\Entity\PPGraphSearchConfig::loadMultiple();
  /** @var \Drupal\pp_graphsearch\Entity\PPGraphSearchConfig $config */
  foreach ($configs as $config) {
    $configuration = $config->getConfig();
    if (!empty($configuration['facets_to_show'])) {
      foreach ($configuration['facets_to_show'] as &$facet) {
        if (is_array($facet) && isset($facet['aggregated'])) {
          $facet['facet_mode'] = $facet['aggregated'] ? 'aggregate' : 'list';
          $facet['tree_depth'] = 1;
          unset($facet['aggregated']);
        }
      }
    }
    $config->setConfig($configuration);
    $config->save();
  }

  return t('PoolParty GraphSearch configurations updated.');
}

/**
 * Changes the "project_id" properties to "search_space_id" properties in all
 * GraphSearch configurations.
 */
function pp_graphsearch_update_8102() {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('pp_graphsearch.pp_graphsearch.') as $graphsearch_config_id) {
    $graphsearch_editable = $config_factory->getEditable($graphsearch_config_id);
    $graphsearch_config_data = $graphsearch_editable->getRawData();
    if (isset($graphsearch_config_data['project_id'])) {
      $graphsearch_config_data['search_space_id'] = $graphsearch_config_data['project_id'];
      unset($graphsearch_config_data['project_id']);
      $graphsearch_editable->setData($graphsearch_config_data);
      $graphsearch_editable->save();
    }
  }

  return t('Replaced the old "project_id" column with the new "search_space_id" column in all GraphSearch configurations.');
}

/**
 * Add a new "searchable" parameter for every facet in each GraphSearch
 * configuration.
 */
function pp_graphsearch_update_8103() {
  $configs = \Drupal\pp_graphsearch\Entity\PPGraphSearchConfig::loadMultiple();
  /** @var \Drupal\pp_graphsearch\Entity\PPGraphSearchConfig $config */
  foreach ($configs as $config) {
    $configuration = $config->getConfig();
    if (!empty($configuration['facets_to_show'])) {
      foreach ($configuration['facets_to_show'] as &$facet) {
        if (!isset($facet['searchable'])) {
          $facet['searchable'] = FALSE;
        }
      }
    }
    $config->setConfig($configuration);
    $config->save();
  }

  return t('PoolParty GraphSearch configurations updated.');
}