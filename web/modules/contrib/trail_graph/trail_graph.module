<?php

/**
 * @file
 * Contains trail_graph.module.
 */

use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\Component\Utility\Html;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function trail_graph_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the trail_graph module.
    case 'help.page.trail_graph':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides trail editing options.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_HOOK() for views-view-trail-graph-content templates.
 */
function template_preprocess_views_view_trail_graph_content(&$variables) {
  $variables['#attached']['library'][] = 'trail_graph/trail_graph';
  $variables['#attached']['drupalSettings']['trail_graph']['data'][time()] = $variables['view']->trail_data;
}

/**
 * Implements hook_theme().
 */
function trail_graph_theme($existing, $type, $theme, $path) {
  return [
    'views_view__style__trail_graph' => [],
    'trail_graph_sidebar' => [
      'variables' =>
        [
          'view' => NULL,
          'form' => NULL,
          'first_tab' => '',
          'second_tab' => '',
        ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function trail_graph_theme_suggestions_views_view(array $variables) {
  return ['views_view__style__' . $variables['view']->style_plugin->getPluginId()];
}

/**
 * Prepares variables for view templates.
 *
 * Default template: views-view--style--trail-graph.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The ViewExecutable object.
 */
function template_preprocess_views_view__style__trail_graph(array &$variables) {
  $view = $variables['view'];
  $id = $view->storage->id();
  $variables['css_name'] = Html::cleanCssIdentifier($id);
  $variables['id'] = $id;
  $variables['display_id'] = $view->current_display;
  $variables['title'] = '';
  $css_class = $view->display_handler->getOption('css_class');
  if (!empty($css_class)) {
    $variables['css_class'] = preg_replace('/[^a-zA-Z0-9- ]/', '-', $css_class);
    $variables['attributes']['class'][] = $variables['css_class'];
  }

  $variables['view_array'] = $variables['view']->element;
  if (empty($view->is_attachment)) {
    $variables['dom_id'] = $view->dom_id;
  }

  $variables['#attached']['drupalSettings']['exposed_form_id'] = $variables['view']->exposed_widgets['#id'];
  $variables['#attached']['library'][] = 'trail_graph/trail_graph';
}

/**
 * Implements hook_views_post_execute().
 */
function trail_graph_views_post_execute(ViewExecutable $view) {
  if ($view->style_plugin->getPluginId() == 'trail_graph') {
    /** @var \Drupal\trail_graph\Plugin\TrailGraphDataManager $trailGraphManager */
    $trailGraphManager = \Drupal::service('plugin.manager.trail_graph_data');
    /** @var \Drupal\trail_graph\Plugin\TrailGraphDataInterface $dataProvider */
    $dataProvider = $trailGraphManager->createInstance($view->style_plugin->options['data_provider'], ['view' => $view]);

    $trail_node_data = $dataProvider->getAllTrailData($view);
    $node_data = $dataProvider->getTrailNodeFields($view, $trail_node_data['trail_nodes']);
    $trail_weights = $dataProvider->getAllNodeWeights(array_keys($trail_node_data['trails']));
    $trail_data = $dataProvider->getTrailFields($trail_node_data['trails'], $trail_weights);
    $header_nodes = $dataProvider->getTrailHeaderFields($trail_data);
    $node_data = array_merge($node_data, $header_nodes);
    $filter_data = $dataProvider->getExposedFilterInput($view, ['trail_id']);

    $view->trail_data = [
      'trails' => $trail_data,
      'nodes' => $node_data,
      'filterInputs' => $filter_data,
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function trail_graph_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['base_form_id']) && in_array($build_info['base_form_id'], ['taxonomy_term_form', 'node_form'])) {
    if (\Drupal::request()->isXmlHttpRequest() && \Drupal::request()->query->get('mim') == 'trail_graph') {
      foreach ($form['actions'] as $key => $action) {
        if (is_array($action) && !in_array($key, ['delete', 'preview'])) {
          $form['actions'][$key]['#submit'][] = '_modal_edit_form_ajax_submit';
          $form['actions'][$key]['#attributes']['class'][] = 'use-ajax-submit';
        }
      }
      $form['actions']['delete']['#attributes']['target'] = '_blank';
    }
  }
}

/**
 * Close the Modal and redirect the user to the homepage.
 *
 * @param array $form
 *   The form that will be altered.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState Object.
 */
function _modal_edit_form_ajax_submit(array $form, FormStateInterface &$form_state) {
  $response = new AjaxResponse();
  $response->addCommand(new CloseModalDialogCommand());
  $response->addCommand(new InvokeCommand(NULL, 'resubmitTrailGraphFilterForm'));
  $form_state->setResponse($response);
}
