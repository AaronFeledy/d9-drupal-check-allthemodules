<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function multi_site_configuration_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the multi_site_config module.
    case 'help.page.multi_site_configuration':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Multi site configuration for multiple instances of domain') . '</p>';
      return $output;

    default:
  }
}

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter() on behalf of multi_site_configuration.module.
 * @param type $form
 * @param FormStateInterface $form_state
 * @param type $form_id
 */
function multi_site_configuration_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id === 'system_site_information_settings') {
    $loader = \Drupal::service('domain.loader');
    $all_domains = $loader->loadMultiple();
    if (is_array($all_domains)) {

      $configFactory = $config = \Drupal::config('multi_site_configuration.settings');
      $form['site_information']['site_name']['#type'] = 'hidden';
      $form['site_information']['site_slogan']['#type'] = 'hidden';
      $form['site_information']['site_mail']['#type'] = 'hidden';

      $form['front_page']['site_frontpage']['#type'] = 'hidden';
      $form['error_page']['site_403']['#type'] = 'hidden';
      $form['error_page']['site_404']['#type'] = 'hidden';

      foreach ($all_domains as $key => $value) {
        $hostName = $value->get('hostname');
        $domain_id = $value->id();
        $scheme = $value->getScheme();
        $form['site_information'][$domain_id] = array(
          '#type' => 'details',
          '#title' => t('Site details for the @hostname', array("@hostname" => $hostName)),
          '#open' => TRUE,
        );
        $form['site_information'][$domain_id]["domain_site_name[{$domain_id}]"] = array(
          '#type' => 'textfield',
          '#title' => t('Site name'),
          '#default_value' => ($configFactory->get("{$domain_id}.domain_site_name") != '') ? $configFactory->get("{$domain_id}.domain_site_name") : $form['site_information']['site_name']['#default_value'],
          '#required' => TRUE,
        );
        $form['site_information'][$domain_id]["domain_site_slogan[{$domain_id}]"] = array(
          '#type' => 'textfield',
          '#title' => t('Slogan'),
          '#default_value' => ($configFactory->get("{$domain_id}.domain_site_slogan") != '') ? $configFactory->get("{$domain_id}.domain_site_slogan") : $form['site_information']['site_slogan']['#default_value'],
          '#description' => t("How this is used depends on your site's theme."),
        );
        $form['site_information'][$domain_id]["domain_site_mail[{$domain_id}]"] = array(
          '#type' => 'email',
          '#title' => t('Email address'),
          '#default_value' => ($configFactory->get("{$domain_id}.domain_site_mail") != '') ? $configFactory->get("{$domain_id}.domain_site_mail") : $form['site_information']['site_mail']['#default_value'],
          '#description' => t("The <em>From</em> address in automated emails sent during registration and new password requests, and other notifications. (Use an address ending in your site's domain to help prevent this email being flagged as spam.)"),
          '#required' => TRUE,
        );
        $form['front_page'][$domain_id] = array(
          '#type' => 'details',
          '#title' => t('Front page for @hostName', array('@hostName' => $hostName)),
          '#open' => TRUE,
        );
        $form['front_page'][$domain_id]["domain_site_front[{$domain_id}]"] = array(
          '#type' => 'textfield',
          '#title' => t('Default front page'),
          '#default_value' => ($configFactory->get("{$domain_id}.domain_site_front") != '') ? $configFactory->get("{$domain_id}.domain_site_front") : $form['site_information']['site_frontpage']['#default_value'],
          '#size' => 40,
          '#description' => t('Optionally, specify a relative URL to display as the front page. Leave blank to display the default front page.'),
          '#field_prefix' => $scheme . $hostName,
        );

        $form['error_page'][$domain_id] = array(
          '#type' => 'details',
          '#title' => t('Error pages for @hostName', array('@hostName' => $hostName)),
          '#open' => TRUE,
        );
        $form['error_page'][$domain_id]["domain_site_403[{$domain_id}]"] = array(
          '#type' => 'textfield',
          '#title' => t('Default 403 (access denied) page'),
          '#default_value' => ($configFactory->get("{$domain_id}.domain_site_403") != '') ? $configFactory->get("{$domain_id}.domain_site_403") : $form['site_information']['site_403']['#default_value'],
          '#size' => 40,
          '#description' => t('This page is displayed when the requested document is denied to the current user. Leave blank to display a generic "access denied" page.'),
        );
        $form['error_page'][$domain_id]["domain_site_404[{$domain_id}]"] = array(
          '#type' => 'textfield',
          '#title' => t('Default 404 (not found) page'),
          '#default_value' => ($configFactory->get("{$domain_id}.domain_site_404") != '') ? $configFactory->get("{$domain_id}.domain_site_404") : $form['site_information']['site_404']['#default_value'],
          '#size' => 40,
          '#description' => t('This page is displayed when no other content matches the requested document. Leave blank to display a generic "page not found" page.'),
        );
      }
      $form['#submit'][] = 'multi_site_configuration_form_alter_save';
      $form['#validate'][] = 'multi_site_configuration_validate';
    }
  }
}

/**
 * Function for validate the configuration form
 * @param type $form
 * @param type $form_state
 */
function multi_site_configuration_validate(&$form, &$form_state) {
  $values = $form_state->getUserInput();
  $configFactory = \Drupal::configFactory()->getEditable('multi_site_configuration.settings');
  $all_domains = \Drupal::service('domain.loader')->loadOptionsList();
  foreach ($all_domains as $domain_key => $domain_value) {
    if ($values['domain_site_name'][$domain_key] === '') {
    }
  }
}

/**
 * Function to save the multi site configuration.
 * @param type $form
 * @param type $form_state
 */
function multi_site_configuration_form_alter_save(&$form, &$form_state) {
  $values = $form_state->getUserInput();

  // Load the configuration for multiSiteConfig.settings in editable mode.
  $configFactory = \Drupal::configFactory()->getEditable('multi_site_configuration.settings');
  $allDomain = \Drupal::service('domain.loader')->loadOptionsList();
  foreach ($allDomain as $key => $value) {
    $configFactory->set("{$key}.domain_site_name", $values['domain_site_name'][$key])
        ->set("{$key}.domain_site_slogan", $values['domain_site_slogan'][$key])
        ->set("{$key}.domain_site_mail", $values['domain_site_mail'][$key])
        ->set("{$key}.domain_site_front", $values['domain_site_front'][$key])
        ->set("{$key}.domain_site_403", $values['domain_site_403'][$key])
        ->set("{$key}.domain_site_404", $values['domain_site_404'][$key])
        ->save();
  }
}
