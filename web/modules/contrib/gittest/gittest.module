<?php
use Drupal\node\Entity\Node;
use Drupal\field\FieldConfigInterface;


//bei der Aktivierung des Modules
//wird ein Ordner für die CSW Metadaten erzeugt/angelegt
function gittest_install()
{
	mkdir("public://csw");
}


//Wenn ein Metadatensatz gelöscht wird,
//wird auch der dazugehörige Metadatensatz auf File-Ebene gelöscht
function gittest_node_delete($node)
{
	dsm('Löschen');
	dsm($node->get('field_uuid')->value);
	$uuid = $node->get('field_uuid')->value;
	file_unmanaged_delete("public://csw/$uuid.txt");
	dsm('Beendet');
}

function gittest_node_presave($node)
{
	dsm('Speichern');
//	//testen um welche Art Content Type es sich handelt
//	
//		
//	switch ($node->bundle()) 
//	{
//		case "metadaten" && empty($node->id()):
//			metadata_create($node);
//			dsm("Metadaten Create");
//			break;
//		case "metadaten" && !empty($node->id()):
//			metadata_update($node);
//			dsm("Metadaten Update");
//			break;
//		case "contact":
//			dsm("Kontakt");
//			break;
//	}
//	dsm('Beendet');
}

function contentTypeFields($contentType) 
{
//    $entityManager = Drupal::service('entity.manager');
//    $fields = [];
//
//    if(!empty($contentType))
//	{
//        $fields = array_filter(
//            $entityManager->getFieldDefinitions('node', $contentType), function ($field_definition) {
//                return $field_definition instanceof FieldConfigInterface;
//            }
//        );
//    }
//    return $fields;      
}
function metadata_create()
{
//	$uuid = gen_uuid();
//	$template = file_get_contents("public://csw/templates/service.txt");
//	$content = str_replace("{field_uuid}",$node->get('title')->value,$template);
//	$file = file_save_data($content,"public://csw/$uuid.txt", FILE_EXISTS_REPLACE);
	
}

function metadata_update($node)
{
	$template = file_get_contents("public://csw/templates/service.txt");
	$content = str_replace("{field_uuid}",$node->get('title')->value,$template);
	$file = file_save_data($content,"public://csw/$uuid.txt", FILE_EXISTS_REPLACE);
	//Überprüfen ob es sich um ein Update oder ein Create handelt
	dsm('update existing metadata set');
	
	
	//Alle gelieferten Felder durchgehen
	$fields = contentTypeFields($node->getType());
	foreach($fields as $fieldID => $field) {
		$ticket[$fieldID] = $node->get($fieldID)->getValue();
		dsm($fieldID);
	}
}



/*Gerneriert die UUIDs für die Metadaten*/
function gen_uuid() {
    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
        // 32 bits for "time_low"
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),

        // 16 bits for "time_mid"
        mt_rand( 0, 0xffff ),

        // 16 bits for "time_hi_and_version",
        // four most significant bits holds version number 4
        mt_rand( 0, 0x0fff ) | 0x4000,

        // 16 bits, 8 bits for "clk_seq_hi_res",
        // 8 bits for "clk_seq_low",
        // two most significant bits holds zero and one for variant DCE1.1
        mt_rand( 0, 0x3fff ) | 0x8000,

        // 48 bits for "node"
        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
    );
}