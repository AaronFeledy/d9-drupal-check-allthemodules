<?php

/**
 * @file
 * Code for the entity counter commerce module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\entity_counter\Entity\EntityCounter;
use Drupal\entity_counter_commerce\Plugin\CommerceEntityCounterSourceBaseInterface;

/**
 * Implements hook_ENTITY_TYPE_presave() for 'commerce_order'.
 */
function entity_counter_commerce_commerce_order_presave(EntityInterface $entity) {
  /** @var \Drupal\commerce_order\Entity\OrderInterface $entity */
  /** @var \Drupal\entity_counter\Entity\EntityCounterInterface[] $counters */
  $counters = EntityCounter::loadMultiple();

  // @TODO: Try to do this with source conditions.
  $completed = empty($entity->original) ? $entity->getState()->value == 'completed' : $entity->getState()->value == 'completed' && $entity->original->getState()->value != $entity->getState()->value;

  if ($completed) {
    foreach ($counters as $counter) {
      if ($counter->isOpen()) {
        $sources = $counter->getSources();

        foreach ($sources as $source) {
          if ($source->isEnabled() && $source instanceof CommerceEntityCounterSourceBaseInterface) {
            $source->setConditionEntity($entity);
            if ($source->evaluateConditions()) {
              switch ($source->getPluginId()) {
                case 'entity_counter_commerce_orders':
                  $source->addTransaction(1.00, $entity);
                  break;

                case 'entity_counter_commerce_orders_amount':
                  $transaction_value = ($entity->getTotalPrice() === NULL) ? 0 : $entity->getTotalPrice()->getNumber();
                  // Allow other modules alter the transaction value.
                  \Drupal::moduleHandler()->alter('entity_counter_commerce_orders_amount', $transaction_value, $entity);
                  $source->addTransaction($transaction_value, $entity);
                  break;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for 'commerce_order'.
 */
function entity_counter_commerce_commerce_order_delete(EntityInterface $entity) {
  /** @var \Drupal\commerce_order\Entity\OrderInterface $entity */
  /** @var \Drupal\entity_counter\Entity\EntityCounterInterface[] $counters */
  $counters = EntityCounter::loadMultiple();

  foreach ($counters as $counter) {
    if ($counter->isOpen()) {
      $sources = $counter->getSources();

      foreach ($sources as $source) {
        if ($source->isEnabled() && $source instanceof CommerceEntityCounterSourceBaseInterface) {
          $source->setConditionEntity($entity);
          if ($source->evaluateConditions()) {
            $source->cancelTransaction($entity);
          }
        }
      }
    }
  }
}
