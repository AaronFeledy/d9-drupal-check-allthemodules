<?php

/**
 * @file
 * Contains \Drupal\wizenoze\wizenoze.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\wizenoze\Helper\WizenozeAPI;

/**
 * Implements hook_theme().
 */
function wizenoze_theme() {
  return [
    'wizenoze_page' => [
      'variables' => [
        'form' => NULL,
        'search_title' => NULL,
        'no_of_results' => NULL,
        'no_results_found' => NULL,
        'search_help' => NULL,
        'results' => NULL,
        'pager' => NULL,
      ],
    ],
    'wizenoze_page_result' => [
      'variables' => [
        'item' => NULL,
        'entity' => NULL,
      ],
    ],
    'wizenoze-list' => [
      'variables' => [
        'table' => NULL,
        'link'  => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_node_insert().
 */
function wizenoze_node_insert(EntityInterface $node) {
  if ($node) {
    // To Check entity is node or not.
    $type = $node->getType();
    $wizenoze = WizenozeAPI::getInstance();
    $list = $wizenoze->collectionList();
    foreach ($list as $collection) {
      $sourceName = $collection['sourceName'];
      $types = \Drupal::config('wizenoze.settings')->get('collection-id-' . $collection['id']);
      if (!empty($types)) {
        foreach ($types as $nodetypes) {
          if ($nodetypes == $type) {
            if ($node->status->value == 0) {
              $wizenoze->deleteDocument($sourceName, $node->id());
            }
            else {
              $document = [
                'id' => $node->id(),
                'title' => $node->get('title')->value,
                'url' => $node->url('canonical', [
                  'relative' => TRUE,
                ]),
                'body' => strip_tags($node->get('body')->value),
                'sourceName' => $sourceName,
              ];
              // Ingest operation.
              $wizenoze->ingestDocument($document);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function wizenoze_node_update(EntityInterface $node) {
  if ($node) {
    // To Check entity is node or not.
    $type = $node->getType();
    $wizenoze = WizenozeAPI::getInstance();
    $list = $wizenoze->collectionList();
    foreach ($list as $collection) {
      $sourceName = $collection['sourceName'];
      $types = \Drupal::config('wizenoze.settings')->get('collection-id-' . $collection['id']);
      if (!empty($types)) {
        foreach ($types as $nodetypes) {
          if ($nodetypes == $type) {
            if ($node->status->value == 0) {
              $wizenoze->deleteDocument($sourceName, $node->id());
            }
            else {
              $document = [
                'id' => $node->id(),
                'title' => $node->get('title')->value,
                'url' => $node->url('canonical', [
                  'relative' => TRUE,
                ]),
                'body' => strip_tags($node->get('body')->value),
                'sourceName' => $sourceName,
              ];
              // Ingest operation.
              $wizenoze->ingestDocument($document);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function wizenoze_node_delete(EntityInterface $node) {
  if ($node) {
    // To Check entity is node or not.
    $type = $node->getType();
    $wizenoze = WizenozeAPI::getInstance();
    $list = $wizenoze->collectionList();
    foreach ($list as $collection) {
      $sourceName = $collection['sourceName'];
      $types = \Drupal::config('wizenoze.settings')->get('collection-id-' . $collection['id']);
      if (!empty($types)) {
        foreach ($types as $nodetypes) {
          if ($nodetypes == $type) {
            // Delete operation.
            $wizenoze->deleteDocument($sourceName, $node->id());
          }
        }
      }
    }
  }
}
