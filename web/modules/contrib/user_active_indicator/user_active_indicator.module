<?php

use Drupal\user\Entity;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user_active_indicator\Form\UserActiveIndicatorConfigurationForm;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\image\Entity\ImageStyle;

/**
 * Gets the Configuration form form.
 */
function uai_getConfigurationForm() {
  return \Drupal::config('user_active_indicator.user_active_indicator_settings');
}

/**
 * Get the current user ID.
 */
function uai_getUser() {

  // Get current user ID.
  $userID = \Drupal::currentUser()->id();

  return [
    'user_id' => $userID,
  ];

}

/**
 * Get the user.data table.
 */
function uai_getUserData() {

  // Get our user data service.
  return \Drupal::service('user.data');

}

/**
 * Get the config form values.
 */
function uai_moduleValues() {

  $replaceUsername = uai_getConfigurationForm()->get('replace_username');
  $replaceUserPageTitle = uai_getConfigurationForm()->get('replace_user_title');
  $showMark = uai_getConfigurationForm()->get('show_mark');
  $showTimestamp = uai_getConfigurationForm()->get('show_time');
  $duration = uai_getConfigurationForm()->get('duration');
  $activeMessage = uai_getConfigurationForm()->get('active_message');
  $noDataMessage = uai_getConfigurationForm()->get('no_data_message');
  $dateFormatOption = uai_getConfigurationForm()->get('formatting_option');
  $customDateFormat = uai_getConfigurationForm()->get('custom_date_format');

   return [
    'replaceUsername' => $replaceUsername,
    'replaceUserPageTitle' => $replaceUserPageTitle,
    'showMark' => $showMark,
    'showTimestamp' => $showTimestamp,
    'duration' => $duration,
    'activeMessage' => $activeMessage,
    'noDataMessage' => $noDataMessage,
    'dateFormatOption' => $dateFormatOption,
    'customDateFormat' => $customDateFormat,
   ];

}

/**
 * Get the available image styles.
 */
function uai_imageStyleOptions() {

  $imageStyleOptions = [];
  foreach (array_keys(ImageStyle::loadMultiple()) as $key => $style) {
    $imageStyleOptions[$style] = $style;
  }

  return $imageStyleOptions;

}

/**
 * Set our no text classes.
 */
function uai_noText() {

  $noText = '';

  if (empty(uai_moduleValues()['activeMessage'])) {
    $noText = ' no-active-text';
  }

  if (empty(uai_moduleValues()['noDataMessage'])) {
    $noText = ' no-nodata-text';
  }

  return $noText;

}

/**
 * Implements hook_theme().
 *
 * {@inheritdoc}
 */
function user_active_indicator_theme($existing, $type, $theme, $path) {

  // Return the uai_formatter template.
  return [
    'uai_formatter' => [
      'variables' => [
        'show_user_picture' => NULL,
        'link_to_user' => NULL,
        'user_picture_url' => NULL,
        'uid' => NULL,
        'markup' => NULL,
      ],
      'template' => 'uai-formatter',
    ],
  ];

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function user_active_indicator_preprocess_username(&$variables) {

  // Check we want to alter the username.
  if (uai_moduleValues()['replaceUsername'] == 'yes') {

    // These variables are unique to hook__preprocess_username().
    $UID = $variables['uid'];
    $uidTimestamp = uai_getUserData()->get('page_access_user_data_timestamp', $UID, 'access_timestamp');
    $name = $variables['name'];

    // Check a timestamp exists in user.data for this user.
    if (isset($uidTimestamp)) {

      // Set our timestamp value.
      if (uai_moduleValues()['dateFormatOption'] == 'custom') {
        $timestamp = date(uai_moduleValues()['customDateFormat'], $uidTimestamp);
      }
      else {
        $timestamp = \Drupal::service('date.formatter')->formatTimeDiffSince($uidTimestamp) . ' ago';
      }

      // Set our active class.
      if ($uidTimestamp > (time() - uai_moduleValues()['duration'])) {
        $activeClass = 'active';
      }
      else {
        $activeClass = 'inactive';
      }

      // Show mark and timestamp.
      if (uai_moduleValues()['showMark'] == 'yes' && uai_moduleValues()['showTimestamp'] == 'yes') {

        $newName = new TranslatableMarkup(
          '<span class="uai uai-name @activeClass">@name</span><mark class="uai uai-mark @activeClass"></mark><span class="uai uai-message @activeClass@noText">@activeMessage</span><span class="uai uai-timestamp @activeClass">@timestamp</span>', [
            '@name' => t($name),
            '@activeClass' => t($activeClass),
            '@noText' => t(uai_noText()),
            '@activeMessage' => t(uai_moduleValues()['activeMessage']),
            '@timestamp' => $timestamp,
          ]
        );

      }

      // Show mark only.
      if (uai_moduleValues()['showMark'] == 'yes' && uai_moduleValues()['showTimestamp'] == 'no') {

        $newName = new TranslatableMarkup(
          '<span class="uai uai-name @activeClass">@name</span><mark class="uai uai-mark @activeClass"></mark>', [
            '@name' => t($name),
            '@activeClass' => t($activeClass),
          ]
        );

      }

      // Show timestamp only.
      if (uai_moduleValues()['showMark'] == 'no' && uai_moduleValues()['showTimestamp'] == 'yes') {

        $newName = new TranslatableMarkup(
          '<span class="uai uai-name @activeClass">@name</span><span class="uai uai-message @activeClass@noText">@activeMessage</span><span class="uai uai-timestamp @activeClass">@timestamp</span>', [
            '@name' => t($name),
            '@activeClass' => t($activeClass),
            '@noText' => t(uai_noText()),
            '@activeMessage' => t(uai_moduleValues()['activeMessage']),
            '@timestamp' => $timestamp,
          ]
        );

      }

      // Set our new markup to name.
      $variables['name'] = $newName;

    }
    elseif (!isset($uidTimestamp)) {

      // For users that have no timestamp in user.data table.
      $newName = new TranslatableMarkup(
        '<span class="uai uai-name inactive">@name</span><span class="uai uai-message inactive@noText">@noDataMessage</span>', [
          '@name' => t($name),
          '@noText' => t(uai_noText()),
          '@noDataMessage' => t(uai_moduleValues()['noDataMessage']),
        ]
      );

      // Set our new markup to name.
      $variables['name'] = $newName;

    }

  }  

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function user_active_indicator_preprocess_page_title(&$variables) {

  // Check we want to alter the user page title.
  if (uai_moduleValues()['replaceUserPageTitle'] == 'yes') {

    // Check we are viewing a user page.
    if (\Drupal::routeMatch()->getRouteName() == 'entity.user.canonical') {

      // These variables are unique to hook__preprocess_page_title().
      $UID = \Drupal::routeMatch()->getRawParameter('user');
      $uidTimestamp = uai_getUserData()->get('page_access_user_data_timestamp', $UID, 'access_timestamp');
      $name = $variables['title']['#markup'];

      // Check a timestamp exists in user.data for this user. Don't alter for current user.
      if (isset($uidTimestamp) && uai_getUser()['user_id'] != $UID) {

        // Set our timestamp value.
        if (uai_moduleValues()['dateFormatOption'] == 'custom') {
          $timestamp = date(uai_moduleValues()['customDateFormat'], $uidTimestamp);
        }
        else {
          $timestamp = \Drupal::service('date.formatter')->formatTimeDiffSince($uidTimestamp) . ' ago';
        }

        // Set our active class.
        if ($uidTimestamp > (time() - uai_moduleValues()['duration'])) {
          $activeClass = 'active';
        }
        else {
          $activeClass = 'inactive';
        }

        // Show mark and timestamp.
        if (uai_moduleValues()['showMark'] == 'yes' && uai_moduleValues()['showTimestamp'] == 'yes') {

          $newName = new TranslatableMarkup(
            '<span class="uai uai-name @activeClass">@name</span><mark class="uai uai-mark @activeClass"></mark><span class="uai uai-message @activeClass@noText">@activeMessage</span><span class="uai uai-timestamp @activeClass">@timestamp</span>', [
              '@name' => t($name),
              '@activeClass' => t($activeClass),
              '@noText' => t(uai_noText()),
              '@activeMessage' => t(uai_moduleValues()['activeMessage']),
              '@timestamp' => $timestamp,
            ]
          );

        }

        // Show mark only.
        if (uai_moduleValues()['showMark'] == 'yes' && uai_moduleValues()['showTimestamp'] == 'no') {

          $newName = new TranslatableMarkup(
            '<span class="uai uai-name @activeClass">@name</span><mark class="uai uai-mark @activeClass"></mark>', [
              '@name' => t($name),
              '@activeClass' => t($activeClass),
            ]
          );

        }

        // Show timestamp only.
        if (uai_moduleValues()['showMark'] == 'no' && uai_moduleValues()['showTimestamp'] == 'yes') {

          $newName = new TranslatableMarkup(
            '<span class="uai uai-name @activeClass">@name</span><span class="uai uai-message @activeClass@noText">@activeMessage</span><span class="uai uai-timestamp @activeClass">@timestamp</span>', [
              '@name' => t($name),
              '@activeClass' => t($activeClass),
              '@noText' => t(uai_noText()),
              '@activeMessage' => t(uai_moduleValues()['activeMessage']),
              '@timestamp' => $timestamp,
            ]
          );

        }

        // Set our new markup to title.
        $variables['title']['#markup'] = $newName;

      }
      elseif (!isset($uidTimestamp)) {

        // For users that have no timestamp in user.data table.
        $newName = new TranslatableMarkup(
          '<span class="uai uai-name inactive">@name</span><span class="uai uai-message inactive@noText">@noDataMessage</span>', [
            '@name' => t($name),
            '@noText' => t(uai_noText()),
            '@noDataMessage' => t(uai_moduleValues()['noDataMessage']),
          ]
        );

        // Set our new markup to title.
        $variables['title']['#markup'] = $newName;

      }

    }

  }  

}

/**
 * Implements hook_preprocess_hook().
 *
 * {@inheritdoc}
 */
function user_active_indicator_preprocess_page(&$variables) {

  // Attach our styles library.
  $variables['#attached']['library'][] = 'user_active_indicator/styles';

}
