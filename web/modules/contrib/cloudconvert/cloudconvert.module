<?php

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function cloudconvert_theme() {
  $theme = [];
  $theme['cloudconvert_task'] = [
    'render element' => 'elements',
    'file' => 'cloudconvert_task.page.inc',
    'template' => 'cloudconvert_task',
  ];
  $theme['cloudconvert_task_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'cloudconvert_task.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cloudconvert_theme_suggestions_cloudconvert_task(array $variables) {
  $suggestions = [];
  /** @var \Drupal\cloudconvert\Entity\CloudConvertTaskInterface $entity */
  $entity = $variables['elements']['#cloudconvert_task'];
  $sanitized_view_mode = str_replace('.', '_', $variables['elements']['#view_mode']);

  $suggestions[] = 'cloudconvert_task__' . $sanitized_view_mode;
  $suggestions[] = 'cloudconvert_task__' . $entity->bundle();
  $suggestions[] = 'cloudconvert_task__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'cloudconvert_task__' . $entity->id();
  $suggestions[] = 'cloudconvert_task__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_operation().
 */
function cloudconvert_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->getEntityTypeId() !== 'cloudconvert_task') {
    return $operations;
  }

  /** @var \Drupal\cloudconvert\Entity\CloudConvertTaskInterface $cloudConvertTask */
  $cloudConvertTask = $entity;

  /** @var \Drupal\cloudconvert\CloudConvertProcessorInterface $cloudConvertProcessor */
  $cloudConvertProcessor = Drupal::service('cloudconvert.processor');

  $callbackUrl = $cloudConvertProcessor->getCallbackUrl($cloudConvertTask);
  $processInfo = $cloudConvertTask->getProcessInfo();
  $url = isset($processInfo['url']) ? $processInfo['url'] : '';
  $callbackUrl->setOption('query', [
    'step' => 'finished',
    'url' => $url,
    'id' => $cloudConvertTask->getProcessId(),
  ]);

  $operations['callback'] = [
    'title' => t('Trigger Callback'),
    'weight' => 15,
    'url' => $callbackUrl,
  ];

  return $operations;
}
