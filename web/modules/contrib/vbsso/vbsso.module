<?php
/**
 * -----------------------------------------------------------------------
 * vBSSO is a solution which helps you connect to different software platforms
 * via secure Single Sign-On.
 *
 * Copyright (c) 2011-2017 vBSSO. All Rights Reserved.
 * This software is the proprietary information of vBSSO.
 *
 * Author URI: http://www.vbsso.com
 * License: GPL version 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * -----------------------------------------------------------------------
 *
 */
/**
 * FOR DRUPAL 8
 */

/**
 * Hooks
 */
require_once(dirname(__FILE__) . '/vendor/com.extremeidea.vbsso/vbsso-connect-shared/vbsso_shared.php');
require_once(dirname(__FILE__) . '/includes/drupal8.php');

define('VBSSO_AVATAR_PATH', 'public://vbsso_pictures/');
/**
 * Wrapped objects in functions
 */

function variable_get($param, $default) {
    $config = \Drupal::config('config.' . VBSSO_PRODUCT_ID);
    return $config->get($param) ?: $default;
}

function variable_set($key, $param) {
    $config = \Drupal::service('config.factory')->getEditable('config.' . VBSSO_PRODUCT_ID);
    $config->set($key, $param)->save();
}

function user_save($userData){
    $user = \Drupal\user\Entity\User::create();
    $user->setPassword(md5(time() . '!@#$%^&*()_ABCD'));
    $user->enforceIsNew();
    $user->setEmail($userData['mail']);
    $user->set("init", $userData['mail']);
    $user->setUsername($userData['name']);

    /* Delete all previous roles*/
    foreach ($user->getRoles() as $role) {
        if ($role != 'authenticated') {
            $user->removeRole($role);
        }
    }
    
    $roles = array_diff($userData['roles'], array('authenticated'));
    foreach ($roles as $role) {
        $user->addRole($role);
    }

    $user->activate();
    $res = $user->save();

    return $res;
}

function user_update($user, $data){

    if (isset($data['mail'])) {
        $user->setEmail($data['mail']);
    }

    if (isset($data['name'])) {
        $user->setUsername($data['name']);
    }

    if (isset($data['roles'])) {

        /* Delete all previous roles*/
        foreach ($user->getRoles() as $role) {
            if ($role != 'authenticated') {
                $user->removeRole($role);
            }
        }
        /* Add new roles*/
        $roles = array_diff($data['roles'], array('authenticated'));
        foreach ($roles as $role) {
            $user->addRole($role);
        }
    }
    return $user->save();
}
/* Wrapped Objects */
/**
 * Login Page
 * 
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function vbsso_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $config = \Drupal::config('config.' . VBSSO_PRODUCT_ID);
    if ($config->get(VBSSO_NAMED_EVENT_FIELD_LOGIN_VBULLETIN_URL)) {
        if ($form_id == 'user_login_form') {
            unset($form['name']);
            unset($form['pass']);
            unset($form['actions']);
            unset($form['submit']);

            $form['#action'] = $config->get(VBSSO_NAMED_EVENT_FIELD_LOGIN_VBULLETIN_URL);
            $form['vb_login_username'] = array(
                '#type' => 'textfield',
                '#maxlength' => 128,
                '#size' => 50,
                '#title' => t('Username'),
                '#required' => TRUE,
            );
            $form['vb_login_password'] = array(
                '#type' => 'password',
                '#maxlength' => 64,
                '#size' => 50,
                '#title' => t('Password'),
                '#required' => TRUE,
            );
            $form['cookieuser'] = array(
                '#type' => 'checkbox',
                '#title' => t('Remember me.'),
            );
            $form['do'] = array('#type' => 'hidden', '#value' => 'login');
            $form['submit'] = array('#type' => 'submit', '#value' => t('Login'));

            //moving links to the end of form
            if (isset($form['links'])) {
                $temp = $form['links'];
                unset($form['links']);
                $form['links'] = $temp;
            }
        }
    }
}

//function vbsso_user_login($account) {
//    if (variable_get(VBSSO_NAMED_EVENT_FIELD_FETCH_AVATARS, false)) {
//        $url = variable_get(VBSSO_NAMED_EVENT_FIELD_AVATAR_URL, '') . md5(strtolower($account->getEmail()));
//        $picture = new \Drupal\vbsso\Controller\VbssoPictureController(VBSSO_AVATAR_PATH);
//        $picture->initialize($account, $url);
//    }
//}

function vbsso_preprocess_user(&$variables) {
    $account = \Drupal\user\Entity\User::load(Drupal::currentUser()->id());
    $url = variable_get(VBSSO_NAMED_EVENT_FIELD_AVATAR_URL, '');
    if (variable_get(VBSSO_NAMED_EVENT_FIELD_FETCH_AVATARS, false) && $url) {
        $url .= md5(strtolower($account->getEmail()));
        $picture = new \Drupal\vbsso\Controller\VbssoPictureController(VBSSO_AVATAR_PATH, $url);
        $picture->initialize($account);
    }
}

/**
 * Footer link
 */
function vbsso_page_attachments(array &$attachments) {
    $footer = variable_get(VBSSO_PLATFORM_FOOTER_LINK_PROPERTY, null);
    if ($footer) {
        $attachments['#attached']['library'][] = 'vbsso/vbsso_footer';
    }
}

function vbsso_preprocess_page(&$variables) {
    /* Rebuild url if platform connected/disconnected */
    $vbssoURL = variable_get(VBSSO_NAMED_EVENT_FIELD_LOGIN_URL, '');
    $oldConnect = variable_get('vbsso_connected', false);
    $newConnect = (bool)$vbssoURL;
    if($oldConnect != $newConnect) {
        variable_set('vbsso_connected', (bool)$newConnect);
        drupal_flush_all_caches();
    }
    /* End Rebuild block*/
}
