<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user_request\Entity\RequestType;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function user_request_user_request_insert(EntityInterface $entity) {
  // Sends configured messages if sender is enabled.
  $subscriber = \Drupal::service('user_request.send_message_subscriber');
  $subscriber->sendNewRequestMessages($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function user_request_user_request_delete(EntityInterface $entity) {
  // Deletes the request's response.
  if ($response = $entity->getResponse()) {
    $response->delete();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function user_request_user_request_response_delete(EntityInterface $entity) {
  // Performs configured transition on the request the response belongs to.
  if ($request = $entity->getRequest()) {
    $request_type = $request->getRequestType();
    if ($transition_id = $request_type->getDeletedResponseTransition()) {
      $request->applyTransition($transition_id);
      $request->save();
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function user_request_form_state_machine_transition_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Checks if the form corresponds to some of the module's states.
  if (strpos($form_id, 'state_machine_transition_form_user_request_state') === 0) {
    $form_object = $form_state->getFormObject();
    $request = $form_object->getEntity();
    $request_type = $request->getRequestType();

    // Replaces buttons of transitions to be performed upon response by a 
    // "Respond" button.
    $action_removed = FALSE;
    $response_transitions = $request_type->getResponseTransitions();
    foreach ($response_transitions as $transition) {
      if (isset($form['actions'][$transition])) {
        // Removes the button and sets the flat to add an replacement later.
        unset($form['actions'][$transition]);
        $action_removed = TRUE;
      }
    }

    // Adds the "Respond" button if an action was removed and the user has 
    // access to the response form.
    if ($action_removed) {
      $url = Url::fromRoute('entity.user_request_response.add_form', [
        'user_request' => $request->id(),
      ]);
      if ($url->access()) {
        $form['actions']['respond'] = [
          '#type' => 'submit',
          '#value' => t('Respond'),
          '#submit' => [
            'user_request_respond_submit',
          ],
        ];
      }
    }
  }
}

/**
 * Submit callback to redirect the user to the response form.
 *
 * @param array &$form
 *   A reference to the form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function user_request_respond_submit(array &$form, FormStateInterface $form_state) {
  // Redirects the user to the response form.
  $form_object = $form_state->getFormObject();
  $request = $form_object->getEntity();
  $form_state->setRedirect('entity.user_request_response.add_form', [
    'user_request' => $request->id(),
  ], [
    'query' => \Drupal::destination()->getAsArray(), 
  ]);
}
