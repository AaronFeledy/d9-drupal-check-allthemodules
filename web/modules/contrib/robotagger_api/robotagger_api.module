<?php
/**
 * @file
 * This file does some awesome stuff
 */
/**
 * Implements hook_menu().
 */

 use Drupal\robotagger_api\RoboTagger;

function robotagger_api_menu() {
  $items['admin/config/robotagger'] = array(
    'title' => 'RoboTagger',
    'description' => 'RoboTagger settings',
    'position' => 'right',
    'weight' => 0,
    'route_name' => 'robotagger_api.admin_config_robotagger',
  );
  $items['admin/config/robotagger/robotagger_api'] = array(
    'title' => 'RoboTagger API settings',
    'route_name' => 'robotagger_api.admin_config_robotagger_robotagger_api',
    'weight' => 0,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function robotagger_api_permission() {
  return array(
    'access robotagger api settings' => array(
      'title' => t('Administer robotagger api'),
    ),
  );
}

/**
 * A wrapper function which calls a static methode of the Robotagger class.
 *
 * @param string $key
 * @param string $host
 *
 * @return bool
 */
function robotagger_api_validate_api_key($key, $host) {
  return RoboTagger::validateAPIKey($key, $host);
}

/**
 * A wrapper function which calls a static methode of the Robotagger class.
 *
 * @param string $langcode
 *   One of the supported language.
 *
 * @return Robotagger::get_annotypes().
 */
function robotagger_api_get_annotypes($langcode = 'de') {
  return RoboTagger::getAnnotypes($langcode);
}

/**
 * A wrapper function which calls a static methode of the Robotagger class.
 *
 * @param string $langcode
 *   One of the supported language.
 *
 * @return Robotagger::get_annotype_names().
 */
function robotagger_api_get_annotype_names($langcode = 'de') {
  return RoboTagger::getAnnotypeNames($langcode);
}

/**
 * A wrapper function which calls a static methode of the Robotagger class.
 *
 * @param string $langcode
 *   One of the supported language.
 *
 * @return Robotagger::get_annotypes_and_subtypes().
 */
function robotagger_api_get_annotypes_and_subtypes($langcode = 'de') {
  return RoboTagger::getAnnotypesAndSubtypes($langcode);
}

/**
 * A wrapper function which use the Robotagger class.
 *
 * @param string $text
 * @param array $annotypes
 * @param string $langcode
 * @param bool $caching
 *   If TRUE then return the cache else get fresh data, if all parameters are the same.
 * @param array $topics
 * @param bool $returnerror
 * When set it to TRUE, then it returns an array with the errorcode and errormessage.
 *
 * @see Robotagger::analyze() Read this function for more descriptions.
 *
 * @return Robotagger::data()
 */
function robotagger_api_call_webservice($text, $annotypes, $langcode, $caching = TRUE, $topics = array(), $returnerror = FALSE) {
  $params = $text . implode('', $annotypes) . $langcode;
  $data = _robotagger_api_get_cache($params);
  if (empty($data)) {
    $robotagger = new RoboTagger();
    $robotagger->analyze($text, $annotypes, $langcode, $topics);
    $error = $robotagger->getError();
   if (!empty($error)) {
     if ($returnerror) {
       return $error;
     }
     return;
   }
   else if ($caching) {
     _robotagger_api_set_cache($params, $robotagger->data);
   }
    $data = $robotagger->data;
  }

  return $data;
}

/**
 * Returns the cached data, which requested by robotagger_api_call_webservice().
 *
 * @see Robotagger::data().
 *
 * @param string $params
 *   Contains the text, annotations and langcode as a string.
 *
 * @return NULL|array
 *   NULL if the parameters are empty or there is no cached data.
 */
function _robotagger_api_get_cache($params = NULL) {
  if (!empty($params)) {
    $md5 = md5($params);
    $result = cache()->get("robotagger_api:$md5");
    return !empty($result) ? $result->data : NULL;
  }
  return NULL;
}

/**
 * Caches the overgiven data.
 *
 * @param string $params
 * @param array $data
 *   The data from Robotagger::data().
 *
 * @see Robotagger::data().
 *
 * @return boolean
 *   TRUE if we save cache else FALSE.
 */
function _robotagger_api_set_cache($params = NULL, $data = NULL) {
  if (!empty($params) && !empty($data)) {
    $time = time() + 60 * 60 * 24;
    $md5 = md5($params);
    cache()->set("robotagger_api:$md5", $data, $time);
    return TRUE;
  }
  return FALSE;
}