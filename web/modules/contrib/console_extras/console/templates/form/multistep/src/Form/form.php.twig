<?php

namespace Drupal\{{ module_name }}\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Class {{ form_class }}
 * @package Drupal\{{ module_name }}\Form
 */
class {{ form_class }} extends FormBase {

  /**
   * @var string
   */
  protected $totalSteps;

  /**
   * @var string
   */
  protected $formId;

  /**
   * @var string
   */
  protected $formWrapper;

  /**
   * {@inheritdoc}
   */
  public function __construct() {
    $this->totalSteps = 3;
    $this->formId = '{{ form_class_underscore }}';
    $this->formWrapper = '{{ module_name }}_ajax_wrapper_{{ form_class_underscore }}';
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return $this->formId;
  }

  public function getCurrentStep(FormStateInterface $form_state) {
    return !empty($form_state->getValue('step')) ? $form_state->getValue('step') : 1;
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $step = $this->getCurrentStep($form_state);
    $stepKey = 'step' . $step;

    $form['#tree'] = TRUE;
    $form['#prefix'] = '<div id="' . $this->formWrapper . '">';
    $form['#suffix'] = '</div>';

    $form['step'] = [
      '#type' => 'value',
      '#value' => $step,
    ];

    switch ($step) {
      case 1:
        $form[$stepKey] = [
          '#type' => 'fieldset',
          '#title' => $this->t('Step @step', ['@step' => $step]),
        ];
        $form[$stepKey]['name'] = [
          '#type' => 'textfield',
          '#title' => $this->t('Name'),
          '#default_value' => $form_state->hasValue([$stepKey, 'name']) ? $form_state->getValue([$stepKey, 'name']) : '',
          '#required' => FALSE,
        ];
        break;

      case 2:
        $form[$stepKey] = [
          '#type' => 'fieldset',
          '#title' => $this->t('Step @step', ['@step' => $step]),
        ];
        $form[$stepKey]['name'] = [
          '#type' => 'textfield',
          '#title' => $this->t('Name'),
          '#default_value' => $form_state->hasValue([$stepKey, 'name']) ? $form_state->getValue([$stepKey, 'name']) : '',
          '#required' => FALSE,
        ];
        break;

      case 3:
        $form[$stepKey] = [
          '#type' => 'fieldset',
          '#title' => $this->t('Step @step', ['@step' => $step]),
        ];
        $form[$stepKey]['name'] = [
          '#type' => 'textfield',
          '#title' => $this->t('Name'),
          '#default_value' => $form_state->hasValue([$stepKey, 'name']) ? $form_state->getValue([$stepKey, 'name']) : '',
          '#required' => FALSE,
        ];
        break;

      default:
        break;
    }

    // Configs the ajax option on the 'Previous' and 'Next' buttons.
    $form['actions'] = ['#type' => 'actions'];
    if ($step > 1 && $step <= $this->totalSteps) {
      $form['actions']['prev'] = [
        '#type' => 'submit',
        '#value' => $this->t('Previous'),
        '#submit' => ['::prevSubmit'],
        '#ajax' => [
          'wrapper' => '' . $this->formWrapper . '',
          'callback' => '::prompt',
          'progress' => [
            'type' => 'throbber',
            'message' => '',
          ],
        ],
      ];
    }

    $form['actions']['next'] = [
      '#type' => 'submit',
      '#value' => $step == $this->totalSteps ? $this->t('Submit') : $this->t('Next'),
      '#validate' => ['::nextValidate'],
      '#submit' => ['::nextSubmit'],
      '#button_type' => 'primary',
      '#ajax' => [
        'wrapper' => '' . $this->formWrapper . '',
        'callback' => '::prompt',
        'progress' => [
          'type' => 'throbber',
          'message' => '',
        ],
      ],
    ];

    // Stores the values of previous steps so we can retrieve the data later.
    if ($step > 1 && $step <= $this->totalSteps) {
      for ($i = 1; $i < $step; $i++) {
        $stepKey = 'step' . $i;
        $form[$stepKey] = [
          '#type' => 'value',
          '#value' => $form_state->getValue($stepKey),
        ];
      }
    }

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function prompt(array $form, FormStateInterface $form_state) {
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function prevSubmit(array $form, FormStateInterface $form_state) {
    $step = $this->getCurrentStep($form_state);
    $form_state->setValue('step', $step - 1);
    $form_state->setRebuild();
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function nextValidate(array $form, FormStateInterface $form_state) {
    $step = $this->getCurrentStep($form_state);
    $stepKey = 'step' . $step;

    switch ($step) {
      case 1:
        $name = $form_state->getValue([$stepKey, 'name']);
        if (empty($name)) {
          $form_state->setErrorByName($stepKey . '][name', $this->t('Name field is required.'));
        }
        break;

      case 2:
        $name = $form_state->getValue([$stepKey, 'name']);
        if (empty($name)) {
          $form_state->setErrorByName($stepKey . '][name', $this->t('Name field is required.'));
        }
        break;

      case 3:
        $name = $form_state->getValue([$stepKey, 'name']);
        if (empty($name)) {
          $form_state->setErrorByName($stepKey . '][name', $this->t('Name field is required.'));
        }
        break;

      default:
        break;
    }
  }

  /**
   * {@inheritdoc}
   */
  public function nextSubmit(array $form, FormStateInterface $form_state) {
    $step = $this->getCurrentStep($form_state);

    if ($step == $this->totalSteps) {
      $messenger = $this->messenger();
      $messenger->addMessage($this->t('Your information has been submitted:'));
      $messenger->addMessage($this->t('Name in step 1: @name', ['@name' => $form_state->getValue(['step1', 'name'])]));
      $messenger->addMessage($this->t('Name in step 2: @name', ['@name' => $form_state->getValue(['step2', 'name'])]));
      $messenger->addMessage($this->t('Name in step 3: @name', ['@name' => $form_state->getValue(['step3', 'name'])]));

      // Resets the form state values.
      $form_state->setValue('step', 1);
      for ($i = 1; $i <= $step; $i++) {
        $stepKey = 'step' . $i;
        $form_state->setValue($stepKey, []);
      }
      $form_state->setRebuild();
      return $form;
    }
    else {
      $form_state->setValue('step', $step + 1);
      $form_state->setRebuild();
      return $form;
    }
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {

  }

}
