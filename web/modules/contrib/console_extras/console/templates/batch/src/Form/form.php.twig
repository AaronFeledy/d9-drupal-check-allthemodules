<?php

namespace Drupal\{{ module_name }}\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Class {{ form_class }}.
 *
 * @package Drupal\{{ module_name }}\Form
 */
class {{ form_class }} extends FormBase {

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return '{{ form_class_underscore }}';
  }
  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form['batch'] = [
      '#tree' => TRUE,
      '#type' => 'details',
      '#title' => $this->t('Batch'),
      '#open' => TRUE,
    ];
    $form['batch']['confirm'] = array (
      '#type' => 'select',
      '#title' => ('Are you sure to run the batch?'),
      '#options' => array(
        '0' => t('No'),
        '1' => t('Yes'),
      ),
    );
    $form['batch']['actions'] = [
      '#type' => 'container',
    ];
    $form['batch']['actions']['run'] = [
      '#type' => 'submit',
      '#value' => $this->t('Run'),
      '#button_type' => 'primary',
    ];
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    $values = $form_state->getValues();
    switch ($values['op']->__toString()) {
      case t('Run'):
        if (!$values['batch']['confirm']) {
          $form_state->setErrorByName('batch][confirm', $this->t('Are you sure to run the batch?'));
        }
        break;

      default:
        break;
    }
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $values = $form_state->getValues();
    switch ($values['op']->__toString()) {
      case t('Run'):
        $nids = \Drupal::entityQuery('node')
          ->sort('created', 'ASC')
          ->range(0, 50)
          ->execute();

        $operations = [];
        foreach ($nids as $nid) {
          $operations[] = [
            '\Drupal\{{ module_name }}\Form\{{ form_class }}::operationStartedCallback',
            [
              'data' => [
                'nid' => $nid,
              ],
            ]
          ];
        }

        $batch = [
          'title' => t('Processing...'),
          'operations' => $operations,
          'finished' => '\Drupal\{{ module_name }}\Form\{{ form_class }}::operationFinishedCallback',
        ];
        batch_set($batch);
        break;

      default:
        break;
    }
  }

  public static function operationStartedCallback($data, &$context) {
    $node = Node::load($data['nid']);
    if ($node) {
      // Places your code here to run the batch operation.

      $message = t('Processing node %title ...', ['%title' => $node->get('title')->value]);
      $context['message'] = $message;
      $context['results'][] = $node->get('nid')->value;
    }
  }

  public static function operationFinishedCallback($success, $results, $operations) {
    // The 'success' parameter means no fatal PHP errors were detected. All
    // other error management should be handled using 'results'.
    if ($success) {
      $message = \Drupal::translation()->formatPlural(
        count($results),
        'One content processed.', '@count contents processed.'
      );
    }
    else {
      $message = t('Finished with an error.');
    }
    drupal_set_message($message);
  }

}
