<?php

/**
 * @file
 * Contains external_link_change.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function external_link_change_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the external_link_change module.
    case 'help.page.external_link_change':
      $output = '<pre>' . file_get_contents(drupal_get_path('module', 'external_link_change') . '/README.md') . '</pre>';
      return $output;

    default:
  }
}

/**
 * Function to check external URL.
 */
function external_link_change_external_link($url) {
  global $base_url;
  $base_host = parse_url($base_url, PHP_URL_HOST);
  $url_host = parse_url($url, PHP_URL_HOST);
  $url_path = parse_url($url, PHP_URL_PATH);
  preg_match("/$base_host/i", $url_path, $match);

  if (($base_host == $url_host) || ($url_host == "www." . $base_host) || ($base_host == ("www." . $url_host)) || !empty($match)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * This function adds prefix and suffix to an external url.
 */
function external_link_change_apply_prefix_suffix($pattern, $prefix, $suffix, $avoid, $avoid_use, $domains) {

  $check = TRUE;

  // Avoiding manipulation to url having pattern $avoid.
  if ($avoid_use) {
    preg_match($avoid, $pattern, $match);
    if (!empty($match)) {
      $check = FALSE;

    }
    else {
      $check = TRUE;

    }

  }

  if (external_link_change_external_link($pattern) && $check) {
    $count = -1;

    // Applying prefix and suffix according to domain name.
    foreach ($domains as $domain) {
      ++$count;
      preg_match("/$domain/i", $pattern, $match);

      if (!empty($match)) {
        if ($prefix[$count] == "null" && $suffix[$count] == "null") {
          $replace = $pattern;
        }
        elseif ($prefix[$count] != "null" && $suffix[$count] == "null") {
          $replace = $prefix[$count] . $pattern;
        }
        elseif ($prefix[$count] == "null" && $suffix[$count] != "null") {
          $replace = $pattern . $suffix[$count];
        }
        else {
          $replace = $prefix[$count] . $pattern . $suffix[$count];
        }
        break;
      }
      $replace = $pattern;
    }
  }
  else {
    $replace = $pattern;
  }

  return $replace;
}
