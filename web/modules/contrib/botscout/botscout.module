<?php

/**
 * @file
 * Anti bot module to prevent bots from using forms on your site.
 *
 * BotScout Module version 8.x.1.0 for Drupal anti-bot module.
 *
 * Copyright (C) 2015  Jon "Acetolyne" Langlois.
 */

/**
 * Implements hook_help().
 */
function botscout_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.botscout':
      return t('Botscout is a module that prevents bots from doing 
things like registering on your site and sending site-wide contact forms. This 
module brings the Botscout functionality to Drupal. more info available at 
www.botscout.com. Botscout Drupal Module by Jonathan Acetolyne Langlois');
  }
}

/**
 * Submits information and returns a value that tells us if the user is a bot.
 *
 * Takes the information we have decided to check for known bot information and
 * returns a value indicating if the information is known to be associated with
 * a known bot's information.
 *
 * @string $register
 *   returns Y if submitted information returns a match against known bot
 *   information. Returns N if there was no matching information found.
 */
function botscout_check($form, &$form_state) {
  // Clears the filter variable in case this is not the first time trying.
  $filter = '';
  // Clears the keyfilter variable in case this is not the first time trying.
  $keyfilter = '';
  // Gets the name provided from the form that the user has submitted.
  $name = $form_state->getValue('name');
  // Gets the email provided from the form that the user has submitted.
  $mail = $form_state->getValue('mail');
  // Checks if we have email alerts set on our settings page.
  $alert = \Drupal::config('botscout.settings')->get('botscout_alert');
  // Gets the ip address of the person submitting the form.
  $ip = \Drupal::request()->getClientIp();
  // Checks if we have enabled checking usernames against bot data.
  $namechk = \Drupal::config('botscout.settings')->get('botscout_name');
  // Checks if we have enabled checking emails against bot data.
  $emailchk = \Drupal::config('botscout.settings')->get('botscout_email');
  // Checks if we have enabled checking the ip address against bot //data.
  $ipchk = \Drupal::config('botscout.settings')->get('botscout_ip');
  // Gets the botscout key which is set on the settings page.
  $key = \Drupal::config('botscout.settings')->get('botscout_key');
  // Sets the variable that holds the query string. This string is used to check 
  //a database for bot information.
  $apiquery = 'http://www.botscout.com/test/?multi';
  // Adds NAME checking to the query if it is enabled.
  if ($namechk == TRUE) {
    $filter .= '&name=';
    $filter .= $name;
  }
  // Adds EMAIL checking to the query if it is enabled.
  if ($emailchk == TRUE) {
    $filter .= '&mail=';
    $filter .= $mail;
  }
  // Adds IP checking to query if it is enabled.
  if ($ipchk == TRUE) {
    $filter .= '&ip=';
    $filter .= $ip;
  }
  //Adds the filters to the api query or don't continue.
  if ($filter) {
    $apiquery .= $filter;
    if ($key != NULL) {
      $keyfilter .= '&key=';
      $keyfilter .= $key;
      $apiquery .= $keyfilter;
    }
    // Sends the query to the botscout api and gets the return value ready for 
    //processing.
    $client = \Drupal::httpClient();
    $request = $client->get($apiquery);
    try {
      $response = $request->getBody()->getContents();
    }
    catch (RequestException $e) {
      watchdog_exception('botscout', $e->getMessage());
    }
    $botdata = explode('|', $response);
    $register = $botdata[0];
  }
  else {
    $register = 'N';
    \Drupal::logger('botscout event')->notice('The BotScout module is enabled but no filters are enabled all users will pass the check', []);
  }
  if ($register == 'N') {
    \Drupal::logger('botscout event')->notice('A user has passed the bot check', []);
  }
  elseif ($register == 'Y') {
    \Drupal::logger('botscout event')->notice('A bot was stopped from creating 
an account', []);
    $count = \Drupal::config('botscout.settings')->get('botscout_count');
    \Drupal::configFactory()->getEditable('botscout.settings')->set('botscout_count', ++$count)->save();
    $form_state->setErrorByName('Blocked for being reported as a bot.');
    drupal_set_message('It appears you have been reported as a bot so the form was not sent. If you are not a bot please contact the admin or get removed from the list at www.botscout.com', 'error');
  }
  if (($register != 'Y') && ($register != 'N')) {
    \Drupal::logger('botscout event')->notice('Bad response from botscout server the response received was %response.', array('%response' => $response));
    $form_state->setErrorByName('Bad response from botscout API');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function botscout_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'botscout_check';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function botscout_form_contact_message_feedback_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $blockcontact = \Drupal::config('botscout.settings')->get('botscout_contact');
  if ($blockcontact == '1') {
    $form['#validate'][] = 'botscout_check';
  }
}
