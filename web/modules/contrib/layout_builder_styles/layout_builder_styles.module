<?php

/**
 * @file
 * Layout Builder Styles module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\layout_builder_styles\LayoutBuilderStyleInterface;

/**
 * Implements hook_form_alter().
 *
 * Modify the configuration form for layout builder components (blocks).
 */
function layout_builder_styles_form_alter(&$form, FormStateInterface $formState) {
  if ($form['#form_id'] === 'layout_builder_add_block' || $form['#form_id'] === 'layout_builder_update_block') {
    // Form object will be AddBlockForm or UpdateBlockForm, depending on
    // the operation.
    $formObject = $formState->getFormObject();

    $blockPluginId = $formObject
      ->getBlock()
      ->getPluginId();

    $allStyles = \Drupal::entityTypeManager()
      ->getStorage('layout_builder_style')
      ->loadByProperties([
        'type' => LayoutBuilderStyleInterface::TYPE_COMPONENT,
      ]);

    $styleOptions = [];
    foreach ($allStyles as $style) {
      /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
      if (empty($style->getBlockRestrictions()) || in_array($blockPluginId, $style->getBlockRestrictions())) {
        $styleOptions[$style->id()] = $style->label();
      }
    }

    /** @var \Drupal\layout_builder\SectionComponent $component */
    $component = $formObject
      ->getSectionStorage()
      ->getSection($formObject->getDelta())
      ->getComponent($formObject->getUuid());

    if (!empty($styleOptions)) {
      // Set form actions to a high weight, just so that we can make our form
      // style element appear right before them.
      $form['actions']['#weight'] = 100;
      $form['layout_builder_style'] = [
        '#type' => 'select',
        '#options' => $styleOptions,
        '#title' => t('Style'),
        '#default_value' => $component->get('layout_builder_styles_style'),
        '#required' => FALSE,
        '#empty_option' => t('- Select -'),
        '#weight' => 90,
      ];

      // Our submit handler must execute before the default one, because the
      // default handler stores the section & component data in the tempstore
      // and we need to update those objects before that happens.
      array_unshift($form['#submit'], '_layout_builder_styles_submit_block_form');
    }
  }
}

/**
 * Custom submit handler for submitting LB block forms.
 *
 * Persists the configured block style to the component configuration data,
 * which is later persisted to section storage by layout builder's base form.
 */
function _layout_builder_styles_submit_block_form(array $form, FormStateInterface $formState) {
  $formObject = $formState->getFormObject();

  /** @var \Drupal\layout_builder\SectionComponent $component */
  $component = $formObject
    ->getSectionStorage()
    ->getSection($formObject->getDelta())
    ->getComponent($formObject->getUuid());

  $component->set('layout_builder_styles_style', $formState->getValue('layout_builder_style'));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the configuration form for layout builder sections (layouts).
 */
function layout_builder_styles_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formObject = $form_state->getFormObject();

  $allStyles = \Drupal::entityTypeManager()
    ->getStorage('layout_builder_style')
    ->loadByProperties([
      'type' => LayoutBuilderStyleInterface::TYPE_SECTION,
    ]);

  $styleOptions = [];
  foreach ($allStyles as $style) {
    /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
    $styleOptions[$style->id()] = $style->label();
  }

  if (!empty($styleOptions)) {
    $layoutConfig = $formObject->getLayout()->getConfiguration();
    // Set form actions to a high weight, just so that we can make our form
    // style element appear right before them.
    $form['actions']['#weight'] = 100;
    $form['layout_builder_style'] = [
      '#type' => 'select',
      '#options' => $styleOptions,
      '#title' => t('Style'),
      '#default_value' => isset($layoutConfig['layout_builder_styles_style']) ? $layoutConfig['layout_builder_styles_style'] : NULL,
      '#required' => FALSE,
      '#empty_option' => t('- Select -'),
      '#weight' => 90,
    ];

    // Our submit handler must execute before the default one, because the
    // default handler stores the section & component data in the tempstore
    // and we need to update those objects before that happens.
    array_unshift($form['#submit'], '_layout_builder_styles_submit_section_form');
  }
}

/**
 * Custom submit handler for submitting LB section forms.
 *
 * This is used to persist the selected style to the layout configuration
 * array, which layout builder's ConfigureSectionForm will persist to section
 * storage.
 */
function _layout_builder_styles_submit_section_form(array $form, FormStateInterface $formState) {
  $formObject = $formState->getFormObject();

  $formObject
    ->getLayout()
    ->setConfiguration(['layout_builder_styles_style' => $formState->getValue('layout_builder_style')]);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function layout_builder_styles_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add theme hook suggestions for block templates based on the configured
  // style.
  if (isset($variables['elements']['#layout_builder_style'])) {
    $styleId = $variables['elements']['#layout_builder_style'];
    $suggestions[] = 'block__' . $styleId;
    // For each existing suggestion, provide a duplicate one that adds the
    // block style ID.
    foreach ($suggestions as $suggestion) {
      $suggestions[] = $suggestion . '__' . $styleId;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function layout_builder_styles_preprocess_layout(&$variables) {
  // Apply a configured style to a layout by adding the style's CSS classes.
  if (isset($variables['settings']['layout_builder_styles_style'])) {
    $selectedStyle = $variables['settings']['layout_builder_styles_style'];
    /** @var \Drupal\layout_builder_styles\LayoutBuilderStyleInterface $style */
    $style = \Drupal::entityTypeManager()->getStorage('layout_builder_style')->load($selectedStyle);
    if ($style) {
      if (!isset($variables['attributes']['class']) || !is_array($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [];
      }
      $classes = \preg_split('(\r\n|\r|\n)', $style->getClasses());
      $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes);

      $variables['#cache']['tags'][] = 'config:layout_builder_styles.style.' . $style->id();
    }
  }
}
