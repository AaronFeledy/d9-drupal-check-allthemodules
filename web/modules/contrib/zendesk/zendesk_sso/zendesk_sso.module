<?php

/**
 * @file
 * The Zendesk module helps you to interact with zendesk using Drupal.
 */


use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\zendesk;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function zendesk_sso_form_zendesk_admin_form_alter(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::config('zendesk.settings');

  $form['zendesk']['zendesk_sso'] = array(
    '#type'  => 'fieldset',
    '#title' => 'SSO configuration',
  );
  $form['zendesk']['zendesk_sso']['zendesk_jwt_shared_secret'] = array(
    '#type'          => 'textfield',
    '#required'      => TRUE,
    '#description'   => 'The zendesk SSO secret key.',
    '#default_value' => $config->get('zendesk_jwt_shared_secret'),
    '#suffix'        => t('Use the http://www.yourdomain.com/agent/#/admin/security page in your zendesk configuration page. (Go to Account -> Security)'),
  );

  $form['zendesk']['zendesk_sso']['zendesk_api_sync_users'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Synchronize the Drupal users with Zendesk'),
    '#default_value' => $config->get('zendesk_api_sync_users'),
    '#description'   => t('When accounts are created in your drupal site, updated and delete, push these changes to Zendesk.'),
  );
  // We need tu save those values. So we add our own custom submit handler.
  $form['#submit'][] = 'zendesk_admin_zendesk_sso_submit';
}

/**
 * Submit callback.
 *
 * @see zendesk_sso_form_zendesk_admin_form_alter().
 *
 * @param array              $form
 * @param FormStateInterface $form_state
 */
function zendesk_admin_zendesk_sso_submit(array &$form, FormStateInterface $form_state) {
  \Drupal::config('zendesk.settings')
    ->set('zendesk_jwt_shared_secret', $form_state->getValue('zendesk_jwt_shared_secret'))
    ->set('zendesk_api_sync_users', $form_state->getValue('zendesk_api_sync_users'))
    ->save();
}

/**
 * Converts and signs a PHP object or array into a JWT string.
 *
 * Taken from PEAR::JWT.
 *
 * @param $payload
 *   PHP object or array.
 * @param $key
 *   The secret key.
 *
 * @return
 *   A signed JWT.
 */
function zendesk_jwt_encode($payload, $key) {
  $header = array(
    'typ' => 'JWT',
    'alg' => 'HS256'
  );
  $segments = array();
  $segments[] = zendesk_urlsafeb64_encode(json_encode($header));
  $segments[] = zendesk_urlsafeb64_encode(json_encode($payload));
  $signing_input = implode('.', $segments);

  $signature = hash_hmac('sha256', $signing_input, $key, TRUE);
  $segments[] = zendesk_urlsafeb64_encode($signature);

  return implode('.', $segments);
}

/**
 * Encodes the given data with urlsafe base64.
 *
 * A base64 encoded string is made urlsafe by replacing '+' with '-',
 * '/' with '_', and removing '='.
 *
 * Taken from PEAR::JWT.
 *
 * @param $data
 *   The data to encode.
 *
 * @return
 *   The encoded string.
 */
function zendesk_urlsafeb64_encode($data) {
  $b64 = base64_encode($data);

  return str_replace(array('+', '/', '\r', '\n', '='), array('-', '_'), $b64);
}
