<?php

/**
 * @file
 * Partial will look for a template file the name of which resolves to "partial--[$name]".
 *
 * Usage pattern
 * @TODO
 *
 */

/**
 * Implements hook_theme().
 */
function partial_theme($existing, $type, $theme, $path) {
  return [
    'partial' => [
      'variables' => [
        'name' => NULL,
        'context' => [],
        'libraries' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function partial_theme_suggestions_partial_alter(array &$suggestions, array $variables) {
  $partial_name = $variables['name'];
  if (!empty($partial_name)) {
    $suggestions[] = 'partial__' . $partial_name;
  }
}

/**
 * Implements hook_proprocess_HOOK().
 */
function partial_preprocess_partial(array &$variables) {

  // Autoload libraries is defined.
  if (isset($variables['libraries'])) {
    foreach ($variables['libraries'] as $library) {
      $variables['#attached']['library'][] = $library;
    }
  }

  // Make all the partial's items from the context array available at the template level.
  foreach ($variables['context'] as $key => $value) {
    $variables[$key] = $value;
  }

}

/**
 * Wraps theme().
 */
function partial($name, array $context = [], array $libraries = []) {
  $build['partial'] = [
    '#theme' => 'partial',
    '#name' => $name,
    '#context' => $context,
    '#libraries' => $libraries,
  ];
  return render($build);
}
