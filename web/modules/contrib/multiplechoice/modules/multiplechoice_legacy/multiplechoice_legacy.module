<?php

use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\PluginBase;
use Drupal\views\ViewExecutable;

/**
 * An associative array describing the structure of database tables and fields
 * @return array
 */
function multiplechoice_legacy_views_data() {
  $data = array();

  $data['quiz_node_results'] = array();

  $data['quiz_node_results']['table'] = array();

  $data['quiz_node_results']['table']['group'] = t('Legacy Quiz Results');

  // Within 'table', the value of 'provider' is the module that provides schema
  // or the entity type that causes the table to exist. Setting this ensures
  // that views have the correct dependencies. This is automatically set to the
  // module that implements hook_views_data().
  $data['quiz_node_results']['table']['provider'] = 'multiplechoice';

  // Some tables are "base" tables, meaning that they can be the base tables
  // for views. Non-base tables can only be brought in via relationships in
  // views based on other tables. To define a table to be a base table, add
  // key 'base' to the 'table' array:
  $data['quiz_node_results']['table']['base'] = array(
    // Identifier (primary) field in this table for Views.
    'field' => 'nid',
    // Label in the UI.
    'title' => t('Legacy Quiz Answers'),
    // Longer description in the UI. Required.
    'help' => t('Answers to questions.'),
    'weight' => -10,
  );

  $data['quiz_node_results']['table']['join'] = array(
    'node_field_data' => array(
      // Primary key field in node_field_data to use in the join.
      'left_field' => 'nid',
      // Foreign key field in example_table to use in the join.
      'field' => 'nid',
      // 'extra' is an array of additional conditions on the join.
//      'extra' => array(
//        0 => array(
//          // Adds AND node_field_data.published = TRUE to the join.
//          'field' => 'published',
//          'value' => TRUE,
//        ),
//        1 => array(
//          // Adds AND example_table.numeric_field = 1 to the join.
//          'left_field' => 'numeric_field',
//          'value' => 1,
//          // If true, the value will not be surrounded in quotes.
//          'numeric' => TRUE,
//        ),
//        2 => array(
//          // Adds AND example_table.boolean_field <>
//          // node_field_data.published to the join.
//          'field' => 'published',
//          'left_field' => 'boolean_field',
//          // The operator used, Defaults to "=".
//          'operator' => '!=',
//        ),
//      ),
    ),
    'users_field_data' => array(
      'left_field' => 'uid',
      'field' => 'uid'
    )
  );

  $data['quiz_node_results']['nid'] = array(
    'title' => t('Legacy Quiz Result ID'),
    'help' => t('Relate legacy quiz content to the node content'),

    // Define a relationship to the node_field_data table, so views whose
    // base table is example_table can add a relationship to nodes. To make a
    // relationship in the other direction, you can:
    // - Use hook_views_data_alter() -- see the function body example on that
    //   hook for details.
    // - Use the implicit join method described above.
    'relationship' => array(
      // Views name of the table to join to for the relationship.
      'base' => 'node_field_data',
      // Database field name in the other table to join on.
      'base field' => 'nid',
      // ID of relationship handler plugin to use.
      'id' => 'standard',
      // Default label for relationship in the UI.
      'label' => t('Quiz Result'),
    ),
  );

  // Numeric field, exposed as a field, sort, filter, and argument.
  $data['quiz_node_results']['result_id'] = array(
    'title' => t('Legacy Result ID'),
    'help' => t('Unique result identifier.'),

    'field' => array(
      'id' => 'numeric',
    ),

    'sort' => array(
      'id' => 'standard',
    ),

    'filter' => array(
      'id' => 'numeric',
    ),

    'argument' => array(
      'id' => 'numeric',
    ),
  );

  $data['quiz_node_results']['uid'] = array(
    'title' => t('User ID'),
    'help' => t('The user who took the quiz.'),

    'field' => array(
      'id' => 'numeric',
    ),

    'sort' => array(
      'id' => 'standard',
    ),

    'filter' => array(
      'id' => 'numeric',
    ),

    'argument' => array(
      'id' => 'numeric',
    ),

    'relationship' => array(
      // Views name of the table to join to for the relationship.
      'base' => 'users_field_data',
      // Database field name in the other table to join on.
      'base field' => 'uid',
      // ID of relationship handler plugin to use.
      'id' => 'standard',
      // Default label for relationship in the UI.
      'label' => t('User'),
    ),
  );

  $data['quiz_node_results']['score'] = array(
    'title' => t('Score'),
    'help' => t('Final score.'),

    'field' => array(
      'id' => 'numeric',
    ),

    'sort' => array(
      'id' => 'standard',
    ),

    'filter' => array(
      'id' => 'numeric',
    ),

    'argument' => array(
      'id' => 'numeric',
    ),
  );

  $data['quiz_node_results']['time_start'] = array(
    'title' => t('Started Time'),
    'help' => t('The time when the quiz was started.'),

    'field' => array(
      'id' => 'date',
    ),

    'sort' => array(
      'id' => 'date',
    ),

    'filter' => array(
      'id' => 'date',
    ),

    'argument' => array(
      'id' => 'date',
    ),
  );

  $data['quiz_node_results']['time_end'] = array(
    'title' => t('Completed Time'),
    'help' => t('The time when the quiz was completed.'),

    'field' => array(
      'id' => 'date',
    ),

    'sort' => array(
      'id' => 'date',
    ),

    'filter' => array(
      'id' => 'date',
    ),

    'argument' => array(
      'id' => 'date',
    ),
  );

  $data['quiz_node_results']['delete'] = array(
    'title' => t('Delete'),
    'help' => t('Delete a result.'),

    'field' => array(
      'field' => 'result_id',
      'id' => 'node_revision_link_delete',
    ),

  );

  return $data;

}
