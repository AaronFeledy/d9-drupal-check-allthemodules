<?php

/**
 * @file
 * Contains aegir_site_subscriptions_recurly.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\aegir_site_subscriptions_recurly\WebhookNotificationHandlers\WebhookNotificationHandler;

/****************************************************************************
 * Drupal Core Hook Implementations
 ****************************************************************************/

/**
 * Implements hook_help().
 */
function aegir_site_subscriptions_recurly_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    // Main module help for the Aegir Site Subscriptions: Recurly module.
    case 'help.page.aegir_site_subscriptions_recurly':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Enables the Recurly subscriptions provider for use with the Aegir Site Subscriptions module.') . '</p>';

    default:
  }
  return $output;
}

/****************************************************************************
 * Recurly Hook Implementations
 ****************************************************************************/

/**
 * Implements hook_recurly_process_push_notification().
 */
function aegir_site_subscriptions_recurly_recurly_process_push_notification($subdomain, $notification) {
  $container = \Drupal::getContainer();
  $logger = \Drupal::logger('aegir_site_subscriptions_recurly');

  $webhook_notification_handlers = WebhookNotificationHandler::NOTIFICATION_MAP;
  // Add+remove space for https://netbeans.org/bugzilla/show_bug.cgi?id=240795.
  $handler_class = trim('Drupal\aegir_site_subscriptions_recurly\WebhookNotificationHandlers\ ') . $webhook_notification_handlers[$notification->type];

  $webhook_notification_handler = $handler_class::create($container, [
    'account' => $notification->account,
    'subscription' => $notification->subscription,
    'transaction' => $notification->transaction,
    'invoice' => $notification->invoice,
  ]);

  $success = $webhook_notification_handler->handleNotification()->getResult();

  $placeholders = [
    '@notification' => $notification->type,
    '@processor' => $handler_class,
  ];

  if ($success) {
    $logger->info('Successfully processed @notification with @processor.', $placeholders);
  }
  else {
    $logger->error('Failed to process @notification with @processor.', $placeholders);
  }
}

/**
 * Implements hook_recurly_subscription_list_page_alter().
 *
 * Adds site information to the list of subscription properties.
 *
 * @throws \Exception
 */
function aegir_site_subscriptions_recurly_recurly_subscription_list_page_alter(&$subscriptions) {
  $user_id = \Drupal::currentUser()->id();

  // Iterate through each subscription.
  $subscriptions_ids = Element::children($subscriptions['subscriptions']);
  foreach ($subscriptions_ids as $subscription_id) {
    $details = &$subscriptions['subscriptions'][$subscription_id];
    $site_ids = \Drupal::service('aegir_site_subscriptions.subscription')->setSubscriptionById($subscription_id)->getSiteIds($user_id);

    // Fetch the associated entity.
    foreach (array_values($site_ids) as $site_id) {
      $site = \Drupal::service('aegir_site_subscriptions.site')->setSite(Node::load($site_id));

      // Determine if it's been configured. If not, the title will be still be
      // the UUID, set temporarily.
      $configured = $site->getTitle() != $subscription_id;

      // Add the site or its configuration link.
      $details['#custom_properties'][] = [
        'label' => t('Site'),
        'value' => $configured ? $site->getLink() : $site->getConfigurationLink(),
      ];
    }
  }
}
