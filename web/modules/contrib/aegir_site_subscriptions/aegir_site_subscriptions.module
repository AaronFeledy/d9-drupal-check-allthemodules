<?php

/**
 * @file
 * Contains aegir_site_subscriptions.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\NodeInterface;

/****************************************************************************
 * Drupal Core Hook Implementations
 ****************************************************************************/

/**
 * Implements hook_help().
 */
function aegir_site_subscriptions_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    // Main module help for the aegir_site_subscriptions module.
    case 'help.page.aegir_site_subscriptions':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Connects a subscription-billing service with Aegir, automatically managing sites over Web services.') . '</p>';
      break;
    default:
  }

  return $output;
}

/**
 * Implements hook_entity_prepare_form().
 *
 * Alter entities before editing.
 *
 * @throws \Exception
 */
function aegir_site_subscriptions_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  $user_is_admin = \Drupal::currentUser()->hasPermission('administer site configuration');

  // Apply changes to sites if being edited by a non-administrator.
  if (($entity->getEntityTypeId() == 'node') &&
      ($entity->getType() == 'aegir_site') &&
      (!$user_is_admin) &&
      ($operation == 'edit') &&
      ($entity->getTitle() == \Drupal::service('aegir_site_subscriptions.site')->setSite($entity)->getSubscriptionId())) {

    // Unset the site's name. It was temporarily set to the ID on
    // creation, but the subscribing user must now enter a desired subdomain
    // so that the site can be created.
    $entity->setTitle('');
    $form_state->set('label_altered', TRUE);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters Site Edit forms.
 */
function aegir_site_subscriptions_form_node_aegir_site_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Enter help text for the site name (title) field. It's not possible to do
  // this in the configuration so do it here.
  $title_help_text = t('Enter the subdomain for your new site. For example, entering <em>mysite</em> will make your site available at <em>mysite.@domain</em>. Once set, it cannot be changed.', [
    '@domain' => \Drupal::request()->getHost(),
  ]);
  $form['title']['widget'][0]['value']['#description'] = $title_help_text;

  $form['title']['widget'][0]['value']['#element_validate'][] = [
    'Drupal\aegir_site_subscriptions\HostingServiceCalls\SiteCreateHostingServiceCall',
    'validateNewSiteName',
  ];

  // Make the profile field mandatory. This can't be done in the configuration
  // because it needs to remain empty until configured by the subscriber.
  $form['field_site_profile']['widget']['#required'] = TRUE;

  // Disable items that cannot be changed after the site was created.
  $site = $form_state->getFormObject()->getEntity();
  if (count($site->get('field_site_tasks'))) {
    $form['field_site_profile']['#disabled'] = TRUE;
    $form['title']['#disabled'] = TRUE;
  }

  // Check if the current user is unprivileged.
  if (!\Drupal::currentUser()->hasPermission('administer site configuration')) {
    // Hide the revision log message.
    $form['revision_information']['#access'] = FALSE;
    // Redirect elsewhere after submission.
    $form['actions']['submit']['#submit'][] = 'aegir_site_subscriptions_site_save_redirect';
  }
}

/**
 * Set dynamic allowed values for the site profile field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @todo Cache the results.
 *
 * @see options_allowed_values()
 * @see https://chromatichq.com/blog/dynamic-default-and-allowed-values-list-fields-drupal-8
 */
function aegir_site_subscriptions_field_site_profile_allowed_values(
  FieldStorageConfig $definition,
  ContentEntityInterface $entity = NULL,
  $cacheable = TRUE
) {
  return \Drupal::service('aegir_site_subscriptions.hosting.profile_listing')->getProfileList();
}

/**
 * Redirects subscribers to the Subscriptions page after configuring a site.
 *
 * By default, saving a Site node will take the user to its view page. However,
 * it's only meant for initial configuration by the subscriber.  It isn't meant
 * to be viewed by him/her afterwards. So we're altering the form to redirect
 * to the user's Subscriptions page.
 *
 * @param array $form
 *   The form definition.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function aegir_site_subscriptions_site_save_redirect(array $form, FormStateInterface $form_state) {
  if (!$provider_plugin_id = \Drupal::config('aegir_site_subscriptions.settings')->get('subscription_provider')) {
    // @todo Report emergency: no subscription provider selected.
  }

  \Drupal::service('plugin.manager.aegir_site_subscription_provider')
    ->createInstance($provider_plugin_id)
    ->redirectFormToUserSubscriptionsPage($form_state);
}

/**
 * Implements hook_node_access().
 *
 * Prevents non-admins from editing configured sites.
 */
function aegir_site_subscriptions_node_access(NodeInterface $node, $op, AccountInterface $account) {

  // Check if non-admins are updating configured sites.
  if (($node->getType() == 'aegir_site') &&
      (!$account->hasPermission('administer site configuration')) &&
      ($op == 'update') &&
      (!empty($node->get('field_site_profile')->getValue()))) {
    // Deny access as the configuration cannot be changed.
    return AccessResult::forbidden();
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for Node.
 *
 * Installs and sets quotas on sites after they're configured if they haven't
 * been installed yet (or the user is an administrator).
 *
 * @throws \Exception
 */
function aegir_site_subscriptions_node_presave(EntityInterface $entity) {
  if (($entity->getType() == 'aegir_site') &&
      (!empty($entity->get('field_site_profile')->getValue())) &&
      ((empty($entity->get('field_site_tasks')->getValue())) ||
       \Drupal::currentUser()->hasPermission('administer site configuration')
  )) {
    $site = \Drupal::service('aegir_site_subscriptions.site')->setSite($entity);
    $subscription = \Drupal::service('aegir_site_subscriptions.subscription')->setSubscriptionById($site->getSubscriptionId());

    if (!$subscription->isActive()) {
      return;
    }

    $profile = $entity->get('field_site_profile')->value;
    \Drupal::service('aegir_site_subscriptions.hosting.site_installation')->setSite($entity)->setTemplate($profile)->performActionAndLogResults();

    $site->setQuotas($subscription->getPlanCode(), $subscription->getAddons());
  }
}
