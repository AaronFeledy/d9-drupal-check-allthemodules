<?php

/**
 * @file
 * Provides easy interface to test regular expressions.
 */

use Drupal\Component\Utility\String;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_menu().
 */
function regex_menu() {
  $items['regex'] = array(
    'title' => 'Regex tester',
    'description' => 'Test regular expression patterns with the internal PHP functions.',
    'route_name' => 'regex.tester_form',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function regex_permission() {
  $return = array();

  $return['regex_access_regex_tester_form'] = array(
    'title' => t('Use RegEx tester form.'),
  );

  $return['regex_use_preg_replace_eval_modifier'] = array(
    'title' => t('Allow to use the "eval" modifier in the  preg_replace() function'),
    'restrict access' => TRUE,
    'warning' => t('This allow to the user to run any PHP code on the website.'),
  );

  $return['regex_use_mb_ereg_replace_eval_modifier'] = array(
    'title' => t('Allow to use the "eval" modifier in the mb_ereg[i]_replace() function'),
    'restrict access' => TRUE,
    'warning' => t('This allow to the user to run any PHP code on the website.'),
  );

  return $return;
}

/**
 * Implements hook_theme().
 */
function regex_theme() {
  return array(
    'regex_tester_messages' => array(
      'variables' => array(
        'values' => array(),
        'attributes' => array(),
        'title_attributes' => array(),
        'content_attributes' => array(),
      ),
      'template' => 'regex-tester-messages',
    ),
  );
}

/**
 * @param AccountInterface $account
 *
 * @return array
 */
function regex_flag_options(AccountInterface $account = NULL) {
  if ($account === NULL) {
    $account = Drupal::currentUser();
  }

  $flags = array(
    'PREG_PATTERN_ORDER'        => 'PREG_PATTERN_ORDER',
    'PREG_SET_ORDER'            => 'PREG_SET_ORDER',
    'PREG_OFFSET_CAPTURE'       => 'PREG_OFFSET_CAPTURE',
    'PREG_SPLIT_NO_EMPTY'       => 'PREG_SPLIT_NO_EMPTY',
    'PREG_SPLIT_DELIM_CAPTURE'  => 'PREG_SPLIT_DELIM_CAPTURE',
    'PREG_SPLIT_OFFSET_CAPTURE' => 'PREG_SPLIT_OFFSET_CAPTURE',
    'mb_ereg_replace_i'         => 'mb_ereg_replace() case insensitive',
    'mb_ereg_replace_x'         => 'mb_ereg_replace() ignore withe spaces',
    'mb_ereg_replace_m'         => 'mb_ereg_replace() multi line mode',
    'mb_ereg_replace_p'         => 'mb_ereg_replace() POSIX mode',
  );

  if ($account->hasPermission('regex_use_mb_ereg_replace_eval_modifier')) {
    $flags['mb_ereg_replace_e'] = 'mb_ereg_replace() eval replacement';
  }

  $flags += array(
    'javascript_global'     => 'Global',
    'javascript_ignorecase' => 'Ignore case',
    'javascript_multiline'  => 'Multi line',
  );

  return $flags;
}

function regex_function_options() {
  return array(
    'preg_match'       => 'preg_match',
    'preg_match_all'   => 'preg_match_all',
    'preg_replace'     => 'preg_replace',
    'preg_split'       => 'preg_split',

    'mb_ereg'          => 'mb_ereg',
    'mb_eregi'         => 'mb_eregi',
    'mb_ereg_replace'  => 'mb_ereg_replace',
    'mb_eregi_replace' => 'mb_eregi_replace',
    'mb_split'         => 'mb_split',

    'javascript_exec'   => 'JS - RegExp.exec()',
    // 'javascript_match'   => 'JavaScript - Match',
    // 'javascript_search'  => 'JavaScript - Search',
    // 'javascript_replace' => 'JavaScript - Replace',
    // 'javascript_split'   => 'JavaScript - Split',
  );
}

/**
 * Look for the "e" modifier in $pattern.
 *
 * @param string $pattern
 *   Regular expression pattern for preg_replace().
 *
 * @return bool
 *   True if "e" is found in pattern, false if not.
 */
function regex_preg_replace_eval_modifier_exists($pattern) {
  $pattern = trim($pattern);
  if ($pattern === '') {
    return FALSE;
  }

  return (
    (FALSE !== ($closer_pos = strrpos($pattern, $pattern[0])))
    &&
    strpos($pattern, 'e', $closer_pos) !== FALSE
  );
}

/**
 * Implements template_preprocess_regex_tester_messages().
 */
function regex_preprocess_regex_tester_messages(&$vars) {
  $vars += $vars['values'];
  $vars['attributes']['class'][] = 'regex-messages';
  if (!empty($vars['message'])) {
    $vars['title_attributes']['class'][]
      = 'messages messages--' . $vars['message_severity'];

    if ($vars['message_severity'] !== 'error') {
      $vars['function_human'] = '$result = ' . $vars['function_name'] . '(' . implode(', ', $vars['function_args']) . ');';
      $vars['result_type_human'] = t('Type of the $result is %type', array('%type' => $vars['result_type']));
      $vars['result_value_human'] = '$result = ' . String::checkPlain(var_export($vars['result_value'], TRUE)) . ';';
      $vars['matches_human'] = '$matches = ' . String::checkPlain(var_export($vars['matches'], TRUE)) . ';';
    }
  }
}
