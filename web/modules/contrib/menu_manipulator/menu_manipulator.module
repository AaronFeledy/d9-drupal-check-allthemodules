<?php

/**
 * @file
 * Contains menu_manipulator.module.
 */

use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Routing\CurrentRouteMatch;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function menu_manipulator_help($route_name, CurrentRouteMatch $route_match) {
  switch ($route_name) {
  case 'help.page.menu_manipulator':
    $text = file_get_contents(dirname(__FILE__) . '/README.md');
    if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    } else {
      // Use the Markdown filter to render the README.
      $filter_manager = \Drupal::service('plugin.manager.filter');
      $settings       = \Drupal::configFactory()->get('markdown.settings')->getRawData();
      $config         = ['settings' => $settings];
      $filter         = $filter_manager->createInstance('markdown', $config);
      return $filter->process($text, 'en');
    }
  }
  return NULL;
}

/**
 * Get a menu tree filtered by the current language.
 *
 * Based on our custom MenuTreeManipulators services.
 * This is pretty useful as of now (8.4.x) as Drupal doesn't
 * provide a way to filer MenuLinkContent entity by their language.
 *
 * @param string $menu_name
 *   The menu machine name.
 *
 * @return array
 *   The filtered MenuTree renderable array.
 *
 * @code
 * // Implements theme_preprocess_menu().
 * function yourtheme_preprocess_menu(&$variables, $hook) {
 *   if (isset($variables['menu_name']) && $menu_name = $variables['menu_name']) {
 *     $moduleHandler = \Drupal::service('module_handler');
 *     if ($moduleHandler->moduleExists('menu_manipulator')) {
 *       $menu_tree_translated = menu_manipulator_get_multilingual_menu($menu_name);
 *       $variables['items'] = isset($menu_tree_translated['#items']) ? $menu_tree_translated['#items'] : [];
 *     }
 *   }
 * }
 * @endcode
 */
function menu_manipulator_get_multilingual_menu(string $menu_name) {
  $menu_tree = \Drupal::menuTree();

  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
    ['callable' => 'menu_manipulator.menu_tree_manipulators:filterByCurrentLanguage'],
  ];

  if ($menu_name == 'admin') {
    // Specific manipulation for the "Admin Toolbar" menu.
    // See admin_toolbar_prerender_toolbar_administration_tray() in admin_toolbar.module.
    $parameters = new MenuTreeParameters();
    $parameters->setRoot('system.admin')->excludeRoot()->setMaxDepth(4)->onlyEnabledLinks();
  } else {
    // Default method to retrieve menu items.
    // See MenuLinkTreeInteface::getCurrentRouteMenuTreeParameters().
    $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  }

  // Manipulate the menu tree to filter by current language.
  $menu = $menu_tree->load($menu_name, $parameters);
  $menu = $menu_tree->transform($menu, $manipulators);
  return $menu_tree->build($menu);
}

/**
 * %Implements theme_preprocess_menu().
 */
function menu_manipulator_preprocess_menu(&$variables, $hook) {
  $config = \Drupal::config('menu_manipulator.settings');

  if ($config->get('preprocess_menus_title')) {
    // Populate menu title variable for Twig.
    if (isset($variables['menu_name'])) {
      $menu = \Drupal::service('entity_type.manager')->getStorage('menu')->load($variables['menu_name']);
      if (NULL != $menu) {
        $variables['menu_title'] = [
          '#markup' => \Drupal::translation()->translate('@label', ['@label' => $menu->label()]),
        ];
      }
    }
  }

  if ($config->get('preprocess_menus_language')) {
    if (isset($variables['menu_name'])) {

      // Automatically filter menu by language.
      $do_filter = TRUE;

      // Check if this menu has to be filtered.
      if (is_array($config->get('preprocess_menus_language_list'))) {
        $do_filter = array_intersect([$variables['menu_name']], $config->get('preprocess_menus_language_list'));
      }

      // Actually filter menu by language.
      if ($do_filter) {
        $menu_tree_translated = menu_manipulator_get_multilingual_menu($variables['menu_name']);
        $variables['items']   = isset($menu_tree_translated['#items']) ? $menu_tree_translated['#items'] : [];
      }
    }
  }
}
