<?php

/**
 * @file
 * Contains symlink.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_help().
 */
function symlink_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the symlink module.
    case 'help.page.symlink':
      $output = '<h3>' . t('About symlink') . '</h3>';
      $output .= '<p>' . t("Symlinks are special nodes that will point to
      target nodes and display the content of the target node when they are
      displayed. This will let you have a better experience when you need to
      add a node in multiple locations of the menu try while maintaining a
      proper trail/breadcrumb structure.") . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function symlink_form_node_symlink_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $symlink = empty($_REQUEST['symlink']) ? '' : (int) ($_REQUEST['symlink']);
  if (!$symlink) {
    return;
  }
  $node = _symlink_get_target_node($symlink);
  if ($node && ($node !== NULL)) {
    $form['field_symlink']['widget'][0]['value']['#default_value'] = empty($node->get('nid')->value) ? '' : $node->get('nid')->value;
    $form['title']['widget'][0]['value']['#default_value'] = empty($node->get('title')->value) ? '' : $node->get('title')->value;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function symlink_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  if ($entity->getType() != 'symlink') {
    return;
  }

  $symlink = $entity->get('field_symlink')->getValue()[0]['value'];
  $node = _symlink_get_target_node($symlink);

  if ($node && ($node !== NULL)) {
    $output = node_view($node, $view_mode);

    // Remove the redundant node title.
    $output['#node']->setTitle("");

    $build['symlink_target_content'] = array(
      '#markup' => \Drupal::service('renderer')->render($output),
    );
  }

}

/**
 * Helper function to find the node referenced by the symlink.
 *
 * @param int $nid
 *   The supposed node id.
 *
 * @return mixed|NULL $node
 *   The target node object or NULL if not found.
 */
function _symlink_get_target_node($nid) {
  $nid = (int) $nid;

  if ($nid) {
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $node = $storage->load($nid);

    if ($node->getType() == 'symlink') {
      $symlink = $node->get('field_symlink')->getValue()[0]['value'];

      if ($symlink) {
        // If the target of a symlink is another symlink, then dig deeper until
        // a valid node target is found.
        return _symlink_get_target_node($symlink);
      }
      else {
        return NULL;
      }

    }

    return $node;

  }
  else {
    return NULL;
  }
}
