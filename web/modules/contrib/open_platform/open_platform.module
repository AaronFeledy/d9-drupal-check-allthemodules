<?php

/**
 * @file
 * Provides functionality to query and display content from The Guardian
 * newspaper via its Open Platform API.
 */

define('OPEN_PLATFORM_URL', 'http://content.guardianapis.com');
define('OPEN_PLATFORM_TEST_API_KEY', 'http://content.guardianapis.com/search?format=json&show-fields=body&api-key=');
define('OPEN_PLATFORM_SEARCH', 'http://content.guardianapis.com/search?q=');

/**
 * Implements hook_menu().
 */
function open_platform_menu() {
  $items = array();

  $items['admin/config/services/open-platform'] = array(
    'title' => 'Guardian Open Platform settings',
    'description' => 'Configure Guardian Open Platform settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_platform_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'forms/open_platform_admin_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/open-platform'] = array(
    'title' => 'Guardian Open Platform content  ',
    'description' => 'Preview and manage available content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_platform_preview_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'forms/open_platform_preview_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function open_platform_block_info() {
  $blocks['data'] = array(
    'info' => t('Open Platform News'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function open_platform_block_view($delta = '') {
  $block = array();
  
  $cache = cache_get('open_platform_block', 'cache_block');
  // Return cache if possible.
  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    return $cache->data;
  }
  
  $sections = variable_get('open_platform_sections');
  $search_term = variable_get('open_platform_search');
  $fields = variable_get('open_platform_fields');
  $advanced = variable_get('open_platform_advance_fields');
  $api_key = variable_get('open_platform_api_key');

  switch ($delta) {
    case 'data':
      $block['subject'] = '';
      $options = open_platform_options($sections, $search_term, $fields, $advanced, $api_key);
      $op_data = open_platform_get_data($options);
      $block['content'] = open_platform_format_data('block', $op_data);

      break;
  }
  
  // Cache for 30 mins.
  cache_set('open_platform_block', $block, 'cache_block');
  //cache_set('open_platform_block', $block, 'cache_block', time() + 1800);
  
  return $block;
}

/**
 * Makes a webservice call to the Open Platform.
 * 
 * @param string $url
 *   The API URL.
 *  
 * @return string
 *   A string JSON format containing results of users query.
 */
function open_platform_get_content($url) {
  $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);

  $content = curl_exec($ch);
  curl_close($ch);
  return $content;
}

/**
 * Creates an array of user selected options.
 * 
 * 
 * @param string $section_param
 *   Section/catergory name to search in.
 * @param string $search_param
 *   Keyword search term.
 * @param array $fields_array
 *   Specific fields to return in search results.
 * @param array $advance_fields_array
 *   Adavnaced fields for users with an API key.
 * @param type $api_key
 *   The users API key.
 * 
 * @return array
 *   An array of user selected options.
 */
function open_platform_options($section_param, $search_param, array $fields_array, array $advance_fields_array, $api_key) {

  // Remove unwanted non-selected fields from array.
  foreach ($fields_array as $field_key => $field_item) {

    if ($field_item == '0') {

      unset($fields_array[$field_key]);
    }
  }
  
  // Remove unwanted non-selected fields from array.
  foreach ($advance_fields_array as $field_key => $field_item) {

    if ($field_item == '0') {

      unset($advance_fields_array[$field_key]);
    }
  }
  
  $api_key = variable_get('open_platform_api_key');
  
  // Check if user has an api key.
  if (!empty($api_key)) {
    $merged_fields = array_merge($fields_array, $advance_fields_array);
  }else {
    $merged_fields = $fields_array;
  }
  
  // Create comma seprated values.
  $fields = implode(",", $merged_fields);

  // An array of user selected options.
  $options = array(
    'section_param' => $section_param,
    'search_param' => $search_param,
    'fields' => $fields,
    'api_key' => $api_key,
  );

  return $options;
}

/**
 * Retruns an array of results from the Open platform based on user query.
 * 
 * @param array $options
 *   An array of user defined options.
 * 
 * @return array
 *   An array containing the response from an API call to the Open Platform.
 */
function open_platform_get_data($options) {
  $api_key = variable_get('open_platform_api_key');
  // Check if user has an api key.
  if (!empty($api_key)) {
    $url = OPEN_PLATFORM_SEARCH . $options['search_param'] . '&section=' . $options['section_param'] . '&show-fields=' . $options['fields'] . '&api-key=' . $options['api_key'];
  }
  else {
    $url = OPEN_PLATFORM_SEARCH . $options['search_param'] . '&section=' . $options['section_param'] . '&show-fields=' . $options['fields'];
  }
  $data = drupal_json_decode(open_platform_get_content($url));

  return $data;
}

/**
 * Returns formatted array, can be used to display content obtained from API call.
 * 
 * Depending on the mode parameter it will return themeable output for the block
 * template or an array that can be used to display the data returned. The
 * former is typically used to create the table on the page
 * "Guardian Open Platform content".
 * 
 * @param string $mode
 *   The type of content you want the data formatted for. Can either be
 *   "Preview" or "Block".
 * @param array $data
 *  An array containing the response from an API call to the Open Platform.
 *  
 * @return array
 *   
 */
function open_platform_format_data($mode, $data) {
  // Stop notices and warnings from appearing when user does not have api key.
  if (isset($data['response']['results'])) {
    $data_array = $data['response']['results'];
    $x = 0;
    foreach ($data_array as $key => $value) {
      // Remove any XSS issues from data.
      array_walk_recursive($data_array[$key], 'open_platform_filter_xss_array');
      
      // Stops unwanted error messages.
      if (isset($data_array[$key]['fields'])) {
        array_walk_recursive($data_array[$key]['fields'], 'open_platform_filter_xss_array');
      }    
      
      // Create links.
      $links[] = l($data_array[$key]['webTitle'], $data_array[$key]['webUrl']);

      // Thumbnails always show on previews but are optional on blocks depending on users options.
      if ($mode == 'preview') {
        $thumbnail[] = isset($data_array[$key]['fields']['thumbnail']) ? $data_array[$key]['fields']['thumbnail'] : NULL;
      }
      elseif ($mode == 'block') {
        $fields = variable_get('open_platform_fields');
        if ($fields['thumbnail'] == 0) {
          $thumbnail[] = isset($data_array[$key]['fields']['thumbnail']) ? $data_array[$key]['fields']['thumbnail'] : NULL;
        }
        else {
          $thumbnail[] = isset($data_array[$key]['fields']['thumbnail']) ? $data_array[$key]['fields']['thumbnail'] : NULL;
        }
      }

      $trail_text[] = isset($data_array[$key]['fields']['trailText']) ? $data_array[$key]['fields']['trailText'] : NULL;
      $title[] = isset($data_array[$key]['webTitle']) ? $data_array[$key]['webTitle'] : NULL;
      if ($mode == 'preview') {
        $wordcount[] = isset($data_array[$key]['fields']['wordcount']) ? $data_array[$key]['fields']['wordcount'] : NULL;
        $body[] = isset($data_array[$key]['fields']['body']) ? $data_array[$key]['fields']['body'] : NULL;
      }
      else {
        $wordcount[] = NULL;
        $body[] = NULL;
      }
      $x++;
      if ($mode == 'block' && $x >= 3) {
        break;
      }
    }
    $path = drupal_get_path('module', 'open_platform');
    $img_path = '/' . $path . '/img/poweredbyguardianBLACK.png';
    $logo_img = l('<img src="' . $img_path . '" />', 'http://www.guardian.co.uk', array(
      'attributes' => array(
        'class' => 'anchor-class', 'target' => '_blank'),
      'html' => TRUE));

    $template_vars = array(
      'links' => $links,
      'thumbnail' => $thumbnail,
      'trail_text' => $trail_text,
      'headline' => $title,
      'wordcount' => $wordcount,
      'body' => $body,
      'content_array' => $data_array,
      'logo' => $logo_img,
    );
  }
  else {
    // Stop notices and warnings from appearing when user does not have api key.
    $template_vars = array();
  }
 
  if ($mode == 'preview') {
    return $template_vars;
  }
  elseif ($mode == 'block') {

    return theme('open_platform_block', $template_vars);
  }
}

/**
 * Returns data from an API endpoint.
 * 
 * 
 * @param string $endpoint
 *   The end point to query.
 * @param string $id
 *   
 * @return array
 *   Contains response for API call.
 */
function open_platform_get_end_points($endpoint, $id = NULL) {
  switch ($endpoint) {
    case 'sections':
      $data = drupal_json_decode(open_platform_get_content(
              'http://content.guardianapis.com/sections'
          )
      );
      $data_array = $data['response']['results'];
      foreach ($data_array as $key => $value) {
        $endpoint_values[$data_array[$key]['id']] = t($data_array[$key]['webTitle']);
      }

      break;
    case 'item':
      $api_key = variable_get('open_platform_api_key');
      $data = drupal_json_decode(open_platform_get_content(
              "http://content.guardianapis.com/$id?format=json&api-key=$api_key&show-fields=body,wordcount"
          )
      );
      $endpoint_values = $data;

      break;

    default:
      break;
  }
  return $endpoint_values;
}

/**
 * Implements hook_theme().
 */
function open_platform_theme() {
  return array(
    'open_platform_block' => array(
      'variables' => array(
        'template_vars' => NULL,
      ),
      'template' => 'templates/open_platform_block'
    ),
  );
}

/**
 * Creates a node of type open_platform_articles.
 * 
 * 
 * @param string $headline
 *   News article headline used for node title.
 * @param string $body
 *   Content to put in body field of node.
 * @param int $word_count
 *   Number of words in body field.
 * @param string $content_id
 *   Unique Open Platform ID.
 * @param string $url
 *   Web URL for original content.
 * @param string $logo
 *   Powered by Guardian logo required by terms and conditions.
 */
function open_platform_create_node($headline = NULL, $body = NULL, $word_count = NULL, $content_id = NULL, $url = NULL, $logo) {
  global $user;

  $orignal_link = l(t('Original article'), $url);
  $body_content = $body . '<br />' . $orignal_link . '<br />' . $logo;
  $node = new stdClass();
  $node->language = LANGUAGE_NONE;
  $node->type = 'open_platform_articles';
  $node->uid = $user->uid;
  $node->title = $headline;
  $node->field_open_platform_word_count[$node->language][0]['value'] = $word_count;
  $node->field_open_platform_id[$node->language][0]['value'] = $content_id;
  $node->body[$node->language] = array(0 => array('value' => $body_content, 'format' => 'full_html'));
  $node->body[$node->language][0]['summary'] = text_summary($body);

  node_object_prepare($node);

  node_save($node);
}

/**
 * Implements open_platform_element_info_alter().
 *
 * Sets the text format processor to a custom callback function.
 */
function open_platform_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'open_platform_filter_process_format';
      }
    }
  }
}

/**
 * Callback for open_platform_element_info_alter().
 *
 * Sets the input format for Open Platform content type to full HTML.
 */
function open_platform_filter_process_format($element) {
  $element = filter_process_format($element);
  // Change the default text format of the 'body' field to 'Full HTML'.
  if ($element['#bundle'] == 'open_platform_articles' && $element['#field_name'] == 'body') {
    $element['format']['format']['#default_value'] = 'full_html';
  }
  return $element;
}

/**
 * Get all the nodes belonging to open_platform_articles content type.
 * 
 * @return array
 *  An array of node IDs
 */
function open_platform_content() {

  // Get node ids for op ct.
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_platform_articles');

  $result = $query->execute();
  $node_nids = array_keys($result['node']);

  return $node_nids;
}

/**
 * Updates existing nodes with content obtained from the Open Platform.
 *    
 * @param string $nid
 *   Node ID of node that will be updated.
 */
function open_platform_update_node($nid) {
  $node = node_load($nid);

  // Get Content ID.
  $content_id = $node->field_open_platform_id['und'][0]['safe_value'];

  // Get updates of content already published.
  $new_data = open_platform_get_end_points('item', $content_id);
  $body_content = $new_data['response']['content']['fields']['body'];
  // Update node.
  $node->language = LANGUAGE_NONE;
  $node->title = isset($new_data['response']['content']['webTitle']) ? $new_data['response']['content']['webTitle'] : NULL;
  $node->body[$node->language] = isset($new_data['response']['content']['fields']['body']) ? array(0 => array('value' => $body_content, 'format' => 'full_html')) : NULL;
  $node->field_open_platform_word_count[$node->language][0]['value'] = isset($new_data['response']['content']['fields']['wordcount']) ? $new_data['response']['content']['fields']['wordcount'] : NULL;
  node_save($node);
}

/**
 * Implements hook_cron_queue_info()
 */
function open_platform_cron_queue_info() {
  $queues['open_platform_update_content'] = array(
    'worker callback' => 'open_platform_update_node',
    'time' => 60,
  );

  return $queues;
}

/**
 * Implements hook_cron().
 * 
 * This is addded to comply with the terms and conditions for usage of the Open
 * Platform API (5. Lifecycle of OP Content) please visit link
 * below for more info.
 * http://www.theguardian.com/open-platform/terms-and-conditions
 */
function open_platform_cron() {

  $queue = DrupalQueue::get('open_platform_update_content');

  $content_to_update = open_platform_content();

  foreach ($content_to_update as $item) {
    $queue->createItem($item);
    watchdog('inside loop', $item);
  }
}

/**
 * Check if the user selected a field from the list of available fields.
 * 
 * @param string $field_name
 *  Name of field to check against.
 * @param array $fields
 *  An array of user selected fields.
 * 
 * @return boolean
 *   Returns true if the field was selected by the user.
 */
function open_platform_user_selected_fields($field_name, $fields) {

  foreach ($fields as $name => $value) {
    // Make sure we are testing the right field.
    if ($name == $field_name) {
      // Check if field was selected by user.
      if ($name == $value) {
        return TRUE;
      }
    }
  }
}

/**
 * Checks to determine the status of content obtained from Open Platform.
 * 
 * @param int $publish_check
 *   Value to determine if content already exist.
 *   @see open_platform_check_published_content()
 * @param string $body
 *   Body of content obtained from open_platform
 * 
 * @return string $status
 *   The status value shown in the preview form.
 */
function open_platform_check_status_of_content($publish_check, $body) {
  if ($publish_check == 1) {
    $status = "Already published";
  }
  elseif ($body == "<!-- Redistribution rights for this field are unavailable -->") {
    $status = "Not available for redistribution";
  }
  else {
    $status = "Available for publication";
  }

  return $status;
}

/**
 * Checks if content obtained for the Open Platform already exist as a node.
 * 
 * 
 * @param string $content_id
 *   The unqiue ID supplied by the Open Platform.
 * @return boolean
 */
function open_platform_check_published_node($content_id) {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_platform_articles')
      ->fieldCondition('field_open_platform_id', 'value', $content_id, '=');

  $result = $query->execute();

  if (empty($result)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Used by array_walk_recursive to apply filter_xss to Open Platform data.
 * 
 * @param string $item.
 *   array item.
 * @param string $index
 *   array index.
 * @return string $safe_value
 *   returns safe value.
 */
function open_platform_filter_xss_array($item, $index = NULL) {
  $safe_value = filter_xss($item);

  return $safe_value;
}

/**
 * Mocks the response returned from the Open platform API for Unit testing.
 * 
 * @return array
 * @see testFormatData()
 */
function open_platform_get_dummy_data() {
  return $data = array(
    'response' => array(
      'status' => '[data]',
      'userTier' => '[data]',
      'total' => '[data]',
      'startIndex' => '[data]',
      'pageSize' => '[data]',
      'currentPage' => '[data]',
      'pages' => '[data]',
      'orderBy' => '[data]',
      'results' => array(
        0 => array(
          'id' => '[data]',
          'sectionId' => '[data]',
          'sectionName' => '[data]',
          'webPublicationDate' => '[data]',
          'webTitle' => '[data]',
          'webUrl' => '[data]',
          'apiUrl' => '[data]',
          'fields' => array(
            'trailText' => '[data]',
            'headline' => '[data]',
            'body' => '[data]',
            'thumbnail' => '[data]',
            'wordcount' => '[data]',
          ),
        ),
      ),
    ),
  );
}

/**
 * Mocks the expected response of open_platform_format_data for unit testing.
 * 
 * @return array
 * 
 * @see open_platform_format_data()
 */
function open_platform_formatted_data() {

  return array(
    'links' => array(0 => '<a href="/%5Bdata%5D">[data]</a>', ),
    'thumbnail' => array(0 => '[data]'),
    'trail_text' => array(0 => '[data]'),
    'headline' => array(0 => '[data]'),
    'wordcount' => array(0 => '[data]'),
    'body' => array(0 => '[data]'),
    'content_array' => array(0 => array(
        'id' => '[data]',
        'sectionId' => '[data]',
        'sectionName' => '[data]',
        'webPublicationDate' => '[data]',
        'webTitle' => '[data]',
        'webUrl' => '[data]',
        'apiUrl' => '[data]',
        'fields' => array(
          'trailText' => '[data]',
          'headline' => '[data]',
          'body' => '[data]',
          'thumbnail' => '[data]',
          'wordcount' => '[data]',
        ),
      ),
    ),
    'logo' => '<a href="http://www.guardian.co.uk" class="anchor-class" target="_blank"><img src="/sites/all/modules/open_platform/img/poweredbyguardianBLACK.png" /></a>',
  );
}

/**
 * Mocks the expected results when creating an array of user selected options.
 * 
 * @return array.
 * 
 * @see open_platform_options()
 */
function open_platform_options_data() {
  return array(
    'section_param' => '',
    'search_param' => '',
    'fields' => '',
    'api_key' => '',
  );
}

/**
 * Mocks the expected array when checking for users chosen fields.
 * 
 * @return array.
 * 
 * @see open_platform_options()
 */
function open_platform_fields_data() {
  return array(
    'trailText' => 'trailText',
    'headline' => 'headline',
    'lastModified' => 'thumbnail',
    'standfirst' => 'standfirst',
    'thumbnail' => 'thumbnail',
    'wordcount' => 'wordcount',
  );
}
