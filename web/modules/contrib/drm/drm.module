<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Entity;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Field\Plugin\Field\FieldWidget\EntityReferenceAutocompleteWidget;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\quickedit\Form\QuickEditFieldForm;

/**
 * Implements hook_help().
 */
function drm_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the drm module.
    case 'help.page.drm':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Dependant Reference Method') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_form_alter().
 */
function drm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ((method_exists($form_state->getFormObject(), 'getEntity') && !$form_state->isCached()) &&
      (!isset($_GET['ajax_form']) || $_GET['ajax_form'] != 1) &&
      (!isset($_GET['_wrapper_format']) || $_GET['_wrapper_format'] != 'drupal_ajax')
  ) {
    $entity = $form_state->getFormObject()->getEntity();

    if ($entity instanceof ContentEntityInterface) {
      $form['#attached']['library'][] = 'drm/dependentField';
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function drm_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {

  // TODO check patch inline_entity_form_2973571_1.patch.
  $form_object = $form_state->getFormObject();
  
  // Establish whether we're in a normal EntityForm context or an inline
  // QuickeditFieldForm context and retrieve the entity from the respectively
  // appropriate place.
  if ($form_object instanceof EntityFormInterface) {
    $entity = $form_object->getEntity();
  }
  else {
    if ($form_object instanceof QuickEditFieldForm) {
      $entity = $form_state->getBuildInfo()['args'][0];
    }
    else {
      $entity = new stdClass();
    }
  }

  if ($entity instanceof Entity) {
    // Check if the field is a dependent field.
    /** @var \Drupal\Core\Field\FieldItemList $items */
    $items         = $context['items'];
    $current_field = $items->getFieldDefinition()->getName();

    // Check if field is configured as parent of one dependent field.
    if (method_exists($entity, 'getFieldDefinitions')) {
      $fields_definitions = $entity->getFieldDefinitions();
      $parent_field       = NULL;

      // Check if current field has children.
      $child_fields = [];
      foreach ($fields_definitions as $field_name => $field_definition) {
        $handler = $field_definition->getSetting('handler');
        if ($handler == 'drm_view') {
          $handle_settings = $field_definition->getSetting('handler_settings');
          $parent_field    = $handle_settings['drm_view']['parent_field'];
          $has_children    = ($parent_field == $current_field);

          if ($has_children) {
            $child_fields[] = $field_name;
          }
        }
      }

      // Add ajax to parent field.
      if (count($child_fields)) {
        $children = isset($element['#ajax']['drm_children']) ? $element['#ajax']['drm_children'] : [];
        $children += $child_fields;

        $ajax_definition = [
          'callback' => '\Drupal\drm\Plugin\EntityReferenceSelection\DRMViewsSelection::updateDependentField',
          'event' => 'change',
          'progress' => [
            'type' => 'throbber',
            'message' => t('Filtering...'),
          ],
          'drm_children' => $children,
        ];

        if (!empty($context['widget']) && $context['widget'] instanceof EntityReferenceAutocompleteWidget && !empty($element['target_id'])) {
          $ajax_definition['event'] = 'autocompleteclose';
          $element['target_id']['#ajax'] = $ajax_definition;
        }
        else {
          $element['#ajax'] = $ajax_definition;
        }

      }

    }

  }

}