<?php

/**
 * @file
 * Migrate HTML to Paragraphs module file.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function migrate_html_to_paragraphs_file_delete(EntityInterface $entity) {
  // Delete the file's entry from the HTML inline file
  // migration mapping table if available.
  \Drupal::database()->delete('migrate_html_to_paragraphs_map_inline_file')
    ->condition('fid', $entity->id())
    ->execute();
}

/**
 * Delete Paragraph entities which are considered being orphaned.
 *
 * @param array $pids
 *   Array with Paragraph Ids.
 */
function migrate_html_to_paragraphs_delete_orphaned_paragraphs(array $pids) {
  /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var \Drupal\Core\Queue\QueueInterface $queue */
  $queue = $queue_factory->get('migrate_html_to_paragraphs_delete_orphaned_paragraphs');

  // Only add new items if the queue is empty, otherwise we risk the queue
  // being stacked up with duplicate entries (deletions of the identical
  // Paragraph items again and again).
  // Drupal Core has no solution out-of-the-box for Queues with unique entries.
  //
  // Workaround: check if there are entries for our queue factory and if so
  // skip adding new items to our queue.
  if ($queue->numberOfItems()) {
    return;
  }

  // Proceed adding our deletions of orphaned paragraphs to the queue.
  foreach ($pids as $pid) {
    $item = new \stdClass();
    $item->pid = $pid;
    $queue->createItem($item);
  }
}
