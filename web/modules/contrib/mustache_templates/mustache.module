<?php

/**
 * @file
 * Mustache Templates module file.
 */

use Drupal\Core\PhpStorage\PhpStorageFactory;

/**
 * Implements hook_theme().
 */
function mustache_theme($existing, $type, $theme, $path) {
  // See the README for render array examples,
  // and have a look at the helper class MustacheRenderTemplate.
  return ['mustache' => ['render element' => 'element']];
}

/**
 * Implements hook_library_info_build().
 */
function mustache_library_info_build() {
  // Rebuild libraries for summable scripts, if enabled.
  /** @var \Drupal\mustache\Summable\SummableScriptsInterface $summables */
  $summables = \Drupal::service('mustache.summables');
  if ($summables->isEnabled()) {
    return \Drupal::service('mustache.summables')->getAllLibraries();
  }
  return [];
}

/**
 * Implements hook_library_info_alter().
 */
function mustache_library_info_alter(&$libraries, $extension) {
  if ($extension === 'mustache' && function_exists('libraries_get_path')) {
    $libraries['mustachejs']['js'] = ['/' . libraries_get_path('mustache') . '/mustache.min.js' => ['minified' => TRUE]];
  }
}

/**
 * Implements hook_cache_flush().
 */
function mustache_cache_flush() {
  // Wipe the Mustache PHP storage cache.
  PhpStorageFactory::get('mustache')->deleteAll();
}

/**
 * Implements hook_mustache_templates().
 */
function mustache_mustache_templates() {
  $path = drupal_get_path('module', 'mustache') . '/templates/';
  return ['summable' => ['file' => $path . 'summable.mustache.tpl']];
}

/**
 * Preprocess content markup provided by Mustache templates.
 *
 * @param array &$variables
 *   The variables array holding the render element.
 */
function template_preprocess_mustache(array &$variables) {
  $element = &$variables['element'];
  $variables['content'] = &$element['#content'];
  $variables['template'] = &$element['#template'];
  $variables['use_sync'] = &$element['#use_sync'];
  $variables['sync'] = &$element['#sync'];
}
