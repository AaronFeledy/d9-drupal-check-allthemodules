<?php

/**
 * @file
 * Contains minimum_cardinality_required.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function minimum_cardinality_required_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the minimum_cardinality_required module.
    case 'help.page.minimum_cardinality_required':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Minimum cardinality set for drupal fields') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function minimum_cardinality_required_entity_type_alter(array &$entity_types) {
  $entity_types['entity_form_display']->setClass('Drupal\minimum_cardinality_required\Form\EntityFormDisplay');
}

/**
 * Implements hook_entity_type_build().
 */
function minimum_cardinality_required_entity_type_build(array &$entity_types) {
  $entity_types['field_storage_config']->setFormClass('edit', '\Drupal\minimum_cardinality_required\Form\FieldStorageConfigEditForm');

}

/**
 * Implements hook_field_widget_form_alter().
 */
function minimum_cardinality_required_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  if (!method_exists($field_definition, 'getOriginalId')) {
    return;
  }
  $field_instance = $context['items']->getFieldDefinition()->getOriginalId();
  $config = \Drupal::config('field.field.' . $field_instance);
  $cardinality_number_fake = $config->get('cardinality_number_fake');
  $element['#attributes']['class'][] = 'myclass';
  if ($cardinality_number_fake = abs($cardinality_number_fake)) {
    $element['#field_info'] = $field_instance;
    $element['#_widget'] = $context['widget'];
    if ($cardinality_number_fake > $element['value']['#delta'] && $element['value']['#field_parents'][0] != 'default_value_input') {
      $element['value']['#required'] = TRUE;
    }
  }
}

/**
 * Implements hook_entity_prepare_form().
 */
function minimum_cardinality_required_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  if (!method_exists($form_state->getStorage()['form_display'], 'getComponents')) {
    return;
  }
  $component = $form_state->getStorage()['form_display']->getComponents();
  foreach ($component as $name => $options) {
    if (0 !== strpos($name, 'field')) {
      continue;
    }
    $items = $entity->get($name);
    $field_definition = $items->getFieldDefinition();
    if (!method_exists($field_definition, 'getOriginalId')) {
      continue;
    }
    $field_instance = $items->getFieldDefinition()->getOriginalId();
    $config = \Drupal::config('field.field.' . $field_instance);
    $cardinality_number_fake = $config->get('cardinality_number_fake');
    if ($cardinality_number_fake = abs($cardinality_number_fake)) {
      $items = $entity->get($name);
      for ($i = 1; $i < $cardinality_number_fake && $cardinality_number_fake > count($items); $i++) {
        $items->appendItem();
      }
    }
  }
}
