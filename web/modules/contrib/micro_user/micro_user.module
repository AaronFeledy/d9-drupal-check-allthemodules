<?php

/**
 * @file
 * Contains micro_user.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\UserInterface;

/**
 * Implements hook_help().
 */
function micro_user_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the micro_user module.
    case 'help.page.micro_user':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provide specific implementations for user per micro site') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function micro_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add our validate function to prevent user to login on micro site on which
  // they are not users.
  $form['#validate'][] = 'micro_user_validate_user_login';
}

function micro_user_validate_user_login($form, FormStateInterface $form_state) {
  $accounts = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name' => $form_state->getValue('name'), 'status' => 1]);
  $account = reset($accounts);
  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
  $negotiator = \Drupal::service('micro_site.negotiator');
  $configMicroUser = \Drupal::config('micro_user.settings');
  if ($site = $negotiator->getActiveSite()) {
    if ($account instanceof UserInterface) {
      $site_users = $site->getAllUsersId();
      if (!in_array($account->id(), $site_users)) {
        $form_state->setErrorByName('name', t('Unrecognized username on this site.'));
      }
    }
  }
  else {
    if ($account instanceof UserInterface) {
      if ($account->hasPermission('administer site entities')) {
        return;
      }
      if (!$account->hasPermission('login master host') && $configMicroUser->get('prevent_login_master_host')) {
        $form_state->setErrorByName('name', t('Unrecognized username.'));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function micro_user_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add our validate function to prevent user to register on micro site if
  // they have already an account on the factory. Actually display only a
  // message to the user about the action to do. May be in the futur, we could
  // provide a request membership on the micro site.
  $negotiator = \Drupal::service('micro_site.negotiator');
  if ($site = $negotiator->getActiveSite()) {
    // Push our validate function before the $entity->validate() for the
    // register form.
    array_unshift($form['#validate'], 'micro_user_validate_user_register');
    if ($form){

    }
  }
}

function micro_user_validate_user_register($form, FormStateInterface $form_state) {
  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
  $negotiator = \Drupal::service('micro_site.negotiator');
  if ($site = $negotiator->getActiveSite()) {
    $accounts = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name' => $form_state->getValue('name'), 'mail' => $form_state->getValue('mail'), 'status' => 1]);
    if (!empty($accounts)) {
      $form_state->setErrorByName('name', t('Your username and mail are already registered on the site. You should request to the site administrator to add your account as a site member. You can use the site contact page to perform your request.'));
      $form_state->setErrorByName('mail');
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function micro_user_entity_base_field_info(EntityTypeInterface $entity_type) {
//  $fields = [];
//
//  if ($entity_type->id() === 'user') {
//    $fields['registered_on_site'] = BaseFieldDefinition::create('entity_reference')
//      ->setLabel(t('Registered on site'))
//      ->setDescription(t('The site on which the user has been registered.'))
//      ->setRevisionable(TRUE)
//      ->setSetting('target_type', 'site')
//      ->setSetting('handler', 'default')
//      ->setSetting('handler_settings', [
//        'target_bundles' => NULL,
//        'auto_create' => FALSE,
//      ])
//      ->setDefaultValueCallback('Drupal\micro_user\MicroUserManager::getCurrentSiteId')
//      ->setTranslatable(TRUE)
//      ->setDisplayConfigurable('view', TRUE);
//  }
//
//  return $fields;
}

//$form['registration_cancellation']['user_register'] = [
//  '#type' => 'radios',
//  '#title' => $this->t('Who can register accounts?'),
//  '#default_value' => $config->get('register'),
//  '#options' => [
//    USER_REGISTER_ADMINISTRATORS_ONLY => $this->t('Administrators only'),
//    USER_REGISTER_VISITORS => $this->t('Visitors'),
//    USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL => $this->t('Visitors, but administrator approval is required'),
//  ]
//];
