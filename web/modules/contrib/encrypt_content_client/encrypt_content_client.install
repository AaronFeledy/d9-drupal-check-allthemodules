<?php

/**
 * @file
 * Create database table and remove it on unistall.
 *
 * Module: encrypt_content_client module.
 */

use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function encrypt_content_client_install() {
  // Create a basic config entry for the article node.
  $config = \Drupal::service('config.factory')->getEditable('encrypt_content_client.policy.settings');
  //$config->set('article', ['title'])->save();
}

/**
 * Implements hook_uninstall().
 */
function encrypt_content_client_uninstall() {
  // TODO: Implement any uninstall actions.
}

/**
 * Implements hook_schema().
 */
function encrypt_content_client_schema() {
  $schema['encrypt_content_client_encryption_containers'] = [
    'description' => 'Table for storing encrypted data-keys.',
    'fields' => [
      'id' => [
        'description' => 'ID of an entity being encrypted.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'entity_id' => [
        'description' => 'ID of the entity being encrypted.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'entity_type' => [
        'description' => 'Type of the entity being encrypted.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'encrypted_data_keys' => [
        'description' => 'The type of this node.',
        'type' => 'text',
      ],
    ],
    'unique keys' => [
      'id' => ['id'],
    ],
    'primary key' => ['id'],
  ];

  $schema['encrypt_content_client_encrypted_fields'] = [
    'description' => 'Table for storing encrypted fields.',
    'fields' => [
      'id' => [
        'description' => 'ID of an entity being encrypted.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'encryption_container_id' => [
        'description' => 'ID of the corresponding encryption container.',
        'type' => 'int',
        'length' => 255,
      ],
      'field_name' => [
        'description' => 'Shortname of the encrypted field.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'encrypted_content' => [
        'description' => 'JSON of encrypted field.',
        'type' => 'text',
      ],
    ],
    'unique keys' => [
      'id' => ['id'],
    ],
    'primary key' => ['id'],
  ];
  
  return $schema;
}
