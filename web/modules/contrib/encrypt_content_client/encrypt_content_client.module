<?php

/**
 * @file
 * Contains content_client_encrypt.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function encrypt_content_client_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_client_encrypt module.
    case 'help.page.content_client_encrypt':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Client-side Content Encryption') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments().
 */
function encrypt_content_client_page_attachments(&$page) {
  $user = \Drupal::currentUser();
  // Library for re-encryption of nodes.
  $page['#attached']['library'][] = 'encrypt_content_client/update_data_keys_js';
  $page['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['uid'] = $user->id();
}

/**
 * Implements hook_form_alter().
 */
function encrypt_content_client_form_node_form_alter(&$form, &$form_state, $form_id) {
  $config = \Drupal::config('encrypt_content_client.policy.settings');
  $node = $form_state->getFormObject()->getEntity();
  $node_type = $node->getType();
  
  // Attach a button for 
  if ($form_id == "user_profile_form") {
    // TODO
  }
  
  if ($node->id()) {
    $form_type = "edit";
    $form['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['node_id'] = $node->id();
  }
  else {
    $form_type = "create";
  }
  
  $form['#attached']['library'][] = 'encrypt_content_client/wrapper_js';
  
  // Check if encryption policy exists for this node type.
  //if ($config->get($node_type)) {
    // Get all fields of a node so it's possible to build a node object for the REST request.
    $bundle_fields = \Drupal::entityManager()->getFieldDefinitions('node', $node_type);
    $node_fields = [];
    foreach ($bundle_fields as $field) {
      if (!$field->isReadOnly()) {
        array_push($node_fields, $field->getName());
      }
    }
    $form['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['node_fields'] = $node_fields;
    
    // Pass more variables to JavaScript code.
    $form['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['form_type'] = $form_type;
    $form['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['node_type'] = $node_type;
    $form['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['fields_policy'] = $config->get($node_type);
  //}

}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function encrypt_content_client_node_view(array &$build, Drupal\node\Entity\Node $node, Drupal\Core\Entity\Entity\EntityViewDisplay $display, $view_mode) {
  $config = \Drupal::config('encrypt_content_client.policy.settings');
  $node_type = $node->getType();

  $build['#attached']['library'][] = 'encrypt_content_client/wrapper_js';
  $build['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['form_type'] = "view";
  $build['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['node_id'] = $node->id();
  $build['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['node_type'] = $node_type;
  $build['#attached']['drupalSettings']['encrypt_content_client']['wrapper_js']['fields_policy'] = $config->get($node_type);
}

/**
 * Implements hook_node_predelete().
 */
function encrypt_content_client_node_predelete(Drupal\Core\Entity\EntityInterface $node) {
  $entity_id = $node->id();
  $entity_type = $node->getType();
  
  $query = \Drupal::database()->select('encrypt_content_client_encryption_containers', 'encryption_containers')
    ->fields('encryption_containers', ['encrypted_data_keys'])
    ->condition("encryption_containers.entity_id", $entity_id)
    ->condition("encryption_containers.entity_type", $entity_type);
    
  if($query->execute()->fetchAssoc()){
    // Delete the encryption container for this node.
    \Drupal::database()->delete('encrypt_content_client_encryption_containers')
	    ->condition("entity_id", $entity_id)
      ->condition("entity_type", $entity_type)
	    ->execute();
  
    // Delete corresponding encrypted fields entries.
    \Drupal::database()->delete('encrypt_content_client_encrypted_fields')
	    ->condition("entity_id", $entity_id)
      ->condition("entity_type", $entity_type)
	    ->execute();
  }
  
}

/**
 * Implements hook_menu_alter().
 */
function encrypt_content_client_menu_alter(&$items) {
  // Remove the 'contact' tab.
  $items['user/%user/contact']['type'] = MENU_CALLBACK;
}