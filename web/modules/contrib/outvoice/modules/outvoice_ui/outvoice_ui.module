<?php

/**
 * @file
 * Modules to provide interface for OutVoice.
 */

use Api\OutvoiceApi;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityFormInterface;

/**
 * Implements hook_help().
 */
function outvoice_ui_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    case 'help.page.outvoice_ui':
      $output = '<h3>' . t('OutVoice UI Help') . '</h3>';
      $output .= '<p>' . t('To use OutVoice, an account is required on the <a href=":platform">OutVoice Platform</a>.', [':platform' => 'https://outvoice.com']) . '</p>';
      return $output;
  }

}

/**
 * Adds OutVoice interface to node/add/* form.
 */
function outvoice_ui_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_state->getFormObject() instanceof EntityFormInterface) {
    $entity_type = $form_state->getFormObject()
      ->getEntity()
      ->getEntityTypeId();
    if ($entity_type == 'node') {
      $config = \Drupal::config('outvoice.settings');
      $outvoice_nodes = $config->get('content_types');
      $content_type = $form_state->getFormObject()
        ->getEntity()
        ->getType();
      if (in_array($content_type, $outvoice_nodes)) {
        $current_operation = $form_state->getFormObject()->getOperation();
        $allowed_operations = ['default', 'edit'];
        $administer_permitted = \Drupal::currentUser()
          ->hasPermission('pay with outvoice');
        if (in_array($current_operation, $allowed_operations) && $administer_permitted) {
          // Wrap in a fieldset.
          $form['outvoice'] = [
            '#type' => 'details',
            '#title' => 'OutVoice',
            '#collapsed' => FALSE,
            '#collapsible' => TRUE,
            '#group' => 'advanced',
            '#open' => TRUE,
            '#attributes' => ['class' => ['outvoice-settings-form']],
            '#weight' => 100,
          ];
          $form['outvoice']['text'] = [
            '#markup' => '<div class="outvoice-options"></div>',
          ];
          $form['outvoice']['outvoice_amount'] = [
            '#type' => 'hidden',
            '#default_value' => $form_state->getValue('outvoice_amount'),
          ];
          $form['outvoice']['outvoice_contributor'] = [
            '#type' => 'hidden',
            '#default_value' => $form_state->getValue('outvoice_contributor'),
          ];
          $form['outvoice']['outvoice_amount_1'] = [
            '#type' => 'hidden',
            '#default_value' => $form_state->getValue('outvoice_amount_1'),
          ];
          $form['outvoice']['outvoice_contributor_1'] = [
            '#type' => 'hidden',
            '#default_value' => $form_state->getValue('outvoice_contributor_1'),
          ];
          $form['outvoice']['outvoice_access_token'] = [
            '#type' => 'hidden',
            '#default_value' => $form_state->getValue('outvoice_access_token'),
          ];
          $form['outvoice']['outvoice_refresh_token'] = [
            '#type' => 'hidden',
            '#default_value' => $form_state->getValue('outvoice_refresh_token'),
          ];
          $form['outvoice']['#attached']['library'][] = 'outvoice_ui/outvoice_ui.outvoice';
          $form['outvoice']['#attached']['drupalSettings']['outvoice_ui']['logo'] = "/" . drupal_get_path('module', 'outvoice_ui') . '/img/outvoice.png';
          foreach (array_keys($form['actions']) as $action) {
            if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
              $form['actions'][$action]['#submit'][] = '_outvoice_ui_form_submit';
              $form['#validate'][] = '_outvoice_ui_validate';
            }
          }
        }
      }
    }
  }

}

/**
 * Validates inputs on OutVoice interface.
 */
function _outvoice_ui_validate(array &$form, FormStateInterface $form_state) {

  $low = FALSE;
  $high = FALSE;
  $amt = $form_state->getValue('outvoice_amount');
  $amt1 = $form_state->getValue('outvoice_amount_1');
  if (!empty($amt)) {
    if ($amt < 5) {
      $low = TRUE;
    }
    if ($amt > 500) {
      $high = TRUE;
    }
  }
  if (!empty($amt1)) {
    if ($amt1 < 5) {
      $low = TRUE;
    }
    if ($amt1 > 500) {
      $high = TRUE;
    }
  }
  if ($low) {
    $form_state->setErrorByName(
      'outvoice',
      "Please enter an amount larger than $5. To publish without using outvoice, 
      click the X at the bottom right corner of the OutVoice dialog.");
  }
  if ($high) {
    $form_state->setErrorByName(
      'outvoice',
      "You are not authorized for amounts greater than $500. To publish without using outvoice, 
      click the X at the bottom right corner of the OutVoice dialog.");
  }

}

/**
 * Custom submit handler for OutVoice.
 */
function _outvoice_ui_form_submit($form, FormStateInterface $form_state) {

  $access_token = $form_state->getValue('outvoice_access_token');
  $refresh_token = $form_state->getValue('outvoice_refresh_token');
  $node = $form_state->getFormObject()->getEntity();
  $nid = $node->id();
  $title = $node->getTitle();
  $data = [
    'freelancer' => $form_state->getValue('outvoice_contributor'),
    'amount' => $form_state->getValue('outvoice_amount'),
    'freelancer1' => $form_state->getValue('outvoice_contributor_1'),
    'amount1' => $form_state->getValue('outvoice_amount_1'),
    'currency' => 'USD',
    'currency1' => 'USD',
    'url' => \Drupal::request()->getSchemeAndHttpHost() . "/node/" . $nid,
    'title' => $title,
  ];
  $request = new OutvoiceApi();
  $request->setTokens($access_token, $refresh_token);
  $message = $request->payment($data);
  $messenger = \Drupal::messenger();
  $messenger->addMessage($message, $messenger::TYPE_STATUS);

}
