<?php

/**
 * @file
 * Single interface to analytics tag management using Â© Tealium iQ.
 */

use Drupal\tealium\Data\TealiumUtagData;
use Drupal\tealium\Data\TealiumJqueryEventBinding;

/**
 * Implements hook_theme().
 */
function tealium_theme($existing, $type, $theme, $path) {
  return [
    'tealium' => [
      'template'  => 'tealium',
      'path'      => $path . '/templates',
      'variables' => [
        'account'        => NULL,
        'profile'        => NULL,
        'environment'    => NULL,
        'utag_async'     => NULL,
        'data_variables' => NULL,
        'view_variables' => NULL,
        'link_variables' => NULL,
        'bind_variables' => [],
      ],
    ],
  ];
}

/**
 * Implements template_preprocess_HOOK().
 *
 * @param array $variables
 *   Template variables array keyed by variable name. The following keys are
 *   expected:
 *   - 'account' <string>
 *   - 'profile' <string>
 *   - 'environment' <string>
 *   - 'data_variables' <TealiumUtagData|null>
 *     Variables to be set in the Tealium universal data object.
 *   - 'view_variables' <TealiumUtagData|null>
 *     Variables to be sent to Tealium as a 'view' event on page load.
 *   - 'link_variables' <TealiumUtagData|null>
 *     Variables to be sent to Tealium as a 'link' event on page load.
 *   - 'bind_variables' <TealiumJqueryEventBinding[]>
 *     Variables to be sent to Tealium as a tracking event,
 *     when a DOM element event fires.
 * @param string $hook
 *   The name of the called hook.
 *
 * @link http://wiki.tealiumiq.com/index.php/Data_Object
 * @link http://wiki.tealiumiq.com/index.php/AJAX/Flash
 *
 * @ingroup themeable
 */
function template_preprocess_tealium(array &$variables, $hook) {
  // Check if all required keys exist in $variables.
  $required_keys = [
    'utag_async',
    'data_variables',
    'view_variables',
    'link_variables',
    'bind_variables',
  ];
  if (!is_array($variables) || count(array_intersect_key(array_flip($required_keys), $variables)) != count($required_keys)) {
    return;
  }

  if ($variables['utag_async']) {
    $variables['utag_async'] = 'true';
  }
  else {
    $variables['utag_async'] = 'false';
  }

  $data_variables = $variables['data_variables'];
  $view_variables = $variables['view_variables'];
  $link_variables = $variables['link_variables'];

  $variables['data_variables_js'] = '';
  if ($data_variables instanceof TealiumUtagData) {
    $variables['#attached']['drupalSettings']['tealium']['tealium']['utagData'] = $data_variables->getAllDataSourceValues();
  }

  $variables['view_variables_js'] = '';
  if ($view_variables instanceof TealiumUtagData) {
    $variables['#attached']['drupalSettings']['tealium']['tealium']['utagView'] = $view_variables->getAllDataSourceValues();
  }

  $variables['link_variables_js'] = '';
  if ($link_variables instanceof TealiumUtagData) {
    $variables['#attached']['drupalSettings']['tealium']['tealium']['utagLink'] = $link_variables->getAllDataSourceValues();
  }

  $bind_variables = [];
  foreach ($variables['bind_variables'] as $bind_definition) {
    if ($bind_definition instanceof TealiumJqueryEventBinding) {
      $bind_variables[] = $bind_definition->getJqueryCodeToAttachBindings();
    }
  }

  $variables['bind_variables_js'] = implode(PHP_EOL, $bind_variables);
}

/**
 * Implements hook_page_bottom().
 */
function tealium_page_bottom(array &$page_bottom) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  if (!$is_admin) {
    $config = \Drupal::config('tealium.settings');

    /** @var \Drupal\tealium\TealiumDataServiceInterface $data_service */
    $data_service = \Drupal::service('tealium.data_service');

    $page_bottom['tealium'] = [
      '#theme' => 'tealium',
      '#account' => $config->get('tealium_account'),
      '#profile' => $config->get('tealium_profile'),
      '#environment' => $config->get('tealium_environment'),
      '#utag_async' => $config->get('tealium_utag_async'),
      '#data_variables' => $data_service->getData(),
      '#view_variables' => $data_service->getViewData(),
      '#link_variables' => $data_service->getLinkData(),
      '#bind_variables' => $data_service->getBindData(),
      '#weight' => -1000,
    ];

  }
}

/**
 * Implements hook_page_attachments().
 */
function tealium_page_attachments(array &$attachments) {
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

  if (!$is_admin) {
    $attachments['#attached']['library'][] = 'tealium/tealium';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function tealium_page_attachments_alter(array &$attachments) {
  $config = \Drupal::config('tealium.settings');
  $attachments['#attached']['library'][] = 'tealium/tealium';
  $attachments['#attached']['drupalSettings']['tealium']['tealium'] = [
    'account' => $config->get('tealium_account'),
    'profile' => $config->get('tealium_profile'),
    'environment' => $config->get('tealium_environment'),
    'async' => $config->get('tealium_utag_async'),
  ];
}
