<?php

/**
 * @file
 * Elastic Path module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_help().
 */
function ep_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ep':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Elastic Path module allows users to integrate with <a href=":ep">Elastic Path</a>.', [':ep' => 'https://www.elasticpath.com']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_migration_plugins_alter().
 */
function ep_migration_plugins_alter(array &$migrations) {
  $ep_config = \Drupal::config('ep.settings');
  $cortex_url = $ep_config->get('cortex.base_url');
  $cortex_store = $ep_config->get('cortex.store');
  $cortex_username = Settings::get('ep.cortex_username');
  $cortex_password = Settings::get('ep.cortex_password');
  $aws_api_id = Settings::get('ep.aws_api_id');
  $aws_api_key = Settings::get('ep.aws_api_key');

  // Provide the source urls to the ep_product migration.
  if ($migrations['ep_product']) {
    $connection = \Drupal::database();
    $product_category = $connection->select('ep_map_product_category', 'pc')->fields('pc', ['sourceid1']);
    $product_subcategory = $connection->select('ep_map_product_subcategory', 'psc')->fields('psc',['sourceid1']);
    $product_category->union($product_subcategory);
    $product_categories = $product_category->execute()->fetchCol();
    foreach ($product_categories as $category_uri) {
      $migrations['ep_product']['source']['urls'][] = '!cortex_url/cortex' . $category_uri . '?zoom=items,items:element,items:element:code,items:element:definition,items:element:price';
    }
  }

  // Replace the tokens from migrations.
  foreach ($migrations as $migration_id => $migration) {
    if (($migration['migration_group'] == $migration['provider']) && $migration['migration_group'] == 'ep') {
      // Replace Base url token and store tokens.
      foreach ($migration['source']['urls'] as $id => $source_url) {
        $migration['source']['urls'][$id] = str_replace('!cortex_url', $cortex_url, $migration['source']['urls'][$id]);
        $migration['source']['urls'][$id] = str_replace('!cortex_store', $cortex_store, $migration['source']['urls'][$id]);
      }
      // Replace the authentication tokens.
      $migration['source']['authentication']['base_uri'] = str_replace('!cortex_url', $cortex_url, $migration['source']['authentication']['base_uri']);
      $migration['source']['authentication']['username'] = str_replace('!cortex_username', $cortex_username, $migration['source']['authentication']['username']);
      $migration['source']['authentication']['password'] = str_replace('!cortex_password', $cortex_password, $migration['source']['authentication']['password']);
      $migration['source']['authentication']['scope'] = str_replace('!cortex_store', $cortex_store, $migration['source']['authentication']['scope']);

      // Replace the aws_api_key and aws_api_id tokens.
      $migration['source']['headers']['x-api-key'] = str_replace('!aws_api_key', $aws_api_key, $migration['source']['headers']['x-api-key']);
      $migration['source']['headers']['x-amzn-apigateway-api-id'] = str_replace('!aws_api_id', $aws_api_id, $migration['source']['headers']['x-amzn-apigateway-api-id']);

      $migrations[$migration_id] = $migration;
    }
  }
}
