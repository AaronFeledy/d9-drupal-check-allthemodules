<?php

/**
 * @file
 * Contains sis.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;

/**
 * Implements hook_help().
 */
function sis_help(string $route_name, RouteMatchInterface $route_match): string {
  switch ($route_name) {
    // Main module help for the sis module.
    case 'help.page.sis':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Integrates with 3rd party smart imaging service Thumbor in order to serve layout aware responsive images.') . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sis_form_responsive_image_style_form_alter(array &$form, FormStateInterface $form_state): void {
  /* @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $responsive_image_style */
  $responsive_image_style = $form_object->getEntity();

  $form['third_party_settings']['sis']['enable'] = [
    '#type' => 'checkbox',
    '#title' => new TranslatableMarkup('Enable smart imaging'),
    '#description' => new TranslatableMarkup("When enabled this responsive image style is turned into a Smart Imaging Style. The image's parent element width will be taken into account instead of, or in addition to viewport width."),
    '#return_value' => 1,
    '#default_value' => $responsive_image_style->getThirdPartySetting('sis', 'enable'),
  ];

  $form['keyed_styles']['#weight'] = 10;
  $form['fallback_image_style']['#weight'] = 11;

  foreach (Element::children($form['keyed_styles']) as $breakpoint_id) {
    foreach ($form['keyed_styles'][$breakpoint_id] as $multiplier => $form_element) {
      $element = &$form['keyed_styles'][$breakpoint_id][$multiplier];
      $element['sizes']['#description'] = new TranslatableMarkup('Enter the value for the sizes attribute, for example: (min-width:700px) 700px, 100vw. When smart imaging is enabled this value will be overwritten and dynamically updated on the client side.');
      $element['sizes']['#element_validate'] = ['sis_form_responsive_image_style_sizes_validate'];
      $element['sizes']['#states']['disabled'] = [
        ':input[name="third_party_settings[sis][enable]"]' => ['checked' => TRUE],
      ];
    }
  }
}

/**
 * Validates the sizes setting for responsive image styles.
 *
 * Updates the value when SIS is enabled.
 *
 * @param array $element
 *   An associative array containing the properties and children of the
 *   element. Note that $element must be taken by reference here, so processed
 *   child elements are taken over into $form_state.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function sis_form_responsive_image_style_sizes_validate(array &$element, FormStateInterface $form_state): void {
  if ($form_state->getValue(['third_party_settings', 'sis', 'enable'])) {
    $form_state->setValueForElement($element, '5px');
  }
}

/**
 * Implements hook_preprocess_HOOK() for responsive image templates.
 */
function sis_preprocess_responsive_image(array &$variables): void {
  $responsive_image_style = ResponsiveImageStyle::load($variables['responsive_image_style_id']);
  if (!$responsive_image_style || !$responsive_image_style->getThirdPartySetting('sis', 'enable')) {
    return;
  }

  /* @var \Drupal\Core\Template\Attribute $source */
  foreach ($variables['sources'] as $delta => $source) {
    if (!$source->offsetExists('srcset')) {
      continue;
    }
    \preg_match_all('/ (\d+)w/', $source->offsetGet('srcset')->value(), $matches);

    if (empty($matches)) {
      continue;
    }

    $source->setAttribute('data-sis', \json_encode([
      'maxImageWidth' => max($matches[1]),
    ]));

    // Stretch the low resolution image until the high resolution image
    // is loaded.
    // @todo check if this works with picture element.
    // @todo remove, should be done through css, update readme.
    $source->setAttribute('style', 'width: 100%');
  }

  if ($variables['output_image_tag'] && $source->offsetExists('data-sis')) {
    $variables['img_element']['#attributes']['data-sis'] = $source->offsetGet('data-sis');
    $variables['img_element']['#attributes']['style'] = $source->offsetGet('style');
  }

  $variables['img_element']['#attached'] = BubbleableMetadata::mergeAttachments(
    $variables['img_element']['#attached'] ?? [],
    [
      'library' => [
        'sis/sis',
      ],
    ]
  );
}
