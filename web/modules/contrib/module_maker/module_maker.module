<?php

/**
 * @file
 * Contains \Drupal\module_maker\modulefile.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function module_maker_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    case 'help.page.module_maker':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Module maker module provides UI to build custom module it is easy and fast to create a module with Controller, Form and Block') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Build Custom Module') . '</dt>';
      $output .= '<dd>' . t('Build a simple module with all default files like info.yml,.module,.help.txt,.install and routunf file. you have to give only Module name,Package and Module Description .') . '</dd>';
      $output .= '<dt>' . t('Add Controller in module') . '</dt>';
      $output .= '<dd>' . t('If you want to create a Controller in your module then you have to give only Controller name it automatically create a controller class with a simple function.') . '</dd>';
      $output .= '<dt>' . t('Add Block in module') . '</dt>';
      $output .= '<dd>' . t('If you want to create a Block in your module then you have to give only Block name it automatically create a block.') . '</dd>';
      $output .= '<dt>' . t('Add Form in module') . '</dt>';
      $output .= '<dd>' . t('If you want to create a Form in your module then you have to give only Form name it automatically create a Form with sample fields.') . '</dd>';
      return $output;

  }
}

/**
 * Implements module_maker_build_module().
 */
function module_maker_build_module($values) {
  $buildmodule = \Drupal::service('module_maker.create_files');
  try {
    $name = $values['module_name'];
    $module_name = preg_replace('@[^a-z0-9-]+@', '_', strtolower($name));
    $path = DRUPAL_ROOT . '/modules/custom/' . $module_name;
    if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
      if (!empty($values['module_name'])) {
        $create_default_files = $buildmodule->buildDefaultFiles($values, $path);
        $create_routing_files = $buildmodule->buildRoutingFile($values, $path, $module_name);
      }

      if ($values['default_controller'] == 1) {
        $create_controller = $buildmodule->buildController($values, $path, $module_name);
      }
      if ($values['default_form'] == 1) {
        $create_form = $buildmodule->buildForm($values, $path, $module_name);
      }
      if ($values['default_block'] == 1) {
        $create_block = $buildmodule->buildBlock($values, $path, $module_name);
      }
      chmod($path, 0777);
      if ($values['module_option'] == 2) {
        module_maker_enable_module($module_name, $name);
      }
      if (!empty($values['module_option']) && $values['module_option'] == 1) {
        module_maker_create_zip($module_name);
        drupal_set_message(t('Module "<i> @name </i>" Created successfully', ['@name' => $name]), 'status');
      }
    }drupal_set_message(t('Module "<i> @name </i>" Created successfully', ['@name' => $name]), 'status');
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }

}

/**
 * Implements module_maker_create_zip().
 */
function module_maker_create_zip($module_name) {
  $file_system = \Drupal::service('file_system');
  $tmp_path = 'public://temp';
  if (file_prepare_directory($tmp_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    $zip_file_uri = file_unmanaged_save_data('', 'public://temp/temp.zip', FILE_EXISTS_RENAME);
  }
  if (!$zip_file_uri) {
    drupal_set_message('Can\'t create zip file', 'error');
    return;
  }
  $zip = archiver_get_archiver($file_system->realpath($zip_file_uri))->getArchive();
  $rootPath = DRUPAL_ROOT . '/modules/custom/' . $module_name;
  $files = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($rootPath), \RecursiveIteratorIterator::LEAVES_ONLY
  );
  foreach ($files as $name => $file) {
    // Skip directories (they would be added automatically)
    if (!$file->isDir()) {
      // Get real and relative path for current file.
      $filePath = $file->getRealPath();
      $relativePath = substr($filePath, strlen($rootPath) + 1);
      // Add current file to archive.
      $zip->addFile($filePath, $relativePath);
    }
  }
  $zip->close();

  module_maker_download_module($module_name, $zip_file_uri);
}

/**
 * Implements module_maker_enable_module().
 */
function module_maker_enable_module($module_name, $name) {
  $is_installed = \Drupal::service('module_installer')->install([$module_name]);
  if ($is_installed) {
    drupal_set_message(t('Module "<i>@name</i>" Created & Enabled successfully', ['@name' => $name]), 'status');
  }
}

/**
 * Implements module_maker_enable_module().
 */
function module_maker_download_module($module_name, $zip_file_uri) {
  $zipFileName = $module_name . '.zip';
  header("Content-type: application/zip");
  header("Content-Disposition: attachment; filename = $zipFileName");
  header("Pragma: no-cache");
  header("Expires: 0");
  readfile("$zip_file_uri");
  if (file_exists($zip_file_uri)) {
    unlink($zip_file_uri);
  }
  exit;

}
