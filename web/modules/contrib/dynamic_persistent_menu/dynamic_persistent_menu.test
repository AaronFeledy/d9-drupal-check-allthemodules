<?php
/**
 * @file
 * This file contains tests of the functionality of dynamic_persistent_menu.
 */

/**
 * This class corresponds to a family of tests (called a test case).
 * Complex modules will have several of these. Inside the same
 * test case, all tests will have the same setup.
 */

class dynamic_persistent_menuTestCase extends DrupalWebTestCase {

  /**
   * Info for this test case.
   */
  public static function getInfo() {
    return array(
      'name' => t('dynamic_persistent_menu functionality'),
      'description' => t('Test the functionality of dynamic_persistent_menu'),
      'group' => 'dynamic_persistent_menu',
    );
  }

  /*
   * Common setup for all tests within a test case.
   */
  public function setUp() {
    // set up a new site with default core modules, dynamic_persistent_menu, and
    // dependencies.
    parent::setUp('dynamic_persistent_menu', 'block');
    // create a new user with some permissions you need; then log in.
    $admin = $this->drupalCreateUser(array('administer blocks',
      'access administration pages', 'administer menu', 'administer dynamic persistent menu'));
    $this->drupalLogin($admin);

    // set up a dynamic persistent menu and and display the block
    // management:1 is the "administration" menu item, which has direct and
    // indirect siblings, which is perfect for the test.
    $edit = array(
      'root' => 'management:1',
    );
    $this->drupalPost('admin/config/user-interface/dynamic_persistent_menu/add', $edit, t('Save'));

    // go the block management page and set the region of your block
    // to sidebar_first, making sure it will be visible to Simpletest when
    // it is run.
    $edit = array(
      'blocks[dynamic_persistent_menu_1][region]' => 'content',
    );
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
  }

  /*
   * Test -- recognizable as such because it starts with 'test'. For every
   * test, Simpletest will create a completely new Drupal installation, run
   * the common setUp() function, and go through this code.
   */
  public function testMainTest() {
    // we can now determine if the code appears as expected.
    $this->drupalGet('/');

    // set up a second dpm and make sure it, too, works
    $edit = array(
      'root' => 'user-menu:0',
    );
    $this->drupalPost('admin/config/user-interface/dynamic_persistent_menu/add', $edit, t('Save'));
    $edit = array(
      'blocks[dynamic_persistent_menu_2][region]' => 'content',
    );
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));

    // we can now determine if the code appears as expected.
    $this->drupalGet('/');
    
    // let's modify our first menu and make sure it has been saved.
    
    $this->drupalGet('admin/config/user-interface/dynamic_persistent_menu');
    $this->assertRaw('admin/config/user-interface/dynamic_persistent_menu/1/edit', 'the edit link exists');
    $this->drupalGet('admin/config/user-interface/dynamic_persistent_menu/1/edit');
    $this->assertRaw('value="management:1" selected="selected"', 'We have the same root as when we created this item');
    
    $this->drupalPost(NULL, array('timeout' => '500'), t('Save'));
    
    $this->assertNoRaw('<td>3</td>', t('Editing a dynamic menu has not created a new one.'));
    $this->assertRaw('<td>1</td><td>management:Administration</td><td>500</td><td><a href="', t('Editing a dynamic menu in the dpm (changing timeout to 500) admin page has modified the menu accordingly.'));
    $this->drupalPost('admin/structure/block/manage/dynamic_persistent_menu/1/configure', array('timeout' => '600'), t('Save block'));
    $this->drupalGet('admin/structure/block/manage/dynamic_persistent_menu/1/configure');

    // let's delete a block to see if it works

    $this->drupalGet('admin/config/user-interface/dynamic_persistent_menu');
    $this->assertRaw('admin/config/user-interface/dynamic_persistent_menu/1/delete', 'the delete link exists');
    $this->drupalPost('admin/config/user-interface/dynamic_persistent_menu/1/delete', array(), t('Delete'));
    
    $this->drupalGet('admin/config/user-interface/dynamic_persistent_menu');
    $this->assertNoRaw('admin/config/user-interface/dynamic_persistent_menu/1/delete', 'the delete link no longer exists because we just delete it');
    
    $this->drupalGet('admin/structure/block');
    $this->assertNoRaw('admin/structure/block/manage/dynamic_persistent_menu/1/configure', 'deleting the dynamic persistent menu deletes its block as well');
  }
}
