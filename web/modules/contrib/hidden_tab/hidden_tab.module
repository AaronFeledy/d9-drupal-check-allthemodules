<?php /** @noinspection PhpDocSignatureInspection */

/**
 * @file
 * Hidden_tab module.
 *
 * Provides a hidden tab on entity, where this tab (page) can only be accessed
 *   via a secret Uri, generated by plugins or by this module according to a
 *   secret key.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Element\InlineTemplate;
use Drupal\hidden_tab\Entity\HiddenTabMailerInterface;
use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager;
use Drupal\hidden_tab\Plugable\TplContext\HiddenTabTplContextInterface;
use Drupal\hidden_tab\Plugable\TplContext\HiddenTabTplContextPluginManager;

define('HIDDEN_TAB_TARGET_TYPE', 'node');

/**
 * Implements hook_theme().
 *
 * Plugins provide templates. For each template we register a theme by our
 * own name. The variables passed to template (as a file, provided by plugins)
 * are
 * 1. Variable current_user (which is, well, the current user)
 * 2. Variable regions, an object, containing reg_0, reg_1, ...
 *
 * @return array
 *   Defined themes.
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginException
 *
 * @see \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface
 */
function hidden_tab_theme() {
  /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */

  $t = [];
  foreach (HiddenTabTemplatePluginManager::instance()->plugins() as $plugin) {
    $id = 'hidden_tab_' . $plugin->id();
    $t[$id] = [
      'variables' => $plugin->themeVariables(),
      'template' => $plugin->templateFile(),
      'path' => $plugin->templateFilePath(),
    ];
  }

  $t['hidden_tab_credit'] = [
    'render element' => 'elements',
  ];

  $t['hidden_tab_mailer'] = [
    'render element' => 'elements',
  ];

  return $t;
}

/**
 * Prepares variables for hidden_tab_credit templates.
 *
 * Default template: hidden-tab-admin-credit.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the xxx information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_hidden_tab_credit(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for hidden tab mailer templates.
 *
 * Default template: hidden-tab-internal-mailer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the hidden tab mailer
 *   information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_hidden_tab_mailer(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 */
function hidden_tab_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'hidden_tab_page') {
    return;
  }
  $remover = function (string $associated_type, string $associated_label) use ($entity) {
    try {
      $items_storage = \Drupal::entityTypeManager()
        ->getStorage($associated_type);
      $items = $items_storage->loadByProperties([
        'target_hidden_tab_page' => $entity->id(),
      ]);
      $say = [];
      foreach ($items as $item) {
        $say[] = $item->id();
      }
      $items_storage->delete($items);
      if (count($items)) {
        \Drupal::messenger()->addStatus(t('@label removed: @items', [
          '@label' => $associated_label,
          '@items' => implode(', ', $say),
        ]));
      }
    }
    catch (\Throwable $error) {
      \Drupal\hidden_tab\Utility::error($error, 'error deleting {related_entity_type} / { related_id}', [
        'related_entity' => $entity->getTypedData(),
      ]);
      \Drupal::logger('hidden_tab')
        ->error(t('Error while deleting {label} for page={page} msg={msg} trace={trace}', [
          'relayed_entity_type' => $entity->getTypedData(),
          'relayed_entity' => $entity->id(),
        ]));
      \Drupal::messenger()
        ->addWarning(t('Error removing @label please check the log.', [
          '@label' => $associated_label,
        ]));
    }
  };
  $remover('hidden_tab_credit', 'Hidden Tab Credits');
  $remover('hidden_tab_placement', 'Hidden Tab Placements');
  $remover('hidden_tab_mailer', 'Hidden Tab Mailers');
}

/**
 * Implements hook_mail().
 */
function hidden_tab_mail($key, &$message, $params) {
  /** @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page */
  /** @var \Drupal\hidden_tab\Entity\HiddenTabMailerInterface $mailer */
  /** @var \Drupal\Core\Entity\EntityInterface $entity */

  $mailer = $params['mailer'];
  $email = $params['email'];

  $ctx = $params;
  $ctx = _hidden_tab_mk_context($mailer, $ctx);

  $template_man = HiddenTabTemplatePluginManager::instance();

  if (!$mailer->emailInlineTemplate() &&
    (!$mailer->emailTemplate() || !$template_man->exists($mailer->emailTemplate()))) {
    \Drupal::logger('hidden_tab')
      ->error('email template missing and no inline template provided, using default template template={tpl} page={page} mailer={mailer}', [
        'tpl' => $mailer->emailTemplate(),
        'page' => $mailer->targetPageId(),
        'mailer' => $mailer->id(),
      ]);
    $mail_r = [
      '#type' => 'inline_template',
      '#template' => HiddenTabMailerInterface::EMAIL_BODY_DEFAULT_TEMPLATE,
      '#context' => $ctx,
    ];
  }
  elseif ($mailer->emailInlineTemplate()) {
    $mail_r = [
      '#type' => 'inline_template',
      '#template' => $mailer->emailInlineTemplate(),
      '#context' => $ctx,
    ];
  }
  else {
    $mail_r = [
      '#template' => $mailer->emailTemplate(),
      '#context' => $ctx,
    ];
  }
  $ren = InlineTemplate::preRenderInlineTemplate($mail_r);
  $mail_text = \Drupal::service('renderer')->render($ren);

  if (!$mailer->emailTitleInlineTemplate() &&
    (!$mailer->emailTitleTemplate() || !$template_man->exists($mailer->emailTitleTemplate()))) {
    \Drupal::logger('hidden_tab')
      ->error('email title template missing, using default template template={tpl} page={page} mailer={mailer}', [
        'tpl' => $mailer->emailTitleTemplate(),
        'page' => $mailer->targetPageId(),
        'mailer' => $mailer->id(),
      ]);
    $mail_r = [
      '#type' => 'inline_template',
      '#template' => HiddenTabMailerInterface::EMAIL_TITLE_DEFAULT_TEMPLATE,
      '#context' => $ctx,
    ];
  }
  elseif ($mailer->emailTitleInlineTemplate()) {
    $mail_r = [
      '#type' => 'inline_template',
      '#template' => $mailer->emailTitleInlineTemplate(),
      '#context' => $ctx,
    ];
  }
  else {
    $mail_r = [
      '#template' => $mailer->emailTitleTemplate(),
      '#context' => $ctx,
    ];
  }
  $ren = InlineTemplate::preRenderInlineTemplate($mail_r);
  $mail_title = \Drupal::service('renderer')->render($ren);

  // TODO: Try to extract langcode from user's email.
  $message['id'] = 'hidden_tab';
  $message['langcode'] = 'en';
  $message['from'] = \Drupal::config('system.site')->get('mail');
  $message['to'] = $email;
  $message['subject'] = $mail_title;
  $message['body'][] = $mail_text;
}

function _hidden_tab_mk_context(HiddenTabMailerInterface $mailer, array $params): array {
  $ctx_man = HiddenTabTplContextPluginManager::instance();
  $xid = HiddenTabTplContextInterface::PID;
  $contex_makers = $mailer->pluginConfigurations($xid);
  if (empty($contex_makers) || !isset($contex_makers['_active'][$xid])) {
    return [];
  }

  $ret = [];
  foreach ($contex_makers['_active'][$xid] as $contex_maker) {
    if (!$ctx_man->exists($contex_maker)) {
      \Drupal::messenger()->addWarning(t('Context maker plugin: @p', [
        '@p' => $contex_makers,
      ]));
      continue;
    }
    $ret += $ctx_man->plugin($contex_maker)->provide($params, $params);
  }
  return $ret;
}
