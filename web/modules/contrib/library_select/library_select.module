<?php

/**
 * @file
 * Contains library_select.module.
 */

use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\library_select\Entity\LibrarySelectEntity;

/**
 * Implements hook_help().
 */
function library_select_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the library_select module.
    case 'help.page.library_select':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Drupal library select per node and entity') . '</p>';
      return $output;

    default:
  }
}

/**
 * Load library options.
 *
 * @return array
 */
function library_select_options_callback() {
  $options = [];
  foreach (LibrarySelectEntity::loadMultiple() as $item) {
    /** @var $item LibrarySelectEntity */
    $options[$item->id()] = $item->label();
  }
  return $options;
}

/**
 * Implements hook_library_info_build().
 */
function library_select_library_info_build() {
  $libraries = [];
  foreach (LibrarySelectEntity::loadMultiple() as $item) {
    /** @var \Drupal\library_select\Entity\LibrarySelectEntity $item */
    if ($library_info = $item->libraryInfo()) {
      $libraries[$item->id()] = $library_info;
    }
  }
  return $libraries;
}

/**
 * Implements hook_css_alter().
 */
function library_select_css_alter(array &$css, AttachedAssetsInterface $assets) {
  $new_css = &drupal_static('library_add_css');
  if (!empty($new_css)) {
    $css = array_merge($css, $new_css);
    $new_css = [];
  }

  $libraries = $assets->getLibraries();
  if (empty($libraries)) {
    return;
  }
  foreach (LibrarySelectEntity::loadMultiple() as $lib_id => $item) {
    /** @var \Drupal\library_select\Entity\LibrarySelectEntity $item */
    $library = $item->libraryInfo();
    if (in_array("library_select/$lib_id", $libraries) && !empty($library['css'])) {
      foreach ($library['css'] as $group) {
        foreach (array_keys($group) as $file) {
          if (strpos($file, '//') === FALSE) {
            $css[trim($file, '/ ')]['group'] = 999;
          }
          else {
            $css[$file]['group'] = 999;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function library_select_field_widget_third_party_settings_form(WidgetInterface $widget, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $form = [];
  if (in_array($widget->getPluginId(), ['file_generic'])) {
    $form['enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow attach css, js from this field.'),
      '#default_value' => $widget->getThirdPartySetting('library_select', 'enabled'),
    ];
  }
  return $form;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function library_select_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget']->getThirdPartySetting('library_select', 'enabled')) {
    if (empty($element['#file_value_callbacks'])) {
      $info = \Drupal::service('element_info')->getInfo($element['#type']);
      if (!empty($info['#file_value_callbacks'])) {
        $element['#file_value_callbacks'] = $info['#file_value_callbacks'];
      }
    }
    $element['#file_value_callbacks'][] = 'library_select_file_value_callback';
  }
}

/**
 * @param $element
 *   The form element.
 * @param $input
 *   The input.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state.
 */
function library_select_file_value_callback($element, &$input, FormStateInterface $form_state) {
  $libraryCollector = \Drupal::service('library.discovery.collector');
  $libraryCollector->clear();
}

/**
 * Library add custom css file.
 *
 * @param $file
 *   The css file.
 * @param array $settings
 *   The settings.
 */
function library_select_add_css($file, $settings = []) {
  $file = ltrim($file, '/');
  $new_css = &drupal_static('library_add_css');
  if (empty($new_css)) {
    $new_css = [];
  }

  $new_css[$file] = [
    'weight' => 999,
    'group' => 999,
    'type' => 'file',
    'data' => $file,
    'version' => -1,
    'media' => 'all',
    'preprocess' => FALSE,
    'browsers' => [],
  ];
}

function library_select_add_js($file, $settings = array()) {
  $file = ltrim($file, '/');
  $new_js = &drupal_static('library_add_js');
  if (empty($new_js)) {
    $new_js = array();
  }

  $default_settings = library_select_get_default_settings();
  $new_js[$file] = array_merge($default_settings, $settings);

  //'data' is only really used for drupalSettings.
  if (empty($new_js[$file]['data'])) {
    $new_js[$file]['data'] = $file;
  }
}

/**
 * Provides default settings for drupal_add_js().
 *
 * @return array
 */
function library_select_get_default_settings() {
  return array(
    "group" => -100,
    "type" => "file",
    "version" => -1,
    "minified" => FALSE,
    "weight" => 0.0001,
    "cache" => TRUE,
    "preprocess" => FALSE,
    "attributes" => [],
    "browsers" => [],
    "scope" => "footer",
  );
}

/**
 * Implements hook_js_alter().
 */
function library_select_js_alter(&$javascript, AttachedAssetsInterface &$assets) {
  $new_js = &drupal_static('library_add_js');

  if (!empty($new_js)) {
    $javascript = array_merge($javascript, $new_js);
    $new_js = [];
  }
}
