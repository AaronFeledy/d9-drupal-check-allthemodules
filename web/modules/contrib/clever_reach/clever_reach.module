<?php

/**
 * @file
 * CleverReach module.
 */

use CleverReach\Infrastructure\Interfaces\Required\Configuration;
use CleverReach\Infrastructure\Logger\Logger;
use CleverReach\Infrastructure\ServiceRegister;
use Drupal\clever_reach\Component\Infrastructure\ConfigService;
use Drupal\clever_reach\Component\Utility\EventHandler;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\UserInterface;

require_once drupal_get_path('module', 'clever_reach') . '/lib/CoreAutoloader.php';

$autoloader = new CoreAutoloader();
$autoloader->load();

/**
 * Implements hook_help().
 */
function clever_reach_help($path) {
  if ($path === 'help.page.clever_reach') {
    $help = '<h3>' . t('Need help?') . '</h3>';
    $help .= '<a href="' . ConfigService::CLEVERREACH_HELP_URL . '" target="_blank">' . t('Help & Support') . '</a>';
    return $help;
  }

  return '';
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function clever_reach_user_insert(EntityInterface $entity) {
  try {
    EventHandler::userCreated($entity);
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function clever_reach_user_update(EntityInterface $entity) {
  try {
    EventHandler::userUpdated($entity);
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function clever_reach_user_delete(EntityInterface $entity) {
  try {
    EventHandler::userDeleted($entity);
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function clever_reach_taxonomy_term_insert(EntityInterface $term) {
  try {
    EventHandler::termCreated($term);
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function clever_reach_taxonomy_term_update(EntityInterface $term) {
  try {
    if ($term->getName() === $term->original->getName()) {
      return;
    }

    EventHandler::termUpdate($term, $term->original->getName());
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function clever_reach_taxonomy_term_delete(EntityInterface $term) {
  try {
    EventHandler::termUpdate($term, $term->getName());
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_user_cancel().
 */
function clever_reach_user_cancel($edit, $account, $method) {
  try {
    EventHandler::userDeleted($account);
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function clever_reach_user_role_insert(EntityInterface $entity) {
  try {
    EventHandler::roleCreated($entity);
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function clever_reach_user_role_update(EntityInterface $entity) {
  try {
    if ($entity->label() === $entity->original->label()) {
      return;
    }

    EventHandler::roleUpdate($entity, $entity->original->label());
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function clever_reach_user_role_delete(EntityInterface $entity) {
  try {
    EventHandler::roleUpdate($entity, $entity->label());
  }
  catch (\Exception $e) {
    Logger::logError($e->getMessage());
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function clever_reach_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add a checkbox to registration form for terms.
  $form['field_cleverreach_subscribed'] = [
    '#type' => 'checkbox',
    '#title' => t('Subscribe to newsletter.'),
    '#required' => FALSE,
  ];

  $form['actions']['submit']['#submit'][] = 'clever_reach_form_user_register_form_submit';
}

/**
 * Implements hook_form_FORM_ID_submit().
 */
function clever_reach_form_user_register_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getFormObject()->getEntity();

  if ($account->id() && $form_state->hasValue(ConfigService::SUBSCRIPTION_FIELD)) {
    clever_reach_set_subscription_value($account, $form_state->getValue(ConfigService::SUBSCRIPTION_FIELD));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function clever_reach_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getFormObject()->getEntity();
  $account_data = FALSE;

  if (!Drupal::currentUser()->isAnonymous() && $account->id()) {
    $account_data = clever_reach_get_subscription_value($account);
  }

  // Add a checkbox to registration form for terms.
  $form['field_cleverreach_subscribed'] = [
    '#type' => 'checkbox',
    '#title' => t('Subscribe to newsletter'),
    '#default_value' => $account_data,
    '#required' => FALSE,
  ];

  $form['actions']['submit']['#submit'][] = 'clever_reach_form_user_form_submit';
}

/**
 * Implements hook_form_FORM_ID_submit().
 */
function clever_reach_form_user_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\user\UserInterface $account */
  $account = $form_state->getFormObject()->getEntity();

  if ($account->id() && $form_state->hasValue(ConfigService::SUBSCRIPTION_FIELD)) {
    clever_reach_set_subscription_value($account, $form_state->getValue(ConfigService::SUBSCRIPTION_FIELD));
  }
}

/**
 * Gets CleverReach subscription field value.
 *
 * @param \Drupal\user\UserInterface $account
 *   User account object.
 *
 * @return bool
 *   If user is subscribed, returns true, otherwise false
 */
function clever_reach_get_subscription_value(UserInterface $account) {
  $value = Drupal::service('user.data')->get(
        ConfigService::MODULE_NAME,
        $account->id(),
        ConfigService::SUBSCRIPTION_FIELD
    );

  if ($value === NULL) {
    /** @var \Drupal\clever_reach\Component\Infrastructure\ConfigService $configService */
    $configService = ServiceRegister::getService(Configuration::CLASS_NAME);
    return $configService->getDefaultRecipientStatus();
  }

  return (bool) $value;
}

/**
 * Sets CleverReach subscription field value.
 *
 * @param \Drupal\user\UserInterface $account
 *   User account that needs to be updated.
 * @param bool $value
 *   Subscription status.
 */
function clever_reach_set_subscription_value(UserInterface $account, $value) {
  Drupal::service('user.data')->set(
        ConfigService::MODULE_NAME,
        $account->id(),
        ConfigService::SUBSCRIPTION_FIELD,
        (bool) $value
    );
}

/**
 * Implements hook_entity_extra_field_info().
 *
 * Registers component "cleverreach_subscribed", needed for display of
 * subscription status.
 */
function clever_reach_entity_extra_field_info() {
  $fields['user']['user']['display']['field_cleverreach_subscribed'] = [
    'label' => t('CleverReach Subscription'),
    'description' => t("User module 'CleverReach Subscription' view element."),
    'weight' => 10,
  ];

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view() for user entities.
 */
function clever_reach_user_view(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  if ($display->getComponent('field_cleverreach_subscribed') && $display->getComponent('member_for')) {
    $translatableString = t('Subscribed to newsletter');
    $build['field_cleverreach_subscribed'] = [
      '#type' => 'item',
      '#markup' => '<h4 class="label">' . $translatableString . ':</h4> ' .
      (clever_reach_get_subscription_value($account) === TRUE ? t('Yes') : t('No')),
    ];
  }
}

/**
 * Gets list of taxonomy fields defined on user entity.
 */
function clever_reach_get_taxonomy_user_fields() {
  $result = [];
  $fields = Drupal::service('entity_field.manager')
    ->getFieldDefinitions('user', 'user');

  /** @var \Drupal\Core\Field\BaseFieldDefinition $field */
  foreach ($fields as $fieldName => $field) {
    $type = $field->getType();
    $reference = (string) $field->getFieldStorageDefinition()
      ->getSetting('target_type');

    if ($type !== 'entity_reference' || $reference !== 'taxonomy_term') {
      continue;
    }

    $result[$fieldName] = $field;
  }

  return $result;
}

/**
 * Gets list of taxonomy names defined on user entity.
 */
function clever_reach_get_taxonomy_user_values() {
  $result = [];

  foreach (clever_reach_get_taxonomy_vocabularies() as $value) {
    try {
      $terms = Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties(['vid' => $value]);

      /** @var \Drupal\taxonomy\Entity\Term $term */
      foreach ($terms as $term) {
        $result[] = $term->getName();
      }
    }
    catch (Exception $e) {
      Logger::logError("Unable to fetch taxonomy terms: {$value}");
    }
  }

  return array_unique($result);
}

/**
 * Gets list of vocabularies defined for user entity.
 *
 * @return array
 *   List of vocabularies.
 */
function clever_reach_get_taxonomy_vocabularies() {
  $vocabularies = [];

  foreach (clever_reach_get_taxonomy_user_fields() as $fieldName => $field) {
    foreach ($field->getSetting('handler_settings')['target_bundles'] as $value) {
      $vocabularies[] = $value;
    }
  }

  return array_unique($vocabularies);
}

/**
 * Implements hook_theme().
 */
function clever_reach_theme($existing, $type, $theme, $path) {
  return [
    'cleverreach_welcome' => [
      'variables' => [
        'logo' => NULL,
        'urls' => [
          'auth_url' => NULL,
          'check_status_url' => NULL,
          'wakeup_url' => NULL,
        ],
      ],
    ],
    'cleverreach_initial_sync_config' => [
      'variables' => [
        'logo' => NULL,
        'recipient_id' => NULL,
        'urls' => [
          'help_url' => NULL,
        ],
      ],
    ],
    'cleverreach_initial_sync' => [
      'variables' => [
        'progress_items' => [
          'subscriber_list' => NULL,
          'add_fields' => NULL,
          'recipient_sync' => NULL,
        ],
        'urls' => [
          'check_status_url' => NULL,
        ],
      ],
    ],
    'cleverreach_token_expired' => [
      'variables' => [
        'logo' => NULL,
        'urls' => [
          'auth_url' => NULL,
          'check_status_url' => NULL,
          'wakeup_url' => NULL,
        ],
        'translations' => [
          'error_title' => NULL,
          'error_message' => NULL,
          'authenticate' => NULL,
        ],
      ],
    ],
    'cleverreach_dashboard' => [
      'variables' => [
        'recipient_id' => NULL,
        'integration_name' => NULL,
        'is_built_first_email' => NULL,
        'is_initial_sync_failed' => NULL,
        'initial_sync_failed_message' => NULL,
        'urls' => [
          'help_url' => NULL,
          'built_first_email_url' => NULL,
          'retry_sync_url' => NULL,
        ],
        'report' => [],
      ],
    ],
    'cleverreach_callback' => [
      'variables' => [],
    ],
  ];
}
